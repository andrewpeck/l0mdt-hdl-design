
////////////////////////////////////////////////////////////////////////////////////////////////////
// autogenerated file
// created by tb create on: 02-Nov-2023 (10:30:05)
// created by tb create for test: polmux_tar
// Author:Priya Sundararajan
// Email:priya.sundararajan@cern.ch
////////////////////////////////////////////////////////////////////////////////////////////////////

`timescale 1ns / 1ps
`default_nettype wire

   import l0mdt_dataformats_svh::*;
module TopLevel_polmux_tar #(
    parameter DATA_WIDTH = 256, //65,
    parameter FIFO_DEPTH = 6,
    parameter N_OUTPUTS = 48,
    parameter N_INPUTS = 480

) (
    input wire 			 clock,
    input wire                   clock_sb_in,
    input wire 			 reset_n,
    input wire [DATA_WIDTH-1:0]  input_data [480],
    output wire [DATA_WIDTH-1:0] output_data [48]
);

    //
    // Here define the signals to connect the input and output Spy+FIFO
    // blocks with the input and output of the DUT.
    // Here we define one for each of the FIFO signals, but the test
    // creator should remove unnecessary signals.
    //

    wire BLOCK_input_write_enable [480];
    wire [DATA_WIDTH-1:0] BLOCK_input_data [480];
    wire BLOCK_input_read_enable [480];
    wire BLOCK_input_almost_full [480];
    wire BLOCK_input_empty [480];

    wire BLOCK_output_write_enable [48];
    wire [DATA_WIDTH-1:0] BLOCK_output_data [48];
    wire BLOCK_output_read_enable [48];
    wire BLOCK_output_almost_full [48];
    wire BLOCK_output_empty [48];

    //
    // Input buffers
    //
    generate
       for(genvar i = 0; i < 480; i++)
         begin:input_spybuffers
            SpyBuffer #(
			.DATA_WIDTH_A(DATA_WIDTH),
			.DATA_WIDTH_B(DATA_WIDTH),
			.FC_FIFO_WIDTH(FIFO_DEPTH),
			.PASSTHROUGH(1)
			) spybuffer (
				     .rclock(clock),
				     .wclock(clock),
				     .rresetbar(reset_n),
				     .wresetbar(reset_n),
				     .write_data(input_data[i]),
				     .write_enable(BLOCK_input_write_enable[i]),
				     .read_data(BLOCK_input_data[i]),
				     .read_enable(BLOCK_input_read_enable[i]),
				     .almost_full(BLOCK_input_almost_full[i]),
				     .empty(BLOCK_input_empty[i]),
				     .freeze(1'b0),
				     .playback(2'b0)
				     );
         end
    endgenerate // end input_spybuffers generate

   //
   // Inner wires
   //
   parameter c_HPS_MAX_HP = 6;
   logic [TDCPOLMUX2TAR_LEN-1:0] i_tdc_hits_to_polmux_avt[360];
   logic [TDCPOLMUX2TAR_LEN-1:0] polmux_inn_tdc_hits[6];
   logic [TDCPOLMUX2TAR_LEN-1:0] polmux_mid_tdc_hits[6];
   logic [TDCPOLMUX2TAR_LEN-1:0] polmux_out_tdc_hits[6];
   logic [TDCPOLMUX2TAR_LEN-1:0] polmux_ext_tdc_hits[6];

   logic [TDCPOLMUX2TAR_LEN-1:0] o_daq_inn_tdc_hits[6];
   logic [TDCPOLMUX2TAR_LEN-1:0] o_daq_mid_tdc_hits[6];
   logic [TDCPOLMUX2TAR_LEN-1:0] o_daq_out_tdc_hits[6];
   logic [TDCPOLMUX2TAR_LEN-1:0] o_daq_ext_tdc_hits[6];

   logic [TAR2HPS_LEN-1:0] 	 o_hps_inn_tar_hits[6];
   logic [TAR2HPS_LEN-1:0] 	 o_hps_mid_tar_hits[6];
   logic [TAR2HPS_LEN-1:0] 	 o_hps_out_tar_hits[6];
   logic [TAR2HPS_LEN-1:0] 	 o_hps_ext_tar_hits[6];

   //
   // Connecting input-outpot of TopLevel to inner wires
   //
   for(genvar i=0; i<360;i=i+1)
     begin
	assign i_tdc_hits_to_polmux_avt[360-1-i][TDCPOLMUX2TAR_LEN-1:0] = BLOCK_input_data[i][TDCPOLMUX2TAR_LEN-1:0];
     end	

   for(genvar i=0; i<c_HPS_MAX_HP;i=i+1)
     begin
	assign BLOCK_output_data[i][TDCPOLMUX2TAR_LEN-1:0]                      = o_daq_inn_tdc_hits[i];
	assign BLOCK_output_data[i][255:TDCPOLMUX2TAR_LEN]                      = 0;
	assign BLOCK_output_write_enable[i]                                     = o_daq_inn_tdc_hits[i][TDCPOLMUX2TAR_DATA_VALID_MSB];

	assign BLOCK_output_data[i + c_HPS_MAX_HP][TDCPOLMUX2TAR_LEN-1:0]       = o_daq_mid_tdc_hits[i];
	assign BLOCK_output_data[i + c_HPS_MAX_HP][255:TDCPOLMUX2TAR_LEN]       = 0;
	assign BLOCK_output_write_enable[i + c_HPS_MAX_HP]                      = o_daq_mid_tdc_hits[i][TDCPOLMUX2TAR_DATA_VALID_MSB];

	assign BLOCK_output_data[i + 2*c_HPS_MAX_HP][TDCPOLMUX2TAR_LEN-1:0]     = o_daq_out_tdc_hits[i];
	assign BLOCK_output_data[i + 2*c_HPS_MAX_HP][255:TDCPOLMUX2TAR_LEN]     = 0;
	assign BLOCK_output_write_enable[i + 2*c_HPS_MAX_HP]                    = o_daq_out_tdc_hits[i][TDCPOLMUX2TAR_DATA_VALID_MSB];

	assign BLOCK_output_data[i + 3*c_HPS_MAX_HP][TDCPOLMUX2TAR_LEN-1:0]     = o_daq_ext_tdc_hits[i];
	assign BLOCK_output_data[i + 3*c_HPS_MAX_HP][255:TDCPOLMUX2TAR_LEN]     = 0;
	assign BLOCK_output_write_enable[i + 3*c_HPS_MAX_HP]                    = o_daq_ext_tdc_hits[i][TDCPOLMUX2TAR_DATA_VALID_MSB];

	
	assign BLOCK_output_data[i + 4*c_HPS_MAX_HP][TAR2HPS_LEN-1:0]           = o_hps_inn_tar_hits[i];	  
	assign BLOCK_output_data[i + 4*c_HPS_MAX_HP][255:TAR2HPS_LEN]           = 0;
	assign BLOCK_output_write_enable[i + 4*c_HPS_MAX_HP]                    = o_hps_inn_tar_hits[i][TAR2HPS_DATA_VALID_MSB];


	assign BLOCK_output_data[i + 5*c_HPS_MAX_HP][TAR2HPS_LEN-1:0]           = o_hps_mid_tar_hits[i];	  
	assign BLOCK_output_data[i + 5*c_HPS_MAX_HP][255:TAR2HPS_LEN]           = 0;
	assign BLOCK_output_write_enable[i + 5*c_HPS_MAX_HP]                    = o_hps_mid_tar_hits[i][TAR2HPS_DATA_VALID_MSB];

	assign BLOCK_output_data[i + 6*c_HPS_MAX_HP][TAR2HPS_LEN-1:0]           = o_hps_out_tar_hits[i];	  
	assign BLOCK_output_data[i + 6*c_HPS_MAX_HP][255:TAR2HPS_LEN]           = 0;
	assign BLOCK_output_write_enable[i + 6*c_HPS_MAX_HP]                    = o_hps_out_tar_hits[i][TAR2HPS_DATA_VALID_MSB];

	assign BLOCK_output_data[i + 7*c_HPS_MAX_HP][TAR2HPS_LEN-1:0]           = o_hps_ext_tar_hits[i];	  
	assign BLOCK_output_data[i + 7*c_HPS_MAX_HP][255:TAR2HPS_LEN]           = 0;
	assign BLOCK_output_write_enable[i + 7*c_HPS_MAX_HP]                    = o_hps_ext_tar_hits[i][TAR2HPS_DATA_VALID_MSB];
	
     end

   //
   // Instantiate the actual DUT block
   //
   tb_polmux polmux_inst(
 			 .clock(clock), // : in  l0mdt_control_rt;
			 .clock_pipeline(clock_sb_in),
 			 .reset(~reset_n),
 			 .i_tdc_hits_to_polmux_avt(i_tdc_hits_to_polmux_avt),
			 .o_inn_tdc_hits_av(polmux_inn_tdc_hits),
			 .o_mid_tdc_hits_av(polmux_mid_tdc_hits),
			 .o_out_tdc_hits_av(polmux_out_tdc_hits),
			 .o_ext_tdc_hits_av(polmux_ext_tdc_hits) 
 			 );

   tb_mdt_tar mdt_tar_inst(
			   .clock(clock), 
			   .reset(~reset_n),
			   .i_inn_tdc_hits_av(polmux_inn_tdc_hits), 
			   .i_mid_tdc_hits_av(polmux_mid_tdc_hits), 
			   .i_out_tdc_hits_av(polmux_out_tdc_hits), 
			   .i_ext_tdc_hits_av(polmux_ext_tdc_hits), 
			   .o_inn_tdc_hits_av(o_daq_inn_tdc_hits), 
			   .o_mid_tdc_hits_av(o_daq_mid_tdc_hits), 
			   .o_out_tdc_hits_av(o_daq_out_tdc_hits), 
			   .o_ext_tdc_hits_av(o_daq_ext_tdc_hits), 
			   .o_inn_tar_hits_av(o_hps_inn_tar_hits), 
			   .o_mid_tar_hits_av(o_hps_mid_tar_hits), 
			   .o_out_tar_hits_av(o_hps_out_tar_hits), 
			   .o_ext_tar_hits_av(o_hps_ext_tar_hits), 
			   .o_sump()
			   );



   
    //
    // Output buffers
    //
   generate
      for(genvar i = 0; i < 48; i++)
        begin:output_spybuffers
           SpyBuffer #(
		       .DATA_WIDTH_A(DATA_WIDTH),
		       .DATA_WIDTH_B(DATA_WIDTH),
		       .FC_FIFO_WIDTH(FIFO_DEPTH),
		       .PASSTHROUGH(1)
                       ) spybuffer (
				    .rclock(clock),
				    .wclock(clock),
				    .rresetbar(reset_n),
				    .wresetbar(reset_n),
				    .write_data(BLOCK_output_data[i]),
				    .write_enable(BLOCK_output_write_enable[i]),
				    .read_data(output_data[i]),
				    .read_enable(BLOCK_output_read_enable[i]),
				    .almost_full(BLOCK_output_almost_full[i]),
				    .empty(BLOCK_output_empty[i]),
				    .freeze(1'b0),
				    .playback(2'b0)
				    );
        end
   endgenerate // end output_spybuffers generate

endmodule // end TopLevel module definition
