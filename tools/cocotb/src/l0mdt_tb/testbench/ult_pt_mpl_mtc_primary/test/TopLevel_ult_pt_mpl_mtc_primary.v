
////////////////////////////////////////////////////////////////////////////////////////////////////
// autogenerated file
// created by tb create on: 06-Jul-2022 (07:36:54)
// created by tb create for test: ult_pt_mpl_mtc_primary
// Author:Priya Sundararajan
// Email:priya.sundararajan@cern.ch
////////////////////////////////////////////////////////////////////////////////////////////////////

`timescale 1ns / 1ps
`default_nettype wire

   import l0mdt_dataformats_svh::*;
module TopLevel_ult_pt_mpl_mtc_primary #(
    parameter DATA_WIDTH = 256, //65,
    parameter FIFO_DEPTH = 6,
    parameter N_OUTPUTS = 3,
    parameter N_INPUTS = 12

) (
    input wire clock,
    input wire reset_n,
    input wire [DATA_WIDTH-1:0] input_data [12],
    output wire [DATA_WIDTH-1:0] output_data [3]
);

    //
    // Here define the signals to connect the input and output Spy+FIFO
    // blocks with the input and output of the DUT.
    // Here we define one for each of the FIFO signals, but the test
    // creator should remove unnecessary signals.
    //

    wire BLOCK_input_write_enable [12];
    wire [DATA_WIDTH-1:0] BLOCK_input_data [12];
    wire BLOCK_input_read_enable [12];
    wire BLOCK_input_almost_full [12];
    wire BLOCK_input_empty [12];

    wire BLOCK_output_write_enable [3];
    wire [DATA_WIDTH-1:0] BLOCK_output_data [3];
    wire BLOCK_output_read_enable [3];
    wire BLOCK_output_almost_full [3];
    wire BLOCK_output_empty [3];

    //
    // Input buffers
    //
    generate
       for(genvar i = 0; i < 12; i++)
         begin:input_spybuffers
            SpyBuffer #(
			.DATA_WIDTH_A(DATA_WIDTH),
			.DATA_WIDTH_B(DATA_WIDTH),
			.FC_FIFO_WIDTH(FIFO_DEPTH),
			.PASSTHROUGH(1)
			) spybuffer (
				     .rclock(clock),
				     .wclock(clock),
				     .rresetbar(reset_n),
				     .wresetbar(reset_n),
				     .write_data(input_data[i]),
				     .write_enable(BLOCK_input_write_enable[i]),
				     .read_data(BLOCK_input_data[i]),
				     .read_enable(BLOCK_input_read_enable[i]),
				     .almost_full(BLOCK_input_almost_full[i]),
				     .empty(BLOCK_input_empty[i]),
				     .freeze(1'b0),
				     .playback(2'b0)
				     );
         end
    endgenerate // end input_spybuffers generate

    //
    // Here place the DUT block(s)
    //
   localparam c_NUM_THREADS  = 3;
   localparam c_MAX_NUM_SL     = 3;
   localparam c_NUM_MTC           = 3;
   
   logic [UCM2PL_LEN-1:0]      ucm2pl_av[c_MAX_NUM_SL];
   logic [SF2PTCALC_LEN-1:0] inn_segments_av[c_NUM_THREADS];
   logic [SF2PTCALC_LEN-1:0] mid_segments_av[c_NUM_THREADS];
   logic [SF2PTCALC_LEN-1:0] out_segments_av[c_NUM_THREADS];
   logic [SF2PTCALC_LEN-1:0] dummy_in[c_NUM_THREADS];   
   logic [255:0] 	     dummy_out_mtc[c_NUM_THREADS];
   logic [255:0] 	     dummy_out_tf[c_NUM_THREADS];
   logic [255:0] 	     dummy_out_mpl[c_NUM_THREADS];
   
			     
   logic [MTC2SL_LEN-1:0]    o_MTC[c_NUM_MTC];

   

   for (genvar i=0; i<3; i++)
     begin
	assign ucm2pl_av[i]             = BLOCK_input_data[9 + i][UCM2PL_LEN-1:0];	
	assign inn_segments_av[i]  = BLOCK_input_data[i][UCM2PL_LEN-1:0];
	assign mid_segments_av[i] = BLOCK_input_data[3+i][UCM2PL_LEN-1:0];
	assign out_segments_av[i]  = BLOCK_input_data[6+i][UCM2PL_LEN-1:0];
	assign dummy_in[i]   = 0;
     end
   
   tb_ult_pt_mpl_mtc_primary tb_ult_pt_mpl_mtc_primary_inst(
							   .clock_and_control(),
							   .ttc_commands(),
							  // .mtc_ctrl_v(0),
							   //.mtc_mon_v(dummy_out_mtc),
							   //.tf_ctrl_v(0),
							  // .tf_mon_v(dummy_out_tf),
							  // .mpl_ctrl_v(0),
							   //.mpl_mon_v(dummy_out_mpl),
							   .ucm2pl_av(ucm2pl_av),
							   .inn_segments_av(inn_segments_av),
							   .mid_segments_av(mid_segments_av),
							   .out_segments_av(out_segments_av),
							   .ext_segments_av(dummy_in),
							   .i_plus_neighbor_segments (),
							   .i_minus_neighbor_segments(),
							   .o_MTC(o_MTC),
							   .o_NSP()
							   );

      for (genvar i=0; i<3; i++)
	begin
	   assign BLOCK_output_data[i][MTC2SL_LEN-1:0] = o_MTC[i];
	   assign BLOCK_output_write_enable[i]                  = o_MTC[i][MTC2SL_DATA_VALID_MSB];
	   assign BLOCK_output_data[i][255:MTC2SL_LEN] = 0;
	   
	end

   
    //
    // Output buffers
    //
   generate
      for(genvar i = 0; i < 3; i++)
        begin:output_spybuffers
           SpyBuffer #(
		       .DATA_WIDTH_A(DATA_WIDTH),
		       .DATA_WIDTH_B(DATA_WIDTH),
		       .FC_FIFO_WIDTH(FIFO_DEPTH),
		       .PASSTHROUGH(1)
                       ) spybuffer (
				    .rclock(clock),
				    .wclock(clock),
				    .rresetbar(reset_n),
				    .wresetbar(reset_n),
				    .write_data(BLOCK_output_data[i]),
				    .write_enable(BLOCK_output_write_enable[i]),
				    .read_data(output_data[i]),
				    .read_enable(BLOCK_output_read_enable[i]),
				    .almost_full(BLOCK_output_almost_full[i]),
				    .empty(BLOCK_output_empty[i]),
				    .freeze(1'b0),
				    .playback(2'b0)
				    );
        end
   endgenerate // end output_spybuffers generate

endmodule // end TopLevel module definition
