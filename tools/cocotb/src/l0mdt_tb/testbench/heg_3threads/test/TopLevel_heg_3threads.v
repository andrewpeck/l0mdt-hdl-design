
////////////////////////////////////////////////////////////////////////////////////////////////////
// autogenerated file
// created by tb create on: 23-Oct-2023 (04:40:23)
// created by tb create for test: heg_3threads
// Author:Priya Sundararajan
// Email:priya.sundararajan@cern.ch
////////////////////////////////////////////////////////////////////////////////////////////////////

`timescale 1ns / 1ps
`default_nettype wire

   import l0mdt_dataformats_svh::*;
module TopLevel_heg_3threads #(
    parameter DATA_WIDTH = 256, //65,
    parameter FIFO_DEPTH = 6,
    parameter N_OUTPUTS = 6,
    parameter N_INPUTS = 9

) (
    input wire clock,
    input wire reset_n,
    input wire [DATA_WIDTH-1:0] input_data [9],
    output wire [DATA_WIDTH-1:0] output_data [6]
);

    //
    // Here define the signals to connect the input and output Spy+FIFO
    // blocks with the input and output of the DUT.
    // Here we define one for each of the FIFO signals, but the test
    // creator should remove unnecessary signals.
    //

    wire BLOCK_input_write_enable [9];
    wire [DATA_WIDTH-1:0] BLOCK_input_data [9];
    wire BLOCK_input_read_enable [9];
    wire BLOCK_input_almost_full [9];
    wire BLOCK_input_empty [9];

    wire BLOCK_output_write_enable [6];
    wire [DATA_WIDTH-1:0] BLOCK_output_data [6];
    wire BLOCK_output_read_enable [6];
    wire BLOCK_output_almost_full [6];
    wire BLOCK_output_empty [6];


   localparam POLMUX_N    = 6;
   localparam NUM_THREADS = 3;

   wire [TAR2HPS_LEN-1 : 0] tar2hps[POLMUX_N];
   wire [UCM2HPS_LEN-1 : 0] ucm2hps[NUM_THREADS];
   wire [HEG2SFSLC_LEN-1 : 0] heg2sfslc[NUM_THREADS];
   wire [HEG2SFHIT_LEN-1 : 0] heg2sfhit[NUM_THREADS];

   
    //
    // Input buffers
    //
    generate
       for(genvar i = 0; i < 9; i++)
         begin:input_spybuffers
            SpyBuffer #(
			.DATA_WIDTH_A(DATA_WIDTH),
			.DATA_WIDTH_B(DATA_WIDTH),
			.FC_FIFO_WIDTH(FIFO_DEPTH),
			.PASSTHROUGH(1)
			) spybuffer (
				     .rclock(clock),
				     .wclock(clock),
				     .rresetbar(reset_n),
				     .wresetbar(reset_n),
				     .write_data(input_data[i]),
				     .write_enable(BLOCK_input_write_enable[i]),
				     .read_data(BLOCK_input_data[i]),
				     .read_enable(BLOCK_input_read_enable[i]),
				     .almost_full(BLOCK_input_almost_full[i]),
				     .empty(BLOCK_input_empty[i]),
				     .freeze(1'b0),
				     .playback(2'b0)
				     );
         end
    endgenerate // end input_spybuffers generate

    //
    // Here place the DUT block(s)
    //


   for(genvar i = 0; i < NUM_THREADS; i++)
     begin
	assign ucm2hps[i]           = BLOCK_input_data[i];

	assign BLOCK_output_data[i] = heg2sfslc[i]; //Output port 0 is HEG2SFSLC
	assign BLOCK_output_data[i+3] = heg2sfhit[i]; //Output port 0 is HEG2SFHIT
     end

   for(genvar i = 0; i < POLMUX_N; i++)
     begin
	assign tar2hps[i] = BLOCK_input_data[i+3];
     end



   
   

   heg_top_tb heg_top_tb_inst(
			      .clk(clock),
			      .rst(~reset_n),
			      .glob_en(1'b1),
			      .i_ucm2hps_av(ucm2hps),
			      .i_mdt_tar_av(tar2hps),
			      .o_heg2sfslc_av(heg2sfslc),
			      .o_heg2sfhit_av(heg2sfhit)
			      );

   

    //
    // Output buffers
    //
   generate
      for(genvar i = 0; i < 6; i++)
        begin:output_spybuffers
           SpyBuffer #(
		       .DATA_WIDTH_A(DATA_WIDTH),
		       .DATA_WIDTH_B(DATA_WIDTH),
		       .FC_FIFO_WIDTH(FIFO_DEPTH),
		       .PASSTHROUGH(1)
                       ) spybuffer (
				    .rclock(clock),
				    .wclock(clock),
				    .rresetbar(reset_n),
				    .wresetbar(reset_n),
				    .write_data(BLOCK_output_data[i]),
				    .write_enable(BLOCK_output_write_enable[i]),
				    .read_data(output_data[i]),
				    .read_enable(BLOCK_output_read_enable[i]),
				    .almost_full(BLOCK_output_almost_full[i]),
				    .empty(BLOCK_output_empty[i]),
				    .freeze(1'b0),
				    .playback(2'b0)
				    );
        end
   endgenerate // end output_spybuffers generate

endmodule // end TopLevel module definition
