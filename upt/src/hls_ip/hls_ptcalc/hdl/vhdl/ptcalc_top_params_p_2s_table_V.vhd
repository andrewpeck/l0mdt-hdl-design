-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity ptcalc_top_params_p_2s_table_V_rom is 
    generic(
             DWIDTH     : integer := 21; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 258
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of ptcalc_top_params_p_2s_table_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "111111111000011001010", 1 => "000000000100101010101", 
    2 => "000100000011001101011", 3 => "111111110100111011100", 
    4 => "000001101100101001001", 5 => "111010010101101011101", 
    6 => "000000000000010101100", 7 => "000000000001111010111", 
    8 => "000100000000100001000", 9 => "111111101111111011101", 
    10 => "100111101101010110010", 11 => "000001010111010101000", 
    12 => "111111110010110001000", 13 => "000000000101100001010", 
    14 => "000010110111100111000", 15 => "111111111000111100100", 
    16 => "010100100100101010000", 17 => "111000111100011101001", 
    18 => "111111101110110100010", 19 => "000000000100100100010", 
    20 => "000011101010111100001", 21 => "111111110100111010000", 
    22 => "000110000101101011000", 23 => "111010011011010001101", 
    24 => "000000001101010011010", 25 => "000000000010101010010", 
    26 => "000000100000010110001", 27 => "000000000110011110000", 
    28 => "111011001101110100110", 29 => "111111000010110000111", 
    30 => "111111101111000011011", 31 => "000000000110100100100", 
    32 => "000011110000010010110", 33 => "111111110100001011011", 
    34 => "001011111001011101100", 35 => "111001111110000000101", 
    36 => "111111101111111011011", 37 => "000000000101000000010", 
    38 => "000011000011101111011", 39 => "111111111000111001010", 
    40 => "111111101011001001011", 41 => "111011000111111100100", 
    42 => "111111110000001010011", 43 => "000000000111111101111", 
    44 => "000010110011110011011", 45 => "111111111001010101100", 
    46 => "000011011111101100101", 47 => "111010111100110010011", 
    48 => "111111110111111001101", 49 => "000000000111011000101", 
    50 => "000011001011011001001", 51 => "111111110111010010000", 
    52 => "111110101001100010101", 53 => "111010111111100010001", 
    54 => "111111110000011001011", 55 => "000000000111110101011", 
    56 => "000011101111110101001", 57 => "111111110100101010111", 
    58 => "000101001000010011101", 59 => "111010011010100101101", 
    60 => "111111100111000110001", 61 => "000000001001001001001", 
    62 => "000011111011001100100", 63 => "111111110011101100111", 
    64 => "000001100100011010001", 65 => "111010011001101000001", 
    66 => "111111110000010101101", 67 => "000000001000000010100", 
    68 => "000011111000010100110", 69 => "111111110010110101001", 
    70 => "000000101101000001000", 71 => "111010011101000110001", 
    72 => "111111100001101011011", 73 => "000000001000111110011", 
    74 => "000011101111101000110", 75 => "111111110010101011011", 
    76 => "000111000100001000111", 77 => "111010000010100101110", 
    78 => "111111110100101010001", 79 => "000000001000000100110", 
    80 => "000011110110110111101", 81 => "111111110010100101101", 
    82 => "000000001100110000111", 83 => "111010001100010101010", 
    84 => "111111111000110111011", 85 => "000000000111001100110", 
    86 => "000011110000101110010", 87 => "111111110010011000000", 
    88 => "000010011000010100110", 89 => "111001110100010100110", 
    90 => "111111101011011011111", 91 => "000000001001000101000", 
    92 => "000011001111000001010", 93 => "111111111000011000111", 
    94 => "111101001110000110001", 95 => "111011001101000000111", 
    96 => "000000001001011101101", 97 => "000000001001001000111", 
    98 => "000011010100011001100", 99 => "111111110110011010100", 
    100 => "000101011110011000010", 101 => "111010111010001000000", 
    102 => "111111101001010010001", 103 => "000000001011110111001", 
    104 => "000011000110100111101", 105 => "111111110111001111100", 
    106 => "000101010101100010010", 107 => "111010111011110001011", 
    108 => "111111100110111100110", 109 => "000000001101011001011", 
    110 => "000010111110111100000", 111 => "111111111000011100111", 
    112 => "111101101011111111000", 113 => "111011100111111001000", 
    114 => "111111110110110010001", 115 => "000000001011100011111", 
    116 => "000010110001011101010", 117 => "111111111001101101100", 
    118 => "000100101110110110011", 119 => "111011100001010000000", 
    120 => "111111001010010101010", 121 => "000000010001010011101", 
    122 => "000001110011001010101", 123 => "111111111101110010010", 
    124 => "000111111111011111110", 125 => "111011001000000001111", 
    126 => "111111011110110010100", 127 => "000000001100100110001", 
    128 => "000010100110001101001", 129 => "111111111001010010010", 
    130 => "111100110110100000010", 131 => "111011110001011101111", 
    132 => "111111011011111001000", 133 => "000000001110101000010", 
    134 => "000001100101000110011", 135 => "111111111111011011111", 
    136 => "000011000110100100100", 137 => "111011100111000001110", 
    138 => "111111100001010110000", 139 => "000000001010110010010", 
    140 => "000010111000111010110", 141 => "111111110111101010101", 
    142 => "111011001001100111101", 143 => "111011101100111000100", 
    144 => "111111101010001101110", 145 => "000000001100001100101", 
    146 => "000011110001000010001", 147 => "111111110001010101010", 
    148 => "000001110001001010100", 149 => "111011010011111011000", 
    150 => "000000000111110100100", 151 => "000000000110100010000", 
    152 => "000011101101001001001", 153 => "111111110100011001101", 
    154 => "111111001001101110010", 155 => "111011011010101110011", 
    156 => "000000000101010010111", 157 => "000000001100000011001", 
    158 => "000011001011101110111", 159 => "111111110101110111110", 
    160 => "111011011000100000011", 161 => "111011100110100011001", 
    162 => "111110100000110000110", 163 => "000000010101001101000", 
    164 => "000010000000110111010", 165 => "111111110000101011001", 
    166 => "001011111001011110001", 167 => "111001000100100110000", 
    168 => "111110110000110110001", 169 => "000000010110110110101", 
    170 => "000001101110100110101", 171 => "000000000011000011011", 
    172 => "001111101111101101001", 173 => "111001110010011010001", 
    174 => "111111010001100000101", 175 => "000000010000100110111", 
    176 => "000100001100101010000", 177 => "111111110000111111010", 
    178 => "111001001110100001000", 179 => "111010100000100010000", 
    180 => "000000000101101100110", 181 => "000000000100101000001", 
    182 => "000101100011010100110", 183 => "111111110101000001110", 
    184 => "100010100011111011101", 185 => "111101011100100100000", 
    186 => "111111101100110100111", 187 => "000000000101111101001", 
    188 => "000010100000010000101", 189 => "111111111001000100111", 
    190 => "000000010100000001010", 191 => "111100001100111001010", 
    192 => "111111101101010111101", 193 => "000000000101001111010", 
    194 => "000011001101011110100", 195 => "111111100110010000010", 
    196 => "000010110010110111001", 197 => "111100100000010111101", 
    198 => "111111101011100000111", 199 => "000000000101111101010", 
    200 => "000010001010000100101", 201 => "111111111011010101010", 
    202 => "111010001010000001110", 203 => "111100111001100001001", 
    204 => "111111101011111110010", 205 => "000000001000010110011", 
    206 => "000011000110111101010", 207 => "111111111000000100001", 
    208 => "110100010000001101000", 209 => "111101011110010111111", 
    210 => "111111100101110011010", 211 => "000000001010001111010", 
    212 => "000001111010001010011", 213 => "111111111011101010010", 
    214 => "110110011010101011001", 215 => "111100111110011110101", 
    216 => "111111100101011010100", 217 => "000000000100010110011", 
    218 => "000010010001010100111", 219 => "111111111001001101010", 
    220 => "111000110001000100101", 221 => "111101011000100011001", 
    222 => "111111101101001000011", 223 => "000000000100100000010", 
    224 => "000000101001001110010", 225 => "111111111110001010110", 
    226 => "000001100100110101100", 227 => "111101001111101010001", 
    228 => "111111001100010110011", 229 => "000000001110000010000", 
    230 => "000001000110111001101", 231 => "111111111100000001111", 
    232 => "001101010001000000011", 233 => "111011001111111011110", 
    234 => "000000101110011011110", 235 => "000000000111000011100", 
    236 => "000001100000100001100", 237 => "111111111010100010000", 
    238 => "110011100101011011001", 239 => "111100101110111100110", 
    240 => "111111011010011010010", 241 => "000000001000111000000", 
    242 => "000010010101111110100", 243 => "111111110111010010100", 
    244 => "000110111110011000001", 245 => "111011010011011111000", 
    246 => "000000011000101101110", 247 => "000000000011000110101", 
    248 => "000000110011100111101", 249 => "111111111101110000011", 
    250 => "111110100000010100001", 251 => "111110011100011111011", 
    252 => "000000011001010000011", 253 => "000000001001111010111", 
    254 => "000010000001000010010", 255 => "111111110111110011101", 
    256 => "101110111111001010010", 257 => "111011111011110011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity ptcalc_top_params_p_2s_table_V is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 258;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of ptcalc_top_params_p_2s_table_V is
    component ptcalc_top_params_p_2s_table_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    ptcalc_top_params_p_2s_table_V_rom_U :  component ptcalc_top_params_p_2s_table_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


