-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity ptcalc_top_params_p_3s_table_V_rom is 
    generic(
             DWIDTH     : integer := 21; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 180
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of ptcalc_top_params_p_3s_table_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "111111101000011110100", 1 => "000000000101111110010", 
    2 => "000010111001000110100", 3 => "111111111000100000001", 
    4 => "111110010010110100110", 5 => "111011110100011110011", 
    6 => "111111101110110111001", 7 => "000000000101110111100", 
    8 => "000011000111101011010", 9 => "111111110110110110111", 
    10 => "111111011001110000001", 11 => "111011101010001111111", 
    12 => "111111100000011101000", 13 => "000000000110110100000", 
    14 => "000011011111100001101", 15 => "111111110101111111011", 
    16 => "000011100001100011111", 17 => "111011001101001110000", 
    18 => "111111101101110000110", 19 => "000000000110000101010", 
    20 => "000011001001001001001", 21 => "111111110110101110000", 
    22 => "000000001011110011011", 23 => "111011101001011000000", 
    24 => "111111110101110101111", 25 => "000000000101000110010", 
    26 => "000100101110100001100", 27 => "111111110010110010110", 
    28 => "111110010001000000111", 29 => "111011011011011000000", 
    30 => "111111110001011011110", 31 => "000000000110000100011", 
    32 => "000011010010101101001", 33 => "111111110101111001100", 
    34 => "000000100000111110001", 35 => "111011101010000110011", 
    36 => "111111101011001101101", 37 => "000000000101001101001", 
    38 => "000011000111100110010", 39 => "111111110111001111011", 
    40 => "111111001011110001101", 41 => "111011110001100010001", 
    42 => "111111011101110111110", 43 => "000000000111011101111", 
    44 => "000010100100100011100", 45 => "111111111001001101011", 
    46 => "000000111000011011001", 47 => "111100001011001110000", 
    48 => "111111101001111011111", 49 => "000000000110001111000", 
    50 => "000010101001110000000", 51 => "111111110110011011010", 
    52 => "000111111001010000001", 53 => "111011011101001001000", 
    54 => "111111101001000100011", 55 => "000000000101000100100", 
    56 => "000011001110010001110", 57 => "111111110110111100101", 
    58 => "000000000011100010011", 59 => "111011111000111000101", 
    60 => "111110101000001100100", 61 => "000000010101001010111", 
    62 => "000001001100000110000", 63 => "111111111001101101000", 
    64 => "001001011110110011011", 65 => "111011100000100011100", 
    66 => "111111100001101011111", 67 => "000000000100111010100", 
    68 => "000010000111100100110", 69 => "111111111001111011001", 
    70 => "000100001110111000000", 71 => "111011110100100110101", 
    72 => "111111011100001111000", 73 => "000000000101110001010", 
    74 => "000010110000010000010", 75 => "111111111000000001101", 
    76 => "111111111111111111100", 77 => "111011111110100000111", 
    78 => "111111101011111111011", 79 => "000000000111110011101", 
    80 => "000001111000111110001", 81 => "111111111000110000001", 
    82 => "000010110011001100101", 83 => "111100101101111010001", 
    84 => "111111011011101100110", 85 => "000000000101111000010", 
    86 => "000001111100100111001", 87 => "111111111001101111000", 
    88 => "000100111110100001100", 89 => "111011101110010110110", 
    90 => "111111011101010000011", 91 => "000000000110000111010", 
    92 => "000001111111110101011", 93 => "111111111001110010101", 
    94 => "000001110111100001110", 95 => "111011110010001101011", 
    96 => "111111110000110111000", 97 => "000000000101110001010", 
    98 => "000011101000110110111", 99 => "111111110101001001001", 
    100 => "110111101001101001110", 101 => "111011111001011111011", 
    102 => "111111100010101101000", 103 => "000000000110001001100", 
    104 => "000011010110100001101", 105 => "111111110100101001101", 
    106 => "111100110111010010111", 107 => "111011110111110111000", 
    108 => "111111111110010101000", 109 => "000000000110100011000", 
    110 => "000010101011111100010", 111 => "111111101100101011001", 
    112 => "000110101000110101010", 113 => "111011101011110001000", 
    114 => "111111011110010010100", 115 => "000000000110000011001", 
    116 => "000010011001000001100", 117 => "111111111000011110100", 
    118 => "000111000100001000100", 119 => "111011100011101000010", 
    120 => "111111000000000101000", 121 => "000000010000111111011", 
    122 => "000001010011010110101", 123 => "111111111110101101011", 
    124 => "010011100101011100100", 125 => "111001110000111111000", 
    126 => "111111010111001011110", 127 => "000000000110101100010", 
    128 => "000010001011011011111", 129 => "111111111001000010010", 
    130 => "000001111110111110101", 131 => "111011101100000101001", 
    132 => "111110110000011100111", 133 => "000000010001000000010", 
    134 => "000000011110110110110", 135 => "000000000000101011101", 
    136 => "000101111001011001000", 137 => "111011000001110001011", 
    138 => "111111110001100000001", 139 => "000000000101101011010", 
    140 => "000100010111000010101", 141 => "111111110011010011001", 
    142 => "000111000101000001111", 143 => "111011010010001101010", 
    144 => "111111101110011011101", 145 => "000000000110101101000", 
    146 => "000011011110101010111", 147 => "111111110011110011110", 
    148 => "000000010111111111110", 149 => "111010111111011100001", 
    150 => "111111111001100010010", 151 => "000000000111000010110", 
    152 => "000011000111100100101", 153 => "111111100100110111001", 
    154 => "000111101010100000110", 155 => "111011101100011000110", 
    156 => "111111111111011011101", 157 => "000000000110011111101", 
    158 => "000010101110111100010", 159 => "111111110111111101110", 
    160 => "000000111000101111111", 161 => "111011011010011000001", 
    162 => "111111011110111010000", 163 => "000000000110111001111", 
    164 => "000010011111110111000", 165 => "111111110111101101001", 
    166 => "110111111100110000101", 167 => "111011010101010010010", 
    168 => "111111111111000100001", 169 => "000000000101110011101", 
    170 => "000010101111011010100", 171 => "111111110111001010011", 
    172 => "000011011011010011010", 173 => "111011011110011010011", 
    174 => "111111011100100011011", 175 => "000000000111001010000", 
    176 => "000001111101000111111", 177 => "111111111000101100111", 
    178 => "000000111111100101110", 179 => "111011000011111001101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity ptcalc_top_params_p_3s_table_V is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 180;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of ptcalc_top_params_p_3s_table_V is
    component ptcalc_top_params_p_3s_table_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    ptcalc_top_params_p_3s_table_V_rom_U :  component ptcalc_top_params_p_3s_table_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


