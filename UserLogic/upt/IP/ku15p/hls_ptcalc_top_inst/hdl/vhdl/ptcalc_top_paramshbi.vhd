-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity ptcalc_top_paramshbi_rom is
    generic(
             DWIDTH     : integer := 19;
             AWIDTH     : integer := 8;
             MEM_SIZE    : integer := 180
    );
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0);
          ce0       : in std_logic;
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0);
          ce1       : in std_logic;
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    );
end entity;


architecture rtl of ptcalc_top_paramshbi_rom is

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0);
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0);
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0);
signal mem : mem_array := (
    0 => "1111111010000111101", 1 => "0000000001011111100",
    2 => "0000101110010001101", 3 => "1111111110001000000",
    4 => "1111100100101101001", 5 => "1110111101000111100",
    6 => "1111111011101101110", 7 => "0000000001011101111",
    8 => "0000110001111010110", 9 => "1111111101101101101",
    10 => "1111110110011100000", 11 => "1110111010100011111",
    12 => "1111111000000111010", 13 => "0000000001101101000",
    14 => "0000110111111000011", 15 => "1111111101011111110",
    16 => "0000111000011000111", 17 => "1110110011010011100",
    18 => "1111111011011100001", 19 => "0000000001100001010",
    20 => "0000110010010010010", 21 => "1111111101101011100",
    22 => "0000000010111100110", 23 => "1110111010010110000",
    24 => "1111111101011101011", 25 => "0000000001010001100",
    26 => "0001001011101000011", 27 => "1111111100101100101",
    28 => "1111100100010000001", 29 => "1110110110110110000",
    30 => "1111111100010110111", 31 => "0000000001100001000",
    32 => "0000110100101011010", 33 => "1111111101011110011",
    34 => "0000001000001111100", 35 => "1110111010100001100",
    36 => "1111111010110011011", 37 => "0000000001010011010",
    38 => "0000110001111001100", 39 => "1111111101110011110",
    40 => "1111110010111100011", 41 => "1110111100011000100",
    42 => "1111110111011101111", 43 => "0000000001110111011",
    44 => "0000101001001000111", 45 => "1111111110010011010",
    46 => "0000001110000110110", 47 => "1111000010110011100",
    48 => "1111111010011110111", 49 => "0000000001100011110",
    50 => "0000101010011100000", 51 => "1111111101100110110",
    52 => "0001111110010100000", 53 => "1110110111010010010",
    54 => "1111111010010001000", 55 => "0000000001010001001",
    56 => "0000110011100100011", 57 => "1111111101101111001",
    58 => "0000000000111000100", 59 => "1110111110001110001",
    60 => "1111101010000011001", 61 => "0000000101010010101",
    62 => "0000010011000001100", 63 => "1111111110011011010",
    64 => "0010010111101100110", 65 => "1110111000001000111",
    66 => "1111111000011010111", 67 => "0000000001001110101",
    68 => "0000100001111001001", 69 => "1111111110011110110",
    70 => "0001000011101110000", 71 => "1110111101001001101",
    72 => "1111110111000011110", 73 => "0000000001011100010",
    74 => "0000101100000100000", 75 => "1111111110000000011",
    76 => "1111111111111111111", 77 => "1110111111101000001",
    78 => "1111111010111111110", 79 => "0000000001111100111",
    80 => "0000011110001111100", 81 => "1111111110001100000",
    82 => "0000101100110011001", 83 => "1111001011011110100",
    84 => "1111110110111011001", 85 => "0000000001011110000",
    86 => "0000011111001001110", 87 => "1111111110011011110",
    88 => "0001001111101000011", 89 => "1110111011100101101",
    90 => "1111110111010100000", 91 => "0000000001100001110",
    92 => "0000011111111101010", 93 => "1111111110011100101",
    94 => "0000011101111000011", 95 => "1110111100100011010",
    96 => "1111111100001101110", 97 => "0000000001011100010",
    98 => "0000111010001101101", 99 => "1111111101010010010",
    100 => "1101111010011010011", 101 => "1110111110010111110",
    102 => "1111111000101011010", 103 => "0000000001100010011",
    104 => "0000110101101000011", 105 => "1111111101001010011",
    106 => "1111001101110100101", 107 => "1110111101111101110",
    108 => "1111111111100101010", 109 => "0000000001101000110",
    110 => "0000101010111111000", 111 => "1111111011001010110",
    112 => "0001101010001101010", 113 => "1110111010111100010",
    114 => "1111110111100100101", 115 => "0000000001100000110",
    116 => "0000100110010000011", 117 => "1111111110000111101",
    118 => "0001110001000010001", 119 => "1110111000111010000",
    120 => "1111110000000001010", 121 => "0000000100001111110",
    122 => "0000010100110101101", 123 => "1111111111101011010",
    124 => "0100111001010111001", 125 => "1110011100001111110",
    126 => "1111110101110010111", 127 => "0000000001101011000",
    128 => "0000100010110110111", 129 => "1111111110010000100",
    130 => "0000011111101111101", 131 => "1110111011000001010",
    132 => "1111101100000111001", 133 => "0000000100010000000",
    134 => "0000000111101101101", 135 => "0000000000001010111",
    136 => "0001011110010110010", 137 => "1110110000011100010",
    138 => "1111111100011000000", 139 => "0000000001011010110",
    140 => "0001000101110000101", 141 => "1111111100110100110",
    142 => "0001110001010000011", 143 => "1110110100100011010",
    144 => "1111111011100110111", 145 => "0000000001101011010",
    146 => "0000110111101010101", 147 => "1111111100111100111",
    148 => "0000000101111111111", 149 => "1110101111110111000",
    150 => "1111111110011000100", 151 => "0000000001110000101",
    152 => "0000110001111001001", 153 => "1111111001001101110",
    154 => "0001111010101000001", 155 => "1110111011000110001",
    156 => "1111111111110110111", 157 => "0000000001100111111",
    158 => "0000101011101111000", 159 => "1111111101111111011",
    160 => "0000001110001011111", 161 => "1110110110100110000",
    162 => "1111110111101110100", 163 => "0000000001101110011",
    164 => "0000100111111101110", 165 => "1111111101111011010",
    166 => "1101111111001100001", 167 => "1110110101010100100",
    168 => "1111111111110001000", 169 => "0000000001011100111",
    170 => "0000101011110110101", 171 => "1111111101110010100",
    172 => "0000110110110100110", 173 => "1110110111100110100",
    174 => "1111110111001000110", 175 => "0000000001110010100",
    176 => "0000011111010001111", 177 => "1111111110001011001",
    178 => "0000001111111001011", 179 => "1110110000111110011" );


begin


memory_access_guard_0: process (addr0)
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1)
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)
begin
    if (clk'event and clk = '1') then
        if (ce0 = '1') then
            q0 <= mem(CONV_INTEGER(addr0_tmp));
        end if;
        if (ce1 = '1') then
            q1 <= mem(CONV_INTEGER(addr1_tmp));
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity ptcalc_top_paramshbi is
    generic (
        DataWidth : INTEGER := 19;
        AddressRange : INTEGER := 180;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of ptcalc_top_paramshbi is
    component ptcalc_top_paramshbi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    ptcalc_top_paramshbi_rom_U :  component ptcalc_top_paramshbi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;
