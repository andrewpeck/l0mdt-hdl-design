-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity ptcalc_top_params_p_2s_table_V_rom is
    generic(
             DWIDTH     : integer := 19;
             AWIDTH     : integer := 9;
             MEM_SIZE    : integer := 258
    );
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0);
          ce0       : in std_logic;
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0);
          ce1       : in std_logic;
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    );
end entity;


architecture rtl of ptcalc_top_params_p_2s_table_V_rom is

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0);
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0);
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0);
signal mem : mem_array := (
    0 => "1111111110000110010", 1 => "0000000001001010101",
    2 => "0001000000110011010", 3 => "1111111101001110111",
    4 => "0000011011001010010", 5 => "1110100101011010111",
    6 => "0000000000000101011", 7 => "0000000000011110101",
    8 => "0001000000001000010", 9 => "1111111011111110111",
    10 => "1001111011010101100", 11 => "0000010101110101010",
    12 => "1111111100101100010", 13 => "0000000001011000010",
    14 => "0000101101111001110", 15 => "1111111110001111001",
    16 => "0101001001001010100", 17 => "1110001111000111010",
    18 => "1111111011101101000", 19 => "0000000001001001000",
    20 => "0000111010101111000", 21 => "1111111101001110100",
    22 => "0001100001011010110", 23 => "1110100110110100011",
    24 => "0000000011010100110", 25 => "0000000000101010100",
    26 => "0000001000000101100", 27 => "0000000001100111100",
    28 => "1110110011011101001", 29 => "1111110000101100001",
    30 => "1111111011110000110", 31 => "0000000001101001001",
    32 => "0000111100000100101", 33 => "1111111101000010110",
    34 => "0010111110010111011", 35 => "1110011111100000001",
    36 => "1111111011111110110", 37 => "0000000001010000000",
    38 => "0000110000111011110", 39 => "1111111110001110010",
    40 => "1111111010110010010", 41 => "1110110001111111001",
    42 => "1111111100000010100", 43 => "0000000001111111011",
    44 => "0000101100111100110", 45 => "1111111110010101011",
    46 => "0000110111111011001", 47 => "1110101111001100100",
    48 => "1111111101111110011", 49 => "0000000001110110001",
    50 => "0000110010110110010", 51 => "1111111101110100100",
    52 => "1111101010011000101", 53 => "1110101111111000100",
    54 => "1111111100000110010", 55 => "0000000001111101010",
    56 => "0000111011111101010", 57 => "1111111101001010101",
    58 => "0001010010000100111", 59 => "1110100110101001011",
    60 => "1111111001110001100", 61 => "0000000010010010010",
    62 => "0000111110110011001", 63 => "1111111100111011001",
    64 => "0000011001000110100", 65 => "1110100110011010000",
    66 => "1111111100000101011", 67 => "0000000010000000101",
    68 => "0000111110000101001", 69 => "1111111100101101010",
    70 => "0000001011010000010", 71 => "1110100111010001100",
    72 => "1111111000011010110", 73 => "0000000010001111100",
    74 => "0000111011111010001", 75 => "1111111100101010110",
    76 => "0001110001000010001", 77 => "1110100000101001011",
    78 => "1111111101001010100", 79 => "0000000010000001001",
    80 => "0000111101101101111", 81 => "1111111100101001011",
    82 => "0000000011001100001", 83 => "1110100011000101010",
    84 => "1111111110001101110", 85 => "0000000001110011001",
    86 => "0000111100001011100", 87 => "1111111100100110000",
    88 => "0000100110000101001", 89 => "1110011101000101001",
    90 => "1111111010110110111", 91 => "0000000010010001010",
    92 => "0000110011110000010", 93 => "1111111110000110001",
    94 => "1111010011100001100", 95 => "1110110011010000001",
    96 => "0000000010010111011", 97 => "0000000010010010001",
    98 => "0000110101000110011", 99 => "1111111101100110101",
    100 => "0001010111100110000", 101 => "1110101110100010000",
    102 => "1111111010010100100", 103 => "0000000010111101110",
    104 => "0000110001101001111", 105 => "1111111101110011111",
    106 => "0001010101011000100", 107 => "1110101110111100010",
    108 => "1111111001101111001", 109 => "0000000011010110010",
    110 => "0000101111101111000", 111 => "1111111110000111001",
    112 => "1111011010111111110", 113 => "1110111001111110010",
    114 => "1111111101101100100", 115 => "0000000010111000111",
    116 => "0000101100010111010", 117 => "1111111110011011011",
    118 => "0001001011101101100", 119 => "1110111000010100000",
    120 => "1111110010100101010", 121 => "0000000100010100111",
    122 => "0000011100110010101", 123 => "1111111111011100100",
    124 => "0001111111110111111", 125 => "1110110010000000011",
    126 => "1111110111101100101", 127 => "0000000011001001100",
    128 => "0000101001100011010", 129 => "1111111110010100100",
    130 => "1111001101101000000", 131 => "1110111100010111011",
    132 => "1111110110111110010", 133 => "0000000011101010000",
    134 => "0000011001010001100", 135 => "1111111111110110111",
    136 => "0000110001101001001", 137 => "1110111001110000011",
    138 => "1111111000010101100", 139 => "0000000010101100100",
    140 => "0000101110001110101", 141 => "1111111101111010101",
    142 => "1110110010011001111", 143 => "1110111011001110001",
    144 => "1111111010100011011", 145 => "0000000011000011001",
    146 => "0000111100010000100", 147 => "1111111100010101010",
    148 => "0000011100010010101", 149 => "1110110100111110110",
    150 => "0000000001111101001", 151 => "0000000001101000100",
    152 => "0000111011010010010", 153 => "1111111101000110011",
    154 => "1111110010011011100", 155 => "1110110110101011100",
    156 => "0000000001010100101", 157 => "0000000011000000110",
    158 => "0000110010111011101", 159 => "1111111101011101111",
    160 => "1110110110001000000", 161 => "1110111001101000110",
    162 => "1111101000001100001", 163 => "0000000101010011010",
    164 => "0000100000001101110", 165 => "1111111100001010110",
    166 => "0010111110010111100", 167 => "1110010001001001100",
    168 => "1111101100001101100", 169 => "0000000101101101101",
    170 => "0000011011101001101", 171 => "0000000000110000110",
    172 => "0011111011111011010", 173 => "1110011100100110100",
    174 => "1111110100011000001", 175 => "0000000100001001101",
    176 => "0001000011001010100", 177 => "1111111100001111110",
    178 => "1110010011101000010", 179 => "1110101000001000100",
    180 => "0000000001011011001", 181 => "0000000001001010000",
    182 => "0001011000110101001", 183 => "1111111101010000011",
    184 => "1000101000111110111", 185 => "1111010111001001000",
    186 => "1111111011001101001", 187 => "0000000001011111010",
    188 => "0000101000000100001", 189 => "1111111110010001001",
    190 => "0000000101000000010", 191 => "1111000011001110010",
    192 => "1111111011010101111", 193 => "0000000001010011110",
    194 => "0000110011010111101", 195 => "1111111001100100000",
    196 => "0000101100101101110", 197 => "1111001000000101111",
    198 => "1111111010111000001", 199 => "0000000001011111010",
    200 => "0000100010100001001", 201 => "1111111110110101010",
    202 => "1110100010100000011", 203 => "1111001110011000010",
    204 => "1111111010111111100", 205 => "0000000010000101100",
    206 => "0000110001101111010", 207 => "1111111110000001000",
    208 => "1101000100000011010", 209 => "1111010111100101111",
    210 => "1111111001011100110", 211 => "0000000010100011110",
    212 => "0000011110100010100", 213 => "1111111110111010100",
    214 => "1101100110101010110", 215 => "1111001111100111101",
    216 => "1111111001010110101", 217 => "0000000001000101100",
    218 => "0000100100010101001", 219 => "1111111110010011010",
    220 => "1110001100010001001", 221 => "1111010110001000110",
    222 => "1111111011010010000", 223 => "0000000001001000000",
    224 => "0000001010010011100", 225 => "1111111111100010101",
    226 => "0000011001001101011", 227 => "1111010011111010100",
    228 => "1111110011000101100", 229 => "0000000011100000100",
    230 => "0000010001101110011", 231 => "1111111111000000011",
    232 => "0011010100010000000", 233 => "1110110011111110111",
    234 => "0000001011100110111", 235 => "0000000001110000111",
    236 => "0000011000001000011", 237 => "1111111110101000100",
    238 => "1100111001010110110", 239 => "1111001011101111001",
    240 => "1111110110100110100", 241 => "0000000010001110000",
    242 => "0000100101011111101", 243 => "1111111101110100101",
    244 => "0001101111100110000", 245 => "1110110100110111110",
    246 => "0000000110001011011", 247 => "0000000000110001101",
    248 => "0000001100111001111", 249 => "1111111111011100000",
    250 => "1111101000000101000", 251 => "1111100111000111110",
    252 => "0000000110010100000", 253 => "0000000010011110101",
    254 => "0000100000010000100", 255 => "1111111101111100111",
    256 => "1011101111110010100", 257 => "1110111110111100110" );


begin


memory_access_guard_0: process (addr0)
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1)
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)
begin
    if (clk'event and clk = '1') then
        if (ce0 = '1') then
            q0 <= mem(CONV_INTEGER(addr0_tmp));
        end if;
        if (ce1 = '1') then
            q1 <= mem(CONV_INTEGER(addr1_tmp));
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity ptcalc_top_params_p_2s_table_V is
    generic (
        DataWidth : INTEGER := 19;
        AddressRange : INTEGER := 258;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of ptcalc_top_params_p_2s_table_V is
    component ptcalc_top_params_p_2s_table_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    ptcalc_top_params_p_2s_table_V_rom_U :  component ptcalc_top_params_p_2s_table_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;
