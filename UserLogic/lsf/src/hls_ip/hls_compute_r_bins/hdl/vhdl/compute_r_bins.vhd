-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_r_bins is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    mdt_localx_V : IN STD_LOGIC_VECTOR (14 downto 0);
    mdt_localy_V : IN STD_LOGIC_VECTOR (14 downto 0);
    mdt_r_offset_V_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    mdt_r_offset_V_TVALID : IN STD_LOGIC;
    mdt_r_offset_V_TREADY : OUT STD_LOGIC;
    hw_sin_val_V : IN STD_LOGIC_VECTOR (17 downto 0);
    hw_cos_val_V : IN STD_LOGIC_VECTOR (17 downto 0);
    r_bin_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_bin_V_TVALID : OUT STD_LOGIC;
    r_bin_V_TREADY : IN STD_LOGIC );
end;


architecture behav of compute_r_bins is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "compute_r_bins,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku15p-ffva1760-2-e,HLS_INPUT_CLOCK=3.125000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.453333,HLS_SYN_LAT=6,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=178,HLS_SYN_LUT=183,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal mdt_localx_V_0_data_reg : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal mdt_localx_V_0_vld_reg : STD_LOGIC := '0';
    signal mdt_localx_V_0_ack_out : STD_LOGIC;
    signal mdt_localy_V_0_data_reg : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal mdt_localy_V_0_vld_reg : STD_LOGIC := '0';
    signal mdt_localy_V_0_ack_out : STD_LOGIC;
    signal hw_sin_val_V_0_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal hw_sin_val_V_0_vld_reg : STD_LOGIC := '0';
    signal hw_sin_val_V_0_ack_out : STD_LOGIC;
    signal hw_cos_val_V_0_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal hw_cos_val_V_0_vld_reg : STD_LOGIC := '0';
    signal hw_cos_val_V_0_ack_out : STD_LOGIC;
    signal mdt_r_offset_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal r_bin_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal trunc_ln1353_fu_127_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1353_reg_199 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal regslice_both_r_bin_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln1353_reg_199_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal hw_sin_val_V_read_reg_204 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal mdt_localy_V_read_reg_209 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln215_1_cast_reg_214 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1353_1_fu_141_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1353_1_reg_220 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_reg_225 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal trunc_ln1_reg_231 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1503_1_reg_236 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln321_fu_191_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln321_1_fu_195_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal grp_fu_103_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_fu_136_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal rhs_V_1_fu_149_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_103_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_V_fu_131_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lhs_V_1_fu_145_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_103_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1353_fu_153_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1353_1_fu_157_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1353_2_fu_172_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1353_3_fu_176_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_mdt_r_offset_V_U_apdone_blk : STD_LOGIC;
    signal mdt_r_offset_V_TDATA_int : STD_LOGIC_VECTOR (23 downto 0);
    signal mdt_r_offset_V_TVALID_int : STD_LOGIC;
    signal mdt_r_offset_V_TREADY_int : STD_LOGIC;
    signal regslice_both_mdt_r_offset_V_U_ack_in : STD_LOGIC;
    signal r_bin_V_TDATA_int : STD_LOGIC_VECTOR (7 downto 0);
    signal r_bin_V_TVALID_int : STD_LOGIC;
    signal r_bin_V_TREADY_int : STD_LOGIC;
    signal regslice_both_r_bin_V_U_vld_out : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_mdt_r_offset_V_U : component regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => mdt_r_offset_V_TDATA,
        vld_in => mdt_r_offset_V_TVALID,
        ack_in => regslice_both_mdt_r_offset_V_U_ack_in,
        data_out => mdt_r_offset_V_TDATA_int,
        vld_out => mdt_r_offset_V_TVALID_int,
        ack_out => mdt_r_offset_V_TREADY_int,
        apdone_blk => regslice_both_mdt_r_offset_V_U_apdone_blk);

    regslice_both_r_bin_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => r_bin_V_TDATA_int,
        vld_in => r_bin_V_TVALID_int,
        ack_in => r_bin_V_TREADY_int,
        data_out => r_bin_V_TDATA,
        vld_out => regslice_both_r_bin_V_U_vld_out,
        ack_out => r_bin_V_TREADY,
        apdone_blk => regslice_both_r_bin_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    hw_cos_val_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    hw_sin_val_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    mdt_localx_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    mdt_localy_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((hw_cos_val_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((hw_cos_val_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (hw_cos_val_V_0_vld_reg = ap_const_logic_1)))) then
                hw_cos_val_V_0_data_reg <= hw_cos_val_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((hw_sin_val_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((hw_sin_val_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (hw_sin_val_V_0_vld_reg = ap_const_logic_1)))) then
                hw_sin_val_V_0_data_reg <= hw_sin_val_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                hw_sin_val_V_read_reg_204 <= hw_sin_val_V_0_data_reg;
                mdt_localy_V_read_reg_209 <= mdt_localy_V_0_data_reg;
                trunc_ln1353_1_reg_220 <= trunc_ln1353_1_fu_141_p1;
                trunc_ln1503_1_reg_236 <= add_ln1353_3_fu_176_p2(11 downto 5);
                trunc_ln1_reg_231 <= add_ln1353_1_fu_157_p2(11 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((mdt_localx_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((mdt_localx_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (mdt_localx_V_0_vld_reg = ap_const_logic_1)))) then
                mdt_localx_V_0_data_reg <= mdt_localx_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((mdt_localy_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((mdt_localy_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (mdt_localy_V_0_vld_reg = ap_const_logic_1)))) then
                mdt_localy_V_0_data_reg <= mdt_localy_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_reg_225 <= grp_fu_103_p2(27 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln1353_reg_199 <= trunc_ln1353_fu_127_p1;
                trunc_ln1353_reg_199_pp0_iter1_reg <= trunc_ln1353_reg_199;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                zext_ln215_1_cast_reg_214 <= grp_fu_103_p2(27 downto 16);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln1353_1_fu_157_p2 <= std_logic_vector(unsigned(add_ln1353_fu_153_p2) + unsigned(zext_ln215_1_cast_reg_214));
    add_ln1353_2_fu_172_p2 <= std_logic_vector(unsigned(trunc_ln1353_1_reg_220) + unsigned(tmp_reg_225));
    add_ln1353_3_fu_176_p2 <= std_logic_vector(unsigned(add_ln1353_2_fu_172_p2) + unsigned(zext_ln215_1_cast_reg_214));
    add_ln1353_fu_153_p2 <= std_logic_vector(unsigned(trunc_ln1353_reg_199_pp0_iter1_reg) + unsigned(tmp_reg_225));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, regslice_both_r_bin_V_U_apdone_blk, mdt_r_offset_V_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= (((regslice_both_r_bin_V_U_apdone_blk = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((mdt_r_offset_V_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, regslice_both_r_bin_V_U_apdone_blk, mdt_r_offset_V_TVALID_int, r_bin_V_TREADY_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((r_bin_V_TREADY_int = ap_const_logic_0) or (regslice_both_r_bin_V_U_apdone_blk = ap_const_logic_1))) or ((r_bin_V_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((mdt_r_offset_V_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, regslice_both_r_bin_V_U_apdone_blk, mdt_r_offset_V_TVALID_int, r_bin_V_TREADY_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((r_bin_V_TREADY_int = ap_const_logic_0) or (regslice_both_r_bin_V_U_apdone_blk = ap_const_logic_1))) or ((r_bin_V_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((mdt_r_offset_V_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(mdt_r_offset_V_TVALID_int)
    begin
                ap_block_pp0_stage1_01001 <= ((mdt_r_offset_V_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter2, mdt_r_offset_V_TVALID_int, r_bin_V_TREADY_int)
    begin
                ap_block_pp0_stage1_11001 <= (((r_bin_V_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((mdt_r_offset_V_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, mdt_r_offset_V_TVALID_int, r_bin_V_TREADY_int)
    begin
                ap_block_pp0_stage1_subdone <= (((r_bin_V_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((mdt_r_offset_V_TVALID_int = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(mdt_r_offset_V_TVALID_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (mdt_r_offset_V_TVALID_int = ap_const_logic_0);
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(mdt_r_offset_V_TVALID_int)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (mdt_r_offset_V_TVALID_int = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter3_assign_proc : process(regslice_both_r_bin_V_U_apdone_blk)
    begin
                ap_block_state7_pp0_stage0_iter3 <= (regslice_both_r_bin_V_U_apdone_blk = ap_const_logic_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_103_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, rhs_V_fu_136_p1, rhs_V_1_fu_149_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_103_p0 <= rhs_V_1_fu_149_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_103_p0 <= rhs_V_fu_136_p1(18 - 1 downto 0);
        else 
            grp_fu_103_p0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_103_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, lhs_V_fu_131_p1, lhs_V_1_fu_145_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_103_p1 <= lhs_V_1_fu_145_p1(15 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_103_p1 <= lhs_V_fu_131_p1(15 - 1 downto 0);
        else 
            grp_fu_103_p1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_103_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_103_p0) * signed(grp_fu_103_p1))), 33));

    hw_cos_val_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            hw_cos_val_V_0_ack_out <= ap_const_logic_1;
        else 
            hw_cos_val_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    hw_sin_val_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            hw_sin_val_V_0_ack_out <= ap_const_logic_1;
        else 
            hw_sin_val_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_1_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mdt_localy_V_read_reg_209),33));

        lhs_V_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mdt_localx_V_0_data_reg),33));


    mdt_localx_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            mdt_localx_V_0_ack_out <= ap_const_logic_1;
        else 
            mdt_localx_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    mdt_localy_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            mdt_localy_V_0_ack_out <= ap_const_logic_1;
        else 
            mdt_localy_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    mdt_r_offset_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, mdt_r_offset_V_TVALID_int)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            mdt_r_offset_V_TDATA_blk_n <= mdt_r_offset_V_TVALID_int;
        else 
            mdt_r_offset_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mdt_r_offset_V_TREADY_assign_proc : process(mdt_r_offset_V_TVALID, regslice_both_mdt_r_offset_V_U_ack_in)
    begin
        if (((mdt_r_offset_V_TVALID = ap_const_logic_1) and (regslice_both_mdt_r_offset_V_U_ack_in = ap_const_logic_1))) then 
            mdt_r_offset_V_TREADY <= ap_const_logic_1;
        else 
            mdt_r_offset_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    mdt_r_offset_V_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            mdt_r_offset_V_TREADY_int <= ap_const_logic_1;
        else 
            mdt_r_offset_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    r_bin_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, r_bin_V_TREADY_int)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            r_bin_V_TDATA_blk_n <= r_bin_V_TREADY_int;
        else 
            r_bin_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    r_bin_V_TDATA_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, zext_ln321_fu_191_p1, zext_ln321_1_fu_195_p1, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                r_bin_V_TDATA_int <= zext_ln321_1_fu_195_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                r_bin_V_TDATA_int <= zext_ln321_fu_191_p1;
            else 
                r_bin_V_TDATA_int <= "XXXXXXXX";
            end if;
        else 
            r_bin_V_TDATA_int <= "XXXXXXXX";
        end if; 
    end process;

    r_bin_V_TVALID <= regslice_both_r_bin_V_U_vld_out;

    r_bin_V_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            r_bin_V_TVALID_int <= ap_const_logic_1;
        else 
            r_bin_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

        rhs_V_1_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hw_sin_val_V_read_reg_204),33));

        rhs_V_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hw_cos_val_V_0_data_reg),33));

    trunc_ln1353_1_fu_141_p1 <= mdt_r_offset_V_TDATA_int(12 - 1 downto 0);
    trunc_ln1353_fu_127_p1 <= mdt_r_offset_V_TDATA_int(12 - 1 downto 0);
    zext_ln321_1_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1503_1_reg_236),8));
    zext_ln321_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_reg_231),8));
end behav;
