-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity get_trig_vals_lutcud_rom is
    generic(
             DWIDTH     : integer := 36;
             AWIDTH     : integer := 8;
             MEM_SIZE    : integer := 197
    );
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0);
          ce0       : in std_logic;
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0);
          ce1       : in std_logic;
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    );
end entity;


architecture rtl of get_trig_vals_lutcud_rom is

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0);
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0);
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0);
signal mem : mem_array := (
    0 => "111111000010111011100000000000111010",
    1 => "111111010011010011100000000000011111",
    2 => "111111100011101010100000000000001100",
    3 => "111111110100000010100000000000000010",
    4 => "000000000100011010100000000000000000",
    5 => "000000010100110010100000000000000110",
    6 => "000000100101001010100000000000010101",
    7 => "000000110101100010100000000000101100",
    8 => "000001000101111010100000000001001100",
    9 => "000001010110010001100000000001110100",
    10 => "000001100110101000100000000010100100",
    11 => "000001110110111110100000000011011101",
    12 => "000010000111010100100000000100011110",
    13 => "000010010111101010100000000101100111",
    14 => "000010100111111110100000000110111001",
    15 => "000010111000010010100000001000010011",
    16 => "000011001000100110100000001001110110",
    17 => "000011011000111000100000001011100001",
    18 => "000011101001001010100000001101010100",
    19 => "000011111001011011100000001111001111",
    20 => "000100001001101010100000010001010011",
    21 => "000100011001111001100000010011011111",
    22 => "000100101010000110100000010101110011",
    23 => "000100111010010011100000011000010000",
    24 => "000101001010011110100000011010110101",
    25 => "000101011010100111100000011101100010",
    26 => "000101101010101111100000100000011000",
    27 => "000101111010110110100000100011010110",
    28 => "000110001010111011100000100110011100",
    29 => "000110011010111111100000101001101010",
    30 => "000110101011000000100000101101000000",
    31 => "000110111011000001100000110000011111",
    32 => "000111001010111111100000110100000110",
    33 => "000111011010111011100000110111110101",
    34 => "000111101010110110100000111011101100",
    35 => "000111111010101110100000111111101011",
    36 => "001000001010100100100001000011110010",
    37 => "001000011010011001100001001000000010",
    38 => "001000101010001011100001001100011001",
    39 => "001000111001111010100001010000111001",
    40 => "001001001001101000100001010101100001",
    41 => "001001011001010011100001011010010000",
    42 => "001001101000111011100001011111001000",
    43 => "001001111000100010100001100100001000",
    44 => "001010001000000101100001101001001111",
    45 => "001010010111100110100001101110011111",
    46 => "001010100111000100100001110011110110",
    47 => "001010110110011111100001111001010110",
    48 => "001011000101111000100001111110111101",
    49 => "001011010101001101100010000100101100",
    50 => "001011100100100000100010001010100011",
    51 => "001011110011101111100010010000100010",
    52 => "001100000010111100100010010110101001",
    53 => "001100010010000101100010011100110111",
    54 => "001100100001001011100010100011001101",
    55 => "001100110000001110100010101001101011",
    56 => "001100111111001110100010110000010001",
    57 => "001101001110001010100010110110111110",
    58 => "001101011101000010100010111101110011",
    59 => "001101101011110111100011000100101111",
    60 => "001101111010101001100011001011110011",
    61 => "001110001001010111100011010010111111",
    62 => "001110011000000001100011011010010010",
    63 => "001110100110100111100011100001101100",
    64 => "001110110101001010100011101001001110",
    65 => "001111000011101001100011110000111000",
    66 => "001111010010000011100011111000101000",
    67 => "001111100000011010100100000000100001",
    68 => "001111101110101101100100001000100000",
    69 => "001111111100111011100100010000100111",
    70 => "010000001011000110100100011000110101",
    71 => "010000011001001100100100100001001010",
    72 => "010000100111001110100100101001100111",
    73 => "010000110101001011100100110010001010",
    74 => "010001000011000101100100111010110101",
    75 => "010001010000111001100101000011100111",
    76 => "010001011110101001100101001100100000",
    77 => "010001101100010101100101010101100000",
    78 => "010001111001111100100101011110100111",
    79 => "010010000111011110100101100111110101",
    80 => "010010010100111100100101110001001001",
    81 => "010010100010010100100101111010100101",
    82 => "010010101111101000100110000100001000",
    83 => "010010111100110111100110001101110001",
    84 => "010011001010000001100110010111100001",
    85 => "010011010111000110100110100001011000",
    86 => "010011100100000110100110101011010101",
    87 => "010011110001000001100110110101011001",
    88 => "010011111101110110100110111111100100",
    89 => "010100001010100110100111001001110101",
    90 => "010100010111010010100111010100001100",
    91 => "010100100011110111100111011110101011",
    92 => "010100110000011000100111101001001111",
    93 => "010100111100110011100111110011111010",
    94 => "010101001001001000100111111110101011",
    95 => "010101010101011000101000001001100011",
    96 => "010101100001100010101000010100100001",
    97 => "010101101101100111101000011111100101",
    98 => "010101111001100110101000101010101111",
    99 => "010110000101011111101000110101111111",
    100 => "010110010001010011101001000001010101",
    101 => "010110011101000000101001001100110010",
    102 => "010110101000101000101001011000010100",
    103 => "010110110100001010101001100011111100",
    104 => "010110111111100110101001101111101011",
    105 => "010111001010111011101001111011011110",
    106 => "010111010110001011101010000111011000",
    107 => "010111100001010101101010010011011000",
    108 => "010111101100011000101010011111011101",
    109 => "010111110111010110101010101011101000",
    110 => "011000000010001101101010110111111000",
    111 => "011000001100111101101011000100001110",
    112 => "011000010111101000101011010000101001",
    113 => "011000100010001100101011011101001010",
    114 => "011000101100101010101011101001110000",
    115 => "011000110111000001101011110110011100",
    116 => "011001000001010001101100000011001100",
    117 => "011001001011011011101100010000000010",
    118 => "011001010101011111101100011100111110",
    119 => "011001011111011100101100101001111110",
    120 => "011001101001010010101100110111000011",
    121 => "011001110011000001101101000100001110",
    122 => "011001111100101010101101010001011101",
    123 => "011010000110001100101101011110110001",
    124 => "011010001111100111101101101100001010",
    125 => "011010011000111011101101111001101000",
    126 => "011010100010001001101110000111001011",
    127 => "011010101011001111101110010100110010",
    128 => "011010110100001110101110100010011110",
    129 => "011010111101000111101110110000001111",
    130 => "011011000101111000101110111110000100",
    131 => "011011001110100010101111001011111101",
    132 => "011011010111000101101111011001111011",
    133 => "011011011111100001101111100111111101",
    134 => "011011100111110110101111110110000100",
    135 => "011011110000000011110000000100001110",
    136 => "011011111000001001110000010010011101",
    137 => "011100000000001000110000100000110000",
    138 => "011100001000000000110000101111000111",
    139 => "011100001111110000110000111101100011",
    140 => "011100010111011001110001001100000010",
    141 => "011100011110111010110001011010100100",
    142 => "011100100110010100110001101001001011",
    143 => "011100101101100111110001110111110110",
    144 => "011100110100110001110010000110100100",
    145 => "011100111011110101110010010101010110",
    146 => "011101000010110001110010100100001011",
    147 => "011101001001100101110010110011000100",
    148 => "011101010000010001110011000010000000",
    149 => "011101010110110110110011010001000000",
    150 => "011101011101010011110011100000000011",
    151 => "011101100011101001110011101111001010",
    152 => "011101101001110111110011111110010011",
    153 => "011101101111111101110100001101100000",
    154 => "011101110101111011110100011100110000",
    155 => "011101111011110001110100101100000011",
    156 => "011110000001100000110100111011011000",
    157 => "011110000111000110110101001010110001",
    158 => "011110001100100101110101011010001101",
    159 => "011110010001111100110101101001101011",
    160 => "011110010111001011110101111001001100",
    161 => "011110011100010010110110001000110000",
    162 => "011110100001010001110110011000010110",
    163 => "011110100110001000110110100111111111",
    164 => "011110101010110111110110110111101010",
    165 => "011110101111011110110111000111011000",
    166 => "011110110011111101110111010111001000",
    167 => "011110111000010100110111100110111010",
    168 => "011110111100100011110111110110101110",
    169 => "011111000000101001111000000110100101",
    170 => "011111000100101000111000010110011101",
    171 => "011111001000011110111000100110011000",
    172 => "011111001100001101111000110110010100",
    173 => "011111001111110011111001000110010011",
    174 => "011111010011010001111001010110010011",
    175 => "011111010110100110111001100110010101",
    176 => "011111011001110100111001110110011001",
    177 => "011111011100111001111010000110011110",
    178 => "011111011111110110111010010110100101",
    179 => "011111100010101011111010100110101101",
    180 => "011111100101011000111010110110110111",
    181 => "011111100111111100111011000111000010",
    182 => "011111101010011000111011010111001110",
    183 => "011111101100101100111011100111011100",
    184 => "011111101110110111111011110111101010",
    185 => "011111110000111010111100000111111010",
    186 => "011111110010110101111100011000001011",
    187 => "011111110100101000111100101000011101",
    188 => "011111110110010010111100111000101111",
    189 => "011111110111110011111101001001000011",
    190 => "011111111001001101111101011001010111",
    191 => "011111111010011110111101101001101100",
    192 => "011111111011100111111101111010000001",
    193 => "011111111100100111111110001010010111",
    194 => "011111111101011111111110011010101110",
    195 => "011111111110001111111110101011000101",
    196 => "011111111110110110111110111011011100" );


begin


memory_access_guard_0: process (addr0)
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1)
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)
begin
    if (clk'event and clk = '1') then
        if (ce0 = '1') then
            q0 <= mem(CONV_INTEGER(addr0_tmp));
        end if;
        if (ce1 = '1') then
            q1 <= mem(CONV_INTEGER(addr1_tmp));
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity get_trig_vals_lutcud is
    generic (
        DataWidth : INTEGER := 36;
        AddressRange : INTEGER := 197;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of get_trig_vals_lutcud is
    component get_trig_vals_lutcud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    get_trig_vals_lutcud_rom_U :  component get_trig_vals_lutcud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;
