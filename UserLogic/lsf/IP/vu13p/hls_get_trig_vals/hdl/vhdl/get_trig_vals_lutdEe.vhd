-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity get_trig_vals_lutdEe_rom is 
    generic(
             DWIDTH     : integer := 36; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 197
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of get_trig_vals_lutdEe_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "111111000100111110100000000000110110", 
    1 => "111111010101010110100000000000011100", 
    2 => "111111100101101101100000000000001010", 
    3 => "111111110110000101100000000000000001", 
    4 => "000000000110011101100000000000000000", 
    5 => "000000010110110101100000000000001000", 
    6 => "000000100111001101100000000000011000", 
    7 => "000000110111100101100000000000110000", 
    8 => "000001000111111100100000000001010000", 
    9 => "000001011000010100100000000001111001", 
    10 => "000001101000101010100000000010101011", 
    11 => "000001111001000001100000000011100101", 
    12 => "000010001001010111100000000100100111", 
    13 => "000010011001101100100000000101110001", 
    14 => "000010101010000001100000000111000100", 
    15 => "000010111010010101100000001000011111", 
    16 => "000011001010101000100000001010000011", 
    17 => "000011011010111011100000001011101111", 
    18 => "000011101011001100100000001101100011", 
    19 => "000011111011011101100000001111011111", 
    20 => "000100001011101100100000010001100100", 
    21 => "000100011011111011100000010011110001", 
    22 => "000100101100001000100000010110000111", 
    23 => "000100111100010100100000011000100100", 
    24 => "000101001100011111100000011011001010", 
    25 => "000101011100101000100000011101111001", 
    26 => "000101101100110000100000100000101111", 
    27 => "000101111100110111100000100011101110", 
    28 => "000110001100111100100000100110110101", 
    29 => "000110011100111111100000101010000100", 
    30 => "000110101101000001100000101101011100", 
    31 => "000110111101000000100000110000111011", 
    32 => "000111001100111110100000110100100011", 
    33 => "000111011100111011100000111000010011", 
    34 => "000111101100110101100000111100001011", 
    35 => "000111111100101101100001000000001011", 
    36 => "001000001100100011100001000100010100", 
    37 => "001000011100010111100001001000100100", 
    38 => "001000101100001001100001001100111101", 
    39 => "001000111011111000100001010001011101", 
    40 => "001001001011100101100001010110000110", 
    41 => "001001011011010000100001011010110111", 
    42 => "001001101010111000100001011111101111", 
    43 => "001001111010011110100001100100110000", 
    44 => "001010001010000001100001101001111001", 
    45 => "001010011001100010100001101111001001", 
    46 => "001010101000111111100001110100100010", 
    47 => "001010111000011010100001111010000010", 
    48 => "001011000111110011100001111111101011", 
    49 => "001011010111001000100010000101011011", 
    50 => "001011100110011010100010001011010011", 
    51 => "001011110101101001100010010001010011", 
    52 => "001100000100110101100010010111011010", 
    53 => "001100010011111110100010011101101010", 
    54 => "001100100011000100100010100100000001", 
    55 => "001100110010000110100010101010011111", 
    56 => "001101000001000101100010110001000110", 
    57 => "001101010000000001100010110111110100", 
    58 => "001101011110111001100010111110101010", 
    59 => "001101101101101110100011000101100111", 
    60 => "001101111100011111100011001100101100", 
    61 => "001110001011001100100011010011111001", 
    62 => "001110011001110110100011011011001101", 
    63 => "001110101000011100100011100010101000", 
    64 => "001110110110111110100011101010001011", 
    65 => "001111000101011100100011110001110101", 
    66 => "001111010011110111100011111001100111", 
    67 => "001111100010001101100100000001100000", 
    68 => "001111110000011111100100001001100001", 
    69 => "001111111110101101100100010001101000", 
    70 => "010000001100110111100100011001110111", 
    71 => "010000011010111101100100100010001101", 
    72 => "010000101000111110100100101010101011", 
    73 => "010000110110111011100100110011001111", 
    74 => "010001000100110011100100111011111011", 
    75 => "010001010010100111100101000100101110", 
    76 => "010001100000010111100101001101101000", 
    77 => "010001101110000010100101010110101000", 
    78 => "010001111011101000100101011111110000", 
    79 => "010010001001001010100101101000111111", 
    80 => "010010010110100111100101110010010100", 
    81 => "010010100011111111100101111011110001", 
    82 => "010010110001010010100110000101010100", 
    83 => "010010111110100000100110001110111110", 
    84 => "010011001011101010100110011000101111", 
    85 => "010011011000101110100110100010100111", 
    86 => "010011100101101101100110101100100101", 
    87 => "010011110010100111100110110110101010", 
    88 => "010011111111011100100111000000110101", 
    89 => "010100001100001100100111001011000111", 
    90 => "010100011000110111100111010101100000", 
    91 => "010100100101011100100111011111111111", 
    92 => "010100110001111011100111101010100100", 
    93 => "010100111110010110100111110101010000", 
    94 => "010101001010101010101000000000000010", 
    95 => "010101010110111001101000001010111010", 
    96 => "010101100011000011101000010101111001", 
    97 => "010101101111000111101000100000111110", 
    98 => "010101111011000101101000101100001001", 
    99 => "010110000110111110101000110111011010", 
    100 => "010110010010110001101001000010110001", 
    101 => "010110011110011101101001001110001110", 
    102 => "010110101010000101101001011001110001", 
    103 => "010110110101100110101001100101011010", 
    104 => "010111000001000001101001110001001001", 
    105 => "010111001100010110101001111100111101", 
    106 => "010111010111100101101010001000111000", 
    107 => "010111100010101110101010010100111000", 
    108 => "010111101101110000101010100000111110", 
    109 => "010111111000101101101010101101001001", 
    110 => "011000000011100011101010111001011010", 
    111 => "011000001110010011101011000101110001", 
    112 => "011000011000111101101011010010001101", 
    113 => "011000100011100000101011011110101110", 
    114 => "011000101101111101101011101011010101", 
    115 => "011000111000010011101011111000000001", 
    116 => "011001000010100011101100000100110011", 
    117 => "011001001100101100101100010001101010", 
    118 => "011001010110101111101100011110100101", 
    119 => "011001100000101011101100101011100110", 
    120 => "011001101010100000101100111000101100", 
    121 => "011001110100001111101101000101110111", 
    122 => "011001111101110111101101010011000111", 
    123 => "011010000111011000101101100000011100", 
    124 => "011010010000110010101101101101110110", 
    125 => "011010011010000101101101111011010100", 
    126 => "011010100011010010101110001000110111", 
    127 => "011010101100010111101110010110011111", 
    128 => "011010110101010110101110100100001100", 
    129 => "011010111110001101101110110001111101", 
    130 => "011011000110111110101110111111110011", 
    131 => "011011001111100111101111001101101101", 
    132 => "011011011000001001101111011011101011", 
    133 => "011011100000100100101111101001101110", 
    134 => "011011101000111000101111110111110101", 
    135 => "011011110001000100110000000110000000", 
    136 => "011011111001001010110000010100010000", 
    137 => "011100000001001000110000100010100011", 
    138 => "011100001000111110110000110000111011", 
    139 => "011100010000101110110000111111010110", 
    140 => "011100011000010101110001001101110110", 
    141 => "011100011111110110110001011100011001", 
    142 => "011100100111001111110001101011000000", 
    143 => "011100101110100000110001111001101011", 
    144 => "011100110101101010110010001000011010", 
    145 => "011100111100101101110010010111001100", 
    146 => "011101000011101000110010100110000010", 
    147 => "011101001010011011110010110100111011", 
    148 => "011101010001000110110011000011111000", 
    149 => "011101010111101010110011010010111000", 
    150 => "011101011110000111110011100001111100", 
    151 => "011101100100011011110011110001000011", 
    152 => "011101101010101000110100000000001101", 
    153 => "011101110000101101110100001111011010", 
    154 => "011101110110101010110100011110101010", 
    155 => "011101111100011111110100101101111101", 
    156 => "011110000010001101110100111101010011", 
    157 => "011110000111110011110101001100101100", 
    158 => "011110001101010000110101011100001000", 
    159 => "011110010010100110110101101011100111", 
    160 => "011110010111110100110101111011001000", 
    161 => "011110011100111010110110001010101100", 
    162 => "011110100001111000110110011010010011", 
    163 => "011110100110101110110110101001111100", 
    164 => "011110101011011100110110111001101000", 
    165 => "011110110000000010110111001001010101", 
    166 => "011110110100100000110111011001000110", 
    167 => "011110111000110110110111101000111000", 
    168 => "011110111101000100110111111000101101", 
    169 => "011111000001001010111000001000100100", 
    170 => "011111000101000111111000011000011101", 
    171 => "011111001000111101111000101000010111", 
    172 => "011111001100101010111000111000010100", 
    173 => "011111010000001111111001001000010011", 
    174 => "011111010011101100111001011000010011", 
    175 => "011111010111000001111001101000010101", 
    176 => "011111011010001101111001111000011001", 
    177 => "011111011101010001111010001000011111", 
    178 => "011111100000001101111010011000100110", 
    179 => "011111100011000001111010101000101110", 
    180 => "011111100101101101111010111000111000", 
    181 => "011111101000010000111011001001000011", 
    182 => "011111101010101011111011011001010000", 
    183 => "011111101100111110111011101001011101", 
    184 => "011111101111001000111011111001101100", 
    185 => "011111110001001010111100001001111100", 
    186 => "011111110011000100111100011010001101", 
    187 => "011111110100110101111100101010011111", 
    188 => "011111110110011110111100111010110010", 
    189 => "011111110111111111111101001011000101", 
    190 => "011111111001011000111101011011011001", 
    191 => "011111111010101000111101101011101110", 
    192 => "011111111011101111111101111100000100", 
    193 => "011111111100101111111110001100011010", 
    194 => "011111111101100110111110011100110000", 
    195 => "011111111110010100111110101101000111", 
    196 => "011111111110111010111110111101011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity get_trig_vals_lutdEe is
    generic (
        DataWidth : INTEGER := 36;
        AddressRange : INTEGER := 197;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of get_trig_vals_lutdEe is
    component get_trig_vals_lutdEe_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    get_trig_vals_lutdEe_rom_U :  component get_trig_vals_lutdEe_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


