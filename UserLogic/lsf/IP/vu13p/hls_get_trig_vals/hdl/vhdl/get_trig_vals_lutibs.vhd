-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity get_trig_vals_lutibs_rom is 
    generic(
             DWIDTH     : integer := 36; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 197
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of get_trig_vals_lutibs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "111111001111001101100000000000100101", 
    1 => "111111011111100101100000000000010000", 
    2 => "111111101111111100100000000000000100", 
    3 => "000000000000010100100000000000000000", 
    4 => "000000010000101100100000000000000100", 
    5 => "000000100001000100100000000000010001", 
    6 => "000000110001011100100000000000100110", 
    7 => "000001000001110100100000000001000011", 
    8 => "000001010010001011100000000001101001", 
    9 => "000001100010100010100000000010010111", 
    10 => "000001110010111001100000000011001110", 
    11 => "000010000011001111100000000100001101", 
    12 => "000010010011100100100000000101010100", 
    13 => "000010100011111001100000000110100100", 
    14 => "000010110100001101100000000111111100", 
    15 => "000011000100100001100000001001011100", 
    16 => "000011010100110100100000001011000101", 
    17 => "000011100101000110100000001100110110", 
    18 => "000011110101010111100000001110110000", 
    19 => "000100000101100111100000010000110001", 
    20 => "000100010101110101100000010010111011", 
    21 => "000100100110000011100000010101001110", 
    22 => "000100110110010000100000010111101000", 
    23 => "000101000110011011100000011010001011", 
    24 => "000101010110100101100000011100110110", 
    25 => "000101100110101101100000011111101010", 
    26 => "000101110110110100100000100010100101", 
    27 => "000110000110111010100000100101101001", 
    28 => "000110010110111110100000101000110110", 
    29 => "000110100111000000100000101100001010", 
    30 => "000110110111000001100000101111100110", 
    31 => "000111000110111111100000110011001011", 
    32 => "000111010110111100100000110110111000", 
    33 => "000111100110110111100000111010101101", 
    34 => "000111110110110000100000111110101010", 
    35 => "001000000110100111100001000010110000", 
    36 => "001000010110011100100001000110111101", 
    37 => "001000100110001110100001001011010011", 
    38 => "001000110101111111100001001111110000", 
    39 => "001001000101101101100001010100010110", 
    40 => "001001010101011000100001011001000100", 
    41 => "001001100101000010100001011101111001", 
    42 => "001001110100101000100001100010110111", 
    43 => "001010000100001100100001100111111101", 
    44 => "001010010011101110100001101101001010", 
    45 => "001010100011001101100001110010100000", 
    46 => "001010110010101001100001110111111101", 
    47 => "001011000010000010100001111101100011", 
    48 => "001011010001011000100010000011010000", 
    49 => "001011100000101011100010001001000101", 
    50 => "001011101111111100100010001111000010", 
    51 => "001011111111001001100010010101000110", 
    52 => "001100001110010011100010011011010011", 
    53 => "001100011101011010100010100001100111", 
    54 => "001100101100011110100010101000000011", 
    55 => "001100111011011110100010101110100111", 
    56 => "001101001010011011100010110101010010", 
    57 => "001101011001010101100010111100000101", 
    58 => "001101101000001010100011000010111111", 
    59 => "001101110110111101100011001010000001", 
    60 => "001110000101101100100011010001001011", 
    61 => "001110010100010111100011011000011100", 
    62 => "001110100010111110100011011111110101", 
    63 => "001110110001100010100011100111010101", 
    64 => "001111000000000001100011101110111101", 
    65 => "001111001110011101100011110110101100", 
    66 => "001111011100110101100011111110100010", 
    67 => "001111101011001001100100000110100000", 
    68 => "001111111001011000100100001110100100", 
    69 => "010000000111100100100100010110110001", 
    70 => "010000010101101011100100011111000100", 
    71 => "010000100011101110100100100111011111", 
    72 => "010000110001101100100100110000000001", 
    73 => "010000111111100111100100111000101010", 
    74 => "010001001101011100100101000001011010", 
    75 => "010001011011001110100101001010010001", 
    76 => "010001101000111010100101010011001111", 
    77 => "010001110110100011100101011100010100", 
    78 => "010010000100000110100101100101100001", 
    79 => "010010010001100101100101101110110100", 
    80 => "010010011110111110100101111000001110", 
    81 => "010010101100010100100110000001101110", 
    82 => "010010111001100100100110001011010110", 
    83 => "010011000110101111100110010101000100", 
    84 => "010011010011110101100110011110111001", 
    85 => "010011100000110110100110101000110101", 
    86 => "010011101101110010100110110010110111", 
    87 => "010011111010101001100110111101000000", 
    88 => "010100000111011011100111000111010000", 
    89 => "010100010100000111100111010001100110", 
    90 => "010100100000101110100111011100000010", 
    91 => "010100101101010000100111100110100101", 
    92 => "010100111001101100100111110001001111", 
    93 => "010101000110000011100111111011111110", 
    94 => "010101010010010100101000000110110100", 
    95 => "010101011110100000101000010001110001", 
    96 => "010101101010100110101000011100110011", 
    97 => "010101110110100111101000100111111100", 
    98 => "010110000010100001101000110011001011", 
    99 => "010110001110010110101000111110011111", 
    100 => "010110011010000101101001001001111010", 
    101 => "010110100101101111101001010101011011", 
    102 => "010110110001010010101001100001000010", 
    103 => "010110111100101111101001101100101110", 
    104 => "010111001000000111101001111000100001", 
    105 => "010111010011011000101010000100011001", 
    106 => "010111011110100011101010010000010111", 
    107 => "010111101001101000101010011100011011", 
    108 => "010111110100100111101010101000100100", 
    109 => "010111111111100000101010110100110011", 
    110 => "011000001010010010101011000001001000", 
    111 => "011000010100111110101011001101100010", 
    112 => "011000011111100100101011011010000001", 
    113 => "011000101010000011101011100110100110", 
    114 => "011000110100011011101011110011010000", 
    115 => "011000111110101110101100000000000000", 
    116 => "011001001000111001101100001100110100", 
    117 => "011001010010111111101100011001101110", 
    118 => "011001011100111101101100100110101101", 
    119 => "011001100110110101101100110011110001", 
    120 => "011001110000100110101101000000111011", 
    121 => "011001111010010001101101001110001001", 
    122 => "011010000011110100101101011011011100", 
    123 => "011010001101010001101101101000110100", 
    124 => "011010010110100111101101110110010000", 
    125 => "011010011111110110101110000011110010", 
    126 => "011010101000111110101110010001011000", 
    127 => "011010110001111111101110011111000011", 
    128 => "011010111010111001101110101100110010", 
    129 => "011011000011101100101110111010100110", 
    130 => "011011001100011000101111001000011110", 
    131 => "011011010100111101101111010110011011", 
    132 => "011011011101011011101111100100011100", 
    133 => "011011100101110001101111110010100010", 
    134 => "011011101110000000110000000000101011", 
    135 => "011011110110001001110000001110111001", 
    136 => "011011111110001001110000011101001011", 
    137 => "011100000110000011110000101011100001", 
    138 => "011100001101110101110000111001111011", 
    139 => "011100010101011111110001001000011001", 
    140 => "011100011101000011110001010110111011", 
    141 => "011100100100011110110001100101100001", 
    142 => "011100101011110011110001110100001011", 
    143 => "011100110010111111110010000010111000", 
    144 => "011100111010000101110010010001101001", 
    145 => "011101000001000010110010100000011101", 
    146 => "011101000111111000110010101111010101", 
    147 => "011101001110100111110010111110010001", 
    148 => "011101010101001110110011001101010000", 
    149 => "011101011011101101110011011100010010", 
    150 => "011101100010000100110011101011011000", 
    151 => "011101101000010100110011111010100001", 
    152 => "011101101110011100110100001001101100", 
    153 => "011101110100011100110100011000111100", 
    154 => "011101111010010100110100101000001110", 
    155 => "011110000000000101110100110111100011", 
    156 => "011110000101101101110101000110111011", 
    157 => "011110001011001110110101010110010110", 
    158 => "011110010000100111110101100101110011", 
    159 => "011110010101111000110101110101010100", 
    160 => "011110011011000001110110000100110111", 
    161 => "011110100000000010110110010100011100", 
    162 => "011110100100111011110110100100000100", 
    163 => "011110101001101100110110110011101111", 
    164 => "011110101110010101110111000011011100", 
    165 => "011110110010110110110111010011001011", 
    166 => "011110110111001111110111100010111101", 
    167 => "011110111011100000110111110010110001", 
    168 => "011110111111101001111000000010100111", 
    169 => "011111000011101001111000010010011111", 
    170 => "011111000111100010111000100010011001", 
    171 => "011111001011010010111000110010010101", 
    172 => "011111001110111010111001000010010011", 
    173 => "011111010010011010111001010010010011", 
    174 => "011111010101110010111001100010010100", 
    175 => "011111011001000001111001110010011000", 
    176 => "011111011100001001111010000010011101", 
    177 => "011111011111001000111010010010100011", 
    178 => "011111100001111111111010100010101011", 
    179 => "011111100100101101111010110010110100", 
    180 => "011111100111010100111011000010111111", 
    181 => "011111101001110010111011010011001011", 
    182 => "011111101100001000111011100011011000", 
    183 => "011111101110010101111011110011100111", 
    184 => "011111110000011010111100000011110110", 
    185 => "011111110010010111111100010100000111", 
    186 => "011111110100001100111100100100011000", 
    187 => "011111110101111000111100110100101010", 
    188 => "011111110111011100111101000100111110", 
    189 => "011111111000110111111101010101010010", 
    190 => "011111111010001011111101100101100110", 
    191 => "011111111011010101111101110101111100", 
    192 => "011111111100011000111110000110010010", 
    193 => "011111111101010010111110010110101000", 
    194 => "011111111110000100111110100110111111", 
    195 => "011111111110101101111110110111010110", 
    196 => "000000000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity get_trig_vals_lutibs is
    generic (
        DataWidth : INTEGER := 36;
        AddressRange : INTEGER := 197;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of get_trig_vals_lutibs is
    component get_trig_vals_lutibs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    get_trig_vals_lutibs_rom_U :  component get_trig_vals_lutibs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


