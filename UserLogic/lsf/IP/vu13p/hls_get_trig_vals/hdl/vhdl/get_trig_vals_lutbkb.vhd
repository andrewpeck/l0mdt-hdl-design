-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity get_trig_vals_lutbkb_rom is 
    generic(
             DWIDTH     : integer := 36; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 197
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of get_trig_vals_lutbkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "111111000000111000100000000000111110", 
    1 => "111111010001010000100000000000100010", 
    2 => "111111100001100111100000000000001110", 
    3 => "111111110001111111100000000000000011", 
    4 => "000000000010010111100000000000000000", 
    5 => "000000010010101111100000000000000101", 
    6 => "000000100011000111100000000000010011", 
    7 => "000000110011011111100000000000101001", 
    8 => "000001000011110111100000000001000111", 
    9 => "000001010100001110100000000001101110", 
    10 => "000001100100100101100000000010011110", 
    11 => "000001110100111011100000000011010101", 
    12 => "000010000101010001100000000100010101", 
    13 => "000010010101100111100000000101011110", 
    14 => "000010100101111100100000000110101110", 
    15 => "000010110110010000100000001000001000", 
    16 => "000011000110100011100000001001101001", 
    17 => "000011010110110110100000001011010011", 
    18 => "000011100111001000100000001101000101", 
    19 => "000011110111011001100000001110111111", 
    20 => "000100000111101000100000010001000010", 
    21 => "000100010111110111100000010011001101", 
    22 => "000100101000000101100000010101100000", 
    23 => "000100111000010001100000010111111100", 
    24 => "000101001000011100100000011010100000", 
    25 => "000101011000100110100000011101001100", 
    26 => "000101101000101110100000100000000001", 
    27 => "000101111000110101100000100010111101", 
    28 => "000110001000111011100000100110000010", 
    29 => "000110011000111110100000101001010000", 
    30 => "000110101001000000100000101100100101", 
    31 => "000110111001000001100000110000000011", 
    32 => "000111001000111111100000110011101000", 
    33 => "000111011000111100100000110111010110", 
    34 => "000111101000110110100000111011001100", 
    35 => "000111111000101111100000111111001011", 
    36 => "001000001000100110100001000011010001", 
    37 => "001000011000011010100001000111011111", 
    38 => "001000101000001101100001001011110110", 
    39 => "001000110111111101100001010000010101", 
    40 => "001001000111101010100001010100111011", 
    41 => "001001010111010110100001011001101010", 
    42 => "001001100110111111100001011110100001", 
    43 => "001001110110100101100001100011011111", 
    44 => "001010000110001001100001101000100110", 
    45 => "001010010101101010100001101101110101", 
    46 => "001010100101001000100001110011001011", 
    47 => "001010110100100100100001111000101010", 
    48 => "001011000011111101100001111110010000", 
    49 => "001011010011010011100010000011111110", 
    50 => "001011100010100110100010001001110100", 
    51 => "001011110001110110100010001111110010", 
    52 => "001100000001000010100010010101111000", 
    53 => "001100010000001100100010011100000101", 
    54 => "001100011111010011100010100010011010", 
    55 => "001100101110010110100010101000110111", 
    56 => "001100111101010110100010101111011100", 
    57 => "001101001100010010100010110110001000", 
    58 => "001101011011001011100010111100111100", 
    59 => "001101101010000001100011000011110111", 
    60 => "001101111000110011100011001010111010", 
    61 => "001110000111100001100011010010000101", 
    62 => "001110010110001100100011011001010111", 
    63 => "001110100100110011100011100000110000", 
    64 => "001110110011010110100011101000010010", 
    65 => "001111000001110101100011101111111010", 
    66 => "001111010000010000100011110111101010", 
    67 => "001111011110101000100011111111100001", 
    68 => "001111101100111011100100000111100000", 
    69 => "001111111011001010100100001111100110", 
    70 => "010000001001010101100100010111110011", 
    71 => "010000010111011100100100100000000111", 
    72 => "010000100101011110100100101000100011", 
    73 => "010000110011011100100100110001000110", 
    74 => "010001000001010110100100111001101111", 
    75 => "010001001111001011100101000010100000", 
    76 => "010001011100111100100101001011011000", 
    77 => "010001101010101000100101010100010111", 
    78 => "010001111000001111100101011101011110", 
    79 => "010010000101110010100101100110101011", 
    80 => "010010010011010000100101101111111110", 
    81 => "010010100000101001100101111001011001", 
    82 => "010010101101111110100110000010111011", 
    83 => "010010111011001101100110001100100011", 
    84 => "010011001000011000100110010110010010", 
    85 => "010011010101011110100110100000001000", 
    86 => "010011100010011110100110101010000101", 
    87 => "010011101111011001100110110100001000", 
    88 => "010011111100010000100110111110010010", 
    89 => "010100001001000001100111001000100010", 
    90 => "010100010101101100100111010010111001", 
    91 => "010100100010010011100111011101010110", 
    92 => "010100101110110100100111100111111010", 
    93 => "010100111011001111100111110010100100", 
    94 => "010101000111100110100111111101010101", 
    95 => "010101010011110110101000001000001100", 
    96 => "010101100000000001101000010011001001", 
    97 => "010101101100000111101000011110001100", 
    98 => "010101111000000110101000101001010101", 
    99 => "010110000100000000101000110100100101", 
    100 => "010110001111110100101000111111111010", 
    101 => "010110011011100011101001001011010110", 
    102 => "010110100111001011101001010110111000", 
    103 => "010110110010101110101001100010011111", 
    104 => "010110111110001010101001101110001100", 
    105 => "010111001001100001101001111010000000", 
    106 => "010111010100110010101010000101111001", 
    107 => "010111011111111100101010010001110111", 
    108 => "010111101011000000101010011101111100", 
    109 => "010111110101111110101010101010000110", 
    110 => "011000000000110110101010110110010110", 
    111 => "011000001011101000101011000010101011", 
    112 => "011000010110010011101011001111000101", 
    113 => "011000100000111000101011011011100110", 
    114 => "011000101011010110101011101000001011", 
    115 => "011000110101101110101011110100110110", 
    116 => "011001000000000000101100000001100110", 
    117 => "011001001010001010101100001110011011", 
    118 => "011001010100001111101100011011010110", 
    119 => "011001011110001100101100101000010110", 
    120 => "011001101000000011101100110101011010", 
    121 => "011001110001110100101101000010100100", 
    122 => "011001111011011101101101001111110011", 
    123 => "011010000101000000101101011101000110", 
    124 => "011010001110011100101101101010011111", 
    125 => "011010010111110001101101110111111100", 
    126 => "011010100000111111101110000101011110", 
    127 => "011010101010000110101110010011000101", 
    128 => "011010110011000111101110100000110000", 
    129 => "011010111100000000101110101110100000", 
    130 => "011011000100110010101110111100010101", 
    131 => "011011001101011101101111001010001110", 
    132 => "011011010110000001101111011000001011", 
    133 => "011011011110011110101111100110001101", 
    134 => "011011100110110100101111110100010011", 
    135 => "011011101111000010110000000010011101", 
    136 => "011011110111001001110000010000101011", 
    137 => "011011111111001001110000011110111110", 
    138 => "011100000111000001110000101101010100", 
    139 => "011100001110110010110000111011101111", 
    140 => "011100010110011100110001001010001101", 
    141 => "011100011101111110110001011000110000", 
    142 => "011100100101011001110001100111010110", 
    143 => "011100101100101101110001110110000000", 
    144 => "011100110011111001110010000100101110", 
    145 => "011100111010111101110010010011011111", 
    146 => "011101000001111010110010100010010100", 
    147 => "011101001000101111110010110001001101", 
    148 => "011101001111011100110011000000001001", 
    149 => "011101010110000010110011001111001000", 
    150 => "011101011100100000110011011110001011", 
    151 => "011101100010110111110011101101010001", 
    152 => "011101101001000101110011111100011010", 
    153 => "011101101111001100110100001011100110", 
    154 => "011101110101001011110100011010110110", 
    155 => "011101111011000011110100101010001000", 
    156 => "011110000000110010110100111001011110", 
    157 => "011110000110011010110101001000110110", 
    158 => "011110001011111010110101011000010001", 
    159 => "011110010001010010110101100111101111", 
    160 => "011110010110100010110101110111010000", 
    161 => "011110011011101010110110000110110011", 
    162 => "011110100000101010110110010110011001", 
    163 => "011110100101100010110110100110000001", 
    164 => "011110101010010010110110110101101100", 
    165 => "011110101110111010110111000101011010", 
    166 => "011110110011011010110111010101001001", 
    167 => "011110110111110010110111100100111011", 
    168 => "011110111100000001110111110100101111", 
    169 => "011111000000001001111000000100100110", 
    170 => "011111000100001001111000010100011110", 
    171 => "011111001000000000111000100100011000", 
    172 => "011111001011101111111000110100010101", 
    173 => "011111001111010111111001000100010011", 
    174 => "011111010010110101111001010100010011", 
    175 => "011111010110001100111001100100010101", 
    176 => "011111011001011011111001110100011000", 
    177 => "011111011100100001111010000100011101", 
    178 => "011111011111011111111010010100100100", 
    179 => "011111100010010101111010100100101100", 
    180 => "011111100101000011111010110100110101", 
    181 => "011111100111101000111011000101000000", 
    182 => "011111101010000101111011010101001100", 
    183 => "011111101100011010111011100101011010", 
    184 => "011111101110100110111011110101101000", 
    185 => "011111110000101010111100000101111000", 
    186 => "011111110010100110111100010110001001", 
    187 => "011111110100011010111100100110011010", 
    188 => "011111110110000101111100110110101101", 
    189 => "011111110111101000111101000111000000", 
    190 => "011111111001000010111101010111010100", 
    191 => "011111111010010100111101100111101001", 
    192 => "011111111011011110111101110111111110", 
    193 => "011111111100100000111110001000010100", 
    194 => "011111111101011001111110011000101011", 
    195 => "011111111110001001111110101001000010", 
    196 => "011111111110110010111110111001011001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity get_trig_vals_lutbkb is
    generic (
        DataWidth : INTEGER := 36;
        AddressRange : INTEGER := 197;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of get_trig_vals_lutbkb is
    component get_trig_vals_lutbkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    get_trig_vals_lutbkb_rom_U :  component get_trig_vals_lutbkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


