-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity get_trig_vals_lutfYi_rom is 
    generic(
             DWIDTH     : integer := 36; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 197
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of get_trig_vals_lutfYi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "111111001001000100100000000000101111", 
    1 => "111111011001011100100000000000010111", 
    2 => "111111101001110011100000000000000111", 
    3 => "111111111010001011100000000000000000", 
    4 => "000000001010100011100000000000000001", 
    5 => "000000011010111011100000000000001011", 
    6 => "000000101011010011100000000000011101", 
    7 => "000000111011101011100000000000110111", 
    8 => "000001001100000010100000000001011010", 
    9 => "000001011100011001100000000010000101", 
    10 => "000001101100110000100000000010111000", 
    11 => "000001111101000110100000000011110100", 
    12 => "000010001101011100100000000100111000", 
    13 => "000010011101110001100000000110000101", 
    14 => "000010101110000110100000000111011010", 
    15 => "000010111110011010100000001000110111", 
    16 => "000011001110101101100000001010011101", 
    17 => "000011011110111111100000001100001011", 
    18 => "000011101111010000100000001110000001", 
    19 => "000011111111100001100000010000000000", 
    20 => "000100001111110000100000010010000111", 
    21 => "000100011111111110100000010100010110", 
    22 => "000100110000001011100000010110101101", 
    23 => "000101000000010111100000011001001101", 
    24 => "000101010000100001100000011011110101", 
    25 => "000101100000101010100000011110100101", 
    26 => "000101110000110010100000100001011110", 
    27 => "000110000000111000100000100100011111", 
    28 => "000110010000111101100000100111101000", 
    29 => "000110100000111111100000101010111001", 
    30 => "000110110001000001100000101110010011", 
    31 => "000111000001000000100000110001110100", 
    32 => "000111010000111110100000110101011110", 
    33 => "000111100000111001100000111001010000", 
    34 => "000111110000110011100000111101001010", 
    35 => "001000000000101011100001000001001101", 
    36 => "001000010000100000100001000101010111", 
    37 => "001000100000010100100001001001101010", 
    38 => "001000110000000101100001001110000100", 
    39 => "001000111111110100100001010010100111", 
    40 => "001001001111100000100001010111010010", 
    41 => "001001011111001010100001011100000100", 
    42 => "001001101110110010100001100000111111", 
    43 => "001001111110010111100001100110000010", 
    44 => "001010001101111010100001101011001100", 
    45 => "001010011101011001100001110000011111", 
    46 => "001010101100110110100001110101111001", 
    47 => "001010111100010001100001111011011100", 
    48 => "001011001011101000100010000001000110", 
    49 => "001011011010111101100010000110111000", 
    50 => "001011101010001110100010001100110010", 
    51 => "001011111001011100100010010010110100", 
    52 => "001100001000101000100010011000111101", 
    53 => "001100010111110000100010011111001111", 
    54 => "001100100110110101100010100101101000", 
    55 => "001100110101110110100010101100001000", 
    56 => "001101000100110101100010110010110001", 
    57 => "001101010011101111100010111001100001", 
    58 => "001101100010100111100011000000011000", 
    59 => "001101110001011010100011000111011000", 
    60 => "001110000000001011100011001110011111", 
    61 => "001110001110110111100011010101101101", 
    62 => "001110011101100000100011011101000011", 
    63 => "001110101100000101100011100100100000", 
    64 => "001110111010100110100011101100000101", 
    65 => "001111001001000011100011110011110001", 
    66 => "001111010111011100100011111011100101", 
    67 => "001111100101110010100100000011100000", 
    68 => "001111110100000011100100001011100010", 
    69 => "010000000010010000100100010011101011", 
    70 => "010000010000011001100100011011111100", 
    71 => "010000011110011101100100100100010100", 
    72 => "010000101100011110100100101100110011", 
    73 => "010000111010011001100100110101011010", 
    74 => "010001001000010001100100111110000111", 
    75 => "010001010110000100100101000110111100", 
    76 => "010001100011110010100101001111110111", 
    77 => "010001110001011100100101011000111010", 
    78 => "010001111111000001100101100010000011", 
    79 => "010010001100100010100101101011010100", 
    80 => "010010011001111101100101110100101011", 
    81 => "010010100111010100100101111110001001", 
    82 => "010010110100100110100110000111101110", 
    83 => "010011000001110011100110010001011010", 
    84 => "010011001110111011100110011011001101", 
    85 => "010011011011111110100110100101000110", 
    86 => "010011101000111100100110101111000110", 
    87 => "010011110101110101100110111001001100", 
    88 => "010100000010101001100111000011011001", 
    89 => "010100001111010111100111001101101101", 
    90 => "010100011100000000100111011000000111", 
    91 => "010100101000100100100111100010101000", 
    92 => "010100110101000010100111101101001110", 
    93 => "010101000001011011100111110111111100", 
    94 => "010101001101101111101000000010101111", 
    95 => "010101011001111100101000001101101001", 
    96 => "010101100110000101101000011000101001", 
    97 => "010101110010000111101000100011110000", 
    98 => "010101111110000100101000101110111100", 
    99 => "010110001001111011101000111010001111", 
    100 => "010110010101101100101001000101100111", 
    101 => "010110100001011000101001010001000110", 
    102 => "010110101100111101101001011100101011", 
    103 => "010110111000011101101001101000010101", 
    104 => "010111000011110111101001110100000101", 
    105 => "010111001111001010101001111111111011", 
    106 => "010111011010011000101010001011110111", 
    107 => "010111100101011111101010010111111001", 
    108 => "010111110000100000101010100100000000", 
    109 => "010111111011011011101010110000001101", 
    110 => "011000000110010000101010111100011111", 
    111 => "011000010000111110101011001000110111", 
    112 => "011000011011100110101011010101010101", 
    113 => "011000100110001000101011100001111000", 
    114 => "011000110000100011101011101110100000", 
    115 => "011000111010111000101011111011001101", 
    116 => "011001000101000110101100001000000000", 
    117 => "011001001111001101101100010100111000", 
    118 => "011001011001001110101100100001110101", 
    119 => "011001100011001001101100101110110111", 
    120 => "011001101100111100101100111011111111", 
    121 => "011001110110101001101101001001001011", 
    122 => "011010000000010000101101010110011100", 
    123 => "011010001001101111101101100011110010", 
    124 => "011010010011000111101101110001001101", 
    125 => "011010011100011001101101111110101101", 
    126 => "011010100101100100101110001100010001", 
    127 => "011010101110100111101110011001111010", 
    128 => "011010110111100100101110100111101000", 
    129 => "011011000000011010101110110101011010", 
    130 => "011011001001001001101111000011010001", 
    131 => "011011010001110000101111010001001100", 
    132 => "011011011010010000101111011111001011", 
    133 => "011011100010101010101111101101001111", 
    134 => "011011101010111100101111111011010111", 
    135 => "011011110011000110110000001001100100", 
    136 => "011011111011001010110000010111110100", 
    137 => "011100000011000110110000100110001001", 
    138 => "011100001010111011110000110100100001", 
    139 => "011100010010101000110001000010111110", 
    140 => "011100011010001110110001010001011110", 
    141 => "011100100001101101110001100000000011", 
    142 => "011100101001000100110001101110101011", 
    143 => "011100110000010100110001111101010111", 
    144 => "011100110111011100110010001100000110", 
    145 => "011100111110011100110010011010111001", 
    146 => "011101000101010101110010101001110000", 
    147 => "011101001100000110110010111000101010", 
    148 => "011101010010110000110011000111101000", 
    149 => "011101011001010010110011010110101001", 
    150 => "011101011111101100110011100101101101", 
    151 => "011101100101111111110011110100110101", 
    152 => "011101101100001010110100000100000000", 
    153 => "011101110010001101110100010011001110", 
    154 => "011101111000001000110100100010011110", 
    155 => "011101111101111100110100110001110010", 
    156 => "011110000011100111110101000001001001", 
    157 => "011110001001001011110101010000100011", 
    158 => "011110001110100111110101100000000000", 
    159 => "011110010011111011110101101111011111", 
    160 => "011110011001000111110101111111000001", 
    161 => "011110011110001011110110001110100110", 
    162 => "011110100011000111110110011110001101", 
    163 => "011110100111111011110110101101110111", 
    164 => "011110101100100111110110111101100011", 
    165 => "011110110001001011110111001101010001", 
    166 => "011110110101100111110111011101000010", 
    167 => "011110111001111010110111101100110101", 
    168 => "011110111110000110110111111100101010", 
    169 => "011111000010001010111000001100100010", 
    170 => "011111000110000101111000011100011011", 
    171 => "011111001001111001111000101100010110", 
    172 => "011111001101100100111000111100010100", 
    173 => "011111010001000111111001001100010011", 
    174 => "011111010100100010111001011100010100", 
    175 => "011111010111110101111001101100010110", 
    176 => "011111011010111111111001111100011011", 
    177 => "011111011110000001111010001100100000", 
    178 => "011111100000111011111010011100101000", 
    179 => "011111100011101101111010101100110001", 
    180 => "011111100110010110111010111100111011", 
    181 => "011111101000111000111011001101000110", 
    182 => "011111101011010000111011011101010011", 
    183 => "011111101101100001111011101101100001", 
    184 => "011111101111101001111011111101110000", 
    185 => "011111110001101001111100001110000000", 
    186 => "011111110011100001111100011110010001", 
    187 => "011111110101010000111100101110100011", 
    188 => "011111110110110111111100111110110110", 
    189 => "011111111000010110111101001111001010", 
    190 => "011111111001101100111101011111011111", 
    191 => "011111111010111010111101101111110100", 
    192 => "011111111100000000111110000000001001", 
    193 => "011111111100111101111110010000100000", 
    194 => "011111111101110010111110100000110110", 
    195 => "011111111110011110111110110001001101", 
    196 => "000000000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity get_trig_vals_lutfYi is
    generic (
        DataWidth : INTEGER := 36;
        AddressRange : INTEGER := 197;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of get_trig_vals_lutfYi is
    component get_trig_vals_lutfYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    get_trig_vals_lutfYi_rom_U :  component get_trig_vals_lutfYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


