-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity get_trig_vals_luteOg_rom is 
    generic(
             DWIDTH     : integer := 36; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 197
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of get_trig_vals_luteOg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "111111000111000001100000000000110010", 
    1 => "111111010111011001100000000000011001", 
    2 => "111111100111110000100000000000001001", 
    3 => "111111111000001000100000000000000000", 
    4 => "000000001000100000100000000000000001", 
    5 => "000000011000111000100000000000001001", 
    6 => "000000101001010000100000000000011010", 
    7 => "000000111001101000100000000000110011", 
    8 => "000001001001111111100000000001010101", 
    9 => "000001011010010111100000000001111111", 
    10 => "000001101010101101100000000010110010", 
    11 => "000001111011000100100000000011101100", 
    12 => "000010001011011010100000000100110000", 
    13 => "000010011011101111100000000101111011", 
    14 => "000010101100000011100000000111001111", 
    15 => "000010111100010111100000001000101011", 
    16 => "000011001100101011100000001010010000", 
    17 => "000011011100111101100000001011111101", 
    18 => "000011101101001110100000001101110010", 
    19 => "000011111101011111100000001111101111", 
    20 => "000100001101101110100000010001110101", 
    21 => "000100011101111100100000010100000011", 
    22 => "000100101110001010100000010110011010", 
    23 => "000100111110010101100000011000111001", 
    24 => "000101001110100000100000011011100000", 
    25 => "000101011110101001100000011110001111", 
    26 => "000101101110110001100000100001000111", 
    27 => "000101111110110111100000100100000110", 
    28 => "000110001110111100100000100111001110", 
    29 => "000110011110111111100000101010011111", 
    30 => "000110101111000001100000101101110111", 
    31 => "000110111111000000100000110001011000", 
    32 => "000111001110111110100000110101000001", 
    33 => "000111011110111010100000111000110010", 
    34 => "000111101110110100100000111100101011", 
    35 => "000111111110101100100001000000101100", 
    36 => "001000001110100010100001000100110101", 
    37 => "001000011110010101100001001001000111", 
    38 => "001000101110000111100001001101100000", 
    39 => "001000111101110110100001010010000010", 
    40 => "001001001101100011100001010110101100", 
    41 => "001001011101001101100001011011011101", 
    42 => "001001101100110101100001100000010111", 
    43 => "001001111100011011100001100101011001", 
    44 => "001010001011111101100001101010100010", 
    45 => "001010011011011110100001101111110100", 
    46 => "001010101010111011100001110101001110", 
    47 => "001010111010010110100001111010101111", 
    48 => "001011001001101101100010000000011000", 
    49 => "001011011001000010100010000110001001", 
    50 => "001011101000010100100010001100000010", 
    51 => "001011110111100011100010010010000011", 
    52 => "001100000110101110100010011000001100", 
    53 => "001100010101110111100010011110011100", 
    54 => "001100100100111100100010100100110100", 
    55 => "001100110011111110100010101011010100", 
    56 => "001101000010111101100010110001111011", 
    57 => "001101010001111000100010111000101010", 
    58 => "001101100000110000100010111111100001", 
    59 => "001101101111100100100011000110011111", 
    60 => "001101111110010101100011001101100101", 
    61 => "001110001101000010100011010100110011", 
    62 => "001110011011101011100011011100001000", 
    63 => "001110101010010000100011100011100100", 
    64 => "001110111000110010100011101011001000", 
    65 => "001111000111010000100011110010110011", 
    66 => "001111010101101010100011111010100110", 
    67 => "001111100011111111100100000010100000", 
    68 => "001111110010010001100100001010100001", 
    69 => "010000000000011110100100010010101010", 
    70 => "010000001110101000100100011010111010", 
    71 => "010000011100101101100100100011010001", 
    72 => "010000101010101110100100101011101111", 
    73 => "010000111000101010100100110100010100", 
    74 => "010001000110100010100100111101000001", 
    75 => "010001010100010110100101000101110101", 
    76 => "010001100010000101100101001110101111", 
    77 => "010001101111101111100101010111110001", 
    78 => "010001111101010101100101100000111010", 
    79 => "010010001010110110100101101010001001", 
    80 => "010010011000010010100101110011100000", 
    81 => "010010100101101010100101111100111101", 
    82 => "010010110010111100100110000110100001", 
    83 => "010011000000001010100110010000001100", 
    84 => "010011001101010011100110011001111110", 
    85 => "010011011010010110100110100011110110", 
    86 => "010011100111010101100110101101110101", 
    87 => "010011110100001110100110110111111011", 
    88 => "010100000001000011100111000010000111", 
    89 => "010100001101110010100111001100011010", 
    90 => "010100011010011011100111010110110011", 
    91 => "010100100111000000100111100001010011", 
    92 => "010100110011011111100111101011111001", 
    93 => "010100111111111000100111110110100110", 
    94 => "010101001100001100101000000001011001", 
    95 => "010101011000011011101000001100010010", 
    96 => "010101100100100100101000010111010001", 
    97 => "010101110000100111101000100010010111", 
    98 => "010101111100100101101000101101100010", 
    99 => "010110001000011100101000111000110100", 
    100 => "010110010100001111101001000100001100", 
    101 => "010110011111111011101001001111101010", 
    102 => "010110101011100001101001011011001110", 
    103 => "010110110111000001101001100110110111", 
    104 => "010111000010011100101001110010100111", 
    105 => "010111001101110000101001111110011100", 
    106 => "010111011000111110101010001010011000", 
    107 => "010111100100000110101010010110011000", 
    108 => "010111101111001000101010100010011111", 
    109 => "010111111010000100101010101110101011", 
    110 => "011000000100111010101010111010111101", 
    111 => "011000001111101001101011000111010100", 
    112 => "011000011010010010101011010011110001", 
    113 => "011000100100110100101011100000010011", 
    114 => "011000101111010000101011101100111011", 
    115 => "011000111001100101101011111001100111", 
    116 => "011001000011110100101100000110011001", 
    117 => "011001001101111101101100010011010001", 
    118 => "011001010111111111101100100000001101", 
    119 => "011001100001111010101100101101001111", 
    120 => "011001101011101110101100111010010101", 
    121 => "011001110101011100101101000111100001", 
    122 => "011001111111000011101101010100110010", 
    123 => "011010001000100011101101100010000111", 
    124 => "011010010001111101101101101111100001", 
    125 => "011010011011001111101101111101000000", 
    126 => "011010100100011011101110001010100100", 
    127 => "011010101101011111101110011000001101", 
    128 => "011010110110011101101110100101111010", 
    129 => "011010111111010100101110110011101011", 
    130 => "011011001000000011101111000001100010", 
    131 => "011011010000101100101111001111011100", 
    132 => "011011011001001101101111011101011011", 
    133 => "011011100001100111101111101011011110", 
    134 => "011011101001111010101111111001100110", 
    135 => "011011110010000101110000000111110010", 
    136 => "011011111010001010110000010110000010", 
    137 => "011100000010000111110000100100010110", 
    138 => "011100001001111101110000110010101110", 
    139 => "011100010001101011110001000001001010", 
    140 => "011100011001010010110001001111101010", 
    141 => "011100100000110001110001011110001110", 
    142 => "011100101000001001110001101100110101", 
    143 => "011100101111011010110001111011100001", 
    144 => "011100110110100011110010001010010000", 
    145 => "011100111101100100110010011001000011", 
    146 => "011101000100011110110010100111111001", 
    147 => "011101001011010001110010110110110011", 
    148 => "011101010001111011110011000101110000", 
    149 => "011101011000011110110011010100110001", 
    150 => "011101011110111001110011100011110101", 
    151 => "011101100101001101110011110010111100", 
    152 => "011101101011011001110100000010000110", 
    153 => "011101110001011101110100010001010100", 
    154 => "011101110111011001110100100000100100", 
    155 => "011101111101001110110100101111111000", 
    156 => "011110000010111010110100111111001110", 
    157 => "011110001000011111110101001110101000", 
    158 => "011110001101111100110101011110000100", 
    159 => "011110010011010001110101101101100011", 
    160 => "011110011000011110110101111101000101", 
    161 => "011110011101100011110110001100101001", 
    162 => "011110100010100000110110011100010000", 
    163 => "011110100111010101110110101011111001", 
    164 => "011110101100000010110110111011100101", 
    165 => "011110110000100111110111001011010011", 
    166 => "011110110101000100110111011011000100", 
    167 => "011110111001011000110111101010110111", 
    168 => "011110111101100101110111111010101100", 
    169 => "011111000001101010111000001010100011", 
    170 => "011111000101100110111000011010011100", 
    171 => "011111001001011011111000101010010111", 
    172 => "011111001101000111111000111010010100", 
    173 => "011111010000101011111001001010010011", 
    174 => "011111010100000111111001011010010011", 
    175 => "011111010111011011111001101010010110", 
    176 => "011111011010100110111001111010011010", 
    177 => "011111011101101001111010001010100000", 
    178 => "011111100000100100111010011010100111", 
    179 => "011111100011010111111010101010101111", 
    180 => "011111100110000010111010111010111001", 
    181 => "011111101000100100111011001011000101", 
    182 => "011111101010111110111011011011010001", 
    183 => "011111101101001111111011101011011111", 
    184 => "011111101111011001111011111011101110", 
    185 => "011111110001011010111100001011111110", 
    186 => "011111110011010010111100011100001111", 
    187 => "011111110101000011111100101100100001", 
    188 => "011111110110101011111100111100110100", 
    189 => "011111111000001011111101001101001000", 
    190 => "011111111001100010111101011101011100", 
    191 => "011111111010110001111101101101110001", 
    192 => "011111111011111000111101111110000111", 
    193 => "011111111100110110111110001110011101", 
    194 => "011111111101101100111110011110110011", 
    195 => "011111111110011001111110101111001010", 
    196 => "000000000000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity get_trig_vals_luteOg is
    generic (
        DataWidth : INTEGER := 36;
        AddressRange : INTEGER := 197;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of get_trig_vals_luteOg is
    component get_trig_vals_luteOg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    get_trig_vals_luteOg_rom_U :  component get_trig_vals_luteOg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


