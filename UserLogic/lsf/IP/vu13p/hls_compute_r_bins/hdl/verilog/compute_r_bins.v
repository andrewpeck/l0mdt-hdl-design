// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="compute_r_bins,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu13p-flga2577-1-e,HLS_INPUT_CLOCK=3.125000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.846000,HLS_SYN_LAT=5,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=225,HLS_SYN_LUT=149,HLS_VERSION=2019_2_1}" *)

module compute_r_bins (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mdt_r_offset_V_TVALID,
        r_bin_V_TREADY,
        mdt_localx_V,
        mdt_localy_V,
        mdt_r_offset_V_TDATA,
        mdt_r_offset_V_TREADY,
        hw_sin_val_V,
        hw_cos_val_V,
        r_bin_V_TDATA,
        r_bin_V_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   mdt_r_offset_V_TVALID;
input   r_bin_V_TREADY;
input  [14:0] mdt_localx_V;
input  [14:0] mdt_localy_V;
input  [23:0] mdt_r_offset_V_TDATA;
output   mdt_r_offset_V_TREADY;
input  [17:0] hw_sin_val_V;
input  [17:0] hw_cos_val_V;
output  [7:0] r_bin_V_TDATA;
output   r_bin_V_TVALID;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mdt_r_offset_V_TREADY;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    regslice_both_r_bin_V_U_apdone_blk;
reg    ap_block_state6_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
reg  signed [14:0] mdt_localx_V_0_data_reg;
reg    mdt_localx_V_0_vld_reg;
reg    mdt_localx_V_0_ack_out;
reg   [14:0] mdt_localy_V_0_data_reg;
reg    mdt_localy_V_0_vld_reg;
reg    mdt_localy_V_0_ack_out;
reg   [17:0] hw_sin_val_V_0_data_reg;
reg    hw_sin_val_V_0_vld_reg;
reg    hw_sin_val_V_0_ack_out;
reg  signed [17:0] hw_cos_val_V_0_data_reg;
reg    hw_cos_val_V_0_vld_reg;
reg    hw_cos_val_V_0_ack_out;
reg    mdt_r_offset_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
reg    r_bin_V_TDATA_blk_n;
wire   [11:0] trunc_ln1353_fu_93_p1;
reg   [11:0] trunc_ln1353_reg_194;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [11:0] trunc_ln1353_reg_194_pp0_iter1_reg;
reg  signed [17:0] hw_sin_val_V_read_reg_199;
reg  signed [14:0] mdt_localy_V_read_reg_204;
wire  signed [32:0] ret_V_fu_182_p2;
reg  signed [32:0] ret_V_reg_209;
wire   [11:0] trunc_ln1353_1_fu_105_p1;
reg   [11:0] trunc_ln1353_1_reg_214;
wire  signed [32:0] ret_V_1_fu_188_p2;
reg  signed [32:0] ret_V_1_reg_219;
reg   [11:0] zext_ln215_1_cast_reg_224;
wire   [7:0] zext_ln321_fu_153_p1;
reg   [6:0] trunc_ln1503_1_reg_235;
wire   [7:0] zext_ln321_1_fu_178_p1;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage0_01001;
wire   [11:0] tmp_fu_124_p4;
wire   [11:0] add_ln1353_fu_133_p2;
wire   [11:0] add_ln1353_1_fu_138_p2;
wire   [6:0] trunc_ln1_fu_143_p4;
wire   [11:0] add_ln1353_2_fu_158_p2;
wire   [11:0] add_ln1353_3_fu_163_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_mdt_r_offset_V_U_apdone_blk;
wire   [23:0] mdt_r_offset_V_TDATA_int;
wire    mdt_r_offset_V_TVALID_int;
reg    mdt_r_offset_V_TREADY_int;
wire    regslice_both_mdt_r_offset_V_U_ack_in;
reg   [7:0] r_bin_V_TDATA_int;
reg    r_bin_V_TVALID_int;
wire    r_bin_V_TREADY_int;
wire    regslice_both_r_bin_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 mdt_localx_V_0_data_reg = 15'd0;
#0 mdt_localx_V_0_vld_reg = 1'b0;
#0 mdt_localy_V_0_data_reg = 15'd0;
#0 mdt_localy_V_0_vld_reg = 1'b0;
#0 hw_sin_val_V_0_data_reg = 18'd0;
#0 hw_sin_val_V_0_vld_reg = 1'b0;
#0 hw_cos_val_V_0_data_reg = 18'd0;
#0 hw_cos_val_V_0_vld_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

compute_r_bins_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
compute_r_bins_mubkb_U1(
    .din0(hw_cos_val_V_0_data_reg),
    .din1(mdt_localx_V_0_data_reg),
    .dout(ret_V_fu_182_p2)
);

compute_r_bins_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
compute_r_bins_mubkb_U2(
    .din0(hw_sin_val_V_read_reg_199),
    .din1(mdt_localy_V_read_reg_204),
    .dout(ret_V_1_fu_188_p2)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_mdt_r_offset_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(mdt_r_offset_V_TDATA),
    .vld_in(mdt_r_offset_V_TVALID),
    .ack_in(regslice_both_mdt_r_offset_V_U_ack_in),
    .data_out(mdt_r_offset_V_TDATA_int),
    .vld_out(mdt_r_offset_V_TVALID_int),
    .ack_out(mdt_r_offset_V_TREADY_int),
    .apdone_blk(regslice_both_mdt_r_offset_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_r_bin_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(r_bin_V_TDATA_int),
    .vld_in(r_bin_V_TVALID_int),
    .ack_in(r_bin_V_TREADY_int),
    .data_out(r_bin_V_TDATA),
    .vld_out(regslice_both_r_bin_V_U_vld_out),
    .ack_out(r_bin_V_TREADY),
    .apdone_blk(regslice_both_r_bin_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hw_cos_val_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hw_cos_val_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (hw_cos_val_V_0_vld_reg == 1'b1)))) begin
        hw_cos_val_V_0_data_reg <= hw_cos_val_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hw_sin_val_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hw_sin_val_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (hw_sin_val_V_0_vld_reg == 1'b1)))) begin
        hw_sin_val_V_0_data_reg <= hw_sin_val_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        hw_sin_val_V_read_reg_199 <= hw_sin_val_V_0_data_reg;
        mdt_localy_V_read_reg_204 <= mdt_localy_V_0_data_reg;
        ret_V_reg_209 <= ret_V_fu_182_p2;
        trunc_ln1353_1_reg_214 <= trunc_ln1353_1_fu_105_p1;
        trunc_ln1503_1_reg_235 <= {{add_ln1353_3_fu_163_p2[11:5]}};
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (mdt_localx_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (mdt_localx_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (mdt_localx_V_0_vld_reg == 1'b1)))) begin
        mdt_localx_V_0_data_reg <= mdt_localx_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (mdt_localy_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (mdt_localy_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (mdt_localy_V_0_vld_reg == 1'b1)))) begin
        mdt_localy_V_0_data_reg <= mdt_localy_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ret_V_1_reg_219 <= ret_V_1_fu_188_p2;
        trunc_ln1353_reg_194 <= trunc_ln1353_fu_93_p1;
        trunc_ln1353_reg_194_pp0_iter1_reg <= trunc_ln1353_reg_194;
        zext_ln215_1_cast_reg_224 <= {{ret_V_reg_209[27:16]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        hw_cos_val_V_0_ack_out = 1'b1;
    end else begin
        hw_cos_val_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        hw_sin_val_V_0_ack_out = 1'b1;
    end else begin
        hw_sin_val_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mdt_localx_V_0_ack_out = 1'b1;
    end else begin
        mdt_localx_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mdt_localy_V_0_ack_out = 1'b1;
    end else begin
        mdt_localy_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_start == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        mdt_r_offset_V_TDATA_blk_n = mdt_r_offset_V_TVALID_int;
    end else begin
        mdt_r_offset_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((mdt_r_offset_V_TVALID == 1'b1) & (regslice_both_mdt_r_offset_V_U_ack_in == 1'b1))) begin
        mdt_r_offset_V_TREADY = 1'b1;
    end else begin
        mdt_r_offset_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        mdt_r_offset_V_TREADY_int = 1'b1;
    end else begin
        mdt_r_offset_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        r_bin_V_TDATA_blk_n = r_bin_V_TREADY_int;
    end else begin
        r_bin_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_bin_V_TDATA_int = zext_ln321_1_fu_178_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_bin_V_TDATA_int = zext_ln321_fu_153_p1;
    end else begin
        r_bin_V_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        r_bin_V_TVALID_int = 1'b1;
    end else begin
        r_bin_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1353_1_fu_138_p2 = (add_ln1353_fu_133_p2 + zext_ln215_1_cast_reg_224);

assign add_ln1353_2_fu_158_p2 = (trunc_ln1353_1_reg_214 + tmp_fu_124_p4);

assign add_ln1353_3_fu_163_p2 = (add_ln1353_2_fu_158_p2 + zext_ln215_1_cast_reg_224);

assign add_ln1353_fu_133_p2 = (trunc_ln1353_reg_194_pp0_iter1_reg + tmp_fu_124_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (mdt_r_offset_V_TVALID_int == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((r_bin_V_TREADY_int == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (mdt_r_offset_V_TVALID_int == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((r_bin_V_TREADY_int == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (mdt_r_offset_V_TVALID_int == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((regslice_both_r_bin_V_U_apdone_blk == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((mdt_r_offset_V_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((r_bin_V_TREADY_int == 1'b0) | (regslice_both_r_bin_V_U_apdone_blk == 1'b1))) | ((r_bin_V_TREADY_int == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((mdt_r_offset_V_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & ((r_bin_V_TREADY_int == 1'b0) | (regslice_both_r_bin_V_U_apdone_blk == 1'b1))) | ((r_bin_V_TREADY_int == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((mdt_r_offset_V_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (mdt_r_offset_V_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (mdt_r_offset_V_TVALID_int == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage1_iter2 = (regslice_both_r_bin_V_U_apdone_blk == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign r_bin_V_TVALID = regslice_both_r_bin_V_U_vld_out;

assign tmp_fu_124_p4 = {{ret_V_1_reg_219[27:16]}};

assign trunc_ln1353_1_fu_105_p1 = mdt_r_offset_V_TDATA_int[11:0];

assign trunc_ln1353_fu_93_p1 = mdt_r_offset_V_TDATA_int[11:0];

assign trunc_ln1_fu_143_p4 = {{add_ln1353_1_fu_138_p2[11:5]}};

assign zext_ln321_1_fu_178_p1 = trunc_ln1503_1_reg_235;

assign zext_ln321_fu_153_p1 = trunc_ln1_fu_143_p4;

endmodule //compute_r_bins
