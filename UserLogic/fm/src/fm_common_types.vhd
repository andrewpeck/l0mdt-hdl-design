-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.common_ieee_pkg.all;
use shared_lib.l0mdt_constants_pkg.all;
use shared_lib.l0mdt_dataformats_pkg.all;
use shared_lib.common_constants_pkg.all;

package fm_common_types is

   -- Custom types and functions --

   constant mon_dw_max : integer := 256;
   attribute w of mon_dw_max : constant is 32;

   constant stations_n : integer := 3;
   attribute w of stations_n : constant is 32;

   constant threads_n : integer := 3;
   attribute w of threads_n : constant is 32;

   constant primary_sl_n : integer := 3;
   attribute w of primary_sl_n : constant is 32;

   constant FM_INN : integer := 0;
   attribute w of FM_INN : constant is 32;

   constant FM_MID : integer := 1;
   attribute w of FM_MID : constant is 32;

   constant FM_OUT : integer := 2;
   attribute w of FM_OUT : constant is 32;

   constant FM_EXT : integer := 3;
   attribute w of FM_EXT : constant is 32;

   constant sf_sb_n : integer := 3;
   attribute w of sf_sb_n : constant is 32;

   constant sf_sb_single_station_n : integer := 9; -- sf_sb_n * threads_n
   attribute w of sf_sb_single_station_n : constant is 32;

   -- h2s_sb_single_station_n: there may be SB outside of SF in H2S block
   constant h2s_sb_single_station_n : integer := 9; -- sf_sb_single_station_n
   attribute w of h2s_sb_single_station_n : constant is 32;

   constant h2s_sb_all_station_n : integer := 27; -- h2s_sb_single_station_n * stations_n
   attribute w of h2s_sb_all_station_n : constant is 32;

   constant ucm2hps_sb_n : integer := 9; -- stations_n*threads_n
   attribute w of ucm2hps_sb_n : constant is 32;

   constant ucm_sb_n : integer := 15; -- primary_sl_n + ucm2hps_sb_n + primary_sl_n
   attribute w of ucm_sb_n : constant is 32;

   constant total_l0mdt_sb : integer := 42; -- h2s_sb_all_station_n + ucm_sb_n
   attribute w of total_l0mdt_sb : constant is 32;

   type fm_rt is record
      fm_data : std_logic_vector(mon_dw_max-1 downto 0);
      fm_vld : std_logic;
   end record fm_rt;
   attribute w of fm_rt : type is 257;
   function width(x: fm_rt) return natural;
   function convert(x: fm_rt; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: fm_rt) return fm_rt;
   function zero(tpl: fm_rt) return fm_rt;

   type fm_art is array(integer range <>) of fm_rt;
   function width(x: fm_art) return integer;
   function convert(x: fm_art; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: fm_art) return fm_art;
   function zero(tpl: fm_art) return fm_art;
   function convert(x: fm_art; tpl: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; tpl: fm_art) return fm_art;

   subtype fm_vt is std_logic_vector(fm_rt'w-1 downto 0);
   attribute w of fm_vt : subtype is 257;

   type fm_avt is array(integer range <>) of fm_vt;
   function width(x: fm_avt) return integer;
   function convert(x: fm_avt; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: fm_avt) return fm_avt;
   function zero(tpl: fm_avt) return fm_avt;
   function convert(x: fm_avt; tpl: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; tpl: fm_avt) return fm_avt;

   type fm_aart is array(integer range <>) of fm_art;
   function width(x: fm_aart) return integer;
   function convert(x: fm_aart; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: fm_aart) return fm_aart;
   function zero(tpl: fm_aart) return fm_aart;
   function convert(x: fm_aart; tpl: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; tpl: fm_aart) return fm_aart;

   type fm_aaart is array(integer range <>) of fm_art;
   function width(x: fm_aaart) return integer;
   function convert(x: fm_aaart; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: fm_aaart) return fm_aaart;
   function zero(tpl: fm_aaart) return fm_aaart;
   function convert(x: fm_aaart; tpl: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; tpl: fm_aaart) return fm_aaart;

   type sf_mon_data is array(integer range <>) of fm_rt;
   function width(x: sf_mon_data) return integer;
   function convert(x: sf_mon_data; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: sf_mon_data) return sf_mon_data;
   function zero(tpl: sf_mon_data) return sf_mon_data;
   function convert(x: sf_mon_data; tpl: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; tpl: sf_mon_data) return sf_mon_data;

   type h2s_mon_per_station is array(integer range <>) of sf_mon_data(0 to sf_sb_n-1);
   function width(x: h2s_mon_per_station) return integer;
   function convert(x: h2s_mon_per_station; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: h2s_mon_per_station) return h2s_mon_per_station;
   function zero(tpl: h2s_mon_per_station) return h2s_mon_per_station;
   function convert(x: h2s_mon_per_station; tpl: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; tpl: h2s_mon_per_station) return h2s_mon_per_station;

   type h2s_mon_data is array(integer range <>) of h2s_mon_per_station(0 to threads_n-1);
   function width(x: h2s_mon_data) return integer;
   function convert(x: h2s_mon_data; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: h2s_mon_data) return h2s_mon_data;
   function zero(tpl: h2s_mon_data) return h2s_mon_data;
   function convert(x: h2s_mon_data; tpl: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; tpl: h2s_mon_data) return h2s_mon_data;

   type fm_ucm2hps_thread_mon is array(integer range <>) of fm_rt;
   function width(x: fm_ucm2hps_thread_mon) return integer;
   function convert(x: fm_ucm2hps_thread_mon; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: fm_ucm2hps_thread_mon) return fm_ucm2hps_thread_mon;
   function zero(tpl: fm_ucm2hps_thread_mon) return fm_ucm2hps_thread_mon;
   function convert(x: fm_ucm2hps_thread_mon; tpl: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; tpl: fm_ucm2hps_thread_mon) return fm_ucm2hps_thread_mon;

   type fm_ucm2hps_station_mon is array(integer range <>) of fm_ucm2hps_thread_mon(0 to threads_n-1);
   function width(x: fm_ucm2hps_station_mon) return integer;
   function convert(x: fm_ucm2hps_station_mon; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: fm_ucm2hps_station_mon) return fm_ucm2hps_station_mon;
   function zero(tpl: fm_ucm2hps_station_mon) return fm_ucm2hps_station_mon;
   function convert(x: fm_ucm2hps_station_mon; tpl: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; tpl: fm_ucm2hps_station_mon) return fm_ucm2hps_station_mon;

   type fm_ucm_fm_mon_data is record
      fm_ucm_slc_rx_mon : fm_art(0 to primary_sl_n-1);
      fm_ucm2pl_mon : fm_art(0 to primary_sl_n-1);
   end record fm_ucm_fm_mon_data;
   function width(x: fm_ucm_fm_mon_data) return natural;
   function convert(x: fm_ucm_fm_mon_data; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: fm_ucm_fm_mon_data) return fm_ucm_fm_mon_data;
   function zero(tpl: fm_ucm_fm_mon_data) return fm_ucm_fm_mon_data;

end package fm_common_types;

------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.common_ieee_pkg.all;
use shared_lib.l0mdt_constants_pkg.all;
use shared_lib.l0mdt_dataformats_pkg.all;
use shared_lib.common_constants_pkg.all;

package body fm_common_types is

   -- Custom types and functions --

   function width(x: fm_rt) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.fm_data);
      w := w + width(x.fm_vld);
      return w;
   end function width;
   function convert(x: fm_rt; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.fm_data);
         y(u to u+w-1) := convert(x.fm_data, y(u to u+w-1));
         u := u + w;
         w := width(x.fm_vld);
         y(u to u+w-1) := convert(x.fm_vld, y(u to u+w-1));
      else
         w := width(x.fm_data);
         y(u downto u-w+1) := convert(x.fm_data, y(u downto u-w+1));
         u := u - w;
         w := width(x.fm_vld);
         y(u downto u-w+1) := convert(x.fm_vld, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: fm_rt) return fm_rt is
      variable y : fm_rt;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.fm_data);
         y.fm_data := convert(x(u to u+w-1), tpl.fm_data);
         u := u + w;
         w := width(tpl.fm_vld);
         y.fm_vld := convert(x(u to u+w-1), tpl.fm_vld);
      else
         w := width(tpl.fm_data);
         y.fm_data := convert(x(u downto u-w+1), tpl.fm_data);
         u := u - w;
         w := width(tpl.fm_vld);
         y.fm_vld := convert(x(u downto u-w+1), tpl.fm_vld);
      end if;
      return y;
   end function convert;
   function zero(tpl: fm_rt) return fm_rt is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: fm_art) return integer is
      variable w : integer;
   begin
      if x'length < 1 then
        w := 0;
      else
        w := x'length * width(x(x'low));
      end if;
      return w;
   end function width;
   function convert(x: fm_art; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: fm_art) return fm_art is
      variable y : fm_art(tpl'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function zero(tpl: fm_art) return fm_art is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;
   function convert(x: fm_art; tpl: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(tpl'range)(tpl(tpl'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; tpl: fm_art) return fm_art is
      variable y : fm_art(tpl'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: fm_avt) return integer is
      variable w : integer;
   begin
      if x'length < 1 then
        w := 0;
      else
        w := x'length * width(x(x'low));
      end if;
      return w;
   end function width;
   function convert(x: fm_avt; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: fm_avt) return fm_avt is
      variable y : fm_avt(tpl'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function zero(tpl: fm_avt) return fm_avt is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;
   function convert(x: fm_avt; tpl: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(tpl'range)(tpl(tpl'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; tpl: fm_avt) return fm_avt is
      variable y : fm_avt(tpl'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: fm_aart) return integer is
      variable w : integer;
   begin
      if x'length < 1 then
        w := 0;
      else
        w := x'length * width(x(x'low));
      end if;
      return w;
   end function width;
   function convert(x: fm_aart; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: fm_aart) return fm_aart is
      variable y : fm_aart(tpl'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function zero(tpl: fm_aart) return fm_aart is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;
   function convert(x: fm_aart; tpl: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(tpl'range)(tpl(tpl'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; tpl: fm_aart) return fm_aart is
      variable y : fm_aart(tpl'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: fm_aaart) return integer is
      variable w : integer;
   begin
      if x'length < 1 then
        w := 0;
      else
        w := x'length * width(x(x'low));
      end if;
      return w;
   end function width;
   function convert(x: fm_aaart; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: fm_aaart) return fm_aaart is
      variable y : fm_aaart(tpl'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function zero(tpl: fm_aaart) return fm_aaart is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;
   function convert(x: fm_aaart; tpl: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(tpl'range)(tpl(tpl'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; tpl: fm_aaart) return fm_aaart is
      variable y : fm_aaart(tpl'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: sf_mon_data) return integer is
      variable w : integer;
   begin
      if x'length < 1 then
        w := 0;
      else
        w := x'length * width(x(x'low));
      end if;
      return w;
   end function width;
   function convert(x: sf_mon_data; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: sf_mon_data) return sf_mon_data is
      variable y : sf_mon_data(tpl'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function zero(tpl: sf_mon_data) return sf_mon_data is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;
   function convert(x: sf_mon_data; tpl: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(tpl'range)(tpl(tpl'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; tpl: sf_mon_data) return sf_mon_data is
      variable y : sf_mon_data(tpl'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: h2s_mon_per_station) return integer is
      variable w : integer;
   begin
      if x'length < 1 then
        w := 0;
      else
        w := x'length * width(x(x'low));
      end if;
      return w;
   end function width;
   function convert(x: h2s_mon_per_station; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: h2s_mon_per_station) return h2s_mon_per_station is
      variable y : h2s_mon_per_station(tpl'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function zero(tpl: h2s_mon_per_station) return h2s_mon_per_station is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;
   function convert(x: h2s_mon_per_station; tpl: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(tpl'range)(tpl(tpl'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; tpl: h2s_mon_per_station) return h2s_mon_per_station is
      variable y : h2s_mon_per_station(tpl'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: h2s_mon_data) return integer is
      variable w : integer;
   begin
      if x'length < 1 then
        w := 0;
      else
        w := x'length * width(x(x'low));
      end if;
      return w;
   end function width;
   function convert(x: h2s_mon_data; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: h2s_mon_data) return h2s_mon_data is
      variable y : h2s_mon_data(tpl'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function zero(tpl: h2s_mon_data) return h2s_mon_data is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;
   function convert(x: h2s_mon_data; tpl: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(tpl'range)(tpl(tpl'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; tpl: h2s_mon_data) return h2s_mon_data is
      variable y : h2s_mon_data(tpl'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: fm_ucm2hps_thread_mon) return integer is
      variable w : integer;
   begin
      if x'length < 1 then
        w := 0;
      else
        w := x'length * width(x(x'low));
      end if;
      return w;
   end function width;
   function convert(x: fm_ucm2hps_thread_mon; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: fm_ucm2hps_thread_mon) return fm_ucm2hps_thread_mon is
      variable y : fm_ucm2hps_thread_mon(tpl'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function zero(tpl: fm_ucm2hps_thread_mon) return fm_ucm2hps_thread_mon is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;
   function convert(x: fm_ucm2hps_thread_mon; tpl: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(tpl'range)(tpl(tpl'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; tpl: fm_ucm2hps_thread_mon) return fm_ucm2hps_thread_mon is
      variable y : fm_ucm2hps_thread_mon(tpl'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: fm_ucm2hps_station_mon) return integer is
      variable w : integer;
   begin
      if x'length < 1 then
        w := 0;
      else
        w := x'length * width(x(x'low));
      end if;
      return w;
   end function width;
   function convert(x: fm_ucm2hps_station_mon; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: fm_ucm2hps_station_mon) return fm_ucm2hps_station_mon is
      variable y : fm_ucm2hps_station_mon(tpl'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function zero(tpl: fm_ucm2hps_station_mon) return fm_ucm2hps_station_mon is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;
   function convert(x: fm_ucm2hps_station_mon; tpl: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(tpl'range)(tpl(tpl'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; tpl: fm_ucm2hps_station_mon) return fm_ucm2hps_station_mon is
      variable y : fm_ucm2hps_station_mon(tpl'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: fm_ucm_fm_mon_data) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.fm_ucm_slc_rx_mon);
      w := w + width(x.fm_ucm2pl_mon);
      return w;
   end function width;
   function convert(x: fm_ucm_fm_mon_data; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.fm_ucm_slc_rx_mon);
         y(u to u+w-1) := convert(x.fm_ucm_slc_rx_mon, y(u to u+w-1));
         u := u + w;
         w := width(x.fm_ucm2pl_mon);
         y(u to u+w-1) := convert(x.fm_ucm2pl_mon, y(u to u+w-1));
      else
         w := width(x.fm_ucm_slc_rx_mon);
         y(u downto u-w+1) := convert(x.fm_ucm_slc_rx_mon, y(u downto u-w+1));
         u := u - w;
         w := width(x.fm_ucm2pl_mon);
         y(u downto u-w+1) := convert(x.fm_ucm2pl_mon, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: fm_ucm_fm_mon_data) return fm_ucm_fm_mon_data is
      variable y : fm_ucm_fm_mon_data; --((fm_ucm_slc_rx_mon)fm_ucm2pl_mon);
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.fm_ucm_slc_rx_mon);
         y.fm_ucm_slc_rx_mon := convert(x(u to u+w-1), tpl.fm_ucm_slc_rx_mon);
         u := u + w;
         w := width(tpl.fm_ucm2pl_mon);
         y.fm_ucm2pl_mon := convert(x(u to u+w-1), tpl.fm_ucm2pl_mon);
      else
         w := width(tpl.fm_ucm_slc_rx_mon);
         y.fm_ucm_slc_rx_mon := convert(x(u downto u-w+1), tpl.fm_ucm_slc_rx_mon);
         u := u - w;
         w := width(tpl.fm_ucm2pl_mon);
         y.fm_ucm2pl_mon := convert(x(u downto u-w+1), tpl.fm_ucm2pl_mon);
      end if;
      return y;
   end function convert;
   function zero(tpl: fm_ucm_fm_mon_data) return fm_ucm_fm_mon_data is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

end package body fm_common_types;
