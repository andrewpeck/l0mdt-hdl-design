-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl
-- 2022-03-14 21:54:59

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.l0mdt_constants_pkg.all;
use shared_lib.l0mdt_dataformats_pkg.all;
use shared_lib.common_ieee_pkg.all;
use shared_lib.common_constants_pkg.all;
use shared_lib.common_types_pkg.all;

package hp_pkg is

   -- Custom types and functions --

   type hp_win_tubes_rt is record
      hi : unsigned(MDT_TUBE_LEN-1 downto 0);
      lo : unsigned(MDT_TUBE_LEN-1 downto 0);
   end record hp_win_tubes_rt;
   function width(x: hp_win_tubes_rt) return natural;
   function convert(x: hp_win_tubes_rt; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: hp_win_tubes_rt) return hp_win_tubes_rt;

   type hp_win_tubes_art is array(integer range <>) of hp_win_tubes_rt;
   function width(x: hp_win_tubes_art) return integer;
   function convert(x: hp_win_tubes_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: hp_win_tubes_art) return hp_win_tubes_art;
   function convert(x: hp_win_tubes_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: hp_win_tubes_art) return hp_win_tubes_art;

   type hp_win_tubes_limits_rt is record
      hi : signed(MDT_TUBE_LEN-1 downto 0);
      lo : signed(MDT_TUBE_LEN-1 downto 0);
   end record hp_win_tubes_limits_rt;
   function width(x: hp_win_tubes_limits_rt) return natural;
   function convert(x: hp_win_tubes_limits_rt; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: hp_win_tubes_limits_rt) return hp_win_tubes_limits_rt;

   type hp_win_tubes_limits_art is array(integer range <>) of hp_win_tubes_limits_rt;
   function width(x: hp_win_tubes_limits_art) return integer;
   function convert(x: hp_win_tubes_limits_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: hp_win_tubes_limits_art) return hp_win_tubes_limits_art;
   function convert(x: hp_win_tubes_limits_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: hp_win_tubes_limits_art) return hp_win_tubes_limits_art;

   type hp_heg2hp_slc_b_rt is record
      roi_z : unsigned(MDT_GLOBAL_AXI_LEN-1 downto 0);
      roi_x : unsigned(MDT_GLOBAL_AXI_LEN-1 downto 0);
   end record hp_heg2hp_slc_b_rt;
   function width(x: hp_heg2hp_slc_b_rt) return natural;
   function convert(x: hp_heg2hp_slc_b_rt; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: hp_heg2hp_slc_b_rt) return hp_heg2hp_slc_b_rt;

   constant HP_HEG2HP_SPECIFIC_LEN : integer := 38;

   type hp_heg2hp_slc_rt is record
      bcid : unsigned(BCID_LEN-1 downto 0);
      specific : std_logic_vector(HP_HEG2HP_SPECIFIC_LEN-1 downto 0);
      data_valid : std_logic;
   end record hp_heg2hp_slc_rt;
   function width(x: hp_heg2hp_slc_rt) return natural;
   function convert(x: hp_heg2hp_slc_rt; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: hp_heg2hp_slc_rt) return hp_heg2hp_slc_rt;

   type hp_heg2hp_slc_art is array(integer range <>) of hp_heg2hp_slc_rt;
   function width(x: hp_heg2hp_slc_art) return integer;
   function convert(x: hp_heg2hp_slc_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: hp_heg2hp_slc_art) return hp_heg2hp_slc_art;
   function convert(x: hp_heg2hp_slc_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: hp_heg2hp_slc_art) return hp_heg2hp_slc_art;

   type hp_hpsPc2hp_rt is record
      tube : unsigned(MDT_TUBE_LEN-1 downto 0);
      layer : unsigned(MDT_LAYER_LEN-1 downto 0);
      time_t0 : unsigned(MDT_TIME_LEN-1 downto 0);
      global_z : unsigned(MDT_GLOBAL_AXI_LEN-1 downto 0);
      global_x : unsigned(MDT_GLOBAL_AXI_LEN-1 downto 0);
      data_valid : std_logic;
   end record hp_hpsPc2hp_rt;
   function width(x: hp_hpsPc2hp_rt) return natural;
   function convert(x: hp_hpsPc2hp_rt; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: hp_hpsPc2hp_rt) return hp_hpsPc2hp_rt;

   type hp_hp2sf_data_rt is record
      local_y : unsigned(MDT_LOCAL_Y_LEN-1 downto 0);
      local_x : unsigned(MDT_LOCAL_X_LEN-1 downto 0);
      radius : unsigned(MDT_RADIUS_LEN-1 downto 0);
      mlayer : std_logic;
   end record hp_hp2sf_data_rt;
   function width(x: hp_hp2sf_data_rt) return natural;
   function convert(x: hp_hp2sf_data_rt; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: hp_hp2sf_data_rt) return hp_hp2sf_data_rt;

   type hp_hp2sf_data_art is array(integer range <>) of hp_hp2sf_data_rt;
   function width(x: hp_hp2sf_data_art) return integer;
   function convert(x: hp_hp2sf_data_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: hp_hp2sf_data_art) return hp_hp2sf_data_art;
   function convert(x: hp_hp2sf_data_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: hp_hp2sf_data_art) return hp_hp2sf_data_art;

   type hp_hp2bm_rt is record
      data : hp_hp2sf_data_rt;
      mdt_valid : std_logic;
      data_valid : std_logic;
   end record hp_hp2bm_rt;
   function width(x: hp_hp2bm_rt) return natural;
   function convert(x: hp_hp2bm_rt; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: hp_hp2bm_rt) return hp_hp2bm_rt;

end package hp_pkg;

------------------------------------------------------------

package body hp_pkg is

   -- Custom types and functions --

   function width(x: hp_win_tubes_rt) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.hi);
      w := w + width(x.lo);
      return w;
   end function width;
   function convert(x: hp_win_tubes_rt; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.hi);
         y(u to u+w-1) := convert(x.hi, y(u to u+w-1));
         u := u + w;
         w := width(x.lo);
         y(u to u+w-1) := convert(x.lo, y(u to u+w-1));
      else
         w := width(x.hi);
         y(u downto u-w+1) := convert(x.hi, y(u downto u-w+1));
         u := u - w;
         w := width(x.lo);
         y(u downto u-w+1) := convert(x.lo, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: hp_win_tubes_rt) return hp_win_tubes_rt is
      variable y : hp_win_tubes_rt := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.hi);
         y.hi := convert(x(u to u+w-1), t.hi);
         u := u + w;
         w := width(t.lo);
         y.lo := convert(x(u to u+w-1), t.lo);
      else
         w := width(t.hi);
         y.hi := convert(x(u downto u-w+1), t.hi);
         u := u - w;
         w := width(t.lo);
         y.lo := convert(x(u downto u-w+1), t.lo);
      end if;
      return y;
   end function convert;

   function width(x: hp_win_tubes_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: hp_win_tubes_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: hp_win_tubes_art) return hp_win_tubes_art is
      variable y : hp_win_tubes_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: hp_win_tubes_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: hp_win_tubes_art) return hp_win_tubes_art is
      variable y : hp_win_tubes_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: hp_win_tubes_limits_rt) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.hi);
      w := w + width(x.lo);
      return w;
   end function width;
   function convert(x: hp_win_tubes_limits_rt; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.hi);
         y(u to u+w-1) := convert(x.hi, y(u to u+w-1));
         u := u + w;
         w := width(x.lo);
         y(u to u+w-1) := convert(x.lo, y(u to u+w-1));
      else
         w := width(x.hi);
         y(u downto u-w+1) := convert(x.hi, y(u downto u-w+1));
         u := u - w;
         w := width(x.lo);
         y(u downto u-w+1) := convert(x.lo, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: hp_win_tubes_limits_rt) return hp_win_tubes_limits_rt is
      variable y : hp_win_tubes_limits_rt := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.hi);
         y.hi := convert(x(u to u+w-1), t.hi);
         u := u + w;
         w := width(t.lo);
         y.lo := convert(x(u to u+w-1), t.lo);
      else
         w := width(t.hi);
         y.hi := convert(x(u downto u-w+1), t.hi);
         u := u - w;
         w := width(t.lo);
         y.lo := convert(x(u downto u-w+1), t.lo);
      end if;
      return y;
   end function convert;

   function width(x: hp_win_tubes_limits_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: hp_win_tubes_limits_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: hp_win_tubes_limits_art) return hp_win_tubes_limits_art is
      variable y : hp_win_tubes_limits_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: hp_win_tubes_limits_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: hp_win_tubes_limits_art) return hp_win_tubes_limits_art is
      variable y : hp_win_tubes_limits_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: hp_heg2hp_slc_b_rt) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.roi_z);
      w := w + width(x.roi_x);
      return w;
   end function width;
   function convert(x: hp_heg2hp_slc_b_rt; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.roi_z);
         y(u to u+w-1) := convert(x.roi_z, y(u to u+w-1));
         u := u + w;
         w := width(x.roi_x);
         y(u to u+w-1) := convert(x.roi_x, y(u to u+w-1));
      else
         w := width(x.roi_z);
         y(u downto u-w+1) := convert(x.roi_z, y(u downto u-w+1));
         u := u - w;
         w := width(x.roi_x);
         y(u downto u-w+1) := convert(x.roi_x, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: hp_heg2hp_slc_b_rt) return hp_heg2hp_slc_b_rt is
      variable y : hp_heg2hp_slc_b_rt := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.roi_z);
         y.roi_z := convert(x(u to u+w-1), t.roi_z);
         u := u + w;
         w := width(t.roi_x);
         y.roi_x := convert(x(u to u+w-1), t.roi_x);
      else
         w := width(t.roi_z);
         y.roi_z := convert(x(u downto u-w+1), t.roi_z);
         u := u - w;
         w := width(t.roi_x);
         y.roi_x := convert(x(u downto u-w+1), t.roi_x);
      end if;
      return y;
   end function convert;

   function width(x: hp_heg2hp_slc_rt) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.bcid);
      w := w + width(x.specific);
      w := w + width(x.data_valid);
      return w;
   end function width;
   function convert(x: hp_heg2hp_slc_rt; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.bcid);
         y(u to u+w-1) := convert(x.bcid, y(u to u+w-1));
         u := u + w;
         w := width(x.specific);
         y(u to u+w-1) := convert(x.specific, y(u to u+w-1));
         u := u + w;
         w := width(x.data_valid);
         y(u to u+w-1) := convert(x.data_valid, y(u to u+w-1));
      else
         w := width(x.bcid);
         y(u downto u-w+1) := convert(x.bcid, y(u downto u-w+1));
         u := u - w;
         w := width(x.specific);
         y(u downto u-w+1) := convert(x.specific, y(u downto u-w+1));
         u := u - w;
         w := width(x.data_valid);
         y(u downto u-w+1) := convert(x.data_valid, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: hp_heg2hp_slc_rt) return hp_heg2hp_slc_rt is
      variable y : hp_heg2hp_slc_rt := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.bcid);
         y.bcid := convert(x(u to u+w-1), t.bcid);
         u := u + w;
         w := width(t.specific);
         y.specific := convert(x(u to u+w-1), t.specific);
         u := u + w;
         w := width(t.data_valid);
         y.data_valid := convert(x(u to u+w-1), t.data_valid);
      else
         w := width(t.bcid);
         y.bcid := convert(x(u downto u-w+1), t.bcid);
         u := u - w;
         w := width(t.specific);
         y.specific := convert(x(u downto u-w+1), t.specific);
         u := u - w;
         w := width(t.data_valid);
         y.data_valid := convert(x(u downto u-w+1), t.data_valid);
      end if;
      return y;
   end function convert;

   function width(x: hp_heg2hp_slc_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: hp_heg2hp_slc_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: hp_heg2hp_slc_art) return hp_heg2hp_slc_art is
      variable y : hp_heg2hp_slc_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: hp_heg2hp_slc_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: hp_heg2hp_slc_art) return hp_heg2hp_slc_art is
      variable y : hp_heg2hp_slc_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: hp_hpsPc2hp_rt) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.tube);
      w := w + width(x.layer);
      w := w + width(x.time_t0);
      w := w + width(x.global_z);
      w := w + width(x.global_x);
      w := w + width(x.data_valid);
      return w;
   end function width;
   function convert(x: hp_hpsPc2hp_rt; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.tube);
         y(u to u+w-1) := convert(x.tube, y(u to u+w-1));
         u := u + w;
         w := width(x.layer);
         y(u to u+w-1) := convert(x.layer, y(u to u+w-1));
         u := u + w;
         w := width(x.time_t0);
         y(u to u+w-1) := convert(x.time_t0, y(u to u+w-1));
         u := u + w;
         w := width(x.global_z);
         y(u to u+w-1) := convert(x.global_z, y(u to u+w-1));
         u := u + w;
         w := width(x.global_x);
         y(u to u+w-1) := convert(x.global_x, y(u to u+w-1));
         u := u + w;
         w := width(x.data_valid);
         y(u to u+w-1) := convert(x.data_valid, y(u to u+w-1));
      else
         w := width(x.tube);
         y(u downto u-w+1) := convert(x.tube, y(u downto u-w+1));
         u := u - w;
         w := width(x.layer);
         y(u downto u-w+1) := convert(x.layer, y(u downto u-w+1));
         u := u - w;
         w := width(x.time_t0);
         y(u downto u-w+1) := convert(x.time_t0, y(u downto u-w+1));
         u := u - w;
         w := width(x.global_z);
         y(u downto u-w+1) := convert(x.global_z, y(u downto u-w+1));
         u := u - w;
         w := width(x.global_x);
         y(u downto u-w+1) := convert(x.global_x, y(u downto u-w+1));
         u := u - w;
         w := width(x.data_valid);
         y(u downto u-w+1) := convert(x.data_valid, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: hp_hpsPc2hp_rt) return hp_hpsPc2hp_rt is
      variable y : hp_hpsPc2hp_rt := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.tube);
         y.tube := convert(x(u to u+w-1), t.tube);
         u := u + w;
         w := width(t.layer);
         y.layer := convert(x(u to u+w-1), t.layer);
         u := u + w;
         w := width(t.time_t0);
         y.time_t0 := convert(x(u to u+w-1), t.time_t0);
         u := u + w;
         w := width(t.global_z);
         y.global_z := convert(x(u to u+w-1), t.global_z);
         u := u + w;
         w := width(t.global_x);
         y.global_x := convert(x(u to u+w-1), t.global_x);
         u := u + w;
         w := width(t.data_valid);
         y.data_valid := convert(x(u to u+w-1), t.data_valid);
      else
         w := width(t.tube);
         y.tube := convert(x(u downto u-w+1), t.tube);
         u := u - w;
         w := width(t.layer);
         y.layer := convert(x(u downto u-w+1), t.layer);
         u := u - w;
         w := width(t.time_t0);
         y.time_t0 := convert(x(u downto u-w+1), t.time_t0);
         u := u - w;
         w := width(t.global_z);
         y.global_z := convert(x(u downto u-w+1), t.global_z);
         u := u - w;
         w := width(t.global_x);
         y.global_x := convert(x(u downto u-w+1), t.global_x);
         u := u - w;
         w := width(t.data_valid);
         y.data_valid := convert(x(u downto u-w+1), t.data_valid);
      end if;
      return y;
   end function convert;

   function width(x: hp_hp2sf_data_rt) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.local_y);
      w := w + width(x.local_x);
      w := w + width(x.radius);
      w := w + width(x.mlayer);
      return w;
   end function width;
   function convert(x: hp_hp2sf_data_rt; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.local_y);
         y(u to u+w-1) := convert(x.local_y, y(u to u+w-1));
         u := u + w;
         w := width(x.local_x);
         y(u to u+w-1) := convert(x.local_x, y(u to u+w-1));
         u := u + w;
         w := width(x.radius);
         y(u to u+w-1) := convert(x.radius, y(u to u+w-1));
         u := u + w;
         w := width(x.mlayer);
         y(u to u+w-1) := convert(x.mlayer, y(u to u+w-1));
      else
         w := width(x.local_y);
         y(u downto u-w+1) := convert(x.local_y, y(u downto u-w+1));
         u := u - w;
         w := width(x.local_x);
         y(u downto u-w+1) := convert(x.local_x, y(u downto u-w+1));
         u := u - w;
         w := width(x.radius);
         y(u downto u-w+1) := convert(x.radius, y(u downto u-w+1));
         u := u - w;
         w := width(x.mlayer);
         y(u downto u-w+1) := convert(x.mlayer, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: hp_hp2sf_data_rt) return hp_hp2sf_data_rt is
      variable y : hp_hp2sf_data_rt := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.local_y);
         y.local_y := convert(x(u to u+w-1), t.local_y);
         u := u + w;
         w := width(t.local_x);
         y.local_x := convert(x(u to u+w-1), t.local_x);
         u := u + w;
         w := width(t.radius);
         y.radius := convert(x(u to u+w-1), t.radius);
         u := u + w;
         w := width(t.mlayer);
         y.mlayer := convert(x(u to u+w-1), t.mlayer);
      else
         w := width(t.local_y);
         y.local_y := convert(x(u downto u-w+1), t.local_y);
         u := u - w;
         w := width(t.local_x);
         y.local_x := convert(x(u downto u-w+1), t.local_x);
         u := u - w;
         w := width(t.radius);
         y.radius := convert(x(u downto u-w+1), t.radius);
         u := u - w;
         w := width(t.mlayer);
         y.mlayer := convert(x(u downto u-w+1), t.mlayer);
      end if;
      return y;
   end function convert;

   function width(x: hp_hp2sf_data_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: hp_hp2sf_data_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: hp_hp2sf_data_art) return hp_hp2sf_data_art is
      variable y : hp_hp2sf_data_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: hp_hp2sf_data_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: hp_hp2sf_data_art) return hp_hp2sf_data_art is
      variable y : hp_hp2sf_data_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: hp_hp2bm_rt) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.data);
      w := w + width(x.mdt_valid);
      w := w + width(x.data_valid);
      return w;
   end function width;
   function convert(x: hp_hp2bm_rt; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.data);
         y(u to u+w-1) := convert(x.data, y(u to u+w-1));
         u := u + w;
         w := width(x.mdt_valid);
         y(u to u+w-1) := convert(x.mdt_valid, y(u to u+w-1));
         u := u + w;
         w := width(x.data_valid);
         y(u to u+w-1) := convert(x.data_valid, y(u to u+w-1));
      else
         w := width(x.data);
         y(u downto u-w+1) := convert(x.data, y(u downto u-w+1));
         u := u - w;
         w := width(x.mdt_valid);
         y(u downto u-w+1) := convert(x.mdt_valid, y(u downto u-w+1));
         u := u - w;
         w := width(x.data_valid);
         y(u downto u-w+1) := convert(x.data_valid, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: hp_hp2bm_rt) return hp_hp2bm_rt is
      variable y : hp_hp2bm_rt := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.data);
         y.data := convert(x(u to u+w-1), t.data);
         u := u + w;
         w := width(t.mdt_valid);
         y.mdt_valid := convert(x(u to u+w-1), t.mdt_valid);
         u := u + w;
         w := width(t.data_valid);
         y.data_valid := convert(x(u to u+w-1), t.data_valid);
      else
         w := width(t.data);
         y.data := convert(x(u downto u-w+1), t.data);
         u := u - w;
         w := width(t.mdt_valid);
         y.mdt_valid := convert(x(u downto u-w+1), t.mdt_valid);
         u := u - w;
         w := width(t.data_valid);
         y.data_valid := convert(x(u downto u-w+1), t.data_valid);
      end if;
      return y;
   end function convert;

end package body hp_pkg;
