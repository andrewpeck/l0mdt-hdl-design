// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="get_legendre_segment_barrel,hls_ip_2019_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku15p-ffva1760-1LV-i,HLS_INPUT_CLOCK=3.125000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.846000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=6,HLS_SYN_DSP=4,HLS_SYN_FF=532,HLS_SYN_LUT=179,HLS_VERSION=2019_1_1}" *)

module get_legendre_segment_barrel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        hls_sin_val_V,
        hls_cos_val_V,
        hls_LT_r_global_V,
        slcvec_pos_R_V,
        hewindow_pos_Z_V,
        hewindow_pos_R_V,
        hls_LT_theta_global_V,
        LE_output_V,
        LE_output_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] hls_sin_val_V;
input  [17:0] hls_cos_val_V;
input  [21:0] hls_LT_r_global_V;
input  [17:0] slcvec_pos_R_V;
input  [17:0] hewindow_pos_Z_V;
input  [17:0] hewindow_pos_R_V;
input  [17:0] hls_LT_theta_global_V;
output  [29:0] LE_output_V;
output   LE_output_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
reg   [1:0] LE_output_V_1_state;
reg    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg  signed [17:0] hls_sin_val_V_0_data_reg;
reg    hls_sin_val_V_0_vld_reg;
reg    hls_sin_val_V_0_ack_out;
reg   [17:0] hls_cos_val_V_0_data_reg;
reg    hls_cos_val_V_0_vld_reg;
reg    hls_cos_val_V_0_ack_out;
reg   [21:0] hls_LT_r_global_V_0_data_reg;
reg    hls_LT_r_global_V_0_vld_reg;
reg    hls_LT_r_global_V_0_ack_out;
reg   [17:0] slcvec_pos_R_V_0_data_reg;
reg    slcvec_pos_R_V_0_vld_reg;
reg    slcvec_pos_R_V_0_ack_out;
reg  signed [17:0] hewindow_pos_Z_V_0_data_reg;
reg    hewindow_pos_Z_V_0_vld_reg;
reg    hewindow_pos_Z_V_0_ack_out;
reg   [17:0] hewindow_pos_R_V_0_data_reg;
reg    hewindow_pos_R_V_0_vld_reg;
reg    hewindow_pos_R_V_0_ack_out;
reg   [17:0] hls_LT_theta_global_V_0_data_reg;
reg    hls_LT_theta_global_V_0_vld_reg;
reg    hls_LT_theta_global_V_0_ack_out;
reg   [29:0] LE_output_V_1_data_reg;
reg    LE_output_V_1_vld_reg;
reg    LE_output_V_1_vld_in;
wire   [11:0] lut_divider_barrel_V_address0;
reg    lut_divider_barrel_V_ce0;
wire   [25:0] lut_divider_barrel_V_q0;
reg  signed [17:0] hls_cos_val_V_read_reg_336;
wire   [17:0] r_0_V_fu_148_p2;
reg  signed [17:0] r_0_V_reg_341;
wire  signed [34:0] ret_V_3_fu_311_p2;
reg  signed [34:0] ret_V_3_reg_346;
wire   [20:0] trunc_ln1192_fu_162_p1;
reg   [20:0] trunc_ln1192_reg_351;
reg   [20:0] trunc_ln1192_reg_351_pp0_iter2_reg;
wire  signed [30:0] r_V_fu_317_p2;
reg  signed [30:0] r_V_reg_356;
wire   [16:0] trunc_ln851_fu_170_p1;
reg   [16:0] trunc_ln851_reg_363;
wire   [10:0] p_Result_7_fu_173_p1;
reg   [10:0] p_Result_7_reg_368;
reg   [10:0] p_Result_7_reg_368_pp0_iter2_reg;
reg   [10:0] p_Result_7_reg_368_pp0_iter3_reg;
reg   [10:0] p_Result_7_reg_368_pp0_iter4_reg;
wire  signed [34:0] ret_V_2_fu_324_p2;
reg  signed [34:0] ret_V_2_reg_373;
reg   [17:0] z_fixed_int_shift_V_reg_378;
reg   [17:0] z_2_V_reg_388;
reg   [25:0] sin_inv_V_reg_393;
wire   [31:0] r_V_1_fu_330_p2;
reg   [31:0] r_V_1_reg_398;
wire   [29:0] p_Result_6_fu_301_p4;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln544_fu_244_p1;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001;
wire   [11:0] ret_V_cast9_fu_192_p4;
wire   [0:0] icmp_ln851_fu_208_p2;
wire   [11:0] tmp_1_fu_219_p4;
wire   [11:0] add_ln647_fu_213_p2;
wire   [0:0] p_Result_s_fu_201_p3;
wire   [11:0] select_ln851_fu_228_p3;
wire   [11:0] tmp_V_fu_236_p3;
wire   [17:0] r_fixed_int_shift_V_fu_249_p4;
wire   [17:0] add_ln728_fu_258_p2;
wire   [20:0] lhs_V_fu_263_p3;
wire   [20:0] ret_V_4_fu_271_p2;
wire   [17:0] z_3_V_fu_292_p4;
wire   [12:0] r_V_fu_317_p0;
wire   [25:0] r_V_1_fu_330_p0;
wire   [17:0] r_V_1_fu_330_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to5;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] r_V_1_fu_330_p00;
wire   [31:0] r_V_1_fu_330_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 hls_sin_val_V_0_data_reg = 18'd0;
#0 hls_sin_val_V_0_vld_reg = 1'b0;
#0 hls_cos_val_V_0_data_reg = 18'd0;
#0 hls_cos_val_V_0_vld_reg = 1'b0;
#0 hls_LT_r_global_V_0_data_reg = 22'd0;
#0 hls_LT_r_global_V_0_vld_reg = 1'b0;
#0 slcvec_pos_R_V_0_data_reg = 18'd0;
#0 slcvec_pos_R_V_0_vld_reg = 1'b0;
#0 hewindow_pos_Z_V_0_data_reg = 18'd0;
#0 hewindow_pos_Z_V_0_vld_reg = 1'b0;
#0 hewindow_pos_R_V_0_data_reg = 18'd0;
#0 hewindow_pos_R_V_0_vld_reg = 1'b0;
#0 hls_LT_theta_global_V_0_data_reg = 18'd0;
#0 hls_LT_theta_global_V_0_vld_reg = 1'b0;
#0 LE_output_V_1_data_reg = 30'd0;
#0 LE_output_V_1_vld_reg = 1'b0;
end

get_legendre_segment_barrel_lut_divider_barrel_V #(
    .DataWidth( 26 ),
    .AddressRange( 3361 ),
    .AddressWidth( 12 ))
lut_divider_barrel_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_divider_barrel_V_address0),
    .ce0(lut_divider_barrel_V_ce0),
    .q0(lut_divider_barrel_V_q0)
);

get_legendre_segment_barrel_mul_mul_18s_18s_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 35 ))
get_legendre_segment_barrel_mul_mul_18s_18s_35_1_1_U1(
    .din0(hewindow_pos_Z_V_0_data_reg),
    .din1(hls_sin_val_V_0_data_reg),
    .dout(ret_V_3_fu_311_p2)
);

get_legendre_segment_barrel_mul_mul_13ns_18s_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 31 ))
get_legendre_segment_barrel_mul_mul_13ns_18s_31_1_1_U2(
    .din0(r_V_fu_317_p0),
    .din1(hls_sin_val_V_0_data_reg),
    .dout(r_V_fu_317_p2)
);

get_legendre_segment_barrel_mul_mul_18s_18s_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 35 ))
get_legendre_segment_barrel_mul_mul_18s_18s_35_1_1_U3(
    .din0(r_0_V_reg_341),
    .din1(hls_cos_val_V_read_reg_336),
    .dout(ret_V_2_fu_324_p2)
);

get_legendre_segment_barrel_mul_mul_26ns_18ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 32 ))
get_legendre_segment_barrel_mul_mul_26ns_18ns_32_1_1_U4(
    .din0(r_V_1_fu_330_p0),
    .din1(r_V_1_fu_330_p1),
    .dout(r_V_1_fu_330_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == LE_output_V_1_vld_reg) & (1'b1 == LE_output_V_1_vld_in))) begin
        LE_output_V_1_vld_reg <= 1'b1;
    end else if (((1'b0 == LE_output_V_1_vld_in) & (1'b1 == 1'b1) & (1'b1 == LE_output_V_1_vld_reg))) begin
        LE_output_V_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == LE_output_V_1_vld_reg) & (1'b1 == LE_output_V_1_vld_in)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b1 == 1'b1) & (1'b1 == LE_output_V_1_vld_in) & (1'b1 == LE_output_V_1_vld_reg)))) begin
        LE_output_V_1_data_reg[29 : 1] <= p_Result_6_fu_301_p4[29 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hewindow_pos_R_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hewindow_pos_R_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (hewindow_pos_R_V_0_vld_reg == 1'b1)))) begin
        hewindow_pos_R_V_0_data_reg <= hewindow_pos_R_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hewindow_pos_Z_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hewindow_pos_Z_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (hewindow_pos_Z_V_0_vld_reg == 1'b1)))) begin
        hewindow_pos_Z_V_0_data_reg <= hewindow_pos_Z_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hls_LT_r_global_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hls_LT_r_global_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (hls_LT_r_global_V_0_vld_reg == 1'b1)))) begin
        hls_LT_r_global_V_0_data_reg <= hls_LT_r_global_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hls_LT_theta_global_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hls_LT_theta_global_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (hls_LT_theta_global_V_0_vld_reg == 1'b1)))) begin
        hls_LT_theta_global_V_0_data_reg <= hls_LT_theta_global_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hls_cos_val_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hls_cos_val_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (hls_cos_val_V_0_vld_reg == 1'b1)))) begin
        hls_cos_val_V_0_data_reg <= hls_cos_val_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hls_cos_val_V_read_reg_336 <= hls_cos_val_V_0_data_reg;
        p_Result_7_reg_368 <= p_Result_7_fu_173_p1;
        r_0_V_reg_341 <= r_0_V_fu_148_p2;
        r_V_reg_356 <= r_V_fu_317_p2;
        ret_V_3_reg_346 <= ret_V_3_fu_311_p2;
        trunc_ln1192_reg_351 <= trunc_ln1192_fu_162_p1;
        trunc_ln851_reg_363 <= trunc_ln851_fu_170_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hls_sin_val_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hls_sin_val_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (hls_sin_val_V_0_vld_reg == 1'b1)))) begin
        hls_sin_val_V_0_data_reg <= hls_sin_val_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        p_Result_7_reg_368_pp0_iter2_reg <= p_Result_7_reg_368;
        p_Result_7_reg_368_pp0_iter3_reg <= p_Result_7_reg_368_pp0_iter2_reg;
        p_Result_7_reg_368_pp0_iter4_reg <= p_Result_7_reg_368_pp0_iter3_reg;
        r_V_1_reg_398 <= r_V_1_fu_330_p2;
        ret_V_2_reg_373 <= ret_V_2_fu_324_p2;
        sin_inv_V_reg_393 <= lut_divider_barrel_V_q0;
        trunc_ln1192_reg_351_pp0_iter2_reg <= trunc_ln1192_reg_351;
        z_2_V_reg_388 <= {{ret_V_4_fu_271_p2[20:3]}};
        z_fixed_int_shift_V_reg_378 <= {{ret_V_3_reg_346[34:17]}};
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (slcvec_pos_R_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (slcvec_pos_R_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (slcvec_pos_R_V_0_vld_reg == 1'b1)))) begin
        slcvec_pos_R_V_0_data_reg <= slcvec_pos_R_V;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        LE_output_V_1_vld_in = 1'b1;
    end else begin
        LE_output_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to5 = 1'b1;
    end else begin
        ap_idle_pp0_0to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        hewindow_pos_R_V_0_ack_out = 1'b1;
    end else begin
        hewindow_pos_R_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        hewindow_pos_Z_V_0_ack_out = 1'b1;
    end else begin
        hewindow_pos_Z_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        hls_LT_r_global_V_0_ack_out = 1'b1;
    end else begin
        hls_LT_r_global_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        hls_LT_theta_global_V_0_ack_out = 1'b1;
    end else begin
        hls_LT_theta_global_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        hls_cos_val_V_0_ack_out = 1'b1;
    end else begin
        hls_cos_val_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        hls_sin_val_V_0_ack_out = 1'b1;
    end else begin
        hls_sin_val_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut_divider_barrel_V_ce0 = 1'b1;
    end else begin
        lut_divider_barrel_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        slcvec_pos_R_V_0_ack_out = 1'b1;
    end else begin
        slcvec_pos_R_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LE_output_V = LE_output_V_1_data_reg;

assign LE_output_V_ap_vld = LE_output_V_1_vld_reg;

assign add_ln647_fu_213_p2 = (12'd1 + ret_V_cast9_fu_192_p4);

assign add_ln728_fu_258_p2 = (z_fixed_int_shift_V_reg_378 + r_fixed_int_shift_V_fu_249_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & ((2'd1 == LE_output_V_1_state) | ((2'd3 == LE_output_V_1_state) & (1'b1 == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & ((2'd1 == LE_output_V_1_state) | ((2'd3 == LE_output_V_1_state) & (1'b1 == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & ((2'd1 == LE_output_V_1_state) | ((2'd3 == LE_output_V_1_state) & (1'b1 == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter6 = ((2'd1 == LE_output_V_1_state) | ((2'd3 == LE_output_V_1_state) & (1'b1 == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign icmp_ln851_fu_208_p2 = ((trunc_ln851_reg_363 == 17'd0) ? 1'b1 : 1'b0);

assign lhs_V_fu_263_p3 = {{add_ln728_fu_258_p2}, {3'd0}};

assign lut_divider_barrel_V_address0 = zext_ln544_fu_244_p1;

assign p_Result_6_fu_301_p4 = {{{z_3_V_fu_292_p4}, {p_Result_7_reg_368_pp0_iter4_reg}}, {1'd0}};

assign p_Result_7_fu_173_p1 = hls_LT_theta_global_V_0_data_reg[10:0];

assign p_Result_s_fu_201_p3 = r_V_reg_356[32'd29];

assign r_0_V_fu_148_p2 = (slcvec_pos_R_V_0_data_reg - hewindow_pos_R_V_0_data_reg);

assign r_V_1_fu_330_p0 = r_V_1_fu_330_p00;

assign r_V_1_fu_330_p00 = sin_inv_V_reg_393;

assign r_V_1_fu_330_p1 = r_V_1_fu_330_p10;

assign r_V_1_fu_330_p10 = z_2_V_reg_388;

assign r_V_fu_317_p0 = 31'd3361;

assign r_fixed_int_shift_V_fu_249_p4 = {{ret_V_2_reg_373[34:17]}};

assign ret_V_4_fu_271_p2 = (lhs_V_fu_263_p3 + trunc_ln1192_reg_351_pp0_iter2_reg);

assign ret_V_cast9_fu_192_p4 = {{r_V_reg_356[28:17]}};

assign select_ln851_fu_228_p3 = ((icmp_ln851_fu_208_p2[0:0] === 1'b1) ? tmp_1_fu_219_p4 : add_ln647_fu_213_p2);

assign tmp_1_fu_219_p4 = {{r_V_reg_356[28:17]}};

assign tmp_V_fu_236_p3 = ((p_Result_s_fu_201_p3[0:0] === 1'b1) ? select_ln851_fu_228_p3 : tmp_1_fu_219_p4);

assign trunc_ln1192_fu_162_p1 = hls_LT_r_global_V_0_data_reg[20:0];

assign trunc_ln851_fu_170_p1 = r_V_fu_317_p2[16:0];

assign z_3_V_fu_292_p4 = {{r_V_1_reg_398[31:14]}};

assign zext_ln544_fu_244_p1 = tmp_V_fu_236_p3;

always @ (posedge ap_clk) begin
    LE_output_V_1_state[1:0] <= 2'b00;
    LE_output_V_1_data_reg[0] <= 1'b0;
end

endmodule //get_legendre_segment_barrel
