// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="compute_r_bins,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku15p-ffva1760-1LV-i,HLS_INPUT_CLOCK=2.700000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.519000,HLS_SYN_LAT=7,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=478,HLS_SYN_LUT=303,HLS_VERSION=2019_1}" *)

module compute_r_bins (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mdt_hit_V_ap_vld,
        roi_seed_r_V,
        mdt_hit_V,
        hw_sin_val_V,
        hw_cos_val_V,
        r_bin_V_TDATA,
        r_bin_V_TVALID,
        r_bin_V_TREADY,
        enable_V,
        reset_V
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   mdt_hit_V_ap_vld;
input  [12:0] roi_seed_r_V;
input  [191:0] mdt_hit_V;
input  [23:0] hw_sin_val_V;
input  [23:0] hw_cos_val_V;
output  [7:0] r_bin_V_TDATA;
output   r_bin_V_TVALID;
input   r_bin_V_TREADY;
input  [0:0] enable_V;
input  [0:0] reset_V;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n;
reg    ap_block_state6_pp0_stage1_iter2;
wire    r_bin_V_1_ack_out;
reg   [1:0] r_bin_V_1_state;
reg    ap_block_state8_pp0_stage1_iter3;
reg    ap_block_pp0_stage1_11001;
reg   [191:0] mdt_hit_V_preg;
reg    mdt_hit_V_ap_vld_preg;
reg   [7:0] r_bin_V_1_data_out;
wire    r_bin_V_1_vld_in;
wire    r_bin_V_1_vld_out;
wire    r_bin_V_1_ack_in;
reg   [7:0] r_bin_V_1_payload_A;
reg   [7:0] r_bin_V_1_payload_B;
reg    r_bin_V_1_sel_rd;
reg    r_bin_V_1_sel_wr;
wire    r_bin_V_1_sel;
wire    r_bin_V_1_load_A;
wire    r_bin_V_1_load_B;
wire    r_bin_V_1_state_cmp_full;
reg    mdt_hit_V_blk_n;
wire    ap_block_pp0_stage1;
reg    r_bin_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
wire    grp_compute_r_bins_0_s_fu_84_ap_start;
wire    grp_compute_r_bins_0_s_fu_84_ap_done;
wire    grp_compute_r_bins_0_s_fu_84_ap_idle;
wire    grp_compute_r_bins_0_s_fu_84_ap_ready;
wire    grp_compute_r_bins_0_s_fu_84_r_bin_V_TREADY;
reg    grp_compute_r_bins_0_s_fu_84_ap_ce;
wire   [7:0] grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA;
wire    grp_compute_r_bins_0_s_fu_84_r_bin_V_TVALID;
reg    ap_block_state2_pp0_stage1_iter0_ignore_call17;
wire    ap_block_state4_pp0_stage1_iter1_ignore_call17;
wire    ap_block_state6_pp0_stage1_iter2_ignore_call17;
reg    ap_block_state8_pp0_stage1_iter3_ignore_call17;
reg    ap_block_pp0_stage1_11001_ignoreCallOp16;
reg    ap_block_state1_pp0_stage0_iter0_ignore_call17;
wire    ap_block_state3_pp0_stage0_iter1_ignore_call17;
wire    ap_block_state5_pp0_stage0_iter2_ignore_call17;
wire    ap_block_state7_pp0_stage0_iter3_ignore_call17;
reg    ap_block_pp0_stage0_11001_ignoreCallOp17;
reg    grp_compute_r_bins_0_s_fu_84_ap_start_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state7_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [1:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 r_bin_V_1_state = 2'd0;
#0 mdt_hit_V_preg = 192'd0;
#0 mdt_hit_V_ap_vld_preg = 1'b0;
#0 r_bin_V_1_sel_rd = 1'b0;
#0 r_bin_V_1_sel_wr = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 grp_compute_r_bins_0_s_fu_84_ap_start_reg = 1'b0;
end

compute_r_bins_0_s grp_compute_r_bins_0_s_fu_84(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_compute_r_bins_0_s_fu_84_ap_start),
    .ap_done(grp_compute_r_bins_0_s_fu_84_ap_done),
    .ap_idle(grp_compute_r_bins_0_s_fu_84_ap_idle),
    .ap_ready(grp_compute_r_bins_0_s_fu_84_ap_ready),
    .r_bin_V_TREADY(grp_compute_r_bins_0_s_fu_84_r_bin_V_TREADY),
    .ap_ce(grp_compute_r_bins_0_s_fu_84_ap_ce),
    .roi_seed_r_V(roi_seed_r_V),
    .mdt_hit_V(mdt_hit_V_preg),
    .hw_sin_val_V(hw_sin_val_V),
    .hw_cos_val_V(hw_cos_val_V),
    .r_bin_V_TDATA(grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA),
    .r_bin_V_TVALID(grp_compute_r_bins_0_s_fu_84_r_bin_V_TVALID),
    .enable_V(enable_V),
    .reset_V(reset_V),
    .r_bin_V_TDATA_blk_n(grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_compute_r_bins_0_s_fu_84_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_compute_r_bins_0_s_fu_84_ap_start_reg <= 1'b1;
        end else if ((grp_compute_r_bins_0_s_fu_84_ap_ready == 1'b1)) begin
            grp_compute_r_bins_0_s_fu_84_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mdt_hit_V_ap_vld_preg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (mdt_hit_V_ap_vld == 1'b1))) begin
            mdt_hit_V_ap_vld_preg <= mdt_hit_V_ap_vld;
        end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            mdt_hit_V_ap_vld_preg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mdt_hit_V_preg <= 192'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (mdt_hit_V_ap_vld == 1'b1))) begin
            mdt_hit_V_preg <= mdt_hit_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        r_bin_V_1_sel_rd <= 1'b0;
    end else begin
        if (((r_bin_V_1_vld_out == 1'b1) & (r_bin_V_1_ack_out == 1'b1))) begin
            r_bin_V_1_sel_rd <= ~r_bin_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        r_bin_V_1_sel_wr <= 1'b0;
    end else begin
        if (((r_bin_V_1_ack_in == 1'b1) & (r_bin_V_1_vld_in == 1'b1))) begin
            r_bin_V_1_sel_wr <= ~r_bin_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        r_bin_V_1_state <= 2'd0;
    end else begin
        if ((((r_bin_V_1_state == 2'd3) & (r_bin_V_1_vld_in == 1'b0) & (r_bin_V_1_ack_out == 1'b1)) | ((r_bin_V_1_state == 2'd2) & (r_bin_V_1_vld_in == 1'b0)))) begin
            r_bin_V_1_state <= 2'd2;
        end else if ((((r_bin_V_1_state == 2'd1) & (r_bin_V_TREADY == 1'b0)) | ((r_bin_V_1_state == 2'd3) & (r_bin_V_TREADY == 1'b0) & (r_bin_V_1_vld_in == 1'b1)))) begin
            r_bin_V_1_state <= 2'd1;
        end else if ((((r_bin_V_1_state == 2'd1) & (r_bin_V_1_ack_out == 1'b1)) | (~((r_bin_V_1_vld_in == 1'b0) & (r_bin_V_1_ack_out == 1'b1)) & ~((r_bin_V_TREADY == 1'b0) & (r_bin_V_1_vld_in == 1'b1)) & (r_bin_V_1_state == 2'd3)) | ((r_bin_V_1_state == 2'd2) & (r_bin_V_1_vld_in == 1'b1)))) begin
            r_bin_V_1_state <= 2'd3;
        end else begin
            r_bin_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((r_bin_V_1_load_A == 1'b1)) begin
        r_bin_V_1_payload_A <= grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((r_bin_V_1_load_B == 1'b1)) begin
        r_bin_V_1_payload_B <= grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp16)) | ((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp17) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_compute_r_bins_0_s_fu_84_ap_ce = 1'b1;
    end else begin
        grp_compute_r_bins_0_s_fu_84_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        mdt_hit_V_blk_n = 1'b0;
    end else begin
        mdt_hit_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((r_bin_V_1_sel == 1'b1)) begin
        r_bin_V_1_data_out = r_bin_V_1_payload_B;
    end else begin
        r_bin_V_1_data_out = r_bin_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        r_bin_V_TDATA_blk_n = grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n;
    end else begin
        r_bin_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp17 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((r_bin_V_1_state == 2'd1) | ((r_bin_V_1_state == 2'd3) & (r_bin_V_TREADY == 1'b0)))) | ((grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((mdt_hit_V_ap_vld_preg == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_ignoreCallOp16 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((r_bin_V_1_state == 2'd1) | ((r_bin_V_1_state == 2'd3) & (r_bin_V_TREADY == 1'b0)))) | ((mdt_hit_V_ap_vld_preg == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((r_bin_V_1_state == 2'd1) | ((r_bin_V_1_state == 2'd3) & (r_bin_V_TREADY == 1'b0)))) | ((grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((mdt_hit_V_ap_vld_preg == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0_ignore_call17 = (ap_start == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (mdt_hit_V_ap_vld_preg == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0_ignore_call17 = (mdt_hit_V_ap_vld_preg == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1_ignore_call17 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1_ignore_call17 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2_ignore_call17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage1_iter2 = (grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n == 1'b0);
end

assign ap_block_state6_pp0_stage1_iter2_ignore_call17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter3 = (grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n == 1'b0);
end

assign ap_block_state7_pp0_stage0_iter3_ignore_call17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage1_iter3 = ((r_bin_V_1_state == 2'd1) | ((r_bin_V_1_state == 2'd3) & (r_bin_V_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state8_pp0_stage1_iter3_ignore_call17 = ((r_bin_V_1_state == 2'd1) | ((r_bin_V_1_state == 2'd3) & (r_bin_V_TREADY == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_compute_r_bins_0_s_fu_84_ap_start = grp_compute_r_bins_0_s_fu_84_ap_start_reg;

assign grp_compute_r_bins_0_s_fu_84_r_bin_V_TREADY = ((r_bin_V_1_ack_in & ap_CS_fsm_pp0_stage1) | (r_bin_V_1_ack_in & ap_CS_fsm_pp0_stage0));

assign r_bin_V_1_ack_in = r_bin_V_1_state[1'd1];

assign r_bin_V_1_ack_out = r_bin_V_TREADY;

assign r_bin_V_1_load_A = (r_bin_V_1_state_cmp_full & ~r_bin_V_1_sel_wr);

assign r_bin_V_1_load_B = (r_bin_V_1_state_cmp_full & r_bin_V_1_sel_wr);

assign r_bin_V_1_sel = r_bin_V_1_sel_rd;

assign r_bin_V_1_state_cmp_full = ((r_bin_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign r_bin_V_1_vld_in = grp_compute_r_bins_0_s_fu_84_r_bin_V_TVALID;

assign r_bin_V_1_vld_out = r_bin_V_1_state[1'd0];

assign r_bin_V_TDATA = r_bin_V_1_data_out;

assign r_bin_V_TVALID = r_bin_V_1_state[1'd0];

endmodule //compute_r_bins
