// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute_r_bins_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_bin_V_TREADY,
        ap_ce,
        roi_seed_r_V,
        mdt_hit_V,
        hw_sin_val_V,
        hw_cos_val_V,
        r_bin_V_TDATA,
        r_bin_V_TVALID,
        enable_V,
        reset_V,
        r_bin_V_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   r_bin_V_TREADY;
input   ap_ce;
input  [12:0] roi_seed_r_V;
input  [191:0] mdt_hit_V;
input  [23:0] hw_sin_val_V;
input  [23:0] hw_cos_val_V;
output  [7:0] r_bin_V_TDATA;
output   r_bin_V_TVALID;
input  [0:0] enable_V;
input  [0:0] reset_V;
output   r_bin_V_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] r_bin_V_TDATA;
reg r_bin_V_TVALID;
reg r_bin_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
reg   [0:0] or_ln676_reg_298;
reg   [0:0] or_ln676_reg_298_pp0_iter2_reg;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] or_ln676_reg_298_pp0_iter1_reg;
wire    ap_block_pp0_stage1;
reg  signed [14:0] p_Result_16_reg_287;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
reg  signed [8:0] p_Result_17_reg_292;
reg  signed [8:0] p_Result_17_reg_292_pp0_iter1_reg;
wire   [0:0] or_ln676_fu_142_p2;
reg   [12:0] roi_seed_r_V_read_reg_312;
wire  signed [34:0] grp_fu_275_p2;
reg  signed [34:0] ret_V_reg_317;
wire  signed [34:0] grp_fu_281_p2;
reg  signed [34:0] ret_V_3_reg_332;
reg   [12:0] Z_fixed_int_shift_V_reg_337;
wire   [14:0] ret_V_5_fu_209_p2;
reg   [14:0] ret_V_5_reg_342;
reg   [6:0] p_Result_1_reg_347;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
reg   [12:0] ap_port_reg_roi_seed_r_V;
reg   [23:0] ap_port_reg_hw_sin_val_V;
wire   [7:0] zext_ln321_fu_246_p1;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] zext_ln321_1_fu_271_p1;
wire    ap_block_pp0_stage1_01001;
wire   [0:0] xor_ln676_fu_136_p2;
wire  signed [14:0] p_Result_15_fu_112_p1;
wire  signed [21:0] p_Result_18_fu_148_p1;
wire  signed [21:0] p_Result_19_fu_160_p1;
wire   [12:0] R_fixed_int_shift_V_fu_180_p4;
wire  signed [13:0] rhs_V_fu_192_p1;
wire  signed [13:0] lhs_V_fu_189_p1;
wire   [13:0] ret_V_4_fu_196_p2;
wire  signed [14:0] lhs_V_1_fu_202_p1;
wire  signed [14:0] rhs_V_1_fu_206_p1;
wire  signed [15:0] sext_ln1192_fu_227_p1;
wire   [15:0] lhs_V_2_fu_220_p3;
wire   [15:0] add_ln1192_fu_230_p2;
wire   [6:0] p_Result_s_fu_236_p4;
wire   [8:0] sub_ln703_fu_215_p2;
wire  signed [15:0] sext_ln1192_1_fu_251_p1;
wire   [15:0] add_ln1192_1_fu_255_p2;
reg    grp_fu_275_ce;
reg    grp_fu_281_ce;
reg   [1:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

compute_r_bins_mul_mul_15s_22s_35_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 35 ))
compute_r_bins_mul_mul_15s_22s_35_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_Result_15_fu_112_p1),
    .din1(p_Result_18_fu_148_p1),
    .ce(grp_fu_275_ce),
    .dout(grp_fu_275_p2)
);

compute_r_bins_mul_mul_15s_22s_35_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 35 ))
compute_r_bins_mul_mul_15s_22s_35_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_Result_16_reg_287),
    .din1(p_Result_19_fu_160_p1),
    .ce(grp_fu_281_ce),
    .dout(grp_fu_281_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (or_ln676_reg_298 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Z_fixed_int_shift_V_reg_337 <= {{ret_V_reg_317[34:22]}};
        ret_V_3_reg_332 <= grp_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_port_reg_hw_sin_val_V <= hw_sin_val_V;
        ap_port_reg_roi_seed_r_V <= roi_seed_r_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_ln676_reg_298 <= or_ln676_fu_142_p2;
        or_ln676_reg_298_pp0_iter1_reg <= or_ln676_reg_298;
        or_ln676_reg_298_pp0_iter2_reg <= or_ln676_reg_298_pp0_iter1_reg;
        p_Result_16_reg_287 <= {{mdt_hit_V[78:64]}};
        p_Result_17_reg_292 <= {{mdt_hit_V[136:128]}};
        p_Result_17_reg_292_pp0_iter1_reg <= p_Result_17_reg_292;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (or_ln676_reg_298_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Result_1_reg_347 <= {{add_ln1192_1_fu_255_p2[9:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage1_11001) & (or_ln676_reg_298_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ret_V_5_reg_342 <= ret_V_5_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage1_11001) & (or_ln676_reg_298 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ret_V_reg_317 <= grp_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        roi_seed_r_V_read_reg_312 <= ap_port_reg_roi_seed_r_V;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))))) begin
        grp_fu_275_ce = 1'b1;
    end else begin
        grp_fu_275_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))))) begin
        grp_fu_281_ce = 1'b1;
    end else begin
        grp_fu_281_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (or_ln676_reg_298_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        r_bin_V_TDATA = zext_ln321_1_fu_271_p1;
    end else if ((((1'b1 == ap_ce) & (or_ln676_reg_298_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001)) | ((1'b1 == ap_ce) & (or_ln676_reg_298_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001)))) begin
        r_bin_V_TDATA = 8'd0;
    end else if (((1'b1 == ap_ce) & (or_ln676_reg_298_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        r_bin_V_TDATA = zext_ln321_fu_246_p1;
    end else begin
        r_bin_V_TDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (or_ln676_reg_298_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (or_ln676_reg_298_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((or_ln676_reg_298_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((or_ln676_reg_298_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        r_bin_V_TDATA_blk_n = r_bin_V_TREADY;
    end else begin
        r_bin_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage1_11001) & (or_ln676_reg_298_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage1_11001) & (or_ln676_reg_298_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_ce) & (or_ln676_reg_298_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_ce) & (or_ln676_reg_298_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        r_bin_V_TVALID = 1'b1;
    end else begin
        r_bin_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign R_fixed_int_shift_V_fu_180_p4 = {{ret_V_3_reg_332[34:22]}};

assign add_ln1192_1_fu_255_p2 = ($signed(sext_ln1192_1_fu_251_p1) + $signed(lhs_V_2_fu_220_p3));

assign add_ln1192_fu_230_p2 = ($signed(sext_ln1192_fu_227_p1) + $signed(lhs_V_2_fu_220_p3));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_io)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state6_io));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((1'b0 == ap_ce) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = (((or_ln676_reg_298_pp0_iter1_reg == 1'd0) & (r_bin_V_TREADY == 1'b0)) | ((or_ln676_reg_298_pp0_iter1_reg == 1'd1) & (r_bin_V_TREADY == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = (((or_ln676_reg_298_pp0_iter2_reg == 1'd1) & (r_bin_V_TREADY == 1'b0)) | ((or_ln676_reg_298_pp0_iter2_reg == 1'd0) & (r_bin_V_TREADY == 1'b0)));
end

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign lhs_V_1_fu_202_p1 = $signed(ret_V_4_fu_196_p2);

assign lhs_V_2_fu_220_p3 = {{ret_V_5_reg_342}, {1'd0}};

assign lhs_V_fu_189_p1 = $signed(Z_fixed_int_shift_V_reg_337);

assign or_ln676_fu_142_p2 = (xor_ln676_fu_136_p2 | reset_V);

assign p_Result_15_fu_112_p1 = mdt_hit_V[14:0];

assign p_Result_18_fu_148_p1 = hw_cos_val_V[21:0];

assign p_Result_19_fu_160_p1 = ap_port_reg_hw_sin_val_V[21:0];

assign p_Result_s_fu_236_p4 = {{add_ln1192_fu_230_p2[9:3]}};

assign ret_V_4_fu_196_p2 = ($signed(rhs_V_fu_192_p1) + $signed(lhs_V_fu_189_p1));

assign ret_V_5_fu_209_p2 = ($signed(lhs_V_1_fu_202_p1) - $signed(rhs_V_1_fu_206_p1));

assign rhs_V_1_fu_206_p1 = $signed(roi_seed_r_V_read_reg_312);

assign rhs_V_fu_192_p1 = $signed(R_fixed_int_shift_V_fu_180_p4);

assign sext_ln1192_1_fu_251_p1 = $signed(sub_ln703_fu_215_p2);

assign sext_ln1192_fu_227_p1 = p_Result_17_reg_292_pp0_iter1_reg;

assign sub_ln703_fu_215_p2 = ($signed(9'd0) - $signed(p_Result_17_reg_292_pp0_iter1_reg));

assign xor_ln676_fu_136_p2 = (enable_V ^ 1'd1);

assign zext_ln321_1_fu_271_p1 = p_Result_1_reg_347;

assign zext_ln321_fu_246_p1 = p_Result_s_fu_236_p4;

endmodule //compute_r_bins_0_s
