-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_r_bins is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mdt_hit_V_ap_vld : IN STD_LOGIC;
    roi_seed_r_V : IN STD_LOGIC_VECTOR (12 downto 0);
    mdt_hit_V : IN STD_LOGIC_VECTOR (191 downto 0);
    hw_sin_val_V : IN STD_LOGIC_VECTOR (23 downto 0);
    hw_cos_val_V : IN STD_LOGIC_VECTOR (23 downto 0);
    r_bin_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_bin_V_TVALID : OUT STD_LOGIC;
    r_bin_V_TREADY : IN STD_LOGIC;
    enable_V : IN STD_LOGIC_VECTOR (0 downto 0);
    reset_V : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of compute_r_bins is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "compute_r_bins,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku15p-ffva1760-1LV-i,HLS_INPUT_CLOCK=2.700000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.519000,HLS_SYN_LAT=7,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=478,HLS_SYN_LUT=303,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv192_lc_1 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal r_bin_V_1_ack_out : STD_LOGIC;
    signal r_bin_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal mdt_hit_V_preg : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal mdt_hit_V_ap_vld_preg : STD_LOGIC := '0';
    signal r_bin_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal r_bin_V_1_vld_in : STD_LOGIC;
    signal r_bin_V_1_vld_out : STD_LOGIC;
    signal r_bin_V_1_ack_in : STD_LOGIC;
    signal r_bin_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal r_bin_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal r_bin_V_1_sel_rd : STD_LOGIC := '0';
    signal r_bin_V_1_sel_wr : STD_LOGIC := '0';
    signal r_bin_V_1_sel : STD_LOGIC;
    signal r_bin_V_1_load_A : STD_LOGIC;
    signal r_bin_V_1_load_B : STD_LOGIC;
    signal r_bin_V_1_state_cmp_full : STD_LOGIC;
    signal mdt_hit_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal r_bin_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal grp_compute_r_bins_0_s_fu_84_ap_start : STD_LOGIC;
    signal grp_compute_r_bins_0_s_fu_84_ap_done : STD_LOGIC;
    signal grp_compute_r_bins_0_s_fu_84_ap_idle : STD_LOGIC;
    signal grp_compute_r_bins_0_s_fu_84_ap_ready : STD_LOGIC;
    signal grp_compute_r_bins_0_s_fu_84_r_bin_V_TREADY : STD_LOGIC;
    signal grp_compute_r_bins_0_s_fu_84_ap_ce : STD_LOGIC;
    signal grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_compute_r_bins_0_s_fu_84_r_bin_V_TVALID : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0_ignore_call17 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1_ignore_call17 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2_ignore_call17 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3_ignore_call17 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp16 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call17 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_ignore_call17 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2_ignore_call17 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3_ignore_call17 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp17 : BOOLEAN;
    signal grp_compute_r_bins_0_s_fu_84_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component compute_r_bins_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_bin_V_TREADY : IN STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        roi_seed_r_V : IN STD_LOGIC_VECTOR (12 downto 0);
        mdt_hit_V : IN STD_LOGIC_VECTOR (191 downto 0);
        hw_sin_val_V : IN STD_LOGIC_VECTOR (23 downto 0);
        hw_cos_val_V : IN STD_LOGIC_VECTOR (23 downto 0);
        r_bin_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        r_bin_V_TVALID : OUT STD_LOGIC;
        enable_V : IN STD_LOGIC_VECTOR (0 downto 0);
        reset_V : IN STD_LOGIC_VECTOR (0 downto 0);
        r_bin_V_TDATA_blk_n : OUT STD_LOGIC );
    end component;



begin
    grp_compute_r_bins_0_s_fu_84 : component compute_r_bins_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_compute_r_bins_0_s_fu_84_ap_start,
        ap_done => grp_compute_r_bins_0_s_fu_84_ap_done,
        ap_idle => grp_compute_r_bins_0_s_fu_84_ap_idle,
        ap_ready => grp_compute_r_bins_0_s_fu_84_ap_ready,
        r_bin_V_TREADY => grp_compute_r_bins_0_s_fu_84_r_bin_V_TREADY,
        ap_ce => grp_compute_r_bins_0_s_fu_84_ap_ce,
        roi_seed_r_V => roi_seed_r_V,
        mdt_hit_V => mdt_hit_V_preg,
        hw_sin_val_V => hw_sin_val_V,
        hw_cos_val_V => hw_cos_val_V,
        r_bin_V_TDATA => grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA,
        r_bin_V_TVALID => grp_compute_r_bins_0_s_fu_84_r_bin_V_TVALID,
        enable_V => enable_V,
        reset_V => reset_V,
        r_bin_V_TDATA_blk_n => grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_r_bins_0_s_fu_84_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_compute_r_bins_0_s_fu_84_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_compute_r_bins_0_s_fu_84_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_r_bins_0_s_fu_84_ap_ready = ap_const_logic_1)) then 
                    grp_compute_r_bins_0_s_fu_84_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    mdt_hit_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mdt_hit_V_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (mdt_hit_V_ap_vld = ap_const_logic_1))) then 
                    mdt_hit_V_ap_vld_preg <= mdt_hit_V_ap_vld;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    mdt_hit_V_ap_vld_preg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    mdt_hit_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mdt_hit_V_preg <= ap_const_lv192_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (mdt_hit_V_ap_vld = ap_const_logic_1))) then 
                    mdt_hit_V_preg <= mdt_hit_V;
                end if; 
            end if;
        end if;
    end process;


    r_bin_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                r_bin_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((r_bin_V_1_vld_out = ap_const_logic_1) and (r_bin_V_1_ack_out = ap_const_logic_1))) then 
                                        r_bin_V_1_sel_rd <= not(r_bin_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    r_bin_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                r_bin_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((r_bin_V_1_ack_in = ap_const_logic_1) and (r_bin_V_1_vld_in = ap_const_logic_1))) then 
                                        r_bin_V_1_sel_wr <= not(r_bin_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    r_bin_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                r_bin_V_1_state <= ap_const_lv2_0;
            else
                if ((((r_bin_V_1_state = ap_const_lv2_3) and (r_bin_V_1_vld_in = ap_const_logic_0) and (r_bin_V_1_ack_out = ap_const_logic_1)) or ((r_bin_V_1_state = ap_const_lv2_2) and (r_bin_V_1_vld_in = ap_const_logic_0)))) then 
                    r_bin_V_1_state <= ap_const_lv2_2;
                elsif ((((r_bin_V_1_state = ap_const_lv2_1) and (r_bin_V_TREADY = ap_const_logic_0)) or ((r_bin_V_1_state = ap_const_lv2_3) and (r_bin_V_TREADY = ap_const_logic_0) and (r_bin_V_1_vld_in = ap_const_logic_1)))) then 
                    r_bin_V_1_state <= ap_const_lv2_1;
                elsif ((((r_bin_V_1_state = ap_const_lv2_1) and (r_bin_V_1_ack_out = ap_const_logic_1)) or (not(((r_bin_V_1_vld_in = ap_const_logic_0) and (r_bin_V_1_ack_out = ap_const_logic_1))) and not(((r_bin_V_TREADY = ap_const_logic_0) and (r_bin_V_1_vld_in = ap_const_logic_1))) and (r_bin_V_1_state = ap_const_lv2_3)) or ((r_bin_V_1_state = ap_const_lv2_2) and (r_bin_V_1_vld_in = ap_const_logic_1)))) then 
                    r_bin_V_1_state <= ap_const_lv2_3;
                else 
                    r_bin_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((r_bin_V_1_load_A = ap_const_logic_1)) then
                r_bin_V_1_payload_A <= grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((r_bin_V_1_load_B = ap_const_logic_1)) then
                r_bin_V_1_payload_B <= grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to3, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n)
    begin
                ap_block_pp0_stage0_11001 <= (((grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp17_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp17 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n)
    begin
                ap_block_pp0_stage0_subdone <= (((grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n, r_bin_V_1_state, mdt_hit_V_ap_vld_preg, r_bin_V_TREADY)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((r_bin_V_1_state = ap_const_lv2_1) or ((r_bin_V_1_state = ap_const_lv2_3) and (r_bin_V_TREADY = ap_const_logic_0)))) or ((grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((mdt_hit_V_ap_vld_preg = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_11001_ignoreCallOp16_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, r_bin_V_1_state, mdt_hit_V_ap_vld_preg, r_bin_V_TREADY)
    begin
                ap_block_pp0_stage1_11001_ignoreCallOp16 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((r_bin_V_1_state = ap_const_lv2_1) or ((r_bin_V_1_state = ap_const_lv2_3) and (r_bin_V_TREADY = ap_const_logic_0)))) or ((mdt_hit_V_ap_vld_preg = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n, r_bin_V_1_state, mdt_hit_V_ap_vld_preg, r_bin_V_TREADY)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((r_bin_V_1_state = ap_const_lv2_1) or ((r_bin_V_1_state = ap_const_lv2_3) and (r_bin_V_TREADY = ap_const_logic_0)))) or ((grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((mdt_hit_V_ap_vld_preg = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call17_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call17 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(mdt_hit_V_ap_vld_preg)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (mdt_hit_V_ap_vld_preg = ap_const_logic_0);
    end process;


    ap_block_state2_pp0_stage1_iter0_ignore_call17_assign_proc : process(mdt_hit_V_ap_vld_preg)
    begin
                ap_block_state2_pp0_stage1_iter0_ignore_call17 <= (mdt_hit_V_ap_vld_preg = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1_ignore_call17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1_ignore_call17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2_ignore_call17 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage1_iter2_assign_proc : process(grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n)
    begin
                ap_block_state6_pp0_stage1_iter2 <= (grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n = ap_const_logic_0);
    end process;

        ap_block_state6_pp0_stage1_iter2_ignore_call17 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter3_assign_proc : process(grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n)
    begin
                ap_block_state7_pp0_stage0_iter3 <= (grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n = ap_const_logic_0);
    end process;

        ap_block_state7_pp0_stage0_iter3_ignore_call17 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage1_iter3_assign_proc : process(r_bin_V_1_state, r_bin_V_TREADY)
    begin
                ap_block_state8_pp0_stage1_iter3 <= ((r_bin_V_1_state = ap_const_lv2_1) or ((r_bin_V_1_state = ap_const_lv2_3) and (r_bin_V_TREADY = ap_const_logic_0)));
    end process;


    ap_block_state8_pp0_stage1_iter3_ignore_call17_assign_proc : process(r_bin_V_1_state, r_bin_V_TREADY)
    begin
                ap_block_state8_pp0_stage1_iter3_ignore_call17 <= ((r_bin_V_1_state = ap_const_lv2_1) or ((r_bin_V_1_state = ap_const_lv2_3) and (r_bin_V_TREADY = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_compute_r_bins_0_s_fu_84_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001_ignoreCallOp16, ap_block_pp0_stage0_11001_ignoreCallOp17)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp16)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp17) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_compute_r_bins_0_s_fu_84_ap_ce <= ap_const_logic_1;
        else 
            grp_compute_r_bins_0_s_fu_84_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_compute_r_bins_0_s_fu_84_ap_start <= grp_compute_r_bins_0_s_fu_84_ap_start_reg;
    grp_compute_r_bins_0_s_fu_84_r_bin_V_TREADY <= ((r_bin_V_1_ack_in and ap_CS_fsm_pp0_stage1) or (r_bin_V_1_ack_in and ap_CS_fsm_pp0_stage0));

    mdt_hit_V_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            mdt_hit_V_blk_n <= ap_const_logic_0;
        else 
            mdt_hit_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    r_bin_V_1_ack_in <= r_bin_V_1_state(1);
    r_bin_V_1_ack_out <= r_bin_V_TREADY;

    r_bin_V_1_data_out_assign_proc : process(r_bin_V_1_payload_A, r_bin_V_1_payload_B, r_bin_V_1_sel)
    begin
        if ((r_bin_V_1_sel = ap_const_logic_1)) then 
            r_bin_V_1_data_out <= r_bin_V_1_payload_B;
        else 
            r_bin_V_1_data_out <= r_bin_V_1_payload_A;
        end if; 
    end process;

    r_bin_V_1_load_A <= (r_bin_V_1_state_cmp_full and not(r_bin_V_1_sel_wr));
    r_bin_V_1_load_B <= (r_bin_V_1_state_cmp_full and r_bin_V_1_sel_wr);
    r_bin_V_1_sel <= r_bin_V_1_sel_rd;
    r_bin_V_1_state_cmp_full <= '0' when (r_bin_V_1_state = ap_const_lv2_1) else '1';
    r_bin_V_1_vld_in <= grp_compute_r_bins_0_s_fu_84_r_bin_V_TVALID;
    r_bin_V_1_vld_out <= r_bin_V_1_state(0);
    r_bin_V_TDATA <= r_bin_V_1_data_out;

    r_bin_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            r_bin_V_TDATA_blk_n <= grp_compute_r_bins_0_s_fu_84_r_bin_V_TDATA_blk_n;
        else 
            r_bin_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    r_bin_V_TVALID <= r_bin_V_1_state(0);
end behav;
