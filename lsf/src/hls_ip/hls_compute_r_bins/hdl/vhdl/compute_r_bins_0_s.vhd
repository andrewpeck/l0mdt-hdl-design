-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_r_bins_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_bin_V_TREADY : IN STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    roi_seed_r_V : IN STD_LOGIC_VECTOR (12 downto 0);
    mdt_hit_V : IN STD_LOGIC_VECTOR (191 downto 0);
    hw_sin_val_V : IN STD_LOGIC_VECTOR (23 downto 0);
    hw_cos_val_V : IN STD_LOGIC_VECTOR (23 downto 0);
    r_bin_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_bin_V_TVALID : OUT STD_LOGIC;
    enable_V : IN STD_LOGIC_VECTOR (0 downto 0);
    reset_V : IN STD_LOGIC_VECTOR (0 downto 0);
    r_bin_V_TDATA_blk_n : OUT STD_LOGIC );
end;


architecture behav of compute_r_bins_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal or_ln676_reg_298 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln676_reg_298_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal or_ln676_reg_298_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal p_Result_16_reg_287 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_Result_17_reg_292 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_17_reg_292_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln676_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal roi_seed_r_V_read_reg_312 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal ret_V_reg_317 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_281_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal ret_V_3_reg_332 : STD_LOGIC_VECTOR (34 downto 0);
    signal Z_fixed_int_shift_V_reg_337 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_5_fu_209_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_5_reg_342 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_1_reg_347 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_port_reg_roi_seed_r_V : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_port_reg_hw_sin_val_V : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln321_fu_246_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln321_1_fu_271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal xor_ln676_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_112_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_18_fu_148_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_19_fu_160_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal R_fixed_int_shift_V_fu_180_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_fu_192_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lhs_V_fu_189_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_4_fu_196_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lhs_V_1_fu_202_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal rhs_V_1_fu_206_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1192_fu_227_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_2_fu_220_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1192_fu_230_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_236_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln703_fu_215_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1192_1_fu_251_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1192_1_fu_255_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_275_ce : STD_LOGIC;
    signal grp_fu_281_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component compute_r_bins_mul_mul_15s_22s_35_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;



begin
    compute_r_bins_mul_mul_15s_22s_35_2_1_U1 : component compute_r_bins_mul_mul_15s_22s_35_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 22,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_Result_15_fu_112_p1,
        din1 => p_Result_18_fu_148_p1,
        ce => grp_fu_275_ce,
        dout => grp_fu_275_p2);

    compute_r_bins_mul_mul_15s_22s_35_2_1_U2 : component compute_r_bins_mul_mul_15s_22s_35_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 22,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_Result_16_reg_287,
        din1 => p_Result_19_fu_160_p1,
        ce => grp_fu_281_ce,
        dout => grp_fu_281_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (or_ln676_reg_298 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                Z_fixed_int_shift_V_reg_337 <= ret_V_reg_317(34 downto 22);
                ret_V_3_reg_332 <= grp_fu_281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_port_reg_hw_sin_val_V <= hw_sin_val_V;
                ap_port_reg_roi_seed_r_V <= roi_seed_r_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_ln676_reg_298 <= or_ln676_fu_142_p2;
                or_ln676_reg_298_pp0_iter1_reg <= or_ln676_reg_298;
                or_ln676_reg_298_pp0_iter2_reg <= or_ln676_reg_298_pp0_iter1_reg;
                p_Result_16_reg_287 <= mdt_hit_V(78 downto 64);
                p_Result_17_reg_292 <= mdt_hit_V(136 downto 128);
                p_Result_17_reg_292_pp0_iter1_reg <= p_Result_17_reg_292;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (or_ln676_reg_298_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_1_reg_347 <= add_ln1192_1_fu_255_p2(9 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (or_ln676_reg_298_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ret_V_5_reg_342 <= ret_V_5_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (or_ln676_reg_298 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ret_V_reg_317 <= grp_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                roi_seed_r_V_read_reg_312 <= ap_port_reg_roi_seed_r_V;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    R_fixed_int_shift_V_fu_180_p4 <= ret_V_3_reg_332(34 downto 22);
    add_ln1192_1_fu_255_p2 <= std_logic_vector(signed(sext_ln1192_1_fu_251_p1) + signed(lhs_V_2_fu_220_p3));
    add_ln1192_fu_230_p2 <= std_logic_vector(signed(sext_ln1192_fu_227_p1) + signed(lhs_V_2_fu_220_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_ce, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state6_io)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state6_io, ap_ce)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(r_bin_V_TREADY, or_ln676_reg_298_pp0_iter1_reg)
    begin
                ap_block_state5_io <= (((or_ln676_reg_298_pp0_iter1_reg = ap_const_lv1_0) and (r_bin_V_TREADY = ap_const_logic_0)) or ((or_ln676_reg_298_pp0_iter1_reg = ap_const_lv1_1) and (r_bin_V_TREADY = ap_const_logic_0)));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(r_bin_V_TREADY, or_ln676_reg_298_pp0_iter2_reg)
    begin
                ap_block_state6_io <= (((or_ln676_reg_298_pp0_iter2_reg = ap_const_lv1_1) and (r_bin_V_TREADY = ap_const_logic_0)) or ((or_ln676_reg_298_pp0_iter2_reg = ap_const_lv1_0) and (r_bin_V_TREADY = ap_const_logic_0)));
    end process;

        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_275_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))))) then 
            grp_fu_275_ce <= ap_const_logic_1;
        else 
            grp_fu_275_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_281_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))))) then 
            grp_fu_281_ce <= ap_const_logic_1;
        else 
            grp_fu_281_ce <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_1_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_4_fu_196_p2),15));

    lhs_V_2_fu_220_p3 <= (ret_V_5_reg_342 & ap_const_lv1_0);
        lhs_V_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Z_fixed_int_shift_V_reg_337),14));

    or_ln676_fu_142_p2 <= (xor_ln676_fu_136_p2 or reset_V);
    p_Result_15_fu_112_p1 <= mdt_hit_V(15 - 1 downto 0);
    p_Result_18_fu_148_p1 <= hw_cos_val_V(22 - 1 downto 0);
    p_Result_19_fu_160_p1 <= ap_port_reg_hw_sin_val_V(22 - 1 downto 0);
    p_Result_s_fu_236_p4 <= add_ln1192_fu_230_p2(9 downto 3);

    r_bin_V_TDATA_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, or_ln676_reg_298_pp0_iter2_reg, ap_ce, or_ln676_reg_298_pp0_iter1_reg, zext_ln321_fu_246_p1, ap_block_pp0_stage0_01001, zext_ln321_1_fu_271_p1, ap_block_pp0_stage1_01001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (or_ln676_reg_298_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001))) then 
            r_bin_V_TDATA <= zext_ln321_1_fu_271_p1;
        elsif ((((ap_const_logic_1 = ap_ce) and (or_ln676_reg_298_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001)) or ((ap_const_logic_1 = ap_ce) and (or_ln676_reg_298_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001)))) then 
            r_bin_V_TDATA <= ap_const_lv8_0;
        elsif (((ap_const_logic_1 = ap_ce) and (or_ln676_reg_298_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            r_bin_V_TDATA <= zext_ln321_fu_246_p1;
        else 
            r_bin_V_TDATA <= "XXXXXXXX";
        end if; 
    end process;


    r_bin_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, r_bin_V_TREADY, or_ln676_reg_298_pp0_iter2_reg, or_ln676_reg_298_pp0_iter1_reg, ap_block_pp0_stage1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (or_ln676_reg_298_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (or_ln676_reg_298_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((or_ln676_reg_298_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((or_ln676_reg_298_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            r_bin_V_TDATA_blk_n <= r_bin_V_TREADY;
        else 
            r_bin_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    r_bin_V_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, or_ln676_reg_298_pp0_iter2_reg, ap_block_pp0_stage1_11001, ap_ce, or_ln676_reg_298_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (or_ln676_reg_298_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (or_ln676_reg_298_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (or_ln676_reg_298_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_ce) and (or_ln676_reg_298_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            r_bin_V_TVALID <= ap_const_logic_1;
        else 
            r_bin_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_4_fu_196_p2 <= std_logic_vector(signed(rhs_V_fu_192_p1) + signed(lhs_V_fu_189_p1));
    ret_V_5_fu_209_p2 <= std_logic_vector(signed(lhs_V_1_fu_202_p1) - signed(rhs_V_1_fu_206_p1));
        rhs_V_1_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(roi_seed_r_V_read_reg_312),15));

        rhs_V_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(R_fixed_int_shift_V_fu_180_p4),14));

        sext_ln1192_1_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln703_fu_215_p2),16));

        sext_ln1192_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_17_reg_292_pp0_iter1_reg),16));

    sub_ln703_fu_215_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(p_Result_17_reg_292_pp0_iter1_reg));
    xor_ln676_fu_136_p2 <= (enable_V xor ap_const_lv1_1);
    zext_ln321_1_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_reg_347),8));
    zext_ln321_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_236_p4),8));
end behav;
