// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="calc_LE_r_offset_barrel,hls_ip_2019_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=3.125000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.533000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=183,HLS_SYN_LUT=97,HLS_VERSION=2019_1_1}" *)

module calc_LE_r_offset_barrel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        hw_sin_val_V,
        hw_cos_val_V,
        roi_seed_r_V,
        roi_seed_r_V_ap_vld,
        slcvec_pos_Z_V,
        slcvec_pos_Rho_V,
        hewindow_pos_Z_V,
        hewindow_pos_Rho_V
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] hw_sin_val_V;
input  [17:0] hw_cos_val_V;
output  [21:0] roi_seed_r_V;
output   roi_seed_r_V_ap_vld;
input  [13:0] slcvec_pos_Z_V;
input  [17:0] slcvec_pos_Rho_V;
input  [13:0] hewindow_pos_Z_V;
input  [17:0] hewindow_pos_Rho_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg roi_seed_r_V_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [17:0] hw_cos_val_V_read_reg_178;
reg  signed [17:0] hw_cos_val_V_read_reg_178_pp0_iter1_reg;
reg  signed [17:0] hw_sin_val_V_read_reg_183;
wire   [14:0] ret_V_fu_101_p2;
reg   [14:0] ret_V_reg_188;
reg   [14:0] ret_V_reg_188_pp0_iter1_reg;
wire   [18:0] ret_V_1_fu_115_p2;
reg   [18:0] ret_V_1_reg_193;
wire  signed [37:0] mul_ln1193_fu_165_p2;
reg  signed [37:0] mul_ln1193_reg_198;
wire  signed [37:0] grp_fu_171_p3;
reg  signed [37:0] add_ln1193_reg_203;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire    ap_block_pp0_stage0;
wire   [14:0] lhs_V_fu_93_p1;
wire   [14:0] rhs_V_fu_97_p1;
wire   [18:0] lhs_V_1_fu_107_p1;
wire   [18:0] rhs_V_1_fu_111_p1;
wire  signed [20:0] slcvec_pos_local_Rho_fu_121_p3;
wire  signed [19:0] slcvec_pos_local_Z_V_fu_135_p3;
(* use_dsp48 = "no" *) wire   [37:0] ret_V_2_fu_149_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

calc_LE_r_offset_barrel_mul_mul_18s_21s_38_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 21 ),
    .dout_WIDTH( 38 ))
calc_LE_r_offset_barrel_mul_mul_18s_21s_38_1_1_U1(
    .din0(hw_sin_val_V_read_reg_183),
    .din1(slcvec_pos_local_Rho_fu_121_p3),
    .dout(mul_ln1193_fu_165_p2)
);

calc_LE_r_offset_barrel_mac_muladd_18s_20s_38s_38_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 38 ),
    .dout_WIDTH( 38 ))
calc_LE_r_offset_barrel_mac_muladd_18s_20s_38s_38_1_1_U2(
    .din0(hw_cos_val_V_read_reg_178_pp0_iter1_reg),
    .din1(slcvec_pos_local_Z_V_fu_135_p3),
    .din2(mul_ln1193_reg_198),
    .dout(grp_fu_171_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        add_ln1193_reg_203 <= grp_fu_171_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hw_cos_val_V_read_reg_178 <= hw_cos_val_V;
        hw_cos_val_V_read_reg_178_pp0_iter1_reg <= hw_cos_val_V_read_reg_178;
        hw_sin_val_V_read_reg_183 <= hw_sin_val_V;
        mul_ln1193_reg_198 <= mul_ln1193_fu_165_p2;
        ret_V_1_reg_193 <= ret_V_1_fu_115_p2;
        ret_V_reg_188 <= ret_V_fu_101_p2;
        ret_V_reg_188_pp0_iter1_reg <= ret_V_reg_188;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        roi_seed_r_V_ap_vld = 1'b1;
    end else begin
        roi_seed_r_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign lhs_V_1_fu_107_p1 = slcvec_pos_Rho_V;

assign lhs_V_fu_93_p1 = slcvec_pos_Z_V;

assign ret_V_1_fu_115_p2 = (lhs_V_1_fu_107_p1 - rhs_V_1_fu_111_p1);

assign ret_V_2_fu_149_p2 = ($signed(add_ln1193_reg_203) + $signed(38'd274744737792));

assign ret_V_fu_101_p2 = (lhs_V_fu_93_p1 - rhs_V_fu_97_p1);

assign rhs_V_1_fu_111_p1 = hewindow_pos_Rho_V;

assign rhs_V_fu_97_p1 = hewindow_pos_Z_V;

assign roi_seed_r_V = {{ret_V_2_fu_149_p2[37:16]}};

assign slcvec_pos_local_Rho_fu_121_p3 = {{ret_V_1_reg_193}, {2'd0}};

assign slcvec_pos_local_Z_V_fu_135_p3 = {{ret_V_reg_188_pp0_iter1_reg}, {5'd0}};

endmodule //calc_LE_r_offset_barrel
