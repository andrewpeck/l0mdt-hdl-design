-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calc_LE_r_offset_barrel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    hw_sin_val_V : IN STD_LOGIC_VECTOR (17 downto 0);
    hw_cos_val_V : IN STD_LOGIC_VECTOR (17 downto 0);
    roi_seed_r_V : OUT STD_LOGIC_VECTOR (21 downto 0);
    roi_seed_r_V_ap_vld : OUT STD_LOGIC;
    slcvec_pos_Z_V : IN STD_LOGIC_VECTOR (13 downto 0);
    slcvec_pos_Rho_V : IN STD_LOGIC_VECTOR (17 downto 0);
    hewindow_pos_Z_V : IN STD_LOGIC_VECTOR (13 downto 0);
    hewindow_pos_Rho_V : IN STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of calc_LE_r_offset_barrel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "calc_LE_r_offset_barrel,hls_ip_2019_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=3.125000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.533000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=183,HLS_SYN_LUT=97,HLS_VERSION=2019_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv38_3FF8100000 : STD_LOGIC_VECTOR (37 downto 0) := "11111111111000000100000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal hw_cos_val_V_read_reg_178 : STD_LOGIC_VECTOR (17 downto 0);
    signal hw_cos_val_V_read_reg_178_pp0_iter1_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal hw_sin_val_V_read_reg_183 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_fu_101_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_reg_188 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_reg_188_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_1_fu_115_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_reg_193 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1193_fu_165_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1193_reg_198 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_171_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln1193_reg_203 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal lhs_V_fu_93_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal rhs_V_fu_97_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_V_1_fu_107_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_1_fu_111_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal slcvec_pos_local_Rho_fu_121_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal slcvec_pos_local_Z_V_fu_135_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_2_fu_149_p2 : STD_LOGIC_VECTOR (37 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_2_fu_149_p2 : signal is "no";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component calc_LE_r_offset_barrel_mul_mul_18s_21s_38_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component calc_LE_r_offset_barrel_mac_muladd_18s_20s_38s_38_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (37 downto 0);
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;



begin
    calc_LE_r_offset_barrel_mul_mul_18s_21s_38_1_1_U1 : component calc_LE_r_offset_barrel_mul_mul_18s_21s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 21,
        dout_WIDTH => 38)
    port map (
        din0 => hw_sin_val_V_read_reg_183,
        din1 => slcvec_pos_local_Rho_fu_121_p3,
        dout => mul_ln1193_fu_165_p2);

    calc_LE_r_offset_barrel_mac_muladd_18s_20s_38s_38_1_1_U2 : component calc_LE_r_offset_barrel_mac_muladd_18s_20s_38s_38_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        din2_WIDTH => 38,
        dout_WIDTH => 38)
    port map (
        din0 => hw_cos_val_V_read_reg_178_pp0_iter1_reg,
        din1 => slcvec_pos_local_Z_V_fu_135_p3,
        din2 => mul_ln1193_reg_198,
        dout => grp_fu_171_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                add_ln1193_reg_203 <= grp_fu_171_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                hw_cos_val_V_read_reg_178 <= hw_cos_val_V;
                hw_cos_val_V_read_reg_178_pp0_iter1_reg <= hw_cos_val_V_read_reg_178;
                hw_sin_val_V_read_reg_183 <= hw_sin_val_V;
                mul_ln1193_reg_198 <= mul_ln1193_fu_165_p2;
                ret_V_1_reg_193 <= ret_V_1_fu_115_p2;
                ret_V_reg_188 <= ret_V_fu_101_p2;
                ret_V_reg_188_pp0_iter1_reg <= ret_V_reg_188;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_1_fu_107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slcvec_pos_Rho_V),19));
    lhs_V_fu_93_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(slcvec_pos_Z_V),15));
    ret_V_1_fu_115_p2 <= std_logic_vector(unsigned(lhs_V_1_fu_107_p1) - unsigned(rhs_V_1_fu_111_p1));
    ret_V_2_fu_149_p2 <= std_logic_vector(signed(add_ln1193_reg_203) + signed(ap_const_lv38_3FF8100000));
    ret_V_fu_101_p2 <= std_logic_vector(unsigned(lhs_V_fu_93_p1) - unsigned(rhs_V_fu_97_p1));
    rhs_V_1_fu_111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hewindow_pos_Rho_V),19));
    rhs_V_fu_97_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hewindow_pos_Z_V),15));
    roi_seed_r_V <= ret_V_2_fu_149_p2(37 downto 16);

    roi_seed_r_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            roi_seed_r_V_ap_vld <= ap_const_logic_1;
        else 
            roi_seed_r_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    slcvec_pos_local_Rho_fu_121_p3 <= (ret_V_1_reg_193 & ap_const_lv2_0);
    slcvec_pos_local_Z_V_fu_135_p3 <= (ret_V_reg_188_pp0_iter1_reg & ap_const_lv5_0);
end behav;
