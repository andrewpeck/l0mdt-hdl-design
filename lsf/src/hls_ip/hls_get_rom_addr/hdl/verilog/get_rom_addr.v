// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="get_rom_addr,hls_ip_2019_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku15p-ffva1760-1LV-i,HLS_INPUT_CLOCK=3.125000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.519375,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=39,HLS_SYN_LUT=167,HLS_VERSION=2019_1_1}" *)

module get_rom_addr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        theta_for_lut_V_ap_vld,
        theta_for_lut_V,
        rom_index_V,
        rom_index_V_ap_vld,
        lut_start_addr_V,
        lut_start_addr_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   theta_for_lut_V_ap_vld;
input  [17:0] theta_for_lut_V;
output  [3:0] rom_index_V;
output   rom_index_V_ap_vld;
output  [13:0] lut_start_addr_V;
output   lut_start_addr_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rom_index_V_ap_vld;
reg lut_start_addr_V_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    theta_for_lut_V_ap_vld_in_sig;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [17:0] theta_for_lut_V_preg;
reg   [17:0] theta_for_lut_V_in_sig;
reg    theta_for_lut_V_ap_vld_preg;
reg    theta_for_lut_V_blk_n;
wire    ap_block_pp0_stage0;
wire   [17:0] add_ln703_fu_70_p2;
reg   [17:0] add_ln703_reg_157;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [23:0] r_V_fu_76_p3;
wire  signed [24:0] sext_ln1118_fu_83_p1;
wire   [24:0] add_ln1192_fu_87_p2;
wire   [14:0] tmp_fu_93_p4;
wire   [9:0] trunc_ln851_fu_115_p1;
wire  signed [15:0] sext_ln835_fu_103_p1;
wire   [0:0] icmp_ln851_fu_119_p2;
wire   [15:0] ret_V_fu_125_p2;
wire   [0:0] p_Result_s_fu_107_p3;
wire   [15:0] select_ln851_fu_131_p3;
wire   [15:0] select_ln850_fu_139_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 theta_for_lut_V_preg = 18'd0;
#0 theta_for_lut_V_ap_vld_preg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        theta_for_lut_V_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            theta_for_lut_V_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (theta_for_lut_V_ap_vld == 1'b1))) begin
            theta_for_lut_V_ap_vld_preg <= theta_for_lut_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        theta_for_lut_V_preg <= 18'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (theta_for_lut_V_ap_vld == 1'b1))) begin
            theta_for_lut_V_preg <= theta_for_lut_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln703_reg_157 <= add_ln703_fu_70_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut_start_addr_V_ap_vld = 1'b1;
    end else begin
        lut_start_addr_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rom_index_V_ap_vld = 1'b1;
    end else begin
        rom_index_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((theta_for_lut_V_ap_vld == 1'b1)) begin
        theta_for_lut_V_ap_vld_in_sig = theta_for_lut_V_ap_vld;
    end else begin
        theta_for_lut_V_ap_vld_in_sig = theta_for_lut_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        theta_for_lut_V_blk_n = theta_for_lut_V_ap_vld;
    end else begin
        theta_for_lut_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((theta_for_lut_V_ap_vld == 1'b1)) begin
        theta_for_lut_V_in_sig = theta_for_lut_V;
    end else begin
        theta_for_lut_V_in_sig = theta_for_lut_V_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_fu_87_p2 = ($signed(25'd3282944) + $signed(sext_ln1118_fu_83_p1));

assign add_ln703_fu_70_p2 = ($signed(18'd262136) + $signed(theta_for_lut_V_in_sig));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (theta_for_lut_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (theta_for_lut_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (theta_for_lut_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (theta_for_lut_V_ap_vld_in_sig == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign icmp_ln851_fu_119_p2 = ((trunc_ln851_fu_115_p1 == 10'd0) ? 1'b1 : 1'b0);

assign lut_start_addr_V = select_ln850_fu_139_p3[13:0];

assign p_Result_s_fu_107_p3 = add_ln1192_fu_87_p2[32'd24];

assign r_V_fu_76_p3 = {{add_ln703_reg_157}, {6'd0}};

assign ret_V_fu_125_p2 = ($signed(16'd1) + $signed(sext_ln835_fu_103_p1));

assign rom_index_V = select_ln850_fu_139_p3[3:0];

assign select_ln850_fu_139_p3 = ((p_Result_s_fu_107_p3[0:0] === 1'b1) ? select_ln851_fu_131_p3 : sext_ln835_fu_103_p1);

assign select_ln851_fu_131_p3 = ((icmp_ln851_fu_119_p2[0:0] === 1'b1) ? sext_ln835_fu_103_p1 : ret_V_fu_125_p2);

assign sext_ln1118_fu_83_p1 = $signed(r_V_fu_76_p3);

assign sext_ln835_fu_103_p1 = $signed(tmp_fu_93_p4);

assign tmp_fu_93_p4 = {{add_ln1192_fu_87_p2[24:10]}};

assign trunc_ln851_fu_115_p1 = add_ln1192_fu_87_p2[9:0];

endmodule //get_rom_addr
