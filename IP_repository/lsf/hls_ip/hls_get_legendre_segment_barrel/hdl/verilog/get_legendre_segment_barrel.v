// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

(* CORE_GENERATION_INFO="get_legendre_segment_barrel,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku15p-ffva1760-2-e,HLS_INPUT_CLOCK=3.125000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.533000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=16,HLS_SYN_DSP=4,HLS_SYN_FF=430,HLS_SYN_LUT=151,HLS_VERSION=2019_2_1}" *)

module get_legendre_segment_barrel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        hls_sin_val_V,
        hls_cos_val_V,
        hls_LT_r_global_V,
        slcvec_pos_R_V,
        hewindow_pos_Z_V,
        hewindow_pos_R_V,
        hls_LT_theta_global_V,
        segpos_V,
        segpos_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] hls_sin_val_V;
input  [17:0] hls_cos_val_V;
input  [21:0] hls_LT_r_global_V;
input  [17:0] slcvec_pos_R_V;
input  [17:0] hewindow_pos_Z_V;
input  [17:0] hewindow_pos_R_V;
input  [13:0] hls_LT_theta_global_V;
output  [17:0] segpos_V;
output   segpos_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
reg    segpos_V_1_ack_in;
reg    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg  signed [17:0] hls_sin_val_V_0_data_reg;
reg    hls_sin_val_V_0_vld_reg;
reg    hls_sin_val_V_0_ack_out;
reg   [17:0] hls_cos_val_V_0_data_reg;
reg    hls_cos_val_V_0_vld_reg;
reg    hls_cos_val_V_0_ack_out;
reg   [21:0] hls_LT_r_global_V_0_data_reg;
reg    hls_LT_r_global_V_0_vld_reg;
reg    hls_LT_r_global_V_0_ack_out;
reg   [17:0] slcvec_pos_R_V_0_data_reg;
reg    slcvec_pos_R_V_0_vld_reg;
reg    slcvec_pos_R_V_0_ack_out;
reg  signed [17:0] hewindow_pos_Z_V_0_data_reg;
reg    hewindow_pos_Z_V_0_vld_reg;
reg    hewindow_pos_Z_V_0_ack_out;
reg   [17:0] hewindow_pos_R_V_0_data_reg;
reg    hewindow_pos_R_V_0_vld_reg;
reg    hewindow_pos_R_V_0_ack_out;
reg   [17:0] segpos_V_1_data_reg;
reg    segpos_V_1_vld_reg;
reg    segpos_V_1_vld_in;
wire   [13:0] lut_divider_barrel_V_address0;
reg    lut_divider_barrel_V_ce0;
wire   [25:0] lut_divider_barrel_V_q0;
reg  signed [17:0] hls_cos_val_V_read_reg_311;
wire   [17:0] r_0_V_fu_136_p2;
reg  signed [17:0] r_0_V_reg_316;
wire  signed [34:0] ret_V_1_fu_286_p2;
reg  signed [34:0] ret_V_1_reg_321;
wire   [20:0] trunc_ln1192_fu_150_p1;
reg   [20:0] trunc_ln1192_reg_326;
reg   [20:0] trunc_ln1192_reg_326_pp0_iter2_reg;
wire  signed [32:0] r_V_fu_292_p2;
reg  signed [32:0] r_V_reg_331;
wire   [16:0] trunc_ln851_fu_158_p1;
reg   [16:0] trunc_ln851_reg_338;
wire  signed [34:0] ret_V_fu_299_p2;
reg  signed [34:0] ret_V_reg_343;
reg   [17:0] z_fixed_int_shift_V_reg_348;
reg   [17:0] z_2_V_reg_358;
reg   [25:0] sin_inv_V_reg_363;
wire   [31:0] r_V_1_fu_305_p2;
reg   [31:0] r_V_1_reg_368;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln544_fu_228_p1;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001;
wire   [13:0] ret_V_cast8_fu_176_p4;
wire   [0:0] icmp_ln851_fu_192_p2;
wire   [13:0] tmp_1_fu_203_p4;
wire   [13:0] add_ln647_fu_197_p2;
wire   [0:0] p_Result_s_fu_185_p3;
wire   [13:0] select_ln851_fu_212_p3;
wire   [13:0] tmp_V_fu_220_p3;
wire   [17:0] r_fixed_int_shift_V_fu_233_p4;
wire   [17:0] add_ln728_fu_242_p2;
wire   [20:0] lhs_V_fu_247_p3;
wire   [20:0] ret_V_2_fu_255_p2;
wire   [14:0] r_V_fu_292_p0;
wire   [25:0] r_V_1_fu_305_p0;
wire   [17:0] r_V_1_fu_305_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to5;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] r_V_1_fu_305_p00;
wire   [31:0] r_V_1_fu_305_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 hls_sin_val_V_0_data_reg = 18'd0;
#0 hls_sin_val_V_0_vld_reg = 1'b0;
#0 hls_cos_val_V_0_data_reg = 18'd0;
#0 hls_cos_val_V_0_vld_reg = 1'b0;
#0 hls_LT_r_global_V_0_data_reg = 22'd0;
#0 hls_LT_r_global_V_0_vld_reg = 1'b0;
#0 slcvec_pos_R_V_0_data_reg = 18'd0;
#0 slcvec_pos_R_V_0_vld_reg = 1'b0;
#0 hewindow_pos_Z_V_0_data_reg = 18'd0;
#0 hewindow_pos_Z_V_0_vld_reg = 1'b0;
#0 hewindow_pos_R_V_0_data_reg = 18'd0;
#0 hewindow_pos_R_V_0_vld_reg = 1'b0;
#0 segpos_V_1_data_reg = 18'd0;
#0 segpos_V_1_vld_reg = 1'b0;
end

get_legendre_segmbkb #(
    .DataWidth( 26 ),
    .AddressRange( 10083 ),
    .AddressWidth( 14 ))
lut_divider_barrel_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_divider_barrel_V_address0),
    .ce0(lut_divider_barrel_V_ce0),
    .q0(lut_divider_barrel_V_q0)
);

get_legendre_segmcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 35 ))
get_legendre_segmcud_U1(
    .din0(hewindow_pos_Z_V_0_data_reg),
    .din1(hls_sin_val_V_0_data_reg),
    .dout(ret_V_1_fu_286_p2)
);

get_legendre_segmdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
get_legendre_segmdEe_U2(
    .din0(r_V_fu_292_p0),
    .din1(hls_sin_val_V_0_data_reg),
    .dout(r_V_fu_292_p2)
);

get_legendre_segmcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 35 ))
get_legendre_segmcud_U3(
    .din0(r_0_V_reg_316),
    .din1(hls_cos_val_V_read_reg_311),
    .dout(ret_V_fu_299_p2)
);

get_legendre_segmeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 32 ))
get_legendre_segmeOg_U4(
    .din0(r_V_1_fu_305_p0),
    .din1(r_V_1_fu_305_p1),
    .dout(r_V_1_fu_305_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (segpos_V_1_vld_reg == 1'b0) & (segpos_V_1_vld_in == 1'b1))) begin
        segpos_V_1_vld_reg <= 1'b1;
    end else if (((segpos_V_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (segpos_V_1_vld_reg == 1'b1))) begin
        segpos_V_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hewindow_pos_R_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hewindow_pos_R_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (hewindow_pos_R_V_0_vld_reg == 1'b1)))) begin
        hewindow_pos_R_V_0_data_reg <= hewindow_pos_R_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hewindow_pos_Z_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hewindow_pos_Z_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (hewindow_pos_Z_V_0_vld_reg == 1'b1)))) begin
        hewindow_pos_Z_V_0_data_reg <= hewindow_pos_Z_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hls_LT_r_global_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hls_LT_r_global_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (hls_LT_r_global_V_0_vld_reg == 1'b1)))) begin
        hls_LT_r_global_V_0_data_reg <= hls_LT_r_global_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hls_cos_val_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b1 == 1'b1) & (hls_cos_val_V_0_vld_reg == 1'b1) & (hls_cos_val_V_0_ack_out == 1'b1)))) begin
        hls_cos_val_V_0_data_reg <= hls_cos_val_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hls_cos_val_V_read_reg_311 <= hls_cos_val_V_0_data_reg;
        r_0_V_reg_316 <= r_0_V_fu_136_p2;
        r_V_reg_331 <= r_V_fu_292_p2;
        ret_V_1_reg_321 <= ret_V_1_fu_286_p2;
        trunc_ln1192_reg_326 <= trunc_ln1192_fu_150_p1;
        trunc_ln851_reg_338 <= trunc_ln851_fu_158_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hls_sin_val_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hls_sin_val_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (hls_sin_val_V_0_vld_reg == 1'b1)))) begin
        hls_sin_val_V_0_data_reg <= hls_sin_val_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        r_V_1_reg_368 <= r_V_1_fu_305_p2;
        ret_V_reg_343 <= ret_V_fu_299_p2;
        sin_inv_V_reg_363 <= lut_divider_barrel_V_q0;
        trunc_ln1192_reg_326_pp0_iter2_reg <= trunc_ln1192_reg_326;
        z_2_V_reg_358 <= {{ret_V_2_fu_255_p2[20:3]}};
        z_fixed_int_shift_V_reg_348 <= {{ret_V_1_reg_321[34:17]}};
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (segpos_V_1_vld_reg == 1'b0) & (segpos_V_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b1 == 1'b1) & (segpos_V_1_vld_in == 1'b1) & (segpos_V_1_vld_reg == 1'b1)))) begin
        segpos_V_1_data_reg <= {{r_V_1_reg_368[31:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (slcvec_pos_R_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (slcvec_pos_R_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (slcvec_pos_R_V_0_vld_reg == 1'b1)))) begin
        slcvec_pos_R_V_0_data_reg <= slcvec_pos_R_V;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to5 = 1'b1;
    end else begin
        ap_idle_pp0_0to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        hewindow_pos_R_V_0_ack_out = 1'b1;
    end else begin
        hewindow_pos_R_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        hewindow_pos_Z_V_0_ack_out = 1'b1;
    end else begin
        hewindow_pos_Z_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        hls_LT_r_global_V_0_ack_out = 1'b1;
    end else begin
        hls_LT_r_global_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        hls_cos_val_V_0_ack_out = 1'b1;
    end else begin
        hls_cos_val_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        hls_sin_val_V_0_ack_out = 1'b1;
    end else begin
        hls_sin_val_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut_divider_barrel_V_ce0 = 1'b1;
    end else begin
        lut_divider_barrel_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((segpos_V_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (segpos_V_1_vld_reg == 1'b1)))) begin
        segpos_V_1_ack_in = 1'b1;
    end else begin
        segpos_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        segpos_V_1_vld_in = 1'b1;
    end else begin
        segpos_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        slcvec_pos_R_V_0_ack_out = 1'b1;
    end else begin
        slcvec_pos_R_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln647_fu_197_p2 = (14'd1 + ret_V_cast8_fu_176_p4);

assign add_ln728_fu_242_p2 = (z_fixed_int_shift_V_reg_348 + r_fixed_int_shift_V_fu_233_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((segpos_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((segpos_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((segpos_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter6 = (segpos_V_1_ack_in == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign icmp_ln851_fu_192_p2 = ((trunc_ln851_reg_338 == 17'd0) ? 1'b1 : 1'b0);

assign lhs_V_fu_247_p3 = {{add_ln728_fu_242_p2}, {3'd0}};

assign lut_divider_barrel_V_address0 = zext_ln544_fu_228_p1;

assign p_Result_s_fu_185_p3 = r_V_reg_331[32'd31];

assign r_0_V_fu_136_p2 = (slcvec_pos_R_V_0_data_reg - hewindow_pos_R_V_0_data_reg);

assign r_V_1_fu_305_p0 = r_V_1_fu_305_p00;

assign r_V_1_fu_305_p00 = sin_inv_V_reg_363;

assign r_V_1_fu_305_p1 = r_V_1_fu_305_p10;

assign r_V_1_fu_305_p10 = z_2_V_reg_358;

assign r_V_fu_292_p0 = 33'd10083;

assign r_fixed_int_shift_V_fu_233_p4 = {{ret_V_reg_343[34:17]}};

assign ret_V_2_fu_255_p2 = (lhs_V_fu_247_p3 + trunc_ln1192_reg_326_pp0_iter2_reg);

assign ret_V_cast8_fu_176_p4 = {{r_V_reg_331[30:17]}};

assign segpos_V = segpos_V_1_data_reg;

assign segpos_V_ap_vld = segpos_V_1_vld_reg;

assign select_ln851_fu_212_p3 = ((icmp_ln851_fu_192_p2[0:0] === 1'b1) ? tmp_1_fu_203_p4 : add_ln647_fu_197_p2);

assign tmp_1_fu_203_p4 = {{r_V_reg_331[30:17]}};

assign tmp_V_fu_220_p3 = ((p_Result_s_fu_185_p3[0:0] === 1'b1) ? select_ln851_fu_212_p3 : tmp_1_fu_203_p4);

assign trunc_ln1192_fu_150_p1 = hls_LT_r_global_V_0_data_reg[20:0];

assign trunc_ln851_fu_158_p1 = r_V_fu_292_p2[16:0];

assign zext_ln544_fu_228_p1 = tmp_V_fu_220_p3;

endmodule //get_legendre_segment_barrel
