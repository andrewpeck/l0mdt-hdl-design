-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity get_legendre_segment_barrel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    hls_sin_val_V : IN STD_LOGIC_VECTOR (17 downto 0);
    hls_cos_val_V : IN STD_LOGIC_VECTOR (17 downto 0);
    hls_LT_r_global_V : IN STD_LOGIC_VECTOR (21 downto 0);
    slcvec_pos_R_V : IN STD_LOGIC_VECTOR (17 downto 0);
    hewindow_pos_Z_V : IN STD_LOGIC_VECTOR (17 downto 0);
    hewindow_pos_R_V : IN STD_LOGIC_VECTOR (17 downto 0);
    hls_LT_theta_global_V : IN STD_LOGIC_VECTOR (17 downto 0);
    segpos_V : OUT STD_LOGIC_VECTOR (17 downto 0);
    segpos_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of get_legendre_segment_barrel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "get_legendre_segment_barrel,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku15p-ffva1760-2-e,HLS_INPUT_CLOCK=3.125000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.533000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=6,HLS_SYN_DSP=4,HLS_SYN_FF=428,HLS_SYN_LUT=145,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_D21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000110100100001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal segpos_V_1_ack_in : STD_LOGIC;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal hls_sin_val_V_0_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal hls_sin_val_V_0_vld_reg : STD_LOGIC := '0';
    signal hls_sin_val_V_0_ack_out : STD_LOGIC;
    signal hls_cos_val_V_0_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal hls_cos_val_V_0_vld_reg : STD_LOGIC := '0';
    signal hls_cos_val_V_0_ack_out : STD_LOGIC;
    signal hls_LT_r_global_V_0_data_reg : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    signal hls_LT_r_global_V_0_vld_reg : STD_LOGIC := '0';
    signal hls_LT_r_global_V_0_ack_out : STD_LOGIC;
    signal slcvec_pos_R_V_0_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal slcvec_pos_R_V_0_vld_reg : STD_LOGIC := '0';
    signal slcvec_pos_R_V_0_ack_out : STD_LOGIC;
    signal hewindow_pos_Z_V_0_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal hewindow_pos_Z_V_0_vld_reg : STD_LOGIC := '0';
    signal hewindow_pos_Z_V_0_ack_out : STD_LOGIC;
    signal hewindow_pos_R_V_0_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal hewindow_pos_R_V_0_vld_reg : STD_LOGIC := '0';
    signal hewindow_pos_R_V_0_ack_out : STD_LOGIC;
    signal segpos_V_1_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal segpos_V_1_vld_reg : STD_LOGIC := '0';
    signal segpos_V_1_vld_in : STD_LOGIC;
    signal lut_divider_barrel_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal lut_divider_barrel_V_ce0 : STD_LOGIC;
    signal lut_divider_barrel_V_q0 : STD_LOGIC_VECTOR (25 downto 0);
    signal hls_cos_val_V_read_reg_313 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_0_V_fu_138_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_0_V_reg_318 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_1_fu_288_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal ret_V_1_reg_323 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln1192_fu_152_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln1192_reg_328 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln1192_reg_328_pp0_iter2_reg : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_fu_294_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_reg_333 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln851_fu_160_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln851_reg_340 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_301_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal ret_V_reg_345 : STD_LOGIC_VECTOR (34 downto 0);
    signal z_fixed_int_shift_V_reg_350 : STD_LOGIC_VECTOR (17 downto 0);
    signal z_2_V_reg_360 : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_inv_V_reg_365 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_1_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_reg_370 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln544_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ret_V_cast8_fu_178_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln851_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_205_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln647_fu_199_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_s_fu_187_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln851_fu_214_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_V_fu_222_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_fixed_int_shift_V_fu_235_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln728_fu_244_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_fu_249_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_2_fu_257_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_fu_294_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_1_fu_307_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_1_fu_307_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to5 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal r_V_1_fu_307_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_307_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component get_legendre_segmcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component get_legendre_segmdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component get_legendre_segmeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component get_legendre_segmbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    lut_divider_barrel_V_U : component get_legendre_segmbkb
    generic map (
        DataWidth => 26,
        AddressRange => 3361,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut_divider_barrel_V_address0,
        ce0 => lut_divider_barrel_V_ce0,
        q0 => lut_divider_barrel_V_q0);

    get_legendre_segmcud_U1 : component get_legendre_segmcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 35)
    port map (
        din0 => hewindow_pos_Z_V_0_data_reg,
        din1 => hls_sin_val_V_0_data_reg,
        dout => ret_V_1_fu_288_p2);

    get_legendre_segmdEe_U2 : component get_legendre_segmdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 18,
        dout_WIDTH => 31)
    port map (
        din0 => r_V_fu_294_p0,
        din1 => hls_sin_val_V_0_data_reg,
        dout => r_V_fu_294_p2);

    get_legendre_segmcud_U3 : component get_legendre_segmcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 35)
    port map (
        din0 => r_0_V_reg_318,
        din1 => hls_cos_val_V_read_reg_313,
        dout => ret_V_fu_301_p2);

    get_legendre_segmeOg_U4 : component get_legendre_segmeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 26,
        din1_WIDTH => 18,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_1_fu_307_p0,
        din1 => r_V_1_fu_307_p1,
        dout => r_V_1_fu_307_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    hewindow_pos_R_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    hewindow_pos_Z_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    hls_LT_r_global_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    hls_cos_val_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    hls_sin_val_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    segpos_V_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (segpos_V_1_vld_reg = ap_const_logic_0) and (segpos_V_1_vld_in = ap_const_logic_1))) then 
                segpos_V_1_vld_reg <= ap_const_logic_1;
            elsif (((segpos_V_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (segpos_V_1_vld_reg = ap_const_logic_1))) then 
                segpos_V_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    slcvec_pos_R_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (hewindow_pos_R_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (hewindow_pos_R_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (hewindow_pos_R_V_0_vld_reg = ap_const_logic_1)))) then
                hewindow_pos_R_V_0_data_reg <= hewindow_pos_R_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (hewindow_pos_Z_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (hewindow_pos_Z_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (hewindow_pos_Z_V_0_vld_reg = ap_const_logic_1)))) then
                hewindow_pos_Z_V_0_data_reg <= hewindow_pos_Z_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (hls_LT_r_global_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (hls_LT_r_global_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (hls_LT_r_global_V_0_vld_reg = ap_const_logic_1)))) then
                hls_LT_r_global_V_0_data_reg <= hls_LT_r_global_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (hls_cos_val_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_logic_1 = ap_const_logic_1) and (hls_cos_val_V_0_vld_reg = ap_const_logic_1) and (hls_cos_val_V_0_ack_out = ap_const_logic_1)))) then
                hls_cos_val_V_0_data_reg <= hls_cos_val_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                hls_cos_val_V_read_reg_313 <= hls_cos_val_V_0_data_reg;
                r_0_V_reg_318 <= r_0_V_fu_138_p2;
                r_V_reg_333 <= r_V_fu_294_p2;
                ret_V_1_reg_323 <= ret_V_1_fu_288_p2;
                trunc_ln1192_reg_328 <= trunc_ln1192_fu_152_p1;
                trunc_ln851_reg_340 <= trunc_ln851_fu_160_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (hls_sin_val_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (hls_sin_val_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (hls_sin_val_V_0_vld_reg = ap_const_logic_1)))) then
                hls_sin_val_V_0_data_reg <= hls_sin_val_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                r_V_1_reg_370 <= r_V_1_fu_307_p2;
                ret_V_reg_345 <= ret_V_fu_301_p2;
                sin_inv_V_reg_365 <= lut_divider_barrel_V_q0;
                trunc_ln1192_reg_328_pp0_iter2_reg <= trunc_ln1192_reg_328;
                z_2_V_reg_360 <= ret_V_2_fu_257_p2(20 downto 3);
                z_fixed_int_shift_V_reg_350 <= ret_V_1_reg_323(34 downto 17);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (segpos_V_1_vld_reg = ap_const_logic_0) and (segpos_V_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_logic_1 = ap_const_logic_1) and (segpos_V_1_vld_in = ap_const_logic_1) and (segpos_V_1_vld_reg = ap_const_logic_1)))) then
                segpos_V_1_data_reg <= r_V_1_reg_370(31 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (slcvec_pos_R_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (slcvec_pos_R_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (slcvec_pos_R_V_0_vld_reg = ap_const_logic_1)))) then
                slcvec_pos_R_V_0_data_reg <= slcvec_pos_R_V;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln647_fu_199_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(ret_V_cast8_fu_178_p4));
    add_ln728_fu_244_p2 <= std_logic_vector(unsigned(z_fixed_int_shift_V_reg_350) + unsigned(r_fixed_int_shift_V_fu_235_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter6, segpos_V_1_ack_in)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((segpos_V_1_ack_in = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter6, segpos_V_1_ack_in)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((segpos_V_1_ack_in = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter6, segpos_V_1_ack_in)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((segpos_V_1_ack_in = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter6_assign_proc : process(segpos_V_1_ack_in)
    begin
                ap_block_state7_pp0_stage0_iter6 <= (segpos_V_1_ack_in = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to5)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to5 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    hewindow_pos_R_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            hewindow_pos_R_V_0_ack_out <= ap_const_logic_1;
        else 
            hewindow_pos_R_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    hewindow_pos_Z_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            hewindow_pos_Z_V_0_ack_out <= ap_const_logic_1;
        else 
            hewindow_pos_Z_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    hls_LT_r_global_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            hls_LT_r_global_V_0_ack_out <= ap_const_logic_1;
        else 
            hls_LT_r_global_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    hls_cos_val_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            hls_cos_val_V_0_ack_out <= ap_const_logic_1;
        else 
            hls_cos_val_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    hls_sin_val_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            hls_sin_val_V_0_ack_out <= ap_const_logic_1;
        else 
            hls_sin_val_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln851_fu_194_p2 <= "1" when (trunc_ln851_reg_340 = ap_const_lv17_0) else "0";
    lhs_V_fu_249_p3 <= (add_ln728_fu_244_p2 & ap_const_lv3_0);
    lut_divider_barrel_V_address0 <= zext_ln544_fu_230_p1(12 - 1 downto 0);

    lut_divider_barrel_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut_divider_barrel_V_ce0 <= ap_const_logic_1;
        else 
            lut_divider_barrel_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_187_p3 <= r_V_reg_333(29 downto 29);
    r_0_V_fu_138_p2 <= std_logic_vector(unsigned(slcvec_pos_R_V_0_data_reg) - unsigned(hewindow_pos_R_V_0_data_reg));
    r_V_1_fu_307_p0 <= r_V_1_fu_307_p00(26 - 1 downto 0);
    r_V_1_fu_307_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sin_inv_V_reg_365),32));
    r_V_1_fu_307_p1 <= r_V_1_fu_307_p10(18 - 1 downto 0);
    r_V_1_fu_307_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z_2_V_reg_360),32));
    r_V_fu_294_p0 <= ap_const_lv31_D21(13 - 1 downto 0);
    r_fixed_int_shift_V_fu_235_p4 <= ret_V_reg_345(34 downto 17);
    ret_V_2_fu_257_p2 <= std_logic_vector(unsigned(lhs_V_fu_249_p3) + unsigned(trunc_ln1192_reg_328_pp0_iter2_reg));
    ret_V_cast8_fu_178_p4 <= r_V_reg_333(28 downto 17);
    segpos_V <= segpos_V_1_data_reg;

    segpos_V_1_ack_in_assign_proc : process(segpos_V_1_vld_reg)
    begin
        if (((segpos_V_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (segpos_V_1_vld_reg = ap_const_logic_1)))) then 
            segpos_V_1_ack_in <= ap_const_logic_1;
        else 
            segpos_V_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    segpos_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            segpos_V_1_vld_in <= ap_const_logic_1;
        else 
            segpos_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    segpos_V_ap_vld <= segpos_V_1_vld_reg;
    select_ln851_fu_214_p3 <= 
        tmp_1_fu_205_p4 when (icmp_ln851_fu_194_p2(0) = '1') else 
        add_ln647_fu_199_p2;

    slcvec_pos_R_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            slcvec_pos_R_V_0_ack_out <= ap_const_logic_1;
        else 
            slcvec_pos_R_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_205_p4 <= r_V_reg_333(28 downto 17);
    tmp_V_fu_222_p3 <= 
        select_ln851_fu_214_p3 when (p_Result_s_fu_187_p3(0) = '1') else 
        tmp_1_fu_205_p4;
    trunc_ln1192_fu_152_p1 <= hls_LT_r_global_V_0_data_reg(21 - 1 downto 0);
    trunc_ln851_fu_160_p1 <= r_V_fu_294_p2(17 - 1 downto 0);
    zext_ln544_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_222_p3),64));
end behav;
