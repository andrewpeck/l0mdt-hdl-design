-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity get_trig_vals_lutg8j_rom is
    generic(
             DWIDTH     : integer := 36;
             AWIDTH     : integer := 8;
             MEM_SIZE    : integer := 197
    );
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0);
          ce0       : in std_logic;
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0);
          ce1       : in std_logic;
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    );
end entity;


architecture rtl of get_trig_vals_lutg8j_rom is

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0);
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0);
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0);
signal mem : mem_array := (
    0 => "111111001011000111100000000000101011",
    1 => "111111011011011111100000000000010100",
    2 => "111111101011110110100000000000000110",
    3 => "111111111100001110100000000000000000",
    4 => "000000001100100110100000000000000010",
    5 => "000000011100111110100000000000001101",
    6 => "000000101101010110100000000000100000",
    7 => "000000111101101110100000000000111011",
    8 => "000001001110000101100000000001011111",
    9 => "000001011110011100100000000010001011",
    10 => "000001101110110011100000000010111111",
    11 => "000001111111001001100000000011111100",
    12 => "000010001111011111100000000101000010",
    13 => "000010011111110100100000000110001111",
    14 => "000010110000001000100000000111100101",
    15 => "000011000000011100100000001001000011",
    16 => "000011010000101111100000001010101010",
    17 => "000011100001000001100000001100011001",
    18 => "000011110001010010100000001110010000",
    19 => "000100000001100011100000010000010000",
    20 => "000100010001110010100000010010011000",
    21 => "000100100010000000100000010100101000",
    22 => "000100110010001101100000010111000001",
    23 => "000101000010011000100000011001100010",
    24 => "000101010010100011100000011100001011",
    25 => "000101100010101011100000011110111100",
    26 => "000101110010110011100000100001110110",
    27 => "000110000010111001100000100100111000",
    28 => "000110010010111101100000101000000010",
    29 => "000110100011000000100000101011010100",
    30 => "000110110011000001100000101110101111",
    31 => "000111000011000000100000110010010001",
    32 => "000111010010111101100000110101111100",
    33 => "000111100010111001100000111001101111",
    34 => "000111110010110010100000111101101010",
    35 => "001000000010101010100001000001101110",
    36 => "001000010010011111100001000101111001",
    37 => "001000100010010010100001001010001101",
    38 => "001000110010000011100001001110101000",
    39 => "001001000001110001100001010011001100",
    40 => "001001010001011110100001010111110111",
    41 => "001001100001000111100001011100101011",
    42 => "001001110000101111100001100001100111",
    43 => "001010000000010100100001100110101010",
    44 => "001010001111110110100001101011110110",
    45 => "001010011111010101100001110001001010",
    46 => "001010101110110010100001110110100101",
    47 => "001010111110001100100001111100001001",
    48 => "001011001101100011100010000001110100",
    49 => "001011011100110111100010000111100111",
    50 => "001011101100001000100010001101100010",
    51 => "001011111011010110100010010011100101",
    52 => "001100001010100001100010011001101111",
    53 => "001100011001101001100010100000000001",
    54 => "001100101000101101100010100110011011",
    55 => "001100110111101110100010101100111101",
    56 => "001101000110101100100010110011100110",
    57 => "001101010101100110100010111010010111",
    58 => "001101100100011101100011000001010000",
    59 => "001101110011010001100011001000010000",
    60 => "001110000010000000100011001111011000",
    61 => "001110010000101100100011010110100111",
    62 => "001110011111010101100011011101111110",
    63 => "001110101101111001100011100101011100",
    64 => "001110111100011010100011101101000010",
    65 => "001111001010110111100011110100101111",
    66 => "001111011001001111100011111100100100",
    67 => "001111100111100100100100000100011111",
    68 => "001111110101110101100100001100100011",
    69 => "010000000100000001100100010100101101",
    70 => "010000010010001010100100011100111111",
    71 => "010000100000001110100100100101011000",
    72 => "010000101110001101100100101101111000",
    73 => "010000111100001001100100110110011111",
    74 => "010001001001111111100100111111001101",
    75 => "010001010111110010100101001000000011",
    76 => "010001100101100000100101010000111111",
    77 => "010001110011001001100101011010000010",
    78 => "010010000000101110100101100011001101",
    79 => "010010001110001101100101101100011110",
    80 => "010010011011101000100101110101110110",
    81 => "010010101000111111100101111111010101",
    82 => "010010110110010000100110001000111011",
    83 => "010011000011011101100110010010101000",
    84 => "010011010000100100100110011100011011",
    85 => "010011011101100110100110100110010101",
    86 => "010011101010100100100110110000010110",
    87 => "010011110111011100100110111010011101",
    88 => "010100000100001111100111000100101011",
    89 => "010100010000111101100111001111000000",
    90 => "010100011101100101100111011001011011",
    91 => "010100101010001000100111100011111100",
    92 => "010100110110100110100111101110100100",
    93 => "010101000010111110100111111001010010",
    94 => "010101001111010001101000000100000110",
    95 => "010101011011011110101000001111000001",
    96 => "010101100111100101101000011010000010",
    97 => "010101110011100111101000100101001001",
    98 => "010101111111100011101000110000010110",
    99 => "010110001011011010101000111011101010",
    100 => "010110010111001010101001000111000011",
    101 => "010110100010110101101001010010100010",
    102 => "010110101110011010101001011110001000",
    103 => "010110111001111000101001101001110011",
    104 => "010111000101010001101001110101100100",
    105 => "010111010000100100101010000001011011",
    106 => "010111011011110001101010001101010111",
    107 => "010111100110110111101010011001011010",
    108 => "010111110001111000101010100101100001",
    109 => "010111111100110010101010110001101111",
    110 => "011000000111100110101010111110000010",
    111 => "011000010010010011101011001010011011",
    112 => "011000011100111011101011010110111001",
    113 => "011000100111011100101011100011011100",
    114 => "011000110001110110101011110000000101",
    115 => "011000111100001010101011111100110011",
    116 => "011001000110010111101100001001100111",
    117 => "011001010000011110101100010110011111",
    118 => "011001011010011110101100100011011101",
    119 => "011001100100011000101100110000100000",
    120 => "011001101110001010101100111101101000",
    121 => "011001110111110111101101001010110101",
    122 => "011010000001011100101101011000000111",
    123 => "011010001010111010101101100101011101",
    124 => "011010010100010010101101110010111001",
    125 => "011010011101100011101110000000011001",
    126 => "011010100110101101101110001101111110",
    127 => "011010101111101111101110011011101000",
    128 => "011010111000101011101110101001010110",
    129 => "011011000001100000101110110111001001",
    130 => "011011001010001110101111000101000000",
    131 => "011011010010110100101111010010111011",
    132 => "011011011011010100101111100000111100",
    133 => "011011100011101100101111101111000000",
    134 => "011011101011111101101111111101001001",
    135 => "011011110100000111110000001011010101",
    136 => "011011111100001010110000011001100110",
    137 => "011100000100000101110000100111111011",
    138 => "011100001011111001110000110110010101",
    139 => "011100010011100101110001000100110010",
    140 => "011100011011001010110001010011010011",
    141 => "011100100010101000110001100001110111",
    142 => "011100101001111110110001110000100000",
    143 => "011100110001001101110001111111001100",
    144 => "011100111000010100110010001101111100",
    145 => "011100111111010100110010011100110000",
    146 => "011101000110001100110010101011100111",
    147 => "011101001100111100110010111010100010",
    148 => "011101010011100101110011001001100000",
    149 => "011101011010000110110011011000100001",
    150 => "011101100000011111110011100111100110",
    151 => "011101100110110001110011110110101110",
    152 => "011101101100111011110100000101111001",
    153 => "011101110010111101110100010101000111",
    154 => "011101111000110111110100100100011001",
    155 => "011101111110101001110100110011101101",
    156 => "011110000100010100110101000011000100",
    157 => "011110001001110111110101010010011111",
    158 => "011110001111010010110101100001111011",
    159 => "011110010100100101110101110001011011",
    160 => "011110011001110000110110000000111110",
    161 => "011110011110110011110110010000100010",
    162 => "011110100011101110110110100000001010",
    163 => "011110101000100001110110101111110100",
    164 => "011110101101001100110110111111100000",
    165 => "011110110001101111110111001111001111",
    166 => "011110110110001010110111011111000000",
    167 => "011110111010011100110111101110110100",
    168 => "011110111110100111110111111110101001",
    169 => "011111000010101010111000001110100001",
    170 => "011111000110100100111000011110011010",
    171 => "011111001010010111111000101110010110",
    172 => "011111001110000001111000111110010011",
    173 => "011111010001100011111001001110010011",
    174 => "011111010100111101111001011110010100",
    175 => "011111011000001110111001101110010111",
    176 => "011111011011011000111001111110011011",
    177 => "011111011110011001111010001110100001",
    178 => "011111100001010010111010011110101001",
    179 => "011111100100000011111010101110110010",
    180 => "011111100110101011111010111110111100",
    181 => "011111101001001011111011001111001000",
    182 => "011111101011100011111011011111010101",
    183 => "011111101101110011111011101111100011",
    184 => "011111101111111010111011111111110010",
    185 => "011111110001111001111100010000000010",
    186 => "011111110011101111111100100000010100",
    187 => "011111110101011110111100110000100110",
    188 => "011111110111000100111101000000111001",
    189 => "011111111000100001111101010001001101",
    190 => "011111111001110111111101100001100001",
    191 => "011111111011000011111101110001110110",
    192 => "011111111100001000111110000010001100",
    193 => "011111111101000100111110010010100010",
    194 => "011111111101111000111110100010111001",
    195 => "011111111110100011111110110011010000",
    196 => "000000000000000000000000000000000000" );


begin


memory_access_guard_0: process (addr0)
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1)
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)
begin
    if (clk'event and clk = '1') then
        if (ce0 = '1') then
            q0 <= mem(CONV_INTEGER(addr0_tmp));
        end if;
        if (ce1 = '1') then
            q1 <= mem(CONV_INTEGER(addr1_tmp));
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity get_trig_vals_lutg8j is
    generic (
        DataWidth : INTEGER := 36;
        AddressRange : INTEGER := 197;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of get_trig_vals_lutg8j is
    component get_trig_vals_lutg8j_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    get_trig_vals_lutg8j_rom_U :  component get_trig_vals_lutg8j_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;
