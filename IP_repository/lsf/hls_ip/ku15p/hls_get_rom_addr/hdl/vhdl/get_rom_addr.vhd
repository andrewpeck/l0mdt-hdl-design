-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
--
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity get_rom_addr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    theta_for_lut_V : IN STD_LOGIC_VECTOR (13 downto 0);
    rom_index_V : OUT STD_LOGIC_VECTOR (2 downto 0);
    lut_start_addr_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    lbins0_gbl1_V : IN STD_LOGIC_VECTOR (0 downto 0);
    slcvec_offset_angle_int_V : IN STD_LOGIC_VECTOR (10 downto 0);
    slcvec_angle_polar_offset_mrad_V : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of get_rom_addr is
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "get_rom_addr,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu13p-flga2577-1-e,HLS_INPUT_CLOCK=3.125000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.179500,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=99,HLS_SYN_LUT=90,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_4DEC : STD_LOGIC_VECTOR (14 downto 0) := "100110111101100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv14_3FFE : STD_LOGIC_VECTOR (13 downto 0) := "11111111111110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv17_6430 : STD_LOGIC_VECTOR (16 downto 0) := "00110010000110000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal rom_index_V_1_ack_in : STD_LOGIC;
    signal lut_start_addr_V_1_ack_in : STD_LOGIC;
    signal slcvec_angle_polar_offset_mrad_V_1_ack_in : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal theta_for_lut_V_0_data_reg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal theta_for_lut_V_0_vld_reg : STD_LOGIC := '0';
    signal theta_for_lut_V_0_ack_out : STD_LOGIC;
    signal rom_index_V_1_data_reg : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal rom_index_V_1_vld_reg : STD_LOGIC := '0';
    signal rom_index_V_1_vld_in : STD_LOGIC;
    signal lut_start_addr_V_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal lut_start_addr_V_1_vld_reg : STD_LOGIC := '0';
    signal lut_start_addr_V_1_vld_in : STD_LOGIC;
    signal lbins0_gbl1_V_0_data_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal lbins0_gbl1_V_0_vld_reg : STD_LOGIC := '0';
    signal lbins0_gbl1_V_0_ack_out : STD_LOGIC;
    signal slcvec_offset_angle_int_V_0_data_reg : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal slcvec_offset_angle_int_V_0_vld_reg : STD_LOGIC := '0';
    signal slcvec_offset_angle_int_V_0_ack_out : STD_LOGIC;
    signal slcvec_angle_polar_offset_mrad_V_1_data_reg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal slcvec_angle_polar_offset_mrad_V_1_vld_reg : STD_LOGIC := '0';
    signal slcvec_angle_polar_offset_mrad_V_1_vld_in : STD_LOGIC;
    signal grp_read_fu_78_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lbins0_gbl1_V_read_reg_194 : STD_LOGIC_VECTOR (0 downto 0);
    signal slcvec_angle_polar_o_reg_203 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_p_Val2_2_reg_111 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_reg_pp0_iter1_p_Val2_2_reg_111 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_reg_pp0_iter2_p_Val2_2_reg_111 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_Val2_s_fu_120_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1193_fu_128_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_fu_132_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_fu_148_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_fu_154_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln703_fu_162_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_fu_166_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_240 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if;
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_p_Val2_2_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_240)) then
                if ((grp_read_fu_78_p2 = ap_const_lv1_1)) then
                    ap_phi_reg_pp0_iter2_p_Val2_2_reg_111 <= theta_for_lut_V_0_data_reg;
                elsif ((grp_read_fu_78_p2 = ap_const_lv1_0)) then
                    ap_phi_reg_pp0_iter2_p_Val2_2_reg_111 <= ret_V_fu_132_p2(14 downto 1);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then
                    ap_phi_reg_pp0_iter2_p_Val2_2_reg_111 <= ap_phi_reg_pp0_iter1_p_Val2_2_reg_111;
                end if;
            end if;
        end if;
    end process;

    lbins0_gbl1_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    lut_start_addr_V_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    rom_index_V_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    slcvec_angle_polar_offset_mrad_V_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    slcvec_offset_angle_int_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    theta_for_lut_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_p_Val2_2_reg_111 <= ap_phi_reg_pp0_iter0_p_Val2_2_reg_111;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (lbins0_gbl1_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (lbins0_gbl1_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (lbins0_gbl1_V_0_vld_reg = ap_const_logic_1)))) then
                lbins0_gbl1_V_0_data_reg <= lbins0_gbl1_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lbins0_gbl1_V_read_reg_194 <= lbins0_gbl1_V_0_data_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (lut_start_addr_V_1_vld_reg = ap_const_logic_0) and (lut_start_addr_V_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_logic_1 = ap_const_logic_1) and (lut_start_addr_V_1_vld_in = ap_const_logic_1) and (lut_start_addr_V_1_vld_reg = ap_const_logic_1)))) then
                lut_start_addr_V_1_data_reg <= ret_V_1_fu_166_p2(15 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (rom_index_V_1_vld_reg = ap_const_logic_0) and (rom_index_V_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_logic_1 = ap_const_logic_1) and (rom_index_V_1_vld_in = ap_const_logic_1) and (rom_index_V_1_vld_reg = ap_const_logic_1)))) then
                rom_index_V_1_data_reg <= ret_V_1_fu_166_p2(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (grp_read_fu_78_p2 = ap_const_lv1_0))) then
                slcvec_angle_polar_o_reg_203 <= ret_V_fu_132_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (slcvec_angle_polar_offset_mrad_V_1_vld_reg = ap_const_logic_0) and (slcvec_angle_polar_offset_mrad_V_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_logic_1 = ap_const_logic_1) and (slcvec_angle_polar_offset_mrad_V_1_vld_in = ap_const_logic_1) and (slcvec_angle_polar_offset_mrad_V_1_vld_reg = ap_const_logic_1)))) then
                    slcvec_angle_polar_offset_mrad_V_1_data_reg(13 downto 1) <= slcvec_angle_polar_o_reg_203(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (slcvec_offset_angle_int_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (slcvec_offset_angle_int_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (slcvec_offset_angle_int_V_0_vld_reg = ap_const_logic_1)))) then
                slcvec_offset_angle_int_V_0_data_reg <= slcvec_offset_angle_int_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (theta_for_lut_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (theta_for_lut_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (theta_for_lut_V_0_vld_reg = ap_const_logic_1)))) then
                theta_for_lut_V_0_data_reg <= theta_for_lut_V;
            end if;
        end if;
    end process;
    slcvec_angle_polar_offset_mrad_V_1_data_reg(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 =>
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln703_fu_148_p2 <= std_logic_vector(unsigned(ap_phi_reg_pp0_iter2_p_Val2_2_reg_111) + unsigned(ap_const_lv14_3FFE));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter3, rom_index_V_1_ack_in, lut_start_addr_V_1_ack_in, slcvec_angle_polar_offset_mrad_V_1_ack_in)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((slcvec_angle_polar_offset_mrad_V_1_ack_in = ap_const_logic_0) or (lut_start_addr_V_1_ack_in = ap_const_logic_0) or (rom_index_V_1_ack_in = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter3, rom_index_V_1_ack_in, lut_start_addr_V_1_ack_in, slcvec_angle_polar_offset_mrad_V_1_ack_in)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((slcvec_angle_polar_offset_mrad_V_1_ack_in = ap_const_logic_0) or (lut_start_addr_V_1_ack_in = ap_const_logic_0) or (rom_index_V_1_ack_in = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter3, rom_index_V_1_ack_in, lut_start_addr_V_1_ack_in, slcvec_angle_polar_offset_mrad_V_1_ack_in)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((slcvec_angle_polar_offset_mrad_V_1_ack_in = ap_const_logic_0) or (lut_start_addr_V_1_ack_in = ap_const_logic_0) or (rom_index_V_1_ack_in = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter3_assign_proc : process(rom_index_V_1_ack_in, lut_start_addr_V_1_ack_in, slcvec_angle_polar_offset_mrad_V_1_ack_in)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((slcvec_angle_polar_offset_mrad_V_1_ack_in = ap_const_logic_0) or (lut_start_addr_V_1_ack_in = ap_const_logic_0) or (rom_index_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_240_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_240 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
            ap_done <= ap_const_logic_1;
        else
            ap_done <= ap_const_logic_0;
        end if;
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            ap_idle <= ap_const_logic_1;
        else
            ap_idle <= ap_const_logic_0;
        end if;
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
            ap_idle_pp0 <= ap_const_logic_1;
        else
            ap_idle_pp0 <= ap_const_logic_0;
        end if;
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if;
    end process;

    ap_phi_reg_pp0_iter0_p_Val2_2_reg_111 <= "XXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            ap_ready <= ap_const_logic_1;
        else
            ap_ready <= ap_const_logic_0;
        end if;
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if;
    end process;

    grp_read_fu_78_p2 <= lbins0_gbl1_V_0_data_reg;

    lbins0_gbl1_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
            lbins0_gbl1_V_0_ack_out <= ap_const_logic_1;
        else
            lbins0_gbl1_V_0_ack_out <= ap_const_logic_0;
        end if;
    end process;

    lut_start_addr_V <= lut_start_addr_V_1_data_reg;

    lut_start_addr_V_1_ack_in_assign_proc : process(lut_start_addr_V_1_vld_reg)
    begin
        if (((lut_start_addr_V_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (lut_start_addr_V_1_vld_reg = ap_const_logic_1)))) then
            lut_start_addr_V_1_ack_in <= ap_const_logic_1;
        else
            lut_start_addr_V_1_ack_in <= ap_const_logic_0;
        end if;
    end process;


    lut_start_addr_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
            lut_start_addr_V_1_vld_in <= ap_const_logic_1;
        else
            lut_start_addr_V_1_vld_in <= ap_const_logic_0;
        end if;
    end process;

    p_Val2_s_fu_120_p3 <= (slcvec_offset_angle_int_V_0_data_reg & ap_const_lv3_0);
    r_V_fu_154_p3 <= (add_ln703_fu_148_p2 & ap_const_lv2_0);
    ret_V_1_fu_166_p2 <= std_logic_vector(unsigned(zext_ln703_fu_162_p1) + unsigned(ap_const_lv17_6430));
    ret_V_fu_132_p2 <= std_logic_vector(unsigned(zext_ln1193_fu_128_p1) + unsigned(ap_const_lv15_4DEC));
    rom_index_V <= rom_index_V_1_data_reg;

    rom_index_V_1_ack_in_assign_proc : process(rom_index_V_1_vld_reg)
    begin
        if (((rom_index_V_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (rom_index_V_1_vld_reg = ap_const_logic_1)))) then
            rom_index_V_1_ack_in <= ap_const_logic_1;
        else
            rom_index_V_1_ack_in <= ap_const_logic_0;
        end if;
    end process;


    rom_index_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
            rom_index_V_1_vld_in <= ap_const_logic_1;
        else
            rom_index_V_1_vld_in <= ap_const_logic_0;
        end if;
    end process;

    slcvec_angle_polar_offset_mrad_V <= slcvec_angle_polar_offset_mrad_V_1_data_reg;

    slcvec_angle_polar_offset_mrad_V_1_ack_in_assign_proc : process(slcvec_angle_polar_offset_mrad_V_1_vld_reg)
    begin
        if (((slcvec_angle_polar_offset_mrad_V_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (slcvec_angle_polar_offset_mrad_V_1_vld_reg = ap_const_logic_1)))) then
            slcvec_angle_polar_offset_mrad_V_1_ack_in <= ap_const_logic_1;
        else
            slcvec_angle_polar_offset_mrad_V_1_ack_in <= ap_const_logic_0;
        end if;
    end process;


    slcvec_angle_polar_offset_mrad_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, lbins0_gbl1_V_read_reg_194)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (lbins0_gbl1_V_read_reg_194 = ap_const_lv1_0))) then
            slcvec_angle_polar_offset_mrad_V_1_vld_in <= ap_const_logic_1;
        else
            slcvec_angle_polar_offset_mrad_V_1_vld_in <= ap_const_logic_0;
        end if;
    end process;


    slcvec_offset_angle_int_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
            slcvec_offset_angle_int_V_0_ack_out <= ap_const_logic_1;
        else
            slcvec_offset_angle_int_V_0_ack_out <= ap_const_logic_0;
        end if;
    end process;


    theta_for_lut_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
            theta_for_lut_V_0_ack_out <= ap_const_logic_1;
        else
            theta_for_lut_V_0_ack_out <= ap_const_logic_0;
        end if;
    end process;

    zext_ln1193_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_fu_120_p3),15));
    zext_ln703_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_154_p3),17));
end behav;
