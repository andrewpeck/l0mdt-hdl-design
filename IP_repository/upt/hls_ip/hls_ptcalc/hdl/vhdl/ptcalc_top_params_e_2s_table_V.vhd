-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity ptcalc_top_params_e_2s_table_V_rom is
    generic(
             DWIDTH     : integer := 21;
             AWIDTH     : integer := 8;
             MEM_SIZE    : integer := 172
    );
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0);
          ce0       : in std_logic;
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    );
end entity;


architecture rtl of ptcalc_top_params_e_2s_table_V_rom is

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0);
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0);
signal mem : mem_array := (
    0 => "111111111000101011000", 1 => "000000000000110001001",
    2 => "000000010011001001010", 3 => "111111111110011011010",
    4 to 11=> "000000000000000000000", 12 => "111111111101011001001",
    13 => "000000000000101001100", 14 => "000000001000011001010",
    15 => "111111111110010110101", 16 to 19=> "000000000000000000000",
    20 => "000000110000010101101", 21 => "111111111010010010000",
    22 => "111110000001000101111", 23 => "000000001110001000001",
    24 => "000000000101001101010", 25 => "111111111111011011000",
    26 => "111111110100010111010", 27 => "000000000001101010101",
    28 => "111111000100110100001", 29 => "000000000010000001000",
    30 => "000001100000010100100", 31 => "111111111100100011001",
    32 => "111110101000000011001", 33 => "000000000010010010010",
    34 => "000010000010011000000", 35 => "111111111101001000101",
    36 => "000010010010101010110", 37 => "111111110100000110110",
    38 => "111101001101011100101", 39 => "000000001110100010000",
    40 => "111111100110110110001", 41 => "111111111100101110111",
    42 => "000000100000110000110", 43 => "000000000011100001100",
    44 => "111111001000110010011", 45 => "000000000000001111010",
    46 => "000000111000101111010", 47 => "000000000000011001000",
    48 => "111111000110101011001", 49 => "000000001001101011101",
    50 => "000000111100111100001", 51 => "111111110101011110001",
    52 => "111111010111001000010", 53 => "111111111001111011001",
    54 => "000000101010010100010", 55 => "000000000110010101110",
    56 => "111110001011111110111", 57 => "000000000100011001000",
    58 => "000001110110110111011", 59 => "111111111011001100010",
    60 => "000000000110110000000", 61 => "111111111111000111000",
    62 => "111111100101000011011", 63 => "000000000010101100001",
    64 => "000000011101001100000", 65 => "000000000011000100101",
    66 => "111101111100011110111", 67 => "111111110010001001111",
    68 => "000000011101001111100", 69 => "111111111101110011001",
    70 => "111111100000001100000", 71 => "000000000101010000001",
    72 => "111111110000001110010", 73 => "000000000000011010100",
    74 => "000000010101011111001", 75 => "111111111111111101110",
    76 => "000000011111111110010", 77 => "111111111101111110001",
    78 => "111110011110000000011", 79 => "000000000101101111110",
    80 to 83=> "000000000000000000000", 84 => "111111011111000011101",
    85 => "000000000000110001100", 86 => "000000101100110100111",
    87 => "111111111111011001101", 88 => "000000100000110110010",
    89 => "111111111110101001110", 90 => "111111011010110000000",
    91 => "000000000001111001000", 92 => "111111000100001111100",
    93 => "000000000000000000110", 94 => "000001001011010110001",
    95 => "000000000000100010111", 96 => "111111101011000110000",
    97 => "000000000101111001100", 98 => "000000001100100010110",
    99 => "111111111010010111110", 100 => "010001101000100011000",
    101 => "111111010010101000110", 102 => "100111110101010000001",
    103 => "000000111101100100100", 104 => "111110100101011001101",
    105 => "111111111111001101100", 106 => "000001011110100001110",
    107 => "000000000001110101110", 108 => "111111001000101101000",
    109 => "111111111100010100000", 110 => "000000110010001111111",
    111 => "000000000011010110011", 112 => "110100110100011011001",
    113 => "000000001011110001000", 114 => "001011101011001101101",
    115 => "111111110100100110001", 116 => "111110001000011011111",
    117 => "000000000101001001011", 118 => "000001101110110001011",
    119 => "111111111011000000111", 120 => "111111111110010100000",
    121 => "000000000000001101011", 122 => "000000001111001011000",
    123 => "111111111111010000010", 124 => "000000010101011110111",
    125 => "000000000010010000101", 126 => "111110100001001010001",
    127 => "111111110110000001000", 128 to 131=> "000000000000000000000",
    132 => "111111110010001111001", 133 => "000000000000100100010",
    134 => "000000100010010110111", 135 => "111111111111010011100",
    136 => "111111001100100011011", 137 => "000000000100000110000",
    138 => "000001111011010110001", 139 => "111111110101111011010",
    140 => "111111010110111110110", 141 => "111111111111000000101",
    142 => "000001000000111100000", 143 => "000000000010000101100",
    144 => "111111010100000101101", 145 => "111111111111101001100",
    146 => "000001010000001100100", 147 => "000000000001000010000",
    148 => "111110111011100011100", 149 => "111111111110111000010",
    150 => "000001011011111011101", 151 => "000000000001111101111",
    152 => "111101110111110100001", 153 => "000000000000110101001",
    154 => "000010011011101011111", 155 => "111111111110101010111",
    156 => "111111010100101110011", 157 => "111111111100111101100",
    158 => "000000101000101111011", 159 => "000000000100000111110",
    160 => "110110001010110010010", 161 => "000000101101101110100",
    162 => "001010110011011010101", 163 => "111111001101111111010",
    164 => "111111101110100101011", 165 => "111111110110101101000",
    166 => "000000001110110100110", 167 => "000000001010001101111",
    168 => "111110011111010110110", 169 => "111111111101010010110",
    170 => "000001001000001010000", 171 => "000000000100000011000" );


begin


memory_access_guard_0: process (addr0)
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)
begin
    if (clk'event and clk = '1') then
        if (ce0 = '1') then
            q0 <= mem(CONV_INTEGER(addr0_tmp));
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity ptcalc_top_params_e_2s_table_V is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 172;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of ptcalc_top_params_e_2s_table_V is
    component ptcalc_top_params_e_2s_table_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    ptcalc_top_params_e_2s_table_V_rom_U :  component ptcalc_top_params_e_2s_table_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;
