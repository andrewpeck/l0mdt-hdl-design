// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

(* CORE_GENERATION_INFO="compute_r_bins_64,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku15p-ffva1760-2-e,HLS_INPUT_CLOCK=3.125000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.533000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=206,HLS_SYN_LUT=89,HLS_VERSION=2019_2_1}" *)

module compute_r_bins_64 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mdt_localy_V_ap_vld,
        mdt_localx_V,
        mdt_localy_V,
        mdt_r_offset_0_V,
        mdt_r_offset_1_V,
        hw_sin_val_V,
        hw_cos_val_V,
        r_bin_0_V,
        r_bin_0_V_ap_vld,
        r_bin_1_V,
        r_bin_1_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   mdt_localy_V_ap_vld;
input  [14:0] mdt_localx_V;
input  [14:0] mdt_localy_V;
input  [21:0] mdt_r_offset_0_V;
input  [21:0] mdt_r_offset_1_V;
input  [17:0] hw_sin_val_V;
input  [17:0] hw_cos_val_V;
output  [6:0] r_bin_0_V;
output   r_bin_0_V_ap_vld;
output  [6:0] r_bin_1_V;
output   r_bin_1_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_bin_0_V_ap_vld;
reg r_bin_1_V_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg  signed [14:0] mdt_localx_V_0_data_reg;
reg    mdt_localx_V_0_vld_reg;
reg    mdt_localx_V_0_ack_out;
reg  signed [14:0] mdt_localy_V_preg;
reg    mdt_localy_V_ap_vld_preg;
reg   [21:0] mdt_r_offset_0_V_0_data_reg;
reg    mdt_r_offset_0_V_0_vld_reg;
reg    mdt_r_offset_0_V_0_ack_out;
reg   [21:0] mdt_r_offset_1_V_0_data_reg;
reg    mdt_r_offset_1_V_0_vld_reg;
reg    mdt_r_offset_1_V_0_ack_out;
reg  signed [17:0] hw_sin_val_V_0_data_reg;
reg    hw_sin_val_V_0_vld_reg;
reg    hw_sin_val_V_0_ack_out;
reg  signed [17:0] hw_cos_val_V_0_data_reg;
reg    hw_cos_val_V_0_vld_reg;
reg    hw_cos_val_V_0_ack_out;
reg    mdt_localy_V_blk_n;
wire    ap_block_pp0_stage0;
wire  signed [32:0] ret_V_4_fu_196_p2;
reg  signed [32:0] ret_V_4_reg_208;
wire  signed [32:0] ret_V_5_fu_202_p2;
reg  signed [32:0] ret_V_5_reg_213;
wire   [12:0] trunc_ln1353_fu_126_p1;
reg   [12:0] trunc_ln1353_reg_218;
wire   [12:0] trunc_ln1353_1_fu_130_p1;
reg   [12:0] trunc_ln1353_1_reg_223;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [12:0] tmp_fu_134_p4;
wire   [12:0] add_ln215_fu_143_p2;
wire   [12:0] zext_ln215_3_cast_fu_148_p4;
wire   [12:0] ret_V_fu_157_p2;
wire   [12:0] add_ln1353_fu_174_p2;
wire   [12:0] ret_V_3_fu_179_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 mdt_localx_V_0_data_reg = 15'd0;
#0 mdt_localx_V_0_vld_reg = 1'b0;
#0 mdt_localy_V_preg = 15'd0;
#0 mdt_localy_V_ap_vld_preg = 1'b0;
#0 mdt_r_offset_0_V_0_data_reg = 22'd0;
#0 mdt_r_offset_0_V_0_vld_reg = 1'b0;
#0 mdt_r_offset_1_V_0_data_reg = 22'd0;
#0 mdt_r_offset_1_V_0_vld_reg = 1'b0;
#0 hw_sin_val_V_0_data_reg = 18'd0;
#0 hw_sin_val_V_0_vld_reg = 1'b0;
#0 hw_cos_val_V_0_data_reg = 18'd0;
#0 hw_cos_val_V_0_vld_reg = 1'b0;
end

compute_r_bins_64bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
compute_r_bins_64bkb_U1(
    .din0(hw_cos_val_V_0_data_reg),
    .din1(mdt_localx_V_0_data_reg),
    .dout(ret_V_4_fu_196_p2)
);

compute_r_bins_64bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
compute_r_bins_64bkb_U2(
    .din0(hw_sin_val_V_0_data_reg),
    .din1(mdt_localy_V_preg),
    .dout(ret_V_5_fu_202_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        mdt_localy_V_ap_vld_preg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (mdt_localy_V_ap_vld == 1'b1))) begin
            mdt_localy_V_ap_vld_preg <= mdt_localy_V_ap_vld;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            mdt_localy_V_ap_vld_preg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        mdt_localy_V_preg <= 15'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (mdt_localy_V_ap_vld == 1'b1))) begin
            mdt_localy_V_preg <= mdt_localy_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hw_cos_val_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hw_cos_val_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (hw_cos_val_V_0_vld_reg == 1'b1)))) begin
        hw_cos_val_V_0_data_reg <= hw_cos_val_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hw_sin_val_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (hw_sin_val_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (hw_sin_val_V_0_vld_reg == 1'b1)))) begin
        hw_sin_val_V_0_data_reg <= hw_sin_val_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (mdt_localx_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (mdt_localx_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (mdt_localx_V_0_vld_reg == 1'b1)))) begin
        mdt_localx_V_0_data_reg <= mdt_localx_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (mdt_r_offset_0_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (mdt_r_offset_0_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (mdt_r_offset_0_V_0_vld_reg == 1'b1)))) begin
        mdt_r_offset_0_V_0_data_reg <= mdt_r_offset_0_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (mdt_r_offset_1_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (mdt_r_offset_1_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (mdt_r_offset_1_V_0_vld_reg == 1'b1)))) begin
        mdt_r_offset_1_V_0_data_reg <= mdt_r_offset_1_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ret_V_4_reg_208 <= ret_V_4_fu_196_p2;
        ret_V_5_reg_213 <= ret_V_5_fu_202_p2;
        trunc_ln1353_1_reg_223 <= trunc_ln1353_1_fu_130_p1;
        trunc_ln1353_reg_218 <= trunc_ln1353_fu_126_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        hw_cos_val_V_0_ack_out = 1'b1;
    end else begin
        hw_cos_val_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        hw_sin_val_V_0_ack_out = 1'b1;
    end else begin
        hw_sin_val_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mdt_localx_V_0_ack_out = 1'b1;
    end else begin
        mdt_localx_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mdt_localy_V_blk_n = 1'b0;
    end else begin
        mdt_localy_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mdt_r_offset_0_V_0_ack_out = 1'b1;
    end else begin
        mdt_r_offset_0_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mdt_r_offset_1_V_0_ack_out = 1'b1;
    end else begin
        mdt_r_offset_1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_bin_0_V_ap_vld = 1'b1;
    end else begin
        r_bin_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_bin_1_V_ap_vld = 1'b1;
    end else begin
        r_bin_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1353_fu_174_p2 = (trunc_ln1353_1_reg_223 + tmp_fu_134_p4);

assign add_ln215_fu_143_p2 = (trunc_ln1353_reg_218 + tmp_fu_134_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((mdt_localy_V_ap_vld_preg == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((mdt_localy_V_ap_vld_preg == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b0) & (ap_start == 1'b1)) | ((mdt_localy_V_ap_vld_preg == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (mdt_localy_V_ap_vld_preg == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign r_bin_0_V = {{ret_V_fu_157_p2[12:6]}};

assign r_bin_1_V = {{ret_V_3_fu_179_p2[12:6]}};

assign ret_V_3_fu_179_p2 = (add_ln1353_fu_174_p2 + zext_ln215_3_cast_fu_148_p4);

assign ret_V_fu_157_p2 = (add_ln215_fu_143_p2 + zext_ln215_3_cast_fu_148_p4);

assign tmp_fu_134_p4 = {{ret_V_5_reg_213[28:16]}};

assign trunc_ln1353_1_fu_130_p1 = mdt_r_offset_1_V_0_data_reg[12:0];

assign trunc_ln1353_fu_126_p1 = mdt_r_offset_0_V_0_data_reg[12:0];

assign zext_ln215_3_cast_fu_148_p4 = {{ret_V_4_reg_208[28:16]}};

endmodule //compute_r_bins_64
