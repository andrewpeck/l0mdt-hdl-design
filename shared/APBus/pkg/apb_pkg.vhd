-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl
-- 2022-03-16 14:40:36

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.common_ieee_pkg.all;

package apb_pkg is

   -- Custom types and functions --

   type MEM_INT_10A148D_wr_data_CTRL_t is record
      wr_data_0 : std_logic_vector(32-1 downto 0);
      wr_data_1 : std_logic_vector(32-1 downto 0);
      wr_data_2 : std_logic_vector(32-1 downto 0);
      wr_data_3 : std_logic_vector(32-1 downto 0);
      wr_data_4 : std_logic_vector(20-1 downto 0);
   end record MEM_INT_10A148D_wr_data_CTRL_t;
   function width(x: MEM_INT_10A148D_wr_data_CTRL_t) return natural;
   function convert(x: MEM_INT_10A148D_wr_data_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: MEM_INT_10A148D_wr_data_CTRL_t) return MEM_INT_10A148D_wr_data_CTRL_t;

   type MEM_INT_10A148D_rd_data_MON_t is record
      rd_data_0 : std_logic_vector(32-1 downto 0);
      rd_data_1 : std_logic_vector(32-1 downto 0);
      rd_data_2 : std_logic_vector(32-1 downto 0);
      rd_data_3 : std_logic_vector(32-1 downto 0);
      rd_data_4 : std_logic_vector(20-1 downto 0);
   end record MEM_INT_10A148D_rd_data_MON_t;
   function width(x: MEM_INT_10A148D_rd_data_MON_t) return natural;
   function convert(x: MEM_INT_10A148D_rd_data_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: MEM_INT_10A148D_rd_data_MON_t) return MEM_INT_10A148D_rd_data_MON_t;

   type MEM_INT_10A148D_MON_t is record
      rd_rdy : std_logic;
      rd_data : MEM_INT_10A148D_rd_data_MON_t;
   end record MEM_INT_10A148D_MON_t;
   function width(x: MEM_INT_10A148D_MON_t) return natural;
   function convert(x: MEM_INT_10A148D_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: MEM_INT_10A148D_MON_t) return MEM_INT_10A148D_MON_t;

   type MEM_INT_10A148D_MON_t_ARRAY is array(5-1 downto 0) of MEM_INT_10A148D_MON_t;
   function width(x: MEM_INT_10A148D_MON_t_ARRAY) return integer;
   function convert(x: MEM_INT_10A148D_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: MEM_INT_10A148D_MON_t_ARRAY) return MEM_INT_10A148D_MON_t_ARRAY;
   function convert(x: MEM_INT_10A148D_MON_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: MEM_INT_10A148D_MON_t_ARRAY) return MEM_INT_10A148D_MON_t_ARRAY;

   type MEM_INT_10A148D_CTRL_t is record
      wr_req : std_logic;
      rd_ack : std_logic;
      wr_addr : std_logic_vector(10-1 downto 0);
      rd_addr : std_logic_vector(10-1 downto 0);
      wr_data : MEM_INT_10A148D_wr_data_CTRL_t;
   end record MEM_INT_10A148D_CTRL_t;
   function width(x: MEM_INT_10A148D_CTRL_t) return natural;
   function convert(x: MEM_INT_10A148D_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: MEM_INT_10A148D_CTRL_t) return MEM_INT_10A148D_CTRL_t;

   type MEM_INT_10A148D_CTRL_t_ARRAY is array(5-1 downto 0) of MEM_INT_10A148D_CTRL_t;
   function width(x: MEM_INT_10A148D_CTRL_t_ARRAY) return integer;
   function convert(x: MEM_INT_10A148D_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: MEM_INT_10A148D_CTRL_t_ARRAY) return MEM_INT_10A148D_CTRL_t_ARRAY;
   function convert(x: MEM_INT_10A148D_CTRL_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: MEM_INT_10A148D_CTRL_t_ARRAY) return MEM_INT_10A148D_CTRL_t_ARRAY;

end package apb_pkg;

------------------------------------------------------------

package body apb_pkg is

   -- Custom types and functions --

   function width(x: MEM_INT_10A148D_wr_data_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.wr_data_0);
      w := w + width(x.wr_data_1);
      w := w + width(x.wr_data_2);
      w := w + width(x.wr_data_3);
      w := w + width(x.wr_data_4);
      return w;
   end function width;
   function convert(x: MEM_INT_10A148D_wr_data_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.wr_data_0);
         y(u to u+w-1) := convert(x.wr_data_0, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_data_1);
         y(u to u+w-1) := convert(x.wr_data_1, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_data_2);
         y(u to u+w-1) := convert(x.wr_data_2, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_data_3);
         y(u to u+w-1) := convert(x.wr_data_3, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_data_4);
         y(u to u+w-1) := convert(x.wr_data_4, y(u to u+w-1));
      else
         w := width(x.wr_data_0);
         y(u downto u-w+1) := convert(x.wr_data_0, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_data_1);
         y(u downto u-w+1) := convert(x.wr_data_1, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_data_2);
         y(u downto u-w+1) := convert(x.wr_data_2, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_data_3);
         y(u downto u-w+1) := convert(x.wr_data_3, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_data_4);
         y(u downto u-w+1) := convert(x.wr_data_4, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: MEM_INT_10A148D_wr_data_CTRL_t) return MEM_INT_10A148D_wr_data_CTRL_t is
      variable y : MEM_INT_10A148D_wr_data_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.wr_data_0);
         y.wr_data_0 := convert(x(u to u+w-1), t.wr_data_0);
         u := u + w;
         w := width(t.wr_data_1);
         y.wr_data_1 := convert(x(u to u+w-1), t.wr_data_1);
         u := u + w;
         w := width(t.wr_data_2);
         y.wr_data_2 := convert(x(u to u+w-1), t.wr_data_2);
         u := u + w;
         w := width(t.wr_data_3);
         y.wr_data_3 := convert(x(u to u+w-1), t.wr_data_3);
         u := u + w;
         w := width(t.wr_data_4);
         y.wr_data_4 := convert(x(u to u+w-1), t.wr_data_4);
      else
         w := width(t.wr_data_0);
         y.wr_data_0 := convert(x(u downto u-w+1), t.wr_data_0);
         u := u - w;
         w := width(t.wr_data_1);
         y.wr_data_1 := convert(x(u downto u-w+1), t.wr_data_1);
         u := u - w;
         w := width(t.wr_data_2);
         y.wr_data_2 := convert(x(u downto u-w+1), t.wr_data_2);
         u := u - w;
         w := width(t.wr_data_3);
         y.wr_data_3 := convert(x(u downto u-w+1), t.wr_data_3);
         u := u - w;
         w := width(t.wr_data_4);
         y.wr_data_4 := convert(x(u downto u-w+1), t.wr_data_4);
      end if;
      return y;
   end function convert;

   function width(x: MEM_INT_10A148D_rd_data_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.rd_data_0);
      w := w + width(x.rd_data_1);
      w := w + width(x.rd_data_2);
      w := w + width(x.rd_data_3);
      w := w + width(x.rd_data_4);
      return w;
   end function width;
   function convert(x: MEM_INT_10A148D_rd_data_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.rd_data_0);
         y(u to u+w-1) := convert(x.rd_data_0, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_data_1);
         y(u to u+w-1) := convert(x.rd_data_1, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_data_2);
         y(u to u+w-1) := convert(x.rd_data_2, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_data_3);
         y(u to u+w-1) := convert(x.rd_data_3, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_data_4);
         y(u to u+w-1) := convert(x.rd_data_4, y(u to u+w-1));
      else
         w := width(x.rd_data_0);
         y(u downto u-w+1) := convert(x.rd_data_0, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_data_1);
         y(u downto u-w+1) := convert(x.rd_data_1, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_data_2);
         y(u downto u-w+1) := convert(x.rd_data_2, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_data_3);
         y(u downto u-w+1) := convert(x.rd_data_3, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_data_4);
         y(u downto u-w+1) := convert(x.rd_data_4, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: MEM_INT_10A148D_rd_data_MON_t) return MEM_INT_10A148D_rd_data_MON_t is
      variable y : MEM_INT_10A148D_rd_data_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.rd_data_0);
         y.rd_data_0 := convert(x(u to u+w-1), t.rd_data_0);
         u := u + w;
         w := width(t.rd_data_1);
         y.rd_data_1 := convert(x(u to u+w-1), t.rd_data_1);
         u := u + w;
         w := width(t.rd_data_2);
         y.rd_data_2 := convert(x(u to u+w-1), t.rd_data_2);
         u := u + w;
         w := width(t.rd_data_3);
         y.rd_data_3 := convert(x(u to u+w-1), t.rd_data_3);
         u := u + w;
         w := width(t.rd_data_4);
         y.rd_data_4 := convert(x(u to u+w-1), t.rd_data_4);
      else
         w := width(t.rd_data_0);
         y.rd_data_0 := convert(x(u downto u-w+1), t.rd_data_0);
         u := u - w;
         w := width(t.rd_data_1);
         y.rd_data_1 := convert(x(u downto u-w+1), t.rd_data_1);
         u := u - w;
         w := width(t.rd_data_2);
         y.rd_data_2 := convert(x(u downto u-w+1), t.rd_data_2);
         u := u - w;
         w := width(t.rd_data_3);
         y.rd_data_3 := convert(x(u downto u-w+1), t.rd_data_3);
         u := u - w;
         w := width(t.rd_data_4);
         y.rd_data_4 := convert(x(u downto u-w+1), t.rd_data_4);
      end if;
      return y;
   end function convert;

   function width(x: MEM_INT_10A148D_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.rd_rdy);
      w := w + width(x.rd_data);
      return w;
   end function width;
   function convert(x: MEM_INT_10A148D_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.rd_rdy);
         y(u to u+w-1) := convert(x.rd_rdy, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_data);
         y(u to u+w-1) := convert(x.rd_data, y(u to u+w-1));
      else
         w := width(x.rd_rdy);
         y(u downto u-w+1) := convert(x.rd_rdy, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_data);
         y(u downto u-w+1) := convert(x.rd_data, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: MEM_INT_10A148D_MON_t) return MEM_INT_10A148D_MON_t is
      variable y : MEM_INT_10A148D_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.rd_rdy);
         y.rd_rdy := convert(x(u to u+w-1), t.rd_rdy);
         u := u + w;
         w := width(t.rd_data);
         y.rd_data := convert(x(u to u+w-1), t.rd_data);
      else
         w := width(t.rd_rdy);
         y.rd_rdy := convert(x(u downto u-w+1), t.rd_rdy);
         u := u - w;
         w := width(t.rd_data);
         y.rd_data := convert(x(u downto u-w+1), t.rd_data);
      end if;
      return y;
   end function convert;

   function width(x: MEM_INT_10A148D_MON_t_ARRAY) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: MEM_INT_10A148D_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: MEM_INT_10A148D_MON_t_ARRAY) return MEM_INT_10A148D_MON_t_ARRAY is
      variable y : MEM_INT_10A148D_MON_t_ARRAY;
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: MEM_INT_10A148D_MON_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: MEM_INT_10A148D_MON_t_ARRAY) return MEM_INT_10A148D_MON_t_ARRAY is
      variable y : MEM_INT_10A148D_MON_t_ARRAY;
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: MEM_INT_10A148D_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.wr_req);
      w := w + width(x.rd_ack);
      w := w + width(x.wr_addr);
      w := w + width(x.rd_addr);
      w := w + width(x.wr_data);
      return w;
   end function width;
   function convert(x: MEM_INT_10A148D_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.wr_req);
         y(u to u+w-1) := convert(x.wr_req, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_ack);
         y(u to u+w-1) := convert(x.rd_ack, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_addr);
         y(u to u+w-1) := convert(x.wr_addr, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_addr);
         y(u to u+w-1) := convert(x.rd_addr, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_data);
         y(u to u+w-1) := convert(x.wr_data, y(u to u+w-1));
      else
         w := width(x.wr_req);
         y(u downto u-w+1) := convert(x.wr_req, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_ack);
         y(u downto u-w+1) := convert(x.rd_ack, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_addr);
         y(u downto u-w+1) := convert(x.wr_addr, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_addr);
         y(u downto u-w+1) := convert(x.rd_addr, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_data);
         y(u downto u-w+1) := convert(x.wr_data, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: MEM_INT_10A148D_CTRL_t) return MEM_INT_10A148D_CTRL_t is
      variable y : MEM_INT_10A148D_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.wr_req);
         y.wr_req := convert(x(u to u+w-1), t.wr_req);
         u := u + w;
         w := width(t.rd_ack);
         y.rd_ack := convert(x(u to u+w-1), t.rd_ack);
         u := u + w;
         w := width(t.wr_addr);
         y.wr_addr := convert(x(u to u+w-1), t.wr_addr);
         u := u + w;
         w := width(t.rd_addr);
         y.rd_addr := convert(x(u to u+w-1), t.rd_addr);
         u := u + w;
         w := width(t.wr_data);
         y.wr_data := convert(x(u to u+w-1), t.wr_data);
      else
         w := width(t.wr_req);
         y.wr_req := convert(x(u downto u-w+1), t.wr_req);
         u := u - w;
         w := width(t.rd_ack);
         y.rd_ack := convert(x(u downto u-w+1), t.rd_ack);
         u := u - w;
         w := width(t.wr_addr);
         y.wr_addr := convert(x(u downto u-w+1), t.wr_addr);
         u := u - w;
         w := width(t.rd_addr);
         y.rd_addr := convert(x(u downto u-w+1), t.rd_addr);
         u := u - w;
         w := width(t.wr_data);
         y.wr_data := convert(x(u downto u-w+1), t.wr_data);
      end if;
      return y;
   end function convert;

   function width(x: MEM_INT_10A148D_CTRL_t_ARRAY) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: MEM_INT_10A148D_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: MEM_INT_10A148D_CTRL_t_ARRAY) return MEM_INT_10A148D_CTRL_t_ARRAY is
      variable y : MEM_INT_10A148D_CTRL_t_ARRAY;
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: MEM_INT_10A148D_CTRL_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: MEM_INT_10A148D_CTRL_t_ARRAY) return MEM_INT_10A148D_CTRL_t_ARRAY is
      variable y : MEM_INT_10A148D_CTRL_t_ARRAY;
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

end package body apb_pkg;
