-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl
-- 2022-03-14 23:33:49

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.common_ieee_pkg.all;
use shared_lib.l0mdt_constants_pkg.all;
use shared_lib.l0mdt_dataformats_pkg.all;
use shared_lib.common_constants_pkg.all;

package common_types_pkg is

   -- Custom types and functions --

   subtype bcid is unsigned(12-1 downto 0);

   subtype evid is unsigned(32-1 downto 0);

   subtype orid is unsigned(32-1 downto 0);

   type integer_bus is array(integer range <>) of integer;
   function width(x: integer_bus) return integer;
   function convert(x: integer_bus; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: integer_bus) return integer_bus;
   function convert(x: integer_bus; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: integer_bus) return integer_bus;

   type l0mdt_control_rt is record
      clk : std_logic;
      rst : std_logic;
      bx : std_logic;
   end record l0mdt_control_rt;
   function width(x: l0mdt_control_rt) return natural;
   function convert(x: l0mdt_control_rt; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: l0mdt_control_rt) return l0mdt_control_rt;

   type l0mdt_ttc_rt is record
      bcr : std_logic;
      ocr : std_logic;
      ecr : std_logic;
      l0a : std_logic;
      l1a : std_logic;
      bcid : bcid;
      evid : evid;
      orid : orid;
   end record l0mdt_ttc_rt;
   function width(x: l0mdt_ttc_rt) return natural;
   function convert(x: l0mdt_ttc_rt; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: l0mdt_ttc_rt) return l0mdt_ttc_rt;

   type slc_rx_art is array(integer range <>) of slc_rx_rt;
   function width(x: slc_rx_art) return integer;
   function convert(x: slc_rx_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: slc_rx_art) return slc_rx_art;
   function convert(x: slc_rx_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: slc_rx_art) return slc_rx_art;

   type slc_endcap_art is array(integer range <>) of slc_endcap_rt;
   function width(x: slc_endcap_art) return integer;
   function convert(x: slc_endcap_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: slc_endcap_art) return slc_endcap_art;
   function convert(x: slc_endcap_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: slc_endcap_art) return slc_endcap_art;

   type slc_barrel_art is array(integer range <>) of slc_barrel_rt;
   function width(x: slc_barrel_art) return integer;
   function convert(x: slc_barrel_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: slc_barrel_art) return slc_barrel_art;
   function convert(x: slc_barrel_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: slc_barrel_art) return slc_barrel_art;

   type tdcpolmux2tar_art is array(integer range <>) of tdcpolmux2tar_rt;
   function width(x: tdcpolmux2tar_art) return integer;
   function convert(x: tdcpolmux2tar_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: tdcpolmux2tar_art) return tdcpolmux2tar_art;
   function convert(x: tdcpolmux2tar_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: tdcpolmux2tar_art) return tdcpolmux2tar_art;

   type tar2hps_art is array(integer range <>) of tar2hps_rt;
   function width(x: tar2hps_art) return integer;
   function convert(x: tar2hps_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: tar2hps_art) return tar2hps_art;
   function convert(x: tar2hps_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: tar2hps_art) return tar2hps_art;

   type ucm2hps_art is array(integer range <>) of ucm2hps_rt;
   function width(x: ucm2hps_art) return integer;
   function convert(x: ucm2hps_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: ucm2hps_art) return ucm2hps_art;
   function convert(x: ucm2hps_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: ucm2hps_art) return ucm2hps_art;

   type heg2sfslc_art is array(integer range <>) of heg2sfslc_rt;
   function width(x: heg2sfslc_art) return integer;
   function convert(x: heg2sfslc_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: heg2sfslc_art) return heg2sfslc_art;
   function convert(x: heg2sfslc_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: heg2sfslc_art) return heg2sfslc_art;

   type heg2sfhit_art is array(integer range <>) of heg2sfhit_rt;
   function width(x: heg2sfhit_art) return integer;
   function convert(x: heg2sfhit_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: heg2sfhit_art) return heg2sfhit_art;
   function convert(x: heg2sfhit_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: heg2sfhit_art) return heg2sfhit_art;

   type sf2ptcalc_art is array(integer range <>) of sf2ptcalc_rt;
   function width(x: sf2ptcalc_art) return integer;
   function convert(x: sf2ptcalc_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: sf2ptcalc_art) return sf2ptcalc_art;
   function convert(x: sf2ptcalc_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: sf2ptcalc_art) return sf2ptcalc_art;

   type ucm2pl_art is array(integer range <>) of ucm2pl_rt;
   function width(x: ucm2pl_art) return integer;
   function convert(x: ucm2pl_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: ucm2pl_art) return ucm2pl_art;
   function convert(x: ucm2pl_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: ucm2pl_art) return ucm2pl_art;

   type pl2ptcalc_art is array(integer range <>) of pl2ptcalc_rt;
   function width(x: pl2ptcalc_art) return integer;
   function convert(x: pl2ptcalc_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: pl2ptcalc_art) return pl2ptcalc_art;
   function convert(x: pl2ptcalc_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: pl2ptcalc_art) return pl2ptcalc_art;

   type pl2mtc_art is array(integer range <>) of pl2mtc_rt;
   function width(x: pl2mtc_art) return integer;
   function convert(x: pl2mtc_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: pl2mtc_art) return pl2mtc_art;
   function convert(x: pl2mtc_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: pl2mtc_art) return pl2mtc_art;

   type ptcalc2mtc_art is array(integer range <>) of ptcalc2mtc_rt;
   function width(x: ptcalc2mtc_art) return integer;
   function convert(x: ptcalc2mtc_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: ptcalc2mtc_art) return ptcalc2mtc_art;
   function convert(x: ptcalc2mtc_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: ptcalc2mtc_art) return ptcalc2mtc_art;

   type mtc_out_art is array(integer range <>) of mtc2sl_rt;
   function width(x: mtc_out_art) return integer;
   function convert(x: mtc_out_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: mtc_out_art) return mtc_out_art;
   function convert(x: mtc_out_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: mtc_out_art) return mtc_out_art;

   type mtc2nsp_art is array(integer range <>) of mtc2sl_rt;
   function width(x: mtc2nsp_art) return integer;
   function convert(x: mtc2nsp_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: mtc2nsp_art) return mtc2nsp_art;
   function convert(x: mtc2nsp_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: mtc2nsp_art) return mtc2nsp_art;

   subtype felix_data is std_logic_vector(250-1 downto 0);

   type felix_stream_rt is record
      valid : std_logic;
      data : felix_data;
   end record felix_stream_rt;
   function width(x: felix_stream_rt) return natural;
   function convert(x: felix_stream_rt; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: felix_stream_rt) return felix_stream_rt;

   type felix_stream_art is array(integer range <>) of felix_stream_rt;
   function width(x: felix_stream_art) return integer;
   function convert(x: felix_stream_art; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: felix_stream_art) return felix_stream_art;
   function convert(x: felix_stream_art; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: felix_stream_art) return felix_stream_art;

end package common_types_pkg;

------------------------------------------------------------

package body common_types_pkg is

   -- Custom types and functions --

   function width(x: integer_bus) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: integer_bus; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: integer_bus) return integer_bus is
      variable y : integer_bus(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: integer_bus; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: integer_bus) return integer_bus is
      variable y : integer_bus(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: l0mdt_control_rt) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.clk);
      w := w + width(x.rst);
      w := w + width(x.bx);
      return w;
   end function width;
   function convert(x: l0mdt_control_rt; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.clk);
         y(u to u+w-1) := convert(x.clk, y(u to u+w-1));
         u := u + w;
         w := width(x.rst);
         y(u to u+w-1) := convert(x.rst, y(u to u+w-1));
         u := u + w;
         w := width(x.bx);
         y(u to u+w-1) := convert(x.bx, y(u to u+w-1));
      else
         w := width(x.clk);
         y(u downto u-w+1) := convert(x.clk, y(u downto u-w+1));
         u := u - w;
         w := width(x.rst);
         y(u downto u-w+1) := convert(x.rst, y(u downto u-w+1));
         u := u - w;
         w := width(x.bx);
         y(u downto u-w+1) := convert(x.bx, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: l0mdt_control_rt) return l0mdt_control_rt is
      variable y : l0mdt_control_rt := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.clk);
         y.clk := convert(x(u to u+w-1), t.clk);
         u := u + w;
         w := width(t.rst);
         y.rst := convert(x(u to u+w-1), t.rst);
         u := u + w;
         w := width(t.bx);
         y.bx := convert(x(u to u+w-1), t.bx);
      else
         w := width(t.clk);
         y.clk := convert(x(u downto u-w+1), t.clk);
         u := u - w;
         w := width(t.rst);
         y.rst := convert(x(u downto u-w+1), t.rst);
         u := u - w;
         w := width(t.bx);
         y.bx := convert(x(u downto u-w+1), t.bx);
      end if;
      return y;
   end function convert;

   function width(x: l0mdt_ttc_rt) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.bcr);
      w := w + width(x.ocr);
      w := w + width(x.ecr);
      w := w + width(x.l0a);
      w := w + width(x.l1a);
      w := w + width(x.bcid);
      w := w + width(x.evid);
      w := w + width(x.orid);
      return w;
   end function width;
   function convert(x: l0mdt_ttc_rt; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.bcr);
         y(u to u+w-1) := convert(x.bcr, y(u to u+w-1));
         u := u + w;
         w := width(x.ocr);
         y(u to u+w-1) := convert(x.ocr, y(u to u+w-1));
         u := u + w;
         w := width(x.ecr);
         y(u to u+w-1) := convert(x.ecr, y(u to u+w-1));
         u := u + w;
         w := width(x.l0a);
         y(u to u+w-1) := convert(x.l0a, y(u to u+w-1));
         u := u + w;
         w := width(x.l1a);
         y(u to u+w-1) := convert(x.l1a, y(u to u+w-1));
         u := u + w;
         w := width(x.bcid);
         y(u to u+w-1) := convert(x.bcid, y(u to u+w-1));
         u := u + w;
         w := width(x.evid);
         y(u to u+w-1) := convert(x.evid, y(u to u+w-1));
         u := u + w;
         w := width(x.orid);
         y(u to u+w-1) := convert(x.orid, y(u to u+w-1));
      else
         w := width(x.bcr);
         y(u downto u-w+1) := convert(x.bcr, y(u downto u-w+1));
         u := u - w;
         w := width(x.ocr);
         y(u downto u-w+1) := convert(x.ocr, y(u downto u-w+1));
         u := u - w;
         w := width(x.ecr);
         y(u downto u-w+1) := convert(x.ecr, y(u downto u-w+1));
         u := u - w;
         w := width(x.l0a);
         y(u downto u-w+1) := convert(x.l0a, y(u downto u-w+1));
         u := u - w;
         w := width(x.l1a);
         y(u downto u-w+1) := convert(x.l1a, y(u downto u-w+1));
         u := u - w;
         w := width(x.bcid);
         y(u downto u-w+1) := convert(x.bcid, y(u downto u-w+1));
         u := u - w;
         w := width(x.evid);
         y(u downto u-w+1) := convert(x.evid, y(u downto u-w+1));
         u := u - w;
         w := width(x.orid);
         y(u downto u-w+1) := convert(x.orid, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: l0mdt_ttc_rt) return l0mdt_ttc_rt is
      variable y : l0mdt_ttc_rt := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.bcr);
         y.bcr := convert(x(u to u+w-1), t.bcr);
         u := u + w;
         w := width(t.ocr);
         y.ocr := convert(x(u to u+w-1), t.ocr);
         u := u + w;
         w := width(t.ecr);
         y.ecr := convert(x(u to u+w-1), t.ecr);
         u := u + w;
         w := width(t.l0a);
         y.l0a := convert(x(u to u+w-1), t.l0a);
         u := u + w;
         w := width(t.l1a);
         y.l1a := convert(x(u to u+w-1), t.l1a);
         u := u + w;
         w := width(t.bcid);
         y.bcid := convert(x(u to u+w-1), t.bcid);
         u := u + w;
         w := width(t.evid);
         y.evid := convert(x(u to u+w-1), t.evid);
         u := u + w;
         w := width(t.orid);
         y.orid := convert(x(u to u+w-1), t.orid);
      else
         w := width(t.bcr);
         y.bcr := convert(x(u downto u-w+1), t.bcr);
         u := u - w;
         w := width(t.ocr);
         y.ocr := convert(x(u downto u-w+1), t.ocr);
         u := u - w;
         w := width(t.ecr);
         y.ecr := convert(x(u downto u-w+1), t.ecr);
         u := u - w;
         w := width(t.l0a);
         y.l0a := convert(x(u downto u-w+1), t.l0a);
         u := u - w;
         w := width(t.l1a);
         y.l1a := convert(x(u downto u-w+1), t.l1a);
         u := u - w;
         w := width(t.bcid);
         y.bcid := convert(x(u downto u-w+1), t.bcid);
         u := u - w;
         w := width(t.evid);
         y.evid := convert(x(u downto u-w+1), t.evid);
         u := u - w;
         w := width(t.orid);
         y.orid := convert(x(u downto u-w+1), t.orid);
      end if;
      return y;
   end function convert;

   function width(x: slc_rx_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: slc_rx_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: slc_rx_art) return slc_rx_art is
      variable y : slc_rx_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: slc_rx_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: slc_rx_art) return slc_rx_art is
      variable y : slc_rx_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: slc_endcap_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: slc_endcap_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: slc_endcap_art) return slc_endcap_art is
      variable y : slc_endcap_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: slc_endcap_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: slc_endcap_art) return slc_endcap_art is
      variable y : slc_endcap_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: slc_barrel_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: slc_barrel_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: slc_barrel_art) return slc_barrel_art is
      variable y : slc_barrel_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: slc_barrel_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: slc_barrel_art) return slc_barrel_art is
      variable y : slc_barrel_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: tdcpolmux2tar_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: tdcpolmux2tar_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: tdcpolmux2tar_art) return tdcpolmux2tar_art is
      variable y : tdcpolmux2tar_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: tdcpolmux2tar_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: tdcpolmux2tar_art) return tdcpolmux2tar_art is
      variable y : tdcpolmux2tar_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: tar2hps_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: tar2hps_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: tar2hps_art) return tar2hps_art is
      variable y : tar2hps_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: tar2hps_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: tar2hps_art) return tar2hps_art is
      variable y : tar2hps_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: ucm2hps_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: ucm2hps_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: ucm2hps_art) return ucm2hps_art is
      variable y : ucm2hps_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: ucm2hps_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: ucm2hps_art) return ucm2hps_art is
      variable y : ucm2hps_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: heg2sfslc_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: heg2sfslc_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: heg2sfslc_art) return heg2sfslc_art is
      variable y : heg2sfslc_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: heg2sfslc_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: heg2sfslc_art) return heg2sfslc_art is
      variable y : heg2sfslc_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: heg2sfhit_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: heg2sfhit_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: heg2sfhit_art) return heg2sfhit_art is
      variable y : heg2sfhit_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: heg2sfhit_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: heg2sfhit_art) return heg2sfhit_art is
      variable y : heg2sfhit_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: sf2ptcalc_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: sf2ptcalc_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: sf2ptcalc_art) return sf2ptcalc_art is
      variable y : sf2ptcalc_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: sf2ptcalc_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: sf2ptcalc_art) return sf2ptcalc_art is
      variable y : sf2ptcalc_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: ucm2pl_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: ucm2pl_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: ucm2pl_art) return ucm2pl_art is
      variable y : ucm2pl_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: ucm2pl_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: ucm2pl_art) return ucm2pl_art is
      variable y : ucm2pl_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: pl2ptcalc_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: pl2ptcalc_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: pl2ptcalc_art) return pl2ptcalc_art is
      variable y : pl2ptcalc_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: pl2ptcalc_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: pl2ptcalc_art) return pl2ptcalc_art is
      variable y : pl2ptcalc_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: pl2mtc_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: pl2mtc_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: pl2mtc_art) return pl2mtc_art is
      variable y : pl2mtc_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: pl2mtc_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: pl2mtc_art) return pl2mtc_art is
      variable y : pl2mtc_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: ptcalc2mtc_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: ptcalc2mtc_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: ptcalc2mtc_art) return ptcalc2mtc_art is
      variable y : ptcalc2mtc_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: ptcalc2mtc_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: ptcalc2mtc_art) return ptcalc2mtc_art is
      variable y : ptcalc2mtc_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: mtc_out_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: mtc_out_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: mtc_out_art) return mtc_out_art is
      variable y : mtc_out_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: mtc_out_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: mtc_out_art) return mtc_out_art is
      variable y : mtc_out_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: mtc2nsp_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: mtc2nsp_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: mtc2nsp_art) return mtc2nsp_art is
      variable y : mtc2nsp_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: mtc2nsp_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: mtc2nsp_art) return mtc2nsp_art is
      variable y : mtc2nsp_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: felix_stream_rt) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.valid);
      w := w + width(x.data);
      return w;
   end function width;
   function convert(x: felix_stream_rt; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.valid);
         y(u to u+w-1) := convert(x.valid, y(u to u+w-1));
         u := u + w;
         w := width(x.data);
         y(u to u+w-1) := convert(x.data, y(u to u+w-1));
      else
         w := width(x.valid);
         y(u downto u-w+1) := convert(x.valid, y(u downto u-w+1));
         u := u - w;
         w := width(x.data);
         y(u downto u-w+1) := convert(x.data, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: felix_stream_rt) return felix_stream_rt is
      variable y : felix_stream_rt := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.valid);
         y.valid := convert(x(u to u+w-1), t.valid);
         u := u + w;
         w := width(t.data);
         y.data := convert(x(u to u+w-1), t.data);
      else
         w := width(t.valid);
         y.valid := convert(x(u downto u-w+1), t.valid);
         u := u - w;
         w := width(t.data);
         y.data := convert(x(u downto u-w+1), t.data);
      end if;
      return y;
   end function convert;

   function width(x: felix_stream_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: felix_stream_art; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: felix_stream_art) return felix_stream_art is
      variable y : felix_stream_art(t'range);
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: felix_stream_art; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: felix_stream_art) return felix_stream_art is
      variable y : felix_stream_art(t'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

end package body common_types_pkg;
