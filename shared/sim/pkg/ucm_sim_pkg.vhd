-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.common_ieee_pkg.all;
use shared_lib.l0mdt_constants_pkg.all;
use shared_lib.l0mdt_dataformats_pkg.all;
use shared_lib.common_constants_pkg.all;
use shared_lib.common_types_pkg.all;

package ucm_sim_pkg is

   -- Custom types and functions --

   type input_slc_rt is record
      ToA : unsigned(64-1 downto 0);
      event : unsigned(32-1 downto 0);
      slc : slc_rx_rt;
   end record input_slc_rt;
   attribute w of input_slc_rt : type is 252;
   function width(x: input_slc_rt) return natural;
   function convert(x: input_slc_rt; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: input_slc_rt) return input_slc_rt;
   function zero(tpl: input_slc_rt) return input_slc_rt;

   constant TB_SLC_FIFO_WIDTH : integer := 32;
   attribute w of TB_SLC_FIFO_WIDTH : constant is 32;

   type input_slc_art is array(TB_SLC_FIFO_WIDTH-1 downto 0) of input_slc_rt;
   attribute w of input_slc_art : type is 8064;
   function width(x: input_slc_art) return integer;
   function convert(x: input_slc_art; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: input_slc_art) return input_slc_art;
   function zero(tpl: input_slc_art) return input_slc_art;
   function convert(x: input_slc_art; tpl: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; tpl: input_slc_art) return input_slc_art;

   type slc_tb_art is array(TB_SLC_FIFO_WIDTH-1 downto 0) of slc_rx_rt;
   attribute w of slc_tb_art : type is 4992;
   function width(x: slc_tb_art) return integer;
   function convert(x: slc_tb_art; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: slc_tb_art) return slc_tb_art;
   function zero(tpl: slc_tb_art) return slc_tb_art;
   function convert(x: slc_tb_art; tpl: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; tpl: slc_tb_art) return slc_tb_art;

end package ucm_sim_pkg;

------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.common_ieee_pkg.all;
use shared_lib.l0mdt_constants_pkg.all;
use shared_lib.l0mdt_dataformats_pkg.all;
use shared_lib.common_constants_pkg.all;
use shared_lib.common_types_pkg.all;

package body ucm_sim_pkg is

   -- Custom types and functions --

   function width(x: input_slc_rt) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.ToA);
      w := w + width(x.event);
      w := w + width(x.slc);
      return w;
   end function width;
   function convert(x: input_slc_rt; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.ToA);
         y(u to u+w-1) := convert(x.ToA, y(u to u+w-1));
         u := u + w;
         w := width(x.event);
         y(u to u+w-1) := convert(x.event, y(u to u+w-1));
         u := u + w;
         w := width(x.slc);
         y(u to u+w-1) := convert(x.slc, y(u to u+w-1));
      else
         w := width(x.ToA);
         y(u downto u-w+1) := convert(x.ToA, y(u downto u-w+1));
         u := u - w;
         w := width(x.event);
         y(u downto u-w+1) := convert(x.event, y(u downto u-w+1));
         u := u - w;
         w := width(x.slc);
         y(u downto u-w+1) := convert(x.slc, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: input_slc_rt) return input_slc_rt is
      variable y : input_slc_rt;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.ToA);
         y.ToA := convert(x(u to u+w-1), tpl.ToA);
         u := u + w;
         w := width(tpl.event);
         y.event := convert(x(u to u+w-1), tpl.event);
         u := u + w;
         w := width(tpl.slc);
         y.slc := convert(x(u to u+w-1), tpl.slc);
      else
         w := width(tpl.ToA);
         y.ToA := convert(x(u downto u-w+1), tpl.ToA);
         u := u - w;
         w := width(tpl.event);
         y.event := convert(x(u downto u-w+1), tpl.event);
         u := u - w;
         w := width(tpl.slc);
         y.slc := convert(x(u downto u-w+1), tpl.slc);
      end if;
      return y;
   end function convert;
   function zero(tpl: input_slc_rt) return input_slc_rt is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: input_slc_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: input_slc_art; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: input_slc_art) return input_slc_art is
      variable y : input_slc_art;
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function zero(tpl: input_slc_art) return input_slc_art is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;
   function convert(x: input_slc_art; tpl: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(tpl'range)(tpl(tpl'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; tpl: input_slc_art) return input_slc_art is
      variable y : input_slc_art;
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: slc_tb_art) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: slc_tb_art; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: slc_tb_art) return slc_tb_art is
      variable y : slc_tb_art;
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function zero(tpl: slc_tb_art) return slc_tb_art is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;
   function convert(x: slc_tb_art; tpl: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(tpl'range)(tpl(tpl'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; tpl: slc_tb_art) return slc_tb_art is
      variable y : slc_tb_art;
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

end package body ucm_sim_pkg;
