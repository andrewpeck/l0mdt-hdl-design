-- This file was auto-generated by YML2HDL toll.
-- https://gitlab.com/tcpaiva/yml2hdl

library ieee;

use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library types_def;

use types_def.common_defs.all;

library ttc_def;

use ttc_def.ttc_defs.all;

library daq_def;

use daq_def.daq_devel_defs.all;

package daq_defs is

  subtype daq_stream_data_t is std_logic_vector(DAQ_MAX_DATA_WIDTH-1 downto 0);

  type daq_stream_rt is record
    bcid : bcid_t;
    valid : std_logic;
    data : daq_stream_data_t;
  end record daq_stream_rt;
  function len(x: daq_stream_rt) return natural;
  function vectorify(x: daq_stream_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_stream_rt) return daq_stream_rt;
  function nullify(t: daq_stream_rt) return daq_stream_rt;

  type daq_branch_t is array(DAQ_MAX_STREAMS-1 downto 0) of daq_stream_rt;
  function len(x: daq_branch_t) return natural;
  function vectorify(x: daq_branch_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: daq_branch_t) return daq_branch_t;
  function nullify(x: daq_branch_t) return daq_branch_t;

  type daq_branch_struct_t is array(0 to DAQ_MAX_STREAMS-1) of integer;
  function len(x: daq_branch_struct_t) return natural;
  function vectorify(x: daq_branch_struct_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: daq_branch_struct_t) return daq_branch_struct_t;
  function nullify(x: daq_branch_struct_t) return daq_branch_struct_t;

  type daq_branches_t is array(DAQ_MAX_BRANCHES-1 downto 0) of daq_branch_t;
  function len(x: daq_branches_t) return natural;
  function vectorify(x: daq_branches_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: daq_branches_t) return daq_branches_t;
  function nullify(x: daq_branches_t) return daq_branches_t;

  type daq_branches_map_at is array(0 to DAQ_MAX_BRANCHES-1) of daq_branch_struct_t;
  function len(x: daq_branches_map_at) return natural;
  function vectorify(x: daq_branches_map_at; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: daq_branches_map_at) return daq_branches_map_at;
  function nullify(x: daq_branches_map_at) return daq_branches_map_at;

  type daq_sys_rt is record
    clk320 : std_logic;
    rst : std_logic;
  end record daq_sys_rt;
  function len(x: daq_sys_rt) return natural;
  function vectorify(x: daq_sys_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_sys_rt) return daq_sys_rt;
  function nullify(t: daq_sys_rt) return daq_sys_rt;

  -- daq_hdr_swrod_rt:
  -- Fields required by swROD
  type daq_hdr_swrod_rt is record
    -- flag_0: example of flag from swROD
    flag_0 : std_logic_vector(8-1 downto 0);
    flag_1 : std_logic_vector(8-1 downto 0);
    flag_2 : std_logic_vector(16-1 downto 0);
    evid : evid_t;
  end record daq_hdr_swrod_rt;
  function len(x: daq_hdr_swrod_rt) return natural;
  function vectorify(x: daq_hdr_swrod_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_hdr_swrod_rt) return daq_hdr_swrod_rt;
  function nullify(t: daq_hdr_swrod_rt) return daq_hdr_swrod_rt;

  type daq_hdr_extra_rt is record
    daq_bcid : bcid_t;
    win_start : bcid_t;
    win_width : bcid_t;
    latency_ref : bcid_t;
    win_lower_ref : bcid_t;
    win_upper_ref : bcid_t;
    bcid : bcid_t;
  end record daq_hdr_extra_rt;
  function len(x: daq_hdr_extra_rt) return natural;
  function vectorify(x: daq_hdr_extra_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_hdr_extra_rt) return daq_hdr_extra_rt;
  function nullify(t: daq_hdr_extra_rt) return daq_hdr_extra_rt;

  type daq_hdr_rt is record
    swrod : daq_hdr_swrod_rt;
    extra : daq_hdr_extra_rt;
  end record daq_hdr_rt;
  function len(x: daq_hdr_rt) return natural;
  function vectorify(x: daq_hdr_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_hdr_rt) return daq_hdr_rt;
  function nullify(t: daq_hdr_rt) return daq_hdr_rt;

  subtype daq_hdr_vt is std_logic_vector(148-1 downto 0);

  type daq_cnt_rt is record
    daq_bcid : bcid_t;
    win_start : bcid_t;
  end record daq_cnt_rt;
  function len(x: daq_cnt_rt) return natural;
  function vectorify(x: daq_cnt_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_cnt_rt) return daq_cnt_rt;
  function nullify(t: daq_cnt_rt) return daq_cnt_rt;

  type stability_rt is record
    win_upper : std_logic;
    win_lower : std_logic;
    latency : std_logic;
  end record stability_rt;
  function len(x: stability_rt) return natural;
  function vectorify(x: stability_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: stability_rt) return stability_rt;
  function nullify(t: stability_rt) return stability_rt;

  subtype stability_vt is std_logic_vector(3-1 downto 0);

  type daq_win_rt is record
    upper : bcid_t;
    lower : bcid_t;
    latency : bcid_t;
    width : bcid_t;
  end record daq_win_rt;
  function len(x: daq_win_rt) return natural;
  function vectorify(x: daq_win_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_win_rt) return daq_win_rt;
  function nullify(t: daq_win_rt) return daq_win_rt;

  subtype pbldr_payload_t is std_logic_vector(DAQ_MAX_DATA_WIDTH-1 downto 0);

  type forward_rt is record
    nempty : std_logic;
    data : std_logic_vector(DAQ_MAX_DATA_WIDTH-1 downto 0);
  end record forward_rt;
  function len(x: forward_rt) return natural;
  function vectorify(x: forward_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: forward_rt) return forward_rt;
  function nullify(t: forward_rt) return forward_rt;

  type backward_rt is record
    rd_strb : std_logic;
  end record backward_rt;
  function len(x: backward_rt) return natural;
  function vectorify(x: backward_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: backward_rt) return backward_rt;
  function nullify(t: backward_rt) return backward_rt;

  type src_to_node_fifo_rt is record
    wr_en : std_logic;
    data : std_logic_vector(DAQ_MAX_DATA_WIDTH-1 downto 0);
  end record src_to_node_fifo_rt;
  function len(x: src_to_node_fifo_rt) return natural;
  function vectorify(x: src_to_node_fifo_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: src_to_node_fifo_rt) return src_to_node_fifo_rt;
  function nullify(t: src_to_node_fifo_rt) return src_to_node_fifo_rt;

  type node_fifo_to_src_rt is record
    full : std_logic;
  end record node_fifo_to_src_rt;
  function len(x: node_fifo_to_src_rt) return natural;
  function vectorify(x: node_fifo_to_src_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: node_fifo_to_src_rt) return node_fifo_to_src_rt;
  function nullify(t: node_fifo_to_src_rt) return node_fifo_to_src_rt;

  subtype node_fifo_cnt_t is std_logic_vector(DAQ_MAX_COUNTER_WIDTH-1 downto 0);

  type node_fifo_to_dst_rt is record
    data : daq_stream_data_t;
    count : node_fifo_cnt_t;
    nempty : std_logic;
  end record node_fifo_to_dst_rt;
  function len(x: node_fifo_to_dst_rt) return natural;
  function vectorify(x: node_fifo_to_dst_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: node_fifo_to_dst_rt) return node_fifo_to_dst_rt;
  function nullify(t: node_fifo_to_dst_rt) return node_fifo_to_dst_rt;

  type dst_to_node_fifo_rt is record
    rd_en : std_logic;
  end record dst_to_node_fifo_rt;
  function len(x: dst_to_node_fifo_rt) return natural;
  function vectorify(x: dst_to_node_fifo_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: dst_to_node_fifo_rt) return dst_to_node_fifo_rt;
  function nullify(t: dst_to_node_fifo_rt) return dst_to_node_fifo_rt;

  type daq_node_fifo_irt is record
    sys : daq_sys_rt;
    src : src_to_node_fifo_rt;
    dst : dst_to_node_fifo_rt;
  end record daq_node_fifo_irt;
  function len(x: daq_node_fifo_irt) return natural;
  function vectorify(x: daq_node_fifo_irt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_node_fifo_irt) return daq_node_fifo_irt;
  function nullify(t: daq_node_fifo_irt) return daq_node_fifo_irt;

  type daq_node_fifo_ort is record
    src : node_fifo_to_src_rt;
    dst : node_fifo_to_dst_rt;
  end record daq_node_fifo_ort;
  function len(x: daq_node_fifo_ort) return natural;
  function vectorify(x: daq_node_fifo_ort; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_node_fifo_ort) return daq_node_fifo_ort;
  function nullify(t: daq_node_fifo_ort) return daq_node_fifo_ort;

  type daq_node_fifo_ert is record
    i : daq_node_fifo_irt;
    o : daq_node_fifo_ort;
  end record daq_node_fifo_ert;
  function len(x: daq_node_fifo_ert) return natural;
  function vectorify(x: daq_node_fifo_ert; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_node_fifo_ert) return daq_node_fifo_ert;
  function nullify(t: daq_node_fifo_ert) return daq_node_fifo_ert;

  type daq_node_fifo_grt is record
    WRITE_DATA_WIDTH : integer;
    READ_DATA_WIDTH : integer;
    READ_COUNT_WIDTH : integer;
  end record daq_node_fifo_grt;
  function len(x: daq_node_fifo_grt) return natural;
  function vectorify(x: daq_node_fifo_grt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_node_fifo_grt) return daq_node_fifo_grt;
  function nullify(t: daq_node_fifo_grt) return daq_node_fifo_grt;

  type row_to_mngt_rt is record
    done : std_logic_vector(DAQ_MAX_PIPELINES-1 downto 0);
    nempty : std_logic_vector(DAQ_MAX_PIPELINES-1 downto 0);
    err : std_logic_vector(DAQ_MAX_PIPELINES-1 downto 0);
  end record row_to_mngt_rt;
  function len(x: row_to_mngt_rt) return natural;
  function vectorify(x: row_to_mngt_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: row_to_mngt_rt) return row_to_mngt_rt;
  function nullify(t: row_to_mngt_rt) return row_to_mngt_rt;

  type mngt_to_row_rt is record
    en : std_logic_vector(0 to DAQ_MAX_PIPELINES-1);
    rd_en : std_logic_vector(0 to DAQ_MAX_PIPELINES-1);
  end record mngt_to_row_rt;
  function len(x: mngt_to_row_rt) return natural;
  function vectorify(x: mngt_to_row_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: mngt_to_row_rt) return mngt_to_row_rt;
  function nullify(t: mngt_to_row_rt) return mngt_to_row_rt;

  type mngt_to_pbldr_rt is record
    en : std_logic;
  end record mngt_to_pbldr_rt;
  function len(x: mngt_to_pbldr_rt) return natural;
  function vectorify(x: mngt_to_pbldr_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: mngt_to_pbldr_rt) return mngt_to_pbldr_rt;
  function nullify(t: mngt_to_pbldr_rt) return mngt_to_pbldr_rt;

  type pbldr_to_mngt_rt is record
    done : std_logic;
  end record pbldr_to_mngt_rt;
  function len(x: pbldr_to_mngt_rt) return natural;
  function vectorify(x: pbldr_to_mngt_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: pbldr_to_mngt_rt) return pbldr_to_mngt_rt;
  function nullify(t: pbldr_to_mngt_rt) return pbldr_to_mngt_rt;

  type row_to_pbldr_rt is record
    payload : forward_rt;
  end record row_to_pbldr_rt;
  function len(x: row_to_pbldr_rt) return natural;
  function vectorify(x: row_to_pbldr_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: row_to_pbldr_rt) return row_to_pbldr_rt;
  function nullify(t: row_to_pbldr_rt) return row_to_pbldr_rt;

  type pbldr_to_row_rt is record
    payload : backward_rt;
    sel : std_logic;
  end record pbldr_to_row_rt;
  function len(x: pbldr_to_row_rt) return natural;
  function vectorify(x: pbldr_to_row_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: pbldr_to_row_rt) return pbldr_to_row_rt;
  function nullify(t: pbldr_to_row_rt) return pbldr_to_row_rt;

  type pbldr_to_rows_rt is record
    payload : backward_rt;
    sel : std_logic_vector(0 to DAQ_MAX_ROWS-1);
  end record pbldr_to_rows_rt;
  function len(x: pbldr_to_rows_rt) return natural;
  function vectorify(x: pbldr_to_rows_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: pbldr_to_rows_rt) return pbldr_to_rows_rt;
  function nullify(t: pbldr_to_rows_rt) return pbldr_to_rows_rt;

  type req_to_row_common_rt is record
    strb : std_logic;
    win_start : bcid_t;
    win_width : bcid_t;
  end record req_to_row_common_rt;
  function len(x: req_to_row_common_rt) return natural;
  function vectorify(x: req_to_row_common_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: req_to_row_common_rt) return req_to_row_common_rt;
  function nullify(t: req_to_row_common_rt) return req_to_row_common_rt;

  type req_to_row_extra_rt is record
    latency : bcid_t;
    win_lower : bcid_t;
    win_upper : bcid_t;
    daq_bcid : bcid_t;
    bcid : bcid_t;
    evid : evid_t;
  end record req_to_row_extra_rt;
  function len(x: req_to_row_extra_rt) return natural;
  function vectorify(x: req_to_row_extra_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: req_to_row_extra_rt) return req_to_row_extra_rt;
  function nullify(t: req_to_row_extra_rt) return req_to_row_extra_rt;

  type req_to_row_rt is record
    common : req_to_row_common_rt;
    extra : req_to_row_extra_rt;
  end record req_to_row_rt;
  function len(x: req_to_row_rt) return natural;
  function vectorify(x: req_to_row_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: req_to_row_rt) return req_to_row_rt;
  function nullify(t: req_to_row_rt) return req_to_row_rt;

  type felix_to_daq_rt is record
    hfull : std_logic;
  end record felix_to_daq_rt;
  function len(x: felix_to_daq_rt) return natural;
  function vectorify(x: felix_to_daq_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: felix_to_daq_rt) return felix_to_daq_rt;
  function nullify(t: felix_to_daq_rt) return felix_to_daq_rt;

  subtype felix_data_t is std_logic_vector(DAQ_MAX_DATA_WIDTH-1 downto 0);

  type daq_to_felix_rt is record
    wr_en : std_logic;
    data : felix_data_t;
  end record daq_to_felix_rt;
  function len(x: daq_to_felix_rt) return natural;
  function vectorify(x: daq_to_felix_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_to_felix_rt) return daq_to_felix_rt;
  function nullify(t: daq_to_felix_rt) return daq_to_felix_rt;

  type ctrl_to_daq_rt is record
    wr_en : std_logic;
    latency : bcid_t;
    win_lower : bcid_t;
    win_upper : bcid_t;
  end record ctrl_to_daq_rt;
  function len(x: ctrl_to_daq_rt) return natural;
  function vectorify(x: ctrl_to_daq_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: ctrl_to_daq_rt) return ctrl_to_daq_rt;
  function nullify(t: ctrl_to_daq_rt) return ctrl_to_daq_rt;

  type daq_to_status_rt is record
    stability : stability_rt;
  end record daq_to_status_rt;
  function len(x: daq_to_status_rt) return natural;
  function vectorify(x: daq_to_status_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_to_status_rt) return daq_to_status_rt;
  function nullify(t: daq_to_status_rt) return daq_to_status_rt;

  type daq_req_status_rt is record
    stability : stability_rt;
  end record daq_req_status_rt;
  function len(x: daq_req_status_rt) return natural;
  function vectorify(x: daq_req_status_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_req_status_rt) return daq_req_status_rt;
  function nullify(t: daq_req_status_rt) return daq_req_status_rt;

  type daq_req_irt is record
    sys : daq_sys_rt;
    ttc : ttc_ort;
    ctrl : ctrl_to_daq_rt;
  end record daq_req_irt;
  function len(x: daq_req_irt) return natural;
  function vectorify(x: daq_req_irt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_req_irt) return daq_req_irt;
  function nullify(t: daq_req_irt) return daq_req_irt;

  type daq_req_ort is record
    status : daq_req_status_rt;
    row : req_to_row_rt;
  end record daq_req_ort;
  function len(x: daq_req_ort) return natural;
  function vectorify(x: daq_req_ort; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_req_ort) return daq_req_ort;
  function nullify(t: daq_req_ort) return daq_req_ort;

  type daq_req_ert is record
    i : daq_req_irt;
    o : daq_req_ort;
  end record daq_req_ert;
  function len(x: daq_req_ert) return natural;
  function vectorify(x: daq_req_ert; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_req_ert) return daq_req_ert;
  function nullify(t: daq_req_ert) return daq_req_ert;

  subtype daq_req_ivt is std_logic_vector(120-1 downto 0);

  subtype daq_req_ovt is std_logic_vector(120-1 downto 0);

  type daq_row_grt is record
    PIPELINES : natural;
    INPUT_DATA_WIDTH : natural;
    COUNTER_WIDTH : natural;
  end record daq_row_grt;
  function len(x: daq_row_grt) return natural;
  function vectorify(x: daq_row_grt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_row_grt) return daq_row_grt;
  function nullify(t: daq_row_grt) return daq_row_grt;

  type daq_hrow_irt is record
    sys : daq_sys_rt;
    mngt : mngt_to_row_rt;
    req : req_to_row_rt;
    pbldr : pbldr_to_row_rt;
  end record daq_hrow_irt;
  function len(x: daq_hrow_irt) return natural;
  function vectorify(x: daq_hrow_irt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_hrow_irt) return daq_hrow_irt;
  function nullify(t: daq_hrow_irt) return daq_hrow_irt;

  type daq_drow_irt is record
    sys : daq_sys_rt;
    mngt : mngt_to_row_rt;
    req : req_to_row_common_rt;
    stream : daq_stream_rt;
    pbldr : pbldr_to_row_rt;
  end record daq_drow_irt;
  function len(x: daq_drow_irt) return natural;
  function vectorify(x: daq_drow_irt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_drow_irt) return daq_drow_irt;
  function nullify(t: daq_drow_irt) return daq_drow_irt;

  type daq_row_ort is record
    mngt : row_to_mngt_rt;
    pbldr : row_to_pbldr_rt;
  end record daq_row_ort;
  function len(x: daq_row_ort) return natural;
  function vectorify(x: daq_row_ort; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_row_ort) return daq_row_ort;
  function nullify(t: daq_row_ort) return daq_row_ort;

  type daq_hrow_ert is record
    i : daq_hrow_irt;
    o : daq_row_ort;
  end record daq_hrow_ert;
  function len(x: daq_hrow_ert) return natural;
  function vectorify(x: daq_hrow_ert; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_hrow_ert) return daq_hrow_ert;
  function nullify(t: daq_hrow_ert) return daq_hrow_ert;

  type daq_drow_ert is record
    i : daq_drow_irt;
    o : daq_row_ort;
  end record daq_drow_ert;
  function len(x: daq_drow_ert) return natural;
  function vectorify(x: daq_drow_ert; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_drow_ert) return daq_drow_ert;
  function nullify(t: daq_drow_ert) return daq_drow_ert;

  subtype daq_hrow_ivt is std_logic_vector(201-1 downto 0);

  subtype daq_drow_ivt is std_logic_vector(282-1 downto 0);

  subtype daq_row_ovt is std_logic_vector(281-1 downto 0);

  type daq_pbldr_irt is record
    sys : daq_sys_rt;
    mngt : mngt_to_pbldr_rt;
    row : row_to_pbldr_rt;
    f2e : felix_to_daq_rt;
  end record daq_pbldr_irt;
  function len(x: daq_pbldr_irt) return natural;
  function vectorify(x: daq_pbldr_irt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_pbldr_irt) return daq_pbldr_irt;
  function nullify(t: daq_pbldr_irt) return daq_pbldr_irt;

  type daq_pbldr_ort is record
    row : pbldr_to_rows_rt;
    f2e : daq_to_felix_rt;
  end record daq_pbldr_ort;
  function len(x: daq_pbldr_ort) return natural;
  function vectorify(x: daq_pbldr_ort; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_pbldr_ort) return daq_pbldr_ort;
  function nullify(t: daq_pbldr_ort) return daq_pbldr_ort;

  type daq_pbldr_ert is record
    i : daq_pbldr_irt;
    o : daq_pbldr_ort;
  end record daq_pbldr_ert;
  function len(x: daq_pbldr_ert) return natural;
  function vectorify(x: daq_pbldr_ert; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_pbldr_ert) return daq_pbldr_ert;
  function nullify(t: daq_pbldr_ert) return daq_pbldr_ert;

  subtype daq_pbldr_ivt is std_logic_vector(165-1 downto 0);

  subtype daq_pbldr_ovt is std_logic_vector(164-1 downto 0);

  type daq_mngt_grt is record
    STREAMS : natural;
    PIPELINES : natural;
  end record daq_mngt_grt;
  function len(x: daq_mngt_grt) return natural;
  function vectorify(x: daq_mngt_grt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_mngt_grt) return daq_mngt_grt;
  function nullify(t: daq_mngt_grt) return daq_mngt_grt;

  type daq_mngt_irt is record
    sys : daq_sys_rt;
    ttc : ttc_ort;
    row : row_to_mngt_rt;
  end record daq_mngt_irt;
  function len(x: daq_mngt_irt) return natural;
  function vectorify(x: daq_mngt_irt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_mngt_irt) return daq_mngt_irt;
  function nullify(t: daq_mngt_irt) return daq_mngt_irt;

  type daq_mngt_ort is record
    row : mngt_to_row_rt;
    pbldr : mngt_to_pbldr_rt;
    err : std_logic_vector(DAQ_MAX_PIPELINES-1 downto 0);
  end record daq_mngt_ort;
  function len(x: daq_mngt_ort) return natural;
  function vectorify(x: daq_mngt_ort; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_mngt_ort) return daq_mngt_ort;
  function nullify(t: daq_mngt_ort) return daq_mngt_ort;

  type daq_mngt_ert is record
    i : daq_mngt_irt;
    o : daq_mngt_ort;
  end record daq_mngt_ert;
  function len(x: daq_mngt_ert) return natural;
  function vectorify(x: daq_mngt_ert; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_mngt_ert) return daq_mngt_ert;
  function nullify(t: daq_mngt_ert) return daq_mngt_ert;

  subtype daq_mngt_ivt is std_logic_vector(203-1 downto 0);

  subtype daq_mngt_ovt is std_logic_vector(121-1 downto 0);

  type daq_algo_grt is record
    PIPELINES : natural;
    BRANCH_STRUCT : daq_branch_struct_t;
    COUNTER_WIDTH : natural;
  end record daq_algo_grt;
  function len(x: daq_algo_grt) return natural;
  function vectorify(x: daq_algo_grt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_algo_grt) return daq_algo_grt;
  function nullify(t: daq_algo_grt) return daq_algo_grt;

  type daq_algo_irt is record
    sys : daq_sys_rt;
    ttc : ttc_ort;
    ctrl : ctrl_to_daq_rt;
    branch : daq_branch_t;
    f2e : felix_to_daq_rt;
  end record daq_algo_irt;
  function len(x: daq_algo_irt) return natural;
  function vectorify(x: daq_algo_irt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_algo_irt) return daq_algo_irt;
  function nullify(t: daq_algo_irt) return daq_algo_irt;

  type daq_algo_ort is record
    status : daq_to_status_rt;
    f2e : daq_to_felix_rt;
  end record daq_algo_ort;
  function len(x: daq_algo_ort) return natural;
  function vectorify(x: daq_algo_ort; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_algo_ort) return daq_algo_ort;
  function nullify(t: daq_algo_ort) return daq_algo_ort;

  type daq_algo_ert is record
    i : daq_algo_irt;
    o : daq_algo_ort;
  end record daq_algo_ert;
  function len(x: daq_algo_ert) return natural;
  function vectorify(x: daq_algo_ert; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_algo_ert) return daq_algo_ert;
  function nullify(t: daq_algo_ert) return daq_algo_ert;

  subtype daq_algo_gvt is std_logic_vector(96-1 downto 0);

  subtype daq_algo_ivt is std_logic_vector(294-1 downto 0);

  subtype daq_algo_ovt is std_logic_vector(164-1 downto 0);

  type mfelix_to_top_at is array(0 to DAQ_MAX_BRANCHES-1) of felix_to_daq_rt;
  function len(x: mfelix_to_top_at) return natural;
  function vectorify(x: mfelix_to_top_at; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: mfelix_to_top_at) return mfelix_to_top_at;
  function nullify(x: mfelix_to_top_at) return mfelix_to_top_at;

  type top_to_mfelix_at is array(0 to DAQ_MAX_BRANCHES-1) of daq_to_felix_rt;
  function len(x: top_to_mfelix_at) return natural;
  function vectorify(x: top_to_mfelix_at; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: top_to_mfelix_at) return top_to_mfelix_at;
  function nullify(x: top_to_mfelix_at) return top_to_mfelix_at;

  type top_to_status_at is array(DAQ_MAX_BRANCHES-1 downto 0) of daq_to_status_rt;
  function len(x: top_to_status_at) return natural;
  function vectorify(x: top_to_status_at; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: top_to_status_at) return top_to_status_at;
  function nullify(x: top_to_status_at) return top_to_status_at;

  type daq_top_grt is record
    PIPELINES : natural;
    BRANCHES_STRUCT : daq_branches_map_at;
    COUNTER_WIDTH : natural;
  end record daq_top_grt;
  function len(x: daq_top_grt) return natural;
  function vectorify(x: daq_top_grt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_top_grt) return daq_top_grt;
  function nullify(t: daq_top_grt) return daq_top_grt;

  type daq_top_irt is record
    sys : daq_sys_rt;
    ttc : ttc_ort;
    ctrl : ctrl_to_daq_rt;
    branches : daq_branches_t;
    f2e_bus : mfelix_to_top_at;
  end record daq_top_irt;
  function len(x: daq_top_irt) return natural;
  function vectorify(x: daq_top_irt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_top_irt) return daq_top_irt;
  function nullify(t: daq_top_irt) return daq_top_irt;

  type daq_top_ort is record
    status_bus : top_to_status_at;
    f2e_bus : top_to_mfelix_at;
  end record daq_top_ort;
  function len(x: daq_top_ort) return natural;
  function vectorify(x: daq_top_ort; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_top_ort) return daq_top_ort;
  function nullify(t: daq_top_ort) return daq_top_ort;

  type daq_top_ert is record
    i : daq_top_irt;
    o : daq_top_ort;
  end record daq_top_ert;
  function len(x: daq_top_ert) return natural;
  function vectorify(x: daq_top_ert; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_top_ert) return daq_top_ert;
  function nullify(t: daq_top_ert) return daq_top_ert;

  subtype daq_top_gvt is std_logic_vector(256-1 downto 0);

  subtype daq_top_ivt is std_logic_vector(1164-1 downto 0);

  subtype daq_top_ovt is std_logic_vector(984-1 downto 0);

  type daq_usr_irt is record
    sys : ttc_sys_rt;
    ttc : ttc_fmt_vt;
    ctrl : ctrl_to_daq_rt;
    stream_0 : daq_stream_rt;
    stream_1 : daq_stream_rt;
    stream_2 : daq_stream_rt;
    stream_3 : daq_stream_rt;
    stream_4 : daq_stream_rt;
    stream_5 : daq_stream_rt;
    stream_6 : daq_stream_rt;
    stream_7 : daq_stream_rt;
    stream_8 : daq_stream_rt;
    f2e0 : felix_to_daq_rt;
    f2e1 : felix_to_daq_rt;
  end record daq_usr_irt;
  function len(x: daq_usr_irt) return natural;
  function vectorify(x: daq_usr_irt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_usr_irt) return daq_usr_irt;
  function nullify(t: daq_usr_irt) return daq_usr_irt;

  type daq_usr_ort is record
    status0 : daq_to_status_rt;
    status1 : daq_to_status_rt;
    f2e0 : daq_to_felix_rt;
    f2e1 : daq_to_felix_rt;
  end record daq_usr_ort;
  function len(x: daq_usr_ort) return natural;
  function vectorify(x: daq_usr_ort; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_usr_ort) return daq_usr_ort;
  function nullify(t: daq_usr_ort) return daq_usr_ort;

  type daq_usr_ert is record
    i : daq_usr_irt;
    o : daq_usr_ort;
  end record daq_usr_ert;
  function len(x: daq_usr_ert) return natural;
  function vectorify(x: daq_usr_ert; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: daq_usr_ert) return daq_usr_ert;
  function nullify(t: daq_usr_ert) return daq_usr_ert;

end package daq_defs;

------------------------------------------------------------

package body daq_defs is

  function len(x: daq_stream_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.bcid);
    l := l + len(x.valid);
    l := l + len(x.data);
    return l;
  end function len;
  function vectorify(x: daq_stream_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.bcid)-1) := vectorify(x.bcid, y(left to left+len(x.bcid)-1));
      left := left + len(x.bcid);
      y(left to left+len(x.valid)-1) := vectorify(x.valid, y(left to left+len(x.valid)-1));
      left := left + len(x.valid);
      y(left to left+len(x.data)-1) := vectorify(x.data, y(left to left+len(x.data)-1));
    else
      y(left downto left-len(x.bcid)+1) := vectorify(x.bcid, y(left downto left-len(x.bcid)+1));
      left := left - len(x.bcid);
      y(left downto left-len(x.valid)+1) := vectorify(x.valid, y(left downto left-len(x.valid)+1));
      left := left - len(x.valid);
      y(left downto left-len(x.data)+1) := vectorify(x.data, y(left downto left-len(x.data)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_stream_rt) return daq_stream_rt is
    variable y: daq_stream_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.bcid := structify(x(left to left+len(y.bcid)-1), y.bcid);
      left := left + len(y.bcid);
      y.valid := structify(x(left to left+len(y.valid)-1), y.valid);
      left := left + len(y.valid);
      y.data := structify(x(left to left+len(y.data)-1), y.data);
    else
      y.bcid := structify(x(left downto left-len(y.bcid)+1), y.bcid);
      left := left - len(y.bcid);
      y.valid := structify(x(left downto left-len(y.valid)+1), y.valid);
      left := left - len(y.valid);
      y.data := structify(x(left downto left-len(y.data)+1), y.data);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_stream_rt) return daq_stream_rt is
  variable y: daq_stream_rt;
  begin
    y.bcid := nullify(t.bcid);
    y.valid := nullify(t.valid);
    y.data := nullify(t.data);
    return y;
  end function nullify;

  function len(x: daq_branch_t) return natural is
    variable l : natural := 0;
  begin
    l := x'length * len(x(x'left));
    return l;
  end function len;
  function vectorify(x: daq_branch_t; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(b to a) := vectorify(x(i), y(b to a));
      end loop;
    else
      for i in x'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(a downto b) := vectorify(x(i), y(a downto b));
      end loop;
    end if;
    return y;
  end function vectorify;
  function structify(x: std_logic_vector; t: daq_branch_t) return daq_branch_t is
    variable y : daq_branch_t;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function nullify(x: daq_branch_t) return daq_branch_t is
    variable y : daq_branch_t;
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;

  function len(x: daq_branch_struct_t) return natural is
    variable l : natural := 0;
  begin
    l := x'length * 32;
    return l;
  end function len;
  function vectorify(x: daq_branch_struct_t; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l : integer := 32;
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(b to a) := vectorify(x(i), y(b to a));
      end loop;
    else
      for i in x'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(a downto b) := vectorify(x(i), y(a downto b));
      end loop;
    end if;
    return y;
  end function vectorify;
  function structify(x: std_logic_vector; t: daq_branch_struct_t) return daq_branch_struct_t is
    variable y : daq_branch_struct_t;
    constant l : integer := 32;
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function nullify(x: daq_branch_struct_t) return daq_branch_struct_t is
    variable y : daq_branch_struct_t;
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;

  function len(x: daq_branches_t) return natural is
    variable l : natural := 0;
  begin
    l := x'length * len(x(x'left));
    return l;
  end function len;
  function vectorify(x: daq_branches_t; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(b to a) := vectorify(x(i), y(b to a));
      end loop;
    else
      for i in x'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(a downto b) := vectorify(x(i), y(a downto b));
      end loop;
    end if;
    return y;
  end function vectorify;
  function structify(x: std_logic_vector; t: daq_branches_t) return daq_branches_t is
    variable y : daq_branches_t;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function nullify(x: daq_branches_t) return daq_branches_t is
    variable y : daq_branches_t;
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;

  function len(x: daq_branches_map_at) return natural is
    variable l : natural := 0;
  begin
    l := x'length * len(x(x'left));
    return l;
  end function len;
  function vectorify(x: daq_branches_map_at; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(b to a) := vectorify(x(i), y(b to a));
      end loop;
    else
      for i in x'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(a downto b) := vectorify(x(i), y(a downto b));
      end loop;
    end if;
    return y;
  end function vectorify;
  function structify(x: std_logic_vector; t: daq_branches_map_at) return daq_branches_map_at is
    variable y : daq_branches_map_at;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function nullify(x: daq_branches_map_at) return daq_branches_map_at is
    variable y : daq_branches_map_at;
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;

  function len(x: daq_sys_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.clk320);
    l := l + len(x.rst);
    return l;
  end function len;
  function vectorify(x: daq_sys_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.clk320)-1) := vectorify(x.clk320, y(left to left+len(x.clk320)-1));
      left := left + len(x.clk320);
      y(left to left+len(x.rst)-1) := vectorify(x.rst, y(left to left+len(x.rst)-1));
    else
      y(left downto left-len(x.clk320)+1) := vectorify(x.clk320, y(left downto left-len(x.clk320)+1));
      left := left - len(x.clk320);
      y(left downto left-len(x.rst)+1) := vectorify(x.rst, y(left downto left-len(x.rst)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_sys_rt) return daq_sys_rt is
    variable y: daq_sys_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.clk320 := structify(x(left to left+len(y.clk320)-1), y.clk320);
      left := left + len(y.clk320);
      y.rst := structify(x(left to left+len(y.rst)-1), y.rst);
    else
      y.clk320 := structify(x(left downto left-len(y.clk320)+1), y.clk320);
      left := left - len(y.clk320);
      y.rst := structify(x(left downto left-len(y.rst)+1), y.rst);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_sys_rt) return daq_sys_rt is
  variable y: daq_sys_rt;
  begin
    y.clk320 := nullify(t.clk320);
    y.rst := nullify(t.rst);
    return y;
  end function nullify;

  function len(x: daq_hdr_swrod_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.flag_0);
    l := l + len(x.flag_1);
    l := l + len(x.flag_2);
    l := l + len(x.evid);
    return l;
  end function len;
  function vectorify(x: daq_hdr_swrod_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.flag_0)-1) := vectorify(x.flag_0, y(left to left+len(x.flag_0)-1));
      left := left + len(x.flag_0);
      y(left to left+len(x.flag_1)-1) := vectorify(x.flag_1, y(left to left+len(x.flag_1)-1));
      left := left + len(x.flag_1);
      y(left to left+len(x.flag_2)-1) := vectorify(x.flag_2, y(left to left+len(x.flag_2)-1));
      left := left + len(x.flag_2);
      y(left to left+len(x.evid)-1) := vectorify(x.evid, y(left to left+len(x.evid)-1));
    else
      y(left downto left-len(x.flag_0)+1) := vectorify(x.flag_0, y(left downto left-len(x.flag_0)+1));
      left := left - len(x.flag_0);
      y(left downto left-len(x.flag_1)+1) := vectorify(x.flag_1, y(left downto left-len(x.flag_1)+1));
      left := left - len(x.flag_1);
      y(left downto left-len(x.flag_2)+1) := vectorify(x.flag_2, y(left downto left-len(x.flag_2)+1));
      left := left - len(x.flag_2);
      y(left downto left-len(x.evid)+1) := vectorify(x.evid, y(left downto left-len(x.evid)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_hdr_swrod_rt) return daq_hdr_swrod_rt is
    variable y: daq_hdr_swrod_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.flag_0 := structify(x(left to left+len(y.flag_0)-1), y.flag_0);
      left := left + len(y.flag_0);
      y.flag_1 := structify(x(left to left+len(y.flag_1)-1), y.flag_1);
      left := left + len(y.flag_1);
      y.flag_2 := structify(x(left to left+len(y.flag_2)-1), y.flag_2);
      left := left + len(y.flag_2);
      y.evid := structify(x(left to left+len(y.evid)-1), y.evid);
    else
      y.flag_0 := structify(x(left downto left-len(y.flag_0)+1), y.flag_0);
      left := left - len(y.flag_0);
      y.flag_1 := structify(x(left downto left-len(y.flag_1)+1), y.flag_1);
      left := left - len(y.flag_1);
      y.flag_2 := structify(x(left downto left-len(y.flag_2)+1), y.flag_2);
      left := left - len(y.flag_2);
      y.evid := structify(x(left downto left-len(y.evid)+1), y.evid);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_hdr_swrod_rt) return daq_hdr_swrod_rt is
  variable y: daq_hdr_swrod_rt;
  begin
    y.flag_0 := nullify(t.flag_0);
    y.flag_1 := nullify(t.flag_1);
    y.flag_2 := nullify(t.flag_2);
    y.evid := nullify(t.evid);
    return y;
  end function nullify;

  function len(x: daq_hdr_extra_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.daq_bcid);
    l := l + len(x.win_start);
    l := l + len(x.win_width);
    l := l + len(x.latency_ref);
    l := l + len(x.win_lower_ref);
    l := l + len(x.win_upper_ref);
    l := l + len(x.bcid);
    return l;
  end function len;
  function vectorify(x: daq_hdr_extra_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.daq_bcid)-1) := vectorify(x.daq_bcid, y(left to left+len(x.daq_bcid)-1));
      left := left + len(x.daq_bcid);
      y(left to left+len(x.win_start)-1) := vectorify(x.win_start, y(left to left+len(x.win_start)-1));
      left := left + len(x.win_start);
      y(left to left+len(x.win_width)-1) := vectorify(x.win_width, y(left to left+len(x.win_width)-1));
      left := left + len(x.win_width);
      y(left to left+len(x.latency_ref)-1) := vectorify(x.latency_ref, y(left to left+len(x.latency_ref)-1));
      left := left + len(x.latency_ref);
      y(left to left+len(x.win_lower_ref)-1) := vectorify(x.win_lower_ref, y(left to left+len(x.win_lower_ref)-1));
      left := left + len(x.win_lower_ref);
      y(left to left+len(x.win_upper_ref)-1) := vectorify(x.win_upper_ref, y(left to left+len(x.win_upper_ref)-1));
      left := left + len(x.win_upper_ref);
      y(left to left+len(x.bcid)-1) := vectorify(x.bcid, y(left to left+len(x.bcid)-1));
    else
      y(left downto left-len(x.daq_bcid)+1) := vectorify(x.daq_bcid, y(left downto left-len(x.daq_bcid)+1));
      left := left - len(x.daq_bcid);
      y(left downto left-len(x.win_start)+1) := vectorify(x.win_start, y(left downto left-len(x.win_start)+1));
      left := left - len(x.win_start);
      y(left downto left-len(x.win_width)+1) := vectorify(x.win_width, y(left downto left-len(x.win_width)+1));
      left := left - len(x.win_width);
      y(left downto left-len(x.latency_ref)+1) := vectorify(x.latency_ref, y(left downto left-len(x.latency_ref)+1));
      left := left - len(x.latency_ref);
      y(left downto left-len(x.win_lower_ref)+1) := vectorify(x.win_lower_ref, y(left downto left-len(x.win_lower_ref)+1));
      left := left - len(x.win_lower_ref);
      y(left downto left-len(x.win_upper_ref)+1) := vectorify(x.win_upper_ref, y(left downto left-len(x.win_upper_ref)+1));
      left := left - len(x.win_upper_ref);
      y(left downto left-len(x.bcid)+1) := vectorify(x.bcid, y(left downto left-len(x.bcid)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_hdr_extra_rt) return daq_hdr_extra_rt is
    variable y: daq_hdr_extra_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.daq_bcid := structify(x(left to left+len(y.daq_bcid)-1), y.daq_bcid);
      left := left + len(y.daq_bcid);
      y.win_start := structify(x(left to left+len(y.win_start)-1), y.win_start);
      left := left + len(y.win_start);
      y.win_width := structify(x(left to left+len(y.win_width)-1), y.win_width);
      left := left + len(y.win_width);
      y.latency_ref := structify(x(left to left+len(y.latency_ref)-1), y.latency_ref);
      left := left + len(y.latency_ref);
      y.win_lower_ref := structify(x(left to left+len(y.win_lower_ref)-1), y.win_lower_ref);
      left := left + len(y.win_lower_ref);
      y.win_upper_ref := structify(x(left to left+len(y.win_upper_ref)-1), y.win_upper_ref);
      left := left + len(y.win_upper_ref);
      y.bcid := structify(x(left to left+len(y.bcid)-1), y.bcid);
    else
      y.daq_bcid := structify(x(left downto left-len(y.daq_bcid)+1), y.daq_bcid);
      left := left - len(y.daq_bcid);
      y.win_start := structify(x(left downto left-len(y.win_start)+1), y.win_start);
      left := left - len(y.win_start);
      y.win_width := structify(x(left downto left-len(y.win_width)+1), y.win_width);
      left := left - len(y.win_width);
      y.latency_ref := structify(x(left downto left-len(y.latency_ref)+1), y.latency_ref);
      left := left - len(y.latency_ref);
      y.win_lower_ref := structify(x(left downto left-len(y.win_lower_ref)+1), y.win_lower_ref);
      left := left - len(y.win_lower_ref);
      y.win_upper_ref := structify(x(left downto left-len(y.win_upper_ref)+1), y.win_upper_ref);
      left := left - len(y.win_upper_ref);
      y.bcid := structify(x(left downto left-len(y.bcid)+1), y.bcid);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_hdr_extra_rt) return daq_hdr_extra_rt is
  variable y: daq_hdr_extra_rt;
  begin
    y.daq_bcid := nullify(t.daq_bcid);
    y.win_start := nullify(t.win_start);
    y.win_width := nullify(t.win_width);
    y.latency_ref := nullify(t.latency_ref);
    y.win_lower_ref := nullify(t.win_lower_ref);
    y.win_upper_ref := nullify(t.win_upper_ref);
    y.bcid := nullify(t.bcid);
    return y;
  end function nullify;

  function len(x: daq_hdr_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.swrod);
    l := l + len(x.extra);
    return l;
  end function len;
  function vectorify(x: daq_hdr_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.swrod)-1) := vectorify(x.swrod, y(left to left+len(x.swrod)-1));
      left := left + len(x.swrod);
      y(left to left+len(x.extra)-1) := vectorify(x.extra, y(left to left+len(x.extra)-1));
    else
      y(left downto left-len(x.swrod)+1) := vectorify(x.swrod, y(left downto left-len(x.swrod)+1));
      left := left - len(x.swrod);
      y(left downto left-len(x.extra)+1) := vectorify(x.extra, y(left downto left-len(x.extra)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_hdr_rt) return daq_hdr_rt is
    variable y: daq_hdr_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.swrod := structify(x(left to left+len(y.swrod)-1), y.swrod);
      left := left + len(y.swrod);
      y.extra := structify(x(left to left+len(y.extra)-1), y.extra);
    else
      y.swrod := structify(x(left downto left-len(y.swrod)+1), y.swrod);
      left := left - len(y.swrod);
      y.extra := structify(x(left downto left-len(y.extra)+1), y.extra);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_hdr_rt) return daq_hdr_rt is
  variable y: daq_hdr_rt;
  begin
    y.swrod := nullify(t.swrod);
    y.extra := nullify(t.extra);
    return y;
  end function nullify;

  function len(x: daq_cnt_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.daq_bcid);
    l := l + len(x.win_start);
    return l;
  end function len;
  function vectorify(x: daq_cnt_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.daq_bcid)-1) := vectorify(x.daq_bcid, y(left to left+len(x.daq_bcid)-1));
      left := left + len(x.daq_bcid);
      y(left to left+len(x.win_start)-1) := vectorify(x.win_start, y(left to left+len(x.win_start)-1));
    else
      y(left downto left-len(x.daq_bcid)+1) := vectorify(x.daq_bcid, y(left downto left-len(x.daq_bcid)+1));
      left := left - len(x.daq_bcid);
      y(left downto left-len(x.win_start)+1) := vectorify(x.win_start, y(left downto left-len(x.win_start)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_cnt_rt) return daq_cnt_rt is
    variable y: daq_cnt_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.daq_bcid := structify(x(left to left+len(y.daq_bcid)-1), y.daq_bcid);
      left := left + len(y.daq_bcid);
      y.win_start := structify(x(left to left+len(y.win_start)-1), y.win_start);
    else
      y.daq_bcid := structify(x(left downto left-len(y.daq_bcid)+1), y.daq_bcid);
      left := left - len(y.daq_bcid);
      y.win_start := structify(x(left downto left-len(y.win_start)+1), y.win_start);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_cnt_rt) return daq_cnt_rt is
  variable y: daq_cnt_rt;
  begin
    y.daq_bcid := nullify(t.daq_bcid);
    y.win_start := nullify(t.win_start);
    return y;
  end function nullify;

  function len(x: stability_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.win_upper);
    l := l + len(x.win_lower);
    l := l + len(x.latency);
    return l;
  end function len;
  function vectorify(x: stability_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.win_upper)-1) := vectorify(x.win_upper, y(left to left+len(x.win_upper)-1));
      left := left + len(x.win_upper);
      y(left to left+len(x.win_lower)-1) := vectorify(x.win_lower, y(left to left+len(x.win_lower)-1));
      left := left + len(x.win_lower);
      y(left to left+len(x.latency)-1) := vectorify(x.latency, y(left to left+len(x.latency)-1));
    else
      y(left downto left-len(x.win_upper)+1) := vectorify(x.win_upper, y(left downto left-len(x.win_upper)+1));
      left := left - len(x.win_upper);
      y(left downto left-len(x.win_lower)+1) := vectorify(x.win_lower, y(left downto left-len(x.win_lower)+1));
      left := left - len(x.win_lower);
      y(left downto left-len(x.latency)+1) := vectorify(x.latency, y(left downto left-len(x.latency)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: stability_rt) return stability_rt is
    variable y: stability_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.win_upper := structify(x(left to left+len(y.win_upper)-1), y.win_upper);
      left := left + len(y.win_upper);
      y.win_lower := structify(x(left to left+len(y.win_lower)-1), y.win_lower);
      left := left + len(y.win_lower);
      y.latency := structify(x(left to left+len(y.latency)-1), y.latency);
    else
      y.win_upper := structify(x(left downto left-len(y.win_upper)+1), y.win_upper);
      left := left - len(y.win_upper);
      y.win_lower := structify(x(left downto left-len(y.win_lower)+1), y.win_lower);
      left := left - len(y.win_lower);
      y.latency := structify(x(left downto left-len(y.latency)+1), y.latency);
    end if;
    return y;
  end function structify;
  function nullify(t: stability_rt) return stability_rt is
  variable y: stability_rt;
  begin
    y.win_upper := nullify(t.win_upper);
    y.win_lower := nullify(t.win_lower);
    y.latency := nullify(t.latency);
    return y;
  end function nullify;

  function len(x: daq_win_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.upper);
    l := l + len(x.lower);
    l := l + len(x.latency);
    l := l + len(x.width);
    return l;
  end function len;
  function vectorify(x: daq_win_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.upper)-1) := vectorify(x.upper, y(left to left+len(x.upper)-1));
      left := left + len(x.upper);
      y(left to left+len(x.lower)-1) := vectorify(x.lower, y(left to left+len(x.lower)-1));
      left := left + len(x.lower);
      y(left to left+len(x.latency)-1) := vectorify(x.latency, y(left to left+len(x.latency)-1));
      left := left + len(x.latency);
      y(left to left+len(x.width)-1) := vectorify(x.width, y(left to left+len(x.width)-1));
    else
      y(left downto left-len(x.upper)+1) := vectorify(x.upper, y(left downto left-len(x.upper)+1));
      left := left - len(x.upper);
      y(left downto left-len(x.lower)+1) := vectorify(x.lower, y(left downto left-len(x.lower)+1));
      left := left - len(x.lower);
      y(left downto left-len(x.latency)+1) := vectorify(x.latency, y(left downto left-len(x.latency)+1));
      left := left - len(x.latency);
      y(left downto left-len(x.width)+1) := vectorify(x.width, y(left downto left-len(x.width)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_win_rt) return daq_win_rt is
    variable y: daq_win_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.upper := structify(x(left to left+len(y.upper)-1), y.upper);
      left := left + len(y.upper);
      y.lower := structify(x(left to left+len(y.lower)-1), y.lower);
      left := left + len(y.lower);
      y.latency := structify(x(left to left+len(y.latency)-1), y.latency);
      left := left + len(y.latency);
      y.width := structify(x(left to left+len(y.width)-1), y.width);
    else
      y.upper := structify(x(left downto left-len(y.upper)+1), y.upper);
      left := left - len(y.upper);
      y.lower := structify(x(left downto left-len(y.lower)+1), y.lower);
      left := left - len(y.lower);
      y.latency := structify(x(left downto left-len(y.latency)+1), y.latency);
      left := left - len(y.latency);
      y.width := structify(x(left downto left-len(y.width)+1), y.width);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_win_rt) return daq_win_rt is
  variable y: daq_win_rt;
  begin
    y.upper := nullify(t.upper);
    y.lower := nullify(t.lower);
    y.latency := nullify(t.latency);
    y.width := nullify(t.width);
    return y;
  end function nullify;

  function len(x: forward_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.nempty);
    l := l + len(x.data);
    return l;
  end function len;
  function vectorify(x: forward_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.nempty)-1) := vectorify(x.nempty, y(left to left+len(x.nempty)-1));
      left := left + len(x.nempty);
      y(left to left+len(x.data)-1) := vectorify(x.data, y(left to left+len(x.data)-1));
    else
      y(left downto left-len(x.nempty)+1) := vectorify(x.nempty, y(left downto left-len(x.nempty)+1));
      left := left - len(x.nempty);
      y(left downto left-len(x.data)+1) := vectorify(x.data, y(left downto left-len(x.data)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: forward_rt) return forward_rt is
    variable y: forward_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.nempty := structify(x(left to left+len(y.nempty)-1), y.nempty);
      left := left + len(y.nempty);
      y.data := structify(x(left to left+len(y.data)-1), y.data);
    else
      y.nempty := structify(x(left downto left-len(y.nempty)+1), y.nempty);
      left := left - len(y.nempty);
      y.data := structify(x(left downto left-len(y.data)+1), y.data);
    end if;
    return y;
  end function structify;
  function nullify(t: forward_rt) return forward_rt is
  variable y: forward_rt;
  begin
    y.nempty := nullify(t.nempty);
    y.data := nullify(t.data);
    return y;
  end function nullify;

  function len(x: backward_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.rd_strb);
    return l;
  end function len;
  function vectorify(x: backward_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.rd_strb)-1) := vectorify(x.rd_strb, y(left to left+len(x.rd_strb)-1));
    else
      y(left downto left-len(x.rd_strb)+1) := vectorify(x.rd_strb, y(left downto left-len(x.rd_strb)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: backward_rt) return backward_rt is
    variable y: backward_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.rd_strb := structify(x(left to left+len(y.rd_strb)-1), y.rd_strb);
    else
      y.rd_strb := structify(x(left downto left-len(y.rd_strb)+1), y.rd_strb);
    end if;
    return y;
  end function structify;
  function nullify(t: backward_rt) return backward_rt is
  variable y: backward_rt;
  begin
    y.rd_strb := nullify(t.rd_strb);
    return y;
  end function nullify;

  function len(x: src_to_node_fifo_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.wr_en);
    l := l + len(x.data);
    return l;
  end function len;
  function vectorify(x: src_to_node_fifo_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.wr_en)-1) := vectorify(x.wr_en, y(left to left+len(x.wr_en)-1));
      left := left + len(x.wr_en);
      y(left to left+len(x.data)-1) := vectorify(x.data, y(left to left+len(x.data)-1));
    else
      y(left downto left-len(x.wr_en)+1) := vectorify(x.wr_en, y(left downto left-len(x.wr_en)+1));
      left := left - len(x.wr_en);
      y(left downto left-len(x.data)+1) := vectorify(x.data, y(left downto left-len(x.data)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: src_to_node_fifo_rt) return src_to_node_fifo_rt is
    variable y: src_to_node_fifo_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.wr_en := structify(x(left to left+len(y.wr_en)-1), y.wr_en);
      left := left + len(y.wr_en);
      y.data := structify(x(left to left+len(y.data)-1), y.data);
    else
      y.wr_en := structify(x(left downto left-len(y.wr_en)+1), y.wr_en);
      left := left - len(y.wr_en);
      y.data := structify(x(left downto left-len(y.data)+1), y.data);
    end if;
    return y;
  end function structify;
  function nullify(t: src_to_node_fifo_rt) return src_to_node_fifo_rt is
  variable y: src_to_node_fifo_rt;
  begin
    y.wr_en := nullify(t.wr_en);
    y.data := nullify(t.data);
    return y;
  end function nullify;

  function len(x: node_fifo_to_src_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.full);
    return l;
  end function len;
  function vectorify(x: node_fifo_to_src_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.full)-1) := vectorify(x.full, y(left to left+len(x.full)-1));
    else
      y(left downto left-len(x.full)+1) := vectorify(x.full, y(left downto left-len(x.full)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: node_fifo_to_src_rt) return node_fifo_to_src_rt is
    variable y: node_fifo_to_src_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.full := structify(x(left to left+len(y.full)-1), y.full);
    else
      y.full := structify(x(left downto left-len(y.full)+1), y.full);
    end if;
    return y;
  end function structify;
  function nullify(t: node_fifo_to_src_rt) return node_fifo_to_src_rt is
  variable y: node_fifo_to_src_rt;
  begin
    y.full := nullify(t.full);
    return y;
  end function nullify;

  function len(x: node_fifo_to_dst_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.data);
    l := l + len(x.count);
    l := l + len(x.nempty);
    return l;
  end function len;
  function vectorify(x: node_fifo_to_dst_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.data)-1) := vectorify(x.data, y(left to left+len(x.data)-1));
      left := left + len(x.data);
      y(left to left+len(x.count)-1) := vectorify(x.count, y(left to left+len(x.count)-1));
      left := left + len(x.count);
      y(left to left+len(x.nempty)-1) := vectorify(x.nempty, y(left to left+len(x.nempty)-1));
    else
      y(left downto left-len(x.data)+1) := vectorify(x.data, y(left downto left-len(x.data)+1));
      left := left - len(x.data);
      y(left downto left-len(x.count)+1) := vectorify(x.count, y(left downto left-len(x.count)+1));
      left := left - len(x.count);
      y(left downto left-len(x.nempty)+1) := vectorify(x.nempty, y(left downto left-len(x.nempty)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: node_fifo_to_dst_rt) return node_fifo_to_dst_rt is
    variable y: node_fifo_to_dst_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.data := structify(x(left to left+len(y.data)-1), y.data);
      left := left + len(y.data);
      y.count := structify(x(left to left+len(y.count)-1), y.count);
      left := left + len(y.count);
      y.nempty := structify(x(left to left+len(y.nempty)-1), y.nempty);
    else
      y.data := structify(x(left downto left-len(y.data)+1), y.data);
      left := left - len(y.data);
      y.count := structify(x(left downto left-len(y.count)+1), y.count);
      left := left - len(y.count);
      y.nempty := structify(x(left downto left-len(y.nempty)+1), y.nempty);
    end if;
    return y;
  end function structify;
  function nullify(t: node_fifo_to_dst_rt) return node_fifo_to_dst_rt is
  variable y: node_fifo_to_dst_rt;
  begin
    y.data := nullify(t.data);
    y.count := nullify(t.count);
    y.nempty := nullify(t.nempty);
    return y;
  end function nullify;

  function len(x: dst_to_node_fifo_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.rd_en);
    return l;
  end function len;
  function vectorify(x: dst_to_node_fifo_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.rd_en)-1) := vectorify(x.rd_en, y(left to left+len(x.rd_en)-1));
    else
      y(left downto left-len(x.rd_en)+1) := vectorify(x.rd_en, y(left downto left-len(x.rd_en)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: dst_to_node_fifo_rt) return dst_to_node_fifo_rt is
    variable y: dst_to_node_fifo_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.rd_en := structify(x(left to left+len(y.rd_en)-1), y.rd_en);
    else
      y.rd_en := structify(x(left downto left-len(y.rd_en)+1), y.rd_en);
    end if;
    return y;
  end function structify;
  function nullify(t: dst_to_node_fifo_rt) return dst_to_node_fifo_rt is
  variable y: dst_to_node_fifo_rt;
  begin
    y.rd_en := nullify(t.rd_en);
    return y;
  end function nullify;

  function len(x: daq_node_fifo_irt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.sys);
    l := l + len(x.src);
    l := l + len(x.dst);
    return l;
  end function len;
  function vectorify(x: daq_node_fifo_irt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.sys)-1) := vectorify(x.sys, y(left to left+len(x.sys)-1));
      left := left + len(x.sys);
      y(left to left+len(x.src)-1) := vectorify(x.src, y(left to left+len(x.src)-1));
      left := left + len(x.src);
      y(left to left+len(x.dst)-1) := vectorify(x.dst, y(left to left+len(x.dst)-1));
    else
      y(left downto left-len(x.sys)+1) := vectorify(x.sys, y(left downto left-len(x.sys)+1));
      left := left - len(x.sys);
      y(left downto left-len(x.src)+1) := vectorify(x.src, y(left downto left-len(x.src)+1));
      left := left - len(x.src);
      y(left downto left-len(x.dst)+1) := vectorify(x.dst, y(left downto left-len(x.dst)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_node_fifo_irt) return daq_node_fifo_irt is
    variable y: daq_node_fifo_irt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.sys := structify(x(left to left+len(y.sys)-1), y.sys);
      left := left + len(y.sys);
      y.src := structify(x(left to left+len(y.src)-1), y.src);
      left := left + len(y.src);
      y.dst := structify(x(left to left+len(y.dst)-1), y.dst);
    else
      y.sys := structify(x(left downto left-len(y.sys)+1), y.sys);
      left := left - len(y.sys);
      y.src := structify(x(left downto left-len(y.src)+1), y.src);
      left := left - len(y.src);
      y.dst := structify(x(left downto left-len(y.dst)+1), y.dst);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_node_fifo_irt) return daq_node_fifo_irt is
  variable y: daq_node_fifo_irt;
  begin
    y.sys := nullify(t.sys);
    y.src := nullify(t.src);
    y.dst := nullify(t.dst);
    return y;
  end function nullify;

  function len(x: daq_node_fifo_ort) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.src);
    l := l + len(x.dst);
    return l;
  end function len;
  function vectorify(x: daq_node_fifo_ort; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.src)-1) := vectorify(x.src, y(left to left+len(x.src)-1));
      left := left + len(x.src);
      y(left to left+len(x.dst)-1) := vectorify(x.dst, y(left to left+len(x.dst)-1));
    else
      y(left downto left-len(x.src)+1) := vectorify(x.src, y(left downto left-len(x.src)+1));
      left := left - len(x.src);
      y(left downto left-len(x.dst)+1) := vectorify(x.dst, y(left downto left-len(x.dst)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_node_fifo_ort) return daq_node_fifo_ort is
    variable y: daq_node_fifo_ort;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.src := structify(x(left to left+len(y.src)-1), y.src);
      left := left + len(y.src);
      y.dst := structify(x(left to left+len(y.dst)-1), y.dst);
    else
      y.src := structify(x(left downto left-len(y.src)+1), y.src);
      left := left - len(y.src);
      y.dst := structify(x(left downto left-len(y.dst)+1), y.dst);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_node_fifo_ort) return daq_node_fifo_ort is
  variable y: daq_node_fifo_ort;
  begin
    y.src := nullify(t.src);
    y.dst := nullify(t.dst);
    return y;
  end function nullify;

  function len(x: daq_node_fifo_ert) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.i);
    l := l + len(x.o);
    return l;
  end function len;
  function vectorify(x: daq_node_fifo_ert; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.i)-1) := vectorify(x.i, y(left to left+len(x.i)-1));
      left := left + len(x.i);
      y(left to left+len(x.o)-1) := vectorify(x.o, y(left to left+len(x.o)-1));
    else
      y(left downto left-len(x.i)+1) := vectorify(x.i, y(left downto left-len(x.i)+1));
      left := left - len(x.i);
      y(left downto left-len(x.o)+1) := vectorify(x.o, y(left downto left-len(x.o)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_node_fifo_ert) return daq_node_fifo_ert is
    variable y: daq_node_fifo_ert;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.i := structify(x(left to left+len(y.i)-1), y.i);
      left := left + len(y.i);
      y.o := structify(x(left to left+len(y.o)-1), y.o);
    else
      y.i := structify(x(left downto left-len(y.i)+1), y.i);
      left := left - len(y.i);
      y.o := structify(x(left downto left-len(y.o)+1), y.o);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_node_fifo_ert) return daq_node_fifo_ert is
  variable y: daq_node_fifo_ert;
  begin
    y.i := nullify(t.i);
    y.o := nullify(t.o);
    return y;
  end function nullify;

  function len(x: daq_node_fifo_grt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.WRITE_DATA_WIDTH);
    l := l + len(x.READ_DATA_WIDTH);
    l := l + len(x.READ_COUNT_WIDTH);
    return l;
  end function len;
  function vectorify(x: daq_node_fifo_grt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.WRITE_DATA_WIDTH)-1) := vectorify(x.WRITE_DATA_WIDTH, y(left to left+len(x.WRITE_DATA_WIDTH)-1));
      left := left + len(x.WRITE_DATA_WIDTH);
      y(left to left+len(x.READ_DATA_WIDTH)-1) := vectorify(x.READ_DATA_WIDTH, y(left to left+len(x.READ_DATA_WIDTH)-1));
      left := left + len(x.READ_DATA_WIDTH);
      y(left to left+len(x.READ_COUNT_WIDTH)-1) := vectorify(x.READ_COUNT_WIDTH, y(left to left+len(x.READ_COUNT_WIDTH)-1));
    else
      y(left downto left-len(x.WRITE_DATA_WIDTH)+1) := vectorify(x.WRITE_DATA_WIDTH, y(left downto left-len(x.WRITE_DATA_WIDTH)+1));
      left := left - len(x.WRITE_DATA_WIDTH);
      y(left downto left-len(x.READ_DATA_WIDTH)+1) := vectorify(x.READ_DATA_WIDTH, y(left downto left-len(x.READ_DATA_WIDTH)+1));
      left := left - len(x.READ_DATA_WIDTH);
      y(left downto left-len(x.READ_COUNT_WIDTH)+1) := vectorify(x.READ_COUNT_WIDTH, y(left downto left-len(x.READ_COUNT_WIDTH)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_node_fifo_grt) return daq_node_fifo_grt is
    variable y: daq_node_fifo_grt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.WRITE_DATA_WIDTH := structify(x(left to left+len(y.WRITE_DATA_WIDTH)-1), y.WRITE_DATA_WIDTH);
      left := left + len(y.WRITE_DATA_WIDTH);
      y.READ_DATA_WIDTH := structify(x(left to left+len(y.READ_DATA_WIDTH)-1), y.READ_DATA_WIDTH);
      left := left + len(y.READ_DATA_WIDTH);
      y.READ_COUNT_WIDTH := structify(x(left to left+len(y.READ_COUNT_WIDTH)-1), y.READ_COUNT_WIDTH);
    else
      y.WRITE_DATA_WIDTH := structify(x(left downto left-len(y.WRITE_DATA_WIDTH)+1), y.WRITE_DATA_WIDTH);
      left := left - len(y.WRITE_DATA_WIDTH);
      y.READ_DATA_WIDTH := structify(x(left downto left-len(y.READ_DATA_WIDTH)+1), y.READ_DATA_WIDTH);
      left := left - len(y.READ_DATA_WIDTH);
      y.READ_COUNT_WIDTH := structify(x(left downto left-len(y.READ_COUNT_WIDTH)+1), y.READ_COUNT_WIDTH);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_node_fifo_grt) return daq_node_fifo_grt is
  variable y: daq_node_fifo_grt;
  begin
    y.WRITE_DATA_WIDTH := nullify(t.WRITE_DATA_WIDTH);
    y.READ_DATA_WIDTH := nullify(t.READ_DATA_WIDTH);
    y.READ_COUNT_WIDTH := nullify(t.READ_COUNT_WIDTH);
    return y;
  end function nullify;

  function len(x: row_to_mngt_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.done);
    l := l + len(x.nempty);
    l := l + len(x.err);
    return l;
  end function len;
  function vectorify(x: row_to_mngt_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.done)-1) := vectorify(x.done, y(left to left+len(x.done)-1));
      left := left + len(x.done);
      y(left to left+len(x.nempty)-1) := vectorify(x.nempty, y(left to left+len(x.nempty)-1));
      left := left + len(x.nempty);
      y(left to left+len(x.err)-1) := vectorify(x.err, y(left to left+len(x.err)-1));
    else
      y(left downto left-len(x.done)+1) := vectorify(x.done, y(left downto left-len(x.done)+1));
      left := left - len(x.done);
      y(left downto left-len(x.nempty)+1) := vectorify(x.nempty, y(left downto left-len(x.nempty)+1));
      left := left - len(x.nempty);
      y(left downto left-len(x.err)+1) := vectorify(x.err, y(left downto left-len(x.err)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: row_to_mngt_rt) return row_to_mngt_rt is
    variable y: row_to_mngt_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.done := structify(x(left to left+len(y.done)-1), y.done);
      left := left + len(y.done);
      y.nempty := structify(x(left to left+len(y.nempty)-1), y.nempty);
      left := left + len(y.nempty);
      y.err := structify(x(left to left+len(y.err)-1), y.err);
    else
      y.done := structify(x(left downto left-len(y.done)+1), y.done);
      left := left - len(y.done);
      y.nempty := structify(x(left downto left-len(y.nempty)+1), y.nempty);
      left := left - len(y.nempty);
      y.err := structify(x(left downto left-len(y.err)+1), y.err);
    end if;
    return y;
  end function structify;
  function nullify(t: row_to_mngt_rt) return row_to_mngt_rt is
  variable y: row_to_mngt_rt;
  begin
    y.done := nullify(t.done);
    y.nempty := nullify(t.nempty);
    y.err := nullify(t.err);
    return y;
  end function nullify;

  function len(x: mngt_to_row_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.en);
    l := l + len(x.rd_en);
    return l;
  end function len;
  function vectorify(x: mngt_to_row_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.en)-1) := vectorify(x.en, y(left to left+len(x.en)-1));
      left := left + len(x.en);
      y(left to left+len(x.rd_en)-1) := vectorify(x.rd_en, y(left to left+len(x.rd_en)-1));
    else
      y(left downto left-len(x.en)+1) := vectorify(x.en, y(left downto left-len(x.en)+1));
      left := left - len(x.en);
      y(left downto left-len(x.rd_en)+1) := vectorify(x.rd_en, y(left downto left-len(x.rd_en)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: mngt_to_row_rt) return mngt_to_row_rt is
    variable y: mngt_to_row_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.en := structify(x(left to left+len(y.en)-1), y.en);
      left := left + len(y.en);
      y.rd_en := structify(x(left to left+len(y.rd_en)-1), y.rd_en);
    else
      y.en := structify(x(left downto left-len(y.en)+1), y.en);
      left := left - len(y.en);
      y.rd_en := structify(x(left downto left-len(y.rd_en)+1), y.rd_en);
    end if;
    return y;
  end function structify;
  function nullify(t: mngt_to_row_rt) return mngt_to_row_rt is
  variable y: mngt_to_row_rt;
  begin
    y.en := nullify(t.en);
    y.rd_en := nullify(t.rd_en);
    return y;
  end function nullify;

  function len(x: mngt_to_pbldr_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.en);
    return l;
  end function len;
  function vectorify(x: mngt_to_pbldr_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.en)-1) := vectorify(x.en, y(left to left+len(x.en)-1));
    else
      y(left downto left-len(x.en)+1) := vectorify(x.en, y(left downto left-len(x.en)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: mngt_to_pbldr_rt) return mngt_to_pbldr_rt is
    variable y: mngt_to_pbldr_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.en := structify(x(left to left+len(y.en)-1), y.en);
    else
      y.en := structify(x(left downto left-len(y.en)+1), y.en);
    end if;
    return y;
  end function structify;
  function nullify(t: mngt_to_pbldr_rt) return mngt_to_pbldr_rt is
  variable y: mngt_to_pbldr_rt;
  begin
    y.en := nullify(t.en);
    return y;
  end function nullify;

  function len(x: pbldr_to_mngt_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.done);
    return l;
  end function len;
  function vectorify(x: pbldr_to_mngt_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.done)-1) := vectorify(x.done, y(left to left+len(x.done)-1));
    else
      y(left downto left-len(x.done)+1) := vectorify(x.done, y(left downto left-len(x.done)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: pbldr_to_mngt_rt) return pbldr_to_mngt_rt is
    variable y: pbldr_to_mngt_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.done := structify(x(left to left+len(y.done)-1), y.done);
    else
      y.done := structify(x(left downto left-len(y.done)+1), y.done);
    end if;
    return y;
  end function structify;
  function nullify(t: pbldr_to_mngt_rt) return pbldr_to_mngt_rt is
  variable y: pbldr_to_mngt_rt;
  begin
    y.done := nullify(t.done);
    return y;
  end function nullify;

  function len(x: row_to_pbldr_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.payload);
    return l;
  end function len;
  function vectorify(x: row_to_pbldr_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.payload)-1) := vectorify(x.payload, y(left to left+len(x.payload)-1));
    else
      y(left downto left-len(x.payload)+1) := vectorify(x.payload, y(left downto left-len(x.payload)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: row_to_pbldr_rt) return row_to_pbldr_rt is
    variable y: row_to_pbldr_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.payload := structify(x(left to left+len(y.payload)-1), y.payload);
    else
      y.payload := structify(x(left downto left-len(y.payload)+1), y.payload);
    end if;
    return y;
  end function structify;
  function nullify(t: row_to_pbldr_rt) return row_to_pbldr_rt is
  variable y: row_to_pbldr_rt;
  begin
    y.payload := nullify(t.payload);
    return y;
  end function nullify;

  function len(x: pbldr_to_row_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.payload);
    l := l + len(x.sel);
    return l;
  end function len;
  function vectorify(x: pbldr_to_row_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.payload)-1) := vectorify(x.payload, y(left to left+len(x.payload)-1));
      left := left + len(x.payload);
      y(left to left+len(x.sel)-1) := vectorify(x.sel, y(left to left+len(x.sel)-1));
    else
      y(left downto left-len(x.payload)+1) := vectorify(x.payload, y(left downto left-len(x.payload)+1));
      left := left - len(x.payload);
      y(left downto left-len(x.sel)+1) := vectorify(x.sel, y(left downto left-len(x.sel)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: pbldr_to_row_rt) return pbldr_to_row_rt is
    variable y: pbldr_to_row_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.payload := structify(x(left to left+len(y.payload)-1), y.payload);
      left := left + len(y.payload);
      y.sel := structify(x(left to left+len(y.sel)-1), y.sel);
    else
      y.payload := structify(x(left downto left-len(y.payload)+1), y.payload);
      left := left - len(y.payload);
      y.sel := structify(x(left downto left-len(y.sel)+1), y.sel);
    end if;
    return y;
  end function structify;
  function nullify(t: pbldr_to_row_rt) return pbldr_to_row_rt is
  variable y: pbldr_to_row_rt;
  begin
    y.payload := nullify(t.payload);
    y.sel := nullify(t.sel);
    return y;
  end function nullify;

  function len(x: pbldr_to_rows_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.payload);
    l := l + len(x.sel);
    return l;
  end function len;
  function vectorify(x: pbldr_to_rows_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.payload)-1) := vectorify(x.payload, y(left to left+len(x.payload)-1));
      left := left + len(x.payload);
      y(left to left+len(x.sel)-1) := vectorify(x.sel, y(left to left+len(x.sel)-1));
    else
      y(left downto left-len(x.payload)+1) := vectorify(x.payload, y(left downto left-len(x.payload)+1));
      left := left - len(x.payload);
      y(left downto left-len(x.sel)+1) := vectorify(x.sel, y(left downto left-len(x.sel)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: pbldr_to_rows_rt) return pbldr_to_rows_rt is
    variable y: pbldr_to_rows_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.payload := structify(x(left to left+len(y.payload)-1), y.payload);
      left := left + len(y.payload);
      y.sel := structify(x(left to left+len(y.sel)-1), y.sel);
    else
      y.payload := structify(x(left downto left-len(y.payload)+1), y.payload);
      left := left - len(y.payload);
      y.sel := structify(x(left downto left-len(y.sel)+1), y.sel);
    end if;
    return y;
  end function structify;
  function nullify(t: pbldr_to_rows_rt) return pbldr_to_rows_rt is
  variable y: pbldr_to_rows_rt;
  begin
    y.payload := nullify(t.payload);
    y.sel := nullify(t.sel);
    return y;
  end function nullify;

  function len(x: req_to_row_common_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.strb);
    l := l + len(x.win_start);
    l := l + len(x.win_width);
    return l;
  end function len;
  function vectorify(x: req_to_row_common_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.strb)-1) := vectorify(x.strb, y(left to left+len(x.strb)-1));
      left := left + len(x.strb);
      y(left to left+len(x.win_start)-1) := vectorify(x.win_start, y(left to left+len(x.win_start)-1));
      left := left + len(x.win_start);
      y(left to left+len(x.win_width)-1) := vectorify(x.win_width, y(left to left+len(x.win_width)-1));
    else
      y(left downto left-len(x.strb)+1) := vectorify(x.strb, y(left downto left-len(x.strb)+1));
      left := left - len(x.strb);
      y(left downto left-len(x.win_start)+1) := vectorify(x.win_start, y(left downto left-len(x.win_start)+1));
      left := left - len(x.win_start);
      y(left downto left-len(x.win_width)+1) := vectorify(x.win_width, y(left downto left-len(x.win_width)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: req_to_row_common_rt) return req_to_row_common_rt is
    variable y: req_to_row_common_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.strb := structify(x(left to left+len(y.strb)-1), y.strb);
      left := left + len(y.strb);
      y.win_start := structify(x(left to left+len(y.win_start)-1), y.win_start);
      left := left + len(y.win_start);
      y.win_width := structify(x(left to left+len(y.win_width)-1), y.win_width);
    else
      y.strb := structify(x(left downto left-len(y.strb)+1), y.strb);
      left := left - len(y.strb);
      y.win_start := structify(x(left downto left-len(y.win_start)+1), y.win_start);
      left := left - len(y.win_start);
      y.win_width := structify(x(left downto left-len(y.win_width)+1), y.win_width);
    end if;
    return y;
  end function structify;
  function nullify(t: req_to_row_common_rt) return req_to_row_common_rt is
  variable y: req_to_row_common_rt;
  begin
    y.strb := nullify(t.strb);
    y.win_start := nullify(t.win_start);
    y.win_width := nullify(t.win_width);
    return y;
  end function nullify;

  function len(x: req_to_row_extra_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.latency);
    l := l + len(x.win_lower);
    l := l + len(x.win_upper);
    l := l + len(x.daq_bcid);
    l := l + len(x.bcid);
    l := l + len(x.evid);
    return l;
  end function len;
  function vectorify(x: req_to_row_extra_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.latency)-1) := vectorify(x.latency, y(left to left+len(x.latency)-1));
      left := left + len(x.latency);
      y(left to left+len(x.win_lower)-1) := vectorify(x.win_lower, y(left to left+len(x.win_lower)-1));
      left := left + len(x.win_lower);
      y(left to left+len(x.win_upper)-1) := vectorify(x.win_upper, y(left to left+len(x.win_upper)-1));
      left := left + len(x.win_upper);
      y(left to left+len(x.daq_bcid)-1) := vectorify(x.daq_bcid, y(left to left+len(x.daq_bcid)-1));
      left := left + len(x.daq_bcid);
      y(left to left+len(x.bcid)-1) := vectorify(x.bcid, y(left to left+len(x.bcid)-1));
      left := left + len(x.bcid);
      y(left to left+len(x.evid)-1) := vectorify(x.evid, y(left to left+len(x.evid)-1));
    else
      y(left downto left-len(x.latency)+1) := vectorify(x.latency, y(left downto left-len(x.latency)+1));
      left := left - len(x.latency);
      y(left downto left-len(x.win_lower)+1) := vectorify(x.win_lower, y(left downto left-len(x.win_lower)+1));
      left := left - len(x.win_lower);
      y(left downto left-len(x.win_upper)+1) := vectorify(x.win_upper, y(left downto left-len(x.win_upper)+1));
      left := left - len(x.win_upper);
      y(left downto left-len(x.daq_bcid)+1) := vectorify(x.daq_bcid, y(left downto left-len(x.daq_bcid)+1));
      left := left - len(x.daq_bcid);
      y(left downto left-len(x.bcid)+1) := vectorify(x.bcid, y(left downto left-len(x.bcid)+1));
      left := left - len(x.bcid);
      y(left downto left-len(x.evid)+1) := vectorify(x.evid, y(left downto left-len(x.evid)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: req_to_row_extra_rt) return req_to_row_extra_rt is
    variable y: req_to_row_extra_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.latency := structify(x(left to left+len(y.latency)-1), y.latency);
      left := left + len(y.latency);
      y.win_lower := structify(x(left to left+len(y.win_lower)-1), y.win_lower);
      left := left + len(y.win_lower);
      y.win_upper := structify(x(left to left+len(y.win_upper)-1), y.win_upper);
      left := left + len(y.win_upper);
      y.daq_bcid := structify(x(left to left+len(y.daq_bcid)-1), y.daq_bcid);
      left := left + len(y.daq_bcid);
      y.bcid := structify(x(left to left+len(y.bcid)-1), y.bcid);
      left := left + len(y.bcid);
      y.evid := structify(x(left to left+len(y.evid)-1), y.evid);
    else
      y.latency := structify(x(left downto left-len(y.latency)+1), y.latency);
      left := left - len(y.latency);
      y.win_lower := structify(x(left downto left-len(y.win_lower)+1), y.win_lower);
      left := left - len(y.win_lower);
      y.win_upper := structify(x(left downto left-len(y.win_upper)+1), y.win_upper);
      left := left - len(y.win_upper);
      y.daq_bcid := structify(x(left downto left-len(y.daq_bcid)+1), y.daq_bcid);
      left := left - len(y.daq_bcid);
      y.bcid := structify(x(left downto left-len(y.bcid)+1), y.bcid);
      left := left - len(y.bcid);
      y.evid := structify(x(left downto left-len(y.evid)+1), y.evid);
    end if;
    return y;
  end function structify;
  function nullify(t: req_to_row_extra_rt) return req_to_row_extra_rt is
  variable y: req_to_row_extra_rt;
  begin
    y.latency := nullify(t.latency);
    y.win_lower := nullify(t.win_lower);
    y.win_upper := nullify(t.win_upper);
    y.daq_bcid := nullify(t.daq_bcid);
    y.bcid := nullify(t.bcid);
    y.evid := nullify(t.evid);
    return y;
  end function nullify;

  function len(x: req_to_row_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.common);
    l := l + len(x.extra);
    return l;
  end function len;
  function vectorify(x: req_to_row_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.common)-1) := vectorify(x.common, y(left to left+len(x.common)-1));
      left := left + len(x.common);
      y(left to left+len(x.extra)-1) := vectorify(x.extra, y(left to left+len(x.extra)-1));
    else
      y(left downto left-len(x.common)+1) := vectorify(x.common, y(left downto left-len(x.common)+1));
      left := left - len(x.common);
      y(left downto left-len(x.extra)+1) := vectorify(x.extra, y(left downto left-len(x.extra)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: req_to_row_rt) return req_to_row_rt is
    variable y: req_to_row_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.common := structify(x(left to left+len(y.common)-1), y.common);
      left := left + len(y.common);
      y.extra := structify(x(left to left+len(y.extra)-1), y.extra);
    else
      y.common := structify(x(left downto left-len(y.common)+1), y.common);
      left := left - len(y.common);
      y.extra := structify(x(left downto left-len(y.extra)+1), y.extra);
    end if;
    return y;
  end function structify;
  function nullify(t: req_to_row_rt) return req_to_row_rt is
  variable y: req_to_row_rt;
  begin
    y.common := nullify(t.common);
    y.extra := nullify(t.extra);
    return y;
  end function nullify;

  function len(x: felix_to_daq_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.hfull);
    return l;
  end function len;
  function vectorify(x: felix_to_daq_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.hfull)-1) := vectorify(x.hfull, y(left to left+len(x.hfull)-1));
    else
      y(left downto left-len(x.hfull)+1) := vectorify(x.hfull, y(left downto left-len(x.hfull)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: felix_to_daq_rt) return felix_to_daq_rt is
    variable y: felix_to_daq_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.hfull := structify(x(left to left+len(y.hfull)-1), y.hfull);
    else
      y.hfull := structify(x(left downto left-len(y.hfull)+1), y.hfull);
    end if;
    return y;
  end function structify;
  function nullify(t: felix_to_daq_rt) return felix_to_daq_rt is
  variable y: felix_to_daq_rt;
  begin
    y.hfull := nullify(t.hfull);
    return y;
  end function nullify;

  function len(x: daq_to_felix_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.wr_en);
    l := l + len(x.data);
    return l;
  end function len;
  function vectorify(x: daq_to_felix_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.wr_en)-1) := vectorify(x.wr_en, y(left to left+len(x.wr_en)-1));
      left := left + len(x.wr_en);
      y(left to left+len(x.data)-1) := vectorify(x.data, y(left to left+len(x.data)-1));
    else
      y(left downto left-len(x.wr_en)+1) := vectorify(x.wr_en, y(left downto left-len(x.wr_en)+1));
      left := left - len(x.wr_en);
      y(left downto left-len(x.data)+1) := vectorify(x.data, y(left downto left-len(x.data)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_to_felix_rt) return daq_to_felix_rt is
    variable y: daq_to_felix_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.wr_en := structify(x(left to left+len(y.wr_en)-1), y.wr_en);
      left := left + len(y.wr_en);
      y.data := structify(x(left to left+len(y.data)-1), y.data);
    else
      y.wr_en := structify(x(left downto left-len(y.wr_en)+1), y.wr_en);
      left := left - len(y.wr_en);
      y.data := structify(x(left downto left-len(y.data)+1), y.data);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_to_felix_rt) return daq_to_felix_rt is
  variable y: daq_to_felix_rt;
  begin
    y.wr_en := nullify(t.wr_en);
    y.data := nullify(t.data);
    return y;
  end function nullify;

  function len(x: ctrl_to_daq_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.wr_en);
    l := l + len(x.latency);
    l := l + len(x.win_lower);
    l := l + len(x.win_upper);
    return l;
  end function len;
  function vectorify(x: ctrl_to_daq_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.wr_en)-1) := vectorify(x.wr_en, y(left to left+len(x.wr_en)-1));
      left := left + len(x.wr_en);
      y(left to left+len(x.latency)-1) := vectorify(x.latency, y(left to left+len(x.latency)-1));
      left := left + len(x.latency);
      y(left to left+len(x.win_lower)-1) := vectorify(x.win_lower, y(left to left+len(x.win_lower)-1));
      left := left + len(x.win_lower);
      y(left to left+len(x.win_upper)-1) := vectorify(x.win_upper, y(left to left+len(x.win_upper)-1));
    else
      y(left downto left-len(x.wr_en)+1) := vectorify(x.wr_en, y(left downto left-len(x.wr_en)+1));
      left := left - len(x.wr_en);
      y(left downto left-len(x.latency)+1) := vectorify(x.latency, y(left downto left-len(x.latency)+1));
      left := left - len(x.latency);
      y(left downto left-len(x.win_lower)+1) := vectorify(x.win_lower, y(left downto left-len(x.win_lower)+1));
      left := left - len(x.win_lower);
      y(left downto left-len(x.win_upper)+1) := vectorify(x.win_upper, y(left downto left-len(x.win_upper)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: ctrl_to_daq_rt) return ctrl_to_daq_rt is
    variable y: ctrl_to_daq_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.wr_en := structify(x(left to left+len(y.wr_en)-1), y.wr_en);
      left := left + len(y.wr_en);
      y.latency := structify(x(left to left+len(y.latency)-1), y.latency);
      left := left + len(y.latency);
      y.win_lower := structify(x(left to left+len(y.win_lower)-1), y.win_lower);
      left := left + len(y.win_lower);
      y.win_upper := structify(x(left to left+len(y.win_upper)-1), y.win_upper);
    else
      y.wr_en := structify(x(left downto left-len(y.wr_en)+1), y.wr_en);
      left := left - len(y.wr_en);
      y.latency := structify(x(left downto left-len(y.latency)+1), y.latency);
      left := left - len(y.latency);
      y.win_lower := structify(x(left downto left-len(y.win_lower)+1), y.win_lower);
      left := left - len(y.win_lower);
      y.win_upper := structify(x(left downto left-len(y.win_upper)+1), y.win_upper);
    end if;
    return y;
  end function structify;
  function nullify(t: ctrl_to_daq_rt) return ctrl_to_daq_rt is
  variable y: ctrl_to_daq_rt;
  begin
    y.wr_en := nullify(t.wr_en);
    y.latency := nullify(t.latency);
    y.win_lower := nullify(t.win_lower);
    y.win_upper := nullify(t.win_upper);
    return y;
  end function nullify;

  function len(x: daq_to_status_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.stability);
    return l;
  end function len;
  function vectorify(x: daq_to_status_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.stability)-1) := vectorify(x.stability, y(left to left+len(x.stability)-1));
    else
      y(left downto left-len(x.stability)+1) := vectorify(x.stability, y(left downto left-len(x.stability)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_to_status_rt) return daq_to_status_rt is
    variable y: daq_to_status_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.stability := structify(x(left to left+len(y.stability)-1), y.stability);
    else
      y.stability := structify(x(left downto left-len(y.stability)+1), y.stability);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_to_status_rt) return daq_to_status_rt is
  variable y: daq_to_status_rt;
  begin
    y.stability := nullify(t.stability);
    return y;
  end function nullify;

  function len(x: daq_req_status_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.stability);
    return l;
  end function len;
  function vectorify(x: daq_req_status_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.stability)-1) := vectorify(x.stability, y(left to left+len(x.stability)-1));
    else
      y(left downto left-len(x.stability)+1) := vectorify(x.stability, y(left downto left-len(x.stability)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_req_status_rt) return daq_req_status_rt is
    variable y: daq_req_status_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.stability := structify(x(left to left+len(y.stability)-1), y.stability);
    else
      y.stability := structify(x(left downto left-len(y.stability)+1), y.stability);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_req_status_rt) return daq_req_status_rt is
  variable y: daq_req_status_rt;
  begin
    y.stability := nullify(t.stability);
    return y;
  end function nullify;

  function len(x: daq_req_irt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.sys);
    l := l + len(x.ttc);
    l := l + len(x.ctrl);
    return l;
  end function len;
  function vectorify(x: daq_req_irt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.sys)-1) := vectorify(x.sys, y(left to left+len(x.sys)-1));
      left := left + len(x.sys);
      y(left to left+len(x.ttc)-1) := vectorify(x.ttc, y(left to left+len(x.ttc)-1));
      left := left + len(x.ttc);
      y(left to left+len(x.ctrl)-1) := vectorify(x.ctrl, y(left to left+len(x.ctrl)-1));
    else
      y(left downto left-len(x.sys)+1) := vectorify(x.sys, y(left downto left-len(x.sys)+1));
      left := left - len(x.sys);
      y(left downto left-len(x.ttc)+1) := vectorify(x.ttc, y(left downto left-len(x.ttc)+1));
      left := left - len(x.ttc);
      y(left downto left-len(x.ctrl)+1) := vectorify(x.ctrl, y(left downto left-len(x.ctrl)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_req_irt) return daq_req_irt is
    variable y: daq_req_irt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.sys := structify(x(left to left+len(y.sys)-1), y.sys);
      left := left + len(y.sys);
      y.ttc := structify(x(left to left+len(y.ttc)-1), y.ttc);
      left := left + len(y.ttc);
      y.ctrl := structify(x(left to left+len(y.ctrl)-1), y.ctrl);
    else
      y.sys := structify(x(left downto left-len(y.sys)+1), y.sys);
      left := left - len(y.sys);
      y.ttc := structify(x(left downto left-len(y.ttc)+1), y.ttc);
      left := left - len(y.ttc);
      y.ctrl := structify(x(left downto left-len(y.ctrl)+1), y.ctrl);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_req_irt) return daq_req_irt is
  variable y: daq_req_irt;
  begin
    y.sys := nullify(t.sys);
    y.ttc := nullify(t.ttc);
    y.ctrl := nullify(t.ctrl);
    return y;
  end function nullify;

  function len(x: daq_req_ort) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.status);
    l := l + len(x.row);
    return l;
  end function len;
  function vectorify(x: daq_req_ort; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.status)-1) := vectorify(x.status, y(left to left+len(x.status)-1));
      left := left + len(x.status);
      y(left to left+len(x.row)-1) := vectorify(x.row, y(left to left+len(x.row)-1));
    else
      y(left downto left-len(x.status)+1) := vectorify(x.status, y(left downto left-len(x.status)+1));
      left := left - len(x.status);
      y(left downto left-len(x.row)+1) := vectorify(x.row, y(left downto left-len(x.row)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_req_ort) return daq_req_ort is
    variable y: daq_req_ort;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.status := structify(x(left to left+len(y.status)-1), y.status);
      left := left + len(y.status);
      y.row := structify(x(left to left+len(y.row)-1), y.row);
    else
      y.status := structify(x(left downto left-len(y.status)+1), y.status);
      left := left - len(y.status);
      y.row := structify(x(left downto left-len(y.row)+1), y.row);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_req_ort) return daq_req_ort is
  variable y: daq_req_ort;
  begin
    y.status := nullify(t.status);
    y.row := nullify(t.row);
    return y;
  end function nullify;

  function len(x: daq_req_ert) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.i);
    l := l + len(x.o);
    return l;
  end function len;
  function vectorify(x: daq_req_ert; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.i)-1) := vectorify(x.i, y(left to left+len(x.i)-1));
      left := left + len(x.i);
      y(left to left+len(x.o)-1) := vectorify(x.o, y(left to left+len(x.o)-1));
    else
      y(left downto left-len(x.i)+1) := vectorify(x.i, y(left downto left-len(x.i)+1));
      left := left - len(x.i);
      y(left downto left-len(x.o)+1) := vectorify(x.o, y(left downto left-len(x.o)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_req_ert) return daq_req_ert is
    variable y: daq_req_ert;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.i := structify(x(left to left+len(y.i)-1), y.i);
      left := left + len(y.i);
      y.o := structify(x(left to left+len(y.o)-1), y.o);
    else
      y.i := structify(x(left downto left-len(y.i)+1), y.i);
      left := left - len(y.i);
      y.o := structify(x(left downto left-len(y.o)+1), y.o);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_req_ert) return daq_req_ert is
  variable y: daq_req_ert;
  begin
    y.i := nullify(t.i);
    y.o := nullify(t.o);
    return y;
  end function nullify;

  function len(x: daq_row_grt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.PIPELINES);
    l := l + len(x.INPUT_DATA_WIDTH);
    l := l + len(x.COUNTER_WIDTH);
    return l;
  end function len;
  function vectorify(x: daq_row_grt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.PIPELINES)-1) := vectorify(x.PIPELINES, y(left to left+len(x.PIPELINES)-1));
      left := left + len(x.PIPELINES);
      y(left to left+len(x.INPUT_DATA_WIDTH)-1) := vectorify(x.INPUT_DATA_WIDTH, y(left to left+len(x.INPUT_DATA_WIDTH)-1));
      left := left + len(x.INPUT_DATA_WIDTH);
      y(left to left+len(x.COUNTER_WIDTH)-1) := vectorify(x.COUNTER_WIDTH, y(left to left+len(x.COUNTER_WIDTH)-1));
    else
      y(left downto left-len(x.PIPELINES)+1) := vectorify(x.PIPELINES, y(left downto left-len(x.PIPELINES)+1));
      left := left - len(x.PIPELINES);
      y(left downto left-len(x.INPUT_DATA_WIDTH)+1) := vectorify(x.INPUT_DATA_WIDTH, y(left downto left-len(x.INPUT_DATA_WIDTH)+1));
      left := left - len(x.INPUT_DATA_WIDTH);
      y(left downto left-len(x.COUNTER_WIDTH)+1) := vectorify(x.COUNTER_WIDTH, y(left downto left-len(x.COUNTER_WIDTH)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_row_grt) return daq_row_grt is
    variable y: daq_row_grt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.PIPELINES := structify(x(left to left+len(y.PIPELINES)-1), y.PIPELINES);
      left := left + len(y.PIPELINES);
      y.INPUT_DATA_WIDTH := structify(x(left to left+len(y.INPUT_DATA_WIDTH)-1), y.INPUT_DATA_WIDTH);
      left := left + len(y.INPUT_DATA_WIDTH);
      y.COUNTER_WIDTH := structify(x(left to left+len(y.COUNTER_WIDTH)-1), y.COUNTER_WIDTH);
    else
      y.PIPELINES := structify(x(left downto left-len(y.PIPELINES)+1), y.PIPELINES);
      left := left - len(y.PIPELINES);
      y.INPUT_DATA_WIDTH := structify(x(left downto left-len(y.INPUT_DATA_WIDTH)+1), y.INPUT_DATA_WIDTH);
      left := left - len(y.INPUT_DATA_WIDTH);
      y.COUNTER_WIDTH := structify(x(left downto left-len(y.COUNTER_WIDTH)+1), y.COUNTER_WIDTH);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_row_grt) return daq_row_grt is
  variable y: daq_row_grt;
  begin
    y.PIPELINES := nullify(t.PIPELINES);
    y.INPUT_DATA_WIDTH := nullify(t.INPUT_DATA_WIDTH);
    y.COUNTER_WIDTH := nullify(t.COUNTER_WIDTH);
    return y;
  end function nullify;

  function len(x: daq_hrow_irt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.sys);
    l := l + len(x.mngt);
    l := l + len(x.req);
    l := l + len(x.pbldr);
    return l;
  end function len;
  function vectorify(x: daq_hrow_irt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.sys)-1) := vectorify(x.sys, y(left to left+len(x.sys)-1));
      left := left + len(x.sys);
      y(left to left+len(x.mngt)-1) := vectorify(x.mngt, y(left to left+len(x.mngt)-1));
      left := left + len(x.mngt);
      y(left to left+len(x.req)-1) := vectorify(x.req, y(left to left+len(x.req)-1));
      left := left + len(x.req);
      y(left to left+len(x.pbldr)-1) := vectorify(x.pbldr, y(left to left+len(x.pbldr)-1));
    else
      y(left downto left-len(x.sys)+1) := vectorify(x.sys, y(left downto left-len(x.sys)+1));
      left := left - len(x.sys);
      y(left downto left-len(x.mngt)+1) := vectorify(x.mngt, y(left downto left-len(x.mngt)+1));
      left := left - len(x.mngt);
      y(left downto left-len(x.req)+1) := vectorify(x.req, y(left downto left-len(x.req)+1));
      left := left - len(x.req);
      y(left downto left-len(x.pbldr)+1) := vectorify(x.pbldr, y(left downto left-len(x.pbldr)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_hrow_irt) return daq_hrow_irt is
    variable y: daq_hrow_irt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.sys := structify(x(left to left+len(y.sys)-1), y.sys);
      left := left + len(y.sys);
      y.mngt := structify(x(left to left+len(y.mngt)-1), y.mngt);
      left := left + len(y.mngt);
      y.req := structify(x(left to left+len(y.req)-1), y.req);
      left := left + len(y.req);
      y.pbldr := structify(x(left to left+len(y.pbldr)-1), y.pbldr);
    else
      y.sys := structify(x(left downto left-len(y.sys)+1), y.sys);
      left := left - len(y.sys);
      y.mngt := structify(x(left downto left-len(y.mngt)+1), y.mngt);
      left := left - len(y.mngt);
      y.req := structify(x(left downto left-len(y.req)+1), y.req);
      left := left - len(y.req);
      y.pbldr := structify(x(left downto left-len(y.pbldr)+1), y.pbldr);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_hrow_irt) return daq_hrow_irt is
  variable y: daq_hrow_irt;
  begin
    y.sys := nullify(t.sys);
    y.mngt := nullify(t.mngt);
    y.req := nullify(t.req);
    y.pbldr := nullify(t.pbldr);
    return y;
  end function nullify;

  function len(x: daq_drow_irt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.sys);
    l := l + len(x.mngt);
    l := l + len(x.req);
    l := l + len(x.stream);
    l := l + len(x.pbldr);
    return l;
  end function len;
  function vectorify(x: daq_drow_irt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.sys)-1) := vectorify(x.sys, y(left to left+len(x.sys)-1));
      left := left + len(x.sys);
      y(left to left+len(x.mngt)-1) := vectorify(x.mngt, y(left to left+len(x.mngt)-1));
      left := left + len(x.mngt);
      y(left to left+len(x.req)-1) := vectorify(x.req, y(left to left+len(x.req)-1));
      left := left + len(x.req);
      y(left to left+len(x.stream)-1) := vectorify(x.stream, y(left to left+len(x.stream)-1));
      left := left + len(x.stream);
      y(left to left+len(x.pbldr)-1) := vectorify(x.pbldr, y(left to left+len(x.pbldr)-1));
    else
      y(left downto left-len(x.sys)+1) := vectorify(x.sys, y(left downto left-len(x.sys)+1));
      left := left - len(x.sys);
      y(left downto left-len(x.mngt)+1) := vectorify(x.mngt, y(left downto left-len(x.mngt)+1));
      left := left - len(x.mngt);
      y(left downto left-len(x.req)+1) := vectorify(x.req, y(left downto left-len(x.req)+1));
      left := left - len(x.req);
      y(left downto left-len(x.stream)+1) := vectorify(x.stream, y(left downto left-len(x.stream)+1));
      left := left - len(x.stream);
      y(left downto left-len(x.pbldr)+1) := vectorify(x.pbldr, y(left downto left-len(x.pbldr)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_drow_irt) return daq_drow_irt is
    variable y: daq_drow_irt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.sys := structify(x(left to left+len(y.sys)-1), y.sys);
      left := left + len(y.sys);
      y.mngt := structify(x(left to left+len(y.mngt)-1), y.mngt);
      left := left + len(y.mngt);
      y.req := structify(x(left to left+len(y.req)-1), y.req);
      left := left + len(y.req);
      y.stream := structify(x(left to left+len(y.stream)-1), y.stream);
      left := left + len(y.stream);
      y.pbldr := structify(x(left to left+len(y.pbldr)-1), y.pbldr);
    else
      y.sys := structify(x(left downto left-len(y.sys)+1), y.sys);
      left := left - len(y.sys);
      y.mngt := structify(x(left downto left-len(y.mngt)+1), y.mngt);
      left := left - len(y.mngt);
      y.req := structify(x(left downto left-len(y.req)+1), y.req);
      left := left - len(y.req);
      y.stream := structify(x(left downto left-len(y.stream)+1), y.stream);
      left := left - len(y.stream);
      y.pbldr := structify(x(left downto left-len(y.pbldr)+1), y.pbldr);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_drow_irt) return daq_drow_irt is
  variable y: daq_drow_irt;
  begin
    y.sys := nullify(t.sys);
    y.mngt := nullify(t.mngt);
    y.req := nullify(t.req);
    y.stream := nullify(t.stream);
    y.pbldr := nullify(t.pbldr);
    return y;
  end function nullify;

  function len(x: daq_row_ort) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.mngt);
    l := l + len(x.pbldr);
    return l;
  end function len;
  function vectorify(x: daq_row_ort; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.mngt)-1) := vectorify(x.mngt, y(left to left+len(x.mngt)-1));
      left := left + len(x.mngt);
      y(left to left+len(x.pbldr)-1) := vectorify(x.pbldr, y(left to left+len(x.pbldr)-1));
    else
      y(left downto left-len(x.mngt)+1) := vectorify(x.mngt, y(left downto left-len(x.mngt)+1));
      left := left - len(x.mngt);
      y(left downto left-len(x.pbldr)+1) := vectorify(x.pbldr, y(left downto left-len(x.pbldr)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_row_ort) return daq_row_ort is
    variable y: daq_row_ort;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.mngt := structify(x(left to left+len(y.mngt)-1), y.mngt);
      left := left + len(y.mngt);
      y.pbldr := structify(x(left to left+len(y.pbldr)-1), y.pbldr);
    else
      y.mngt := structify(x(left downto left-len(y.mngt)+1), y.mngt);
      left := left - len(y.mngt);
      y.pbldr := structify(x(left downto left-len(y.pbldr)+1), y.pbldr);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_row_ort) return daq_row_ort is
  variable y: daq_row_ort;
  begin
    y.mngt := nullify(t.mngt);
    y.pbldr := nullify(t.pbldr);
    return y;
  end function nullify;

  function len(x: daq_hrow_ert) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.i);
    l := l + len(x.o);
    return l;
  end function len;
  function vectorify(x: daq_hrow_ert; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.i)-1) := vectorify(x.i, y(left to left+len(x.i)-1));
      left := left + len(x.i);
      y(left to left+len(x.o)-1) := vectorify(x.o, y(left to left+len(x.o)-1));
    else
      y(left downto left-len(x.i)+1) := vectorify(x.i, y(left downto left-len(x.i)+1));
      left := left - len(x.i);
      y(left downto left-len(x.o)+1) := vectorify(x.o, y(left downto left-len(x.o)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_hrow_ert) return daq_hrow_ert is
    variable y: daq_hrow_ert;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.i := structify(x(left to left+len(y.i)-1), y.i);
      left := left + len(y.i);
      y.o := structify(x(left to left+len(y.o)-1), y.o);
    else
      y.i := structify(x(left downto left-len(y.i)+1), y.i);
      left := left - len(y.i);
      y.o := structify(x(left downto left-len(y.o)+1), y.o);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_hrow_ert) return daq_hrow_ert is
  variable y: daq_hrow_ert;
  begin
    y.i := nullify(t.i);
    y.o := nullify(t.o);
    return y;
  end function nullify;

  function len(x: daq_drow_ert) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.i);
    l := l + len(x.o);
    return l;
  end function len;
  function vectorify(x: daq_drow_ert; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.i)-1) := vectorify(x.i, y(left to left+len(x.i)-1));
      left := left + len(x.i);
      y(left to left+len(x.o)-1) := vectorify(x.o, y(left to left+len(x.o)-1));
    else
      y(left downto left-len(x.i)+1) := vectorify(x.i, y(left downto left-len(x.i)+1));
      left := left - len(x.i);
      y(left downto left-len(x.o)+1) := vectorify(x.o, y(left downto left-len(x.o)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_drow_ert) return daq_drow_ert is
    variable y: daq_drow_ert;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.i := structify(x(left to left+len(y.i)-1), y.i);
      left := left + len(y.i);
      y.o := structify(x(left to left+len(y.o)-1), y.o);
    else
      y.i := structify(x(left downto left-len(y.i)+1), y.i);
      left := left - len(y.i);
      y.o := structify(x(left downto left-len(y.o)+1), y.o);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_drow_ert) return daq_drow_ert is
  variable y: daq_drow_ert;
  begin
    y.i := nullify(t.i);
    y.o := nullify(t.o);
    return y;
  end function nullify;

  function len(x: daq_pbldr_irt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.sys);
    l := l + len(x.mngt);
    l := l + len(x.row);
    l := l + len(x.f2e);
    return l;
  end function len;
  function vectorify(x: daq_pbldr_irt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.sys)-1) := vectorify(x.sys, y(left to left+len(x.sys)-1));
      left := left + len(x.sys);
      y(left to left+len(x.mngt)-1) := vectorify(x.mngt, y(left to left+len(x.mngt)-1));
      left := left + len(x.mngt);
      y(left to left+len(x.row)-1) := vectorify(x.row, y(left to left+len(x.row)-1));
      left := left + len(x.row);
      y(left to left+len(x.f2e)-1) := vectorify(x.f2e, y(left to left+len(x.f2e)-1));
    else
      y(left downto left-len(x.sys)+1) := vectorify(x.sys, y(left downto left-len(x.sys)+1));
      left := left - len(x.sys);
      y(left downto left-len(x.mngt)+1) := vectorify(x.mngt, y(left downto left-len(x.mngt)+1));
      left := left - len(x.mngt);
      y(left downto left-len(x.row)+1) := vectorify(x.row, y(left downto left-len(x.row)+1));
      left := left - len(x.row);
      y(left downto left-len(x.f2e)+1) := vectorify(x.f2e, y(left downto left-len(x.f2e)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_pbldr_irt) return daq_pbldr_irt is
    variable y: daq_pbldr_irt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.sys := structify(x(left to left+len(y.sys)-1), y.sys);
      left := left + len(y.sys);
      y.mngt := structify(x(left to left+len(y.mngt)-1), y.mngt);
      left := left + len(y.mngt);
      y.row := structify(x(left to left+len(y.row)-1), y.row);
      left := left + len(y.row);
      y.f2e := structify(x(left to left+len(y.f2e)-1), y.f2e);
    else
      y.sys := structify(x(left downto left-len(y.sys)+1), y.sys);
      left := left - len(y.sys);
      y.mngt := structify(x(left downto left-len(y.mngt)+1), y.mngt);
      left := left - len(y.mngt);
      y.row := structify(x(left downto left-len(y.row)+1), y.row);
      left := left - len(y.row);
      y.f2e := structify(x(left downto left-len(y.f2e)+1), y.f2e);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_pbldr_irt) return daq_pbldr_irt is
  variable y: daq_pbldr_irt;
  begin
    y.sys := nullify(t.sys);
    y.mngt := nullify(t.mngt);
    y.row := nullify(t.row);
    y.f2e := nullify(t.f2e);
    return y;
  end function nullify;

  function len(x: daq_pbldr_ort) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.row);
    l := l + len(x.f2e);
    return l;
  end function len;
  function vectorify(x: daq_pbldr_ort; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.row)-1) := vectorify(x.row, y(left to left+len(x.row)-1));
      left := left + len(x.row);
      y(left to left+len(x.f2e)-1) := vectorify(x.f2e, y(left to left+len(x.f2e)-1));
    else
      y(left downto left-len(x.row)+1) := vectorify(x.row, y(left downto left-len(x.row)+1));
      left := left - len(x.row);
      y(left downto left-len(x.f2e)+1) := vectorify(x.f2e, y(left downto left-len(x.f2e)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_pbldr_ort) return daq_pbldr_ort is
    variable y: daq_pbldr_ort;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.row := structify(x(left to left+len(y.row)-1), y.row);
      left := left + len(y.row);
      y.f2e := structify(x(left to left+len(y.f2e)-1), y.f2e);
    else
      y.row := structify(x(left downto left-len(y.row)+1), y.row);
      left := left - len(y.row);
      y.f2e := structify(x(left downto left-len(y.f2e)+1), y.f2e);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_pbldr_ort) return daq_pbldr_ort is
  variable y: daq_pbldr_ort;
  begin
    y.row := nullify(t.row);
    y.f2e := nullify(t.f2e);
    return y;
  end function nullify;

  function len(x: daq_pbldr_ert) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.i);
    l := l + len(x.o);
    return l;
  end function len;
  function vectorify(x: daq_pbldr_ert; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.i)-1) := vectorify(x.i, y(left to left+len(x.i)-1));
      left := left + len(x.i);
      y(left to left+len(x.o)-1) := vectorify(x.o, y(left to left+len(x.o)-1));
    else
      y(left downto left-len(x.i)+1) := vectorify(x.i, y(left downto left-len(x.i)+1));
      left := left - len(x.i);
      y(left downto left-len(x.o)+1) := vectorify(x.o, y(left downto left-len(x.o)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_pbldr_ert) return daq_pbldr_ert is
    variable y: daq_pbldr_ert;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.i := structify(x(left to left+len(y.i)-1), y.i);
      left := left + len(y.i);
      y.o := structify(x(left to left+len(y.o)-1), y.o);
    else
      y.i := structify(x(left downto left-len(y.i)+1), y.i);
      left := left - len(y.i);
      y.o := structify(x(left downto left-len(y.o)+1), y.o);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_pbldr_ert) return daq_pbldr_ert is
  variable y: daq_pbldr_ert;
  begin
    y.i := nullify(t.i);
    y.o := nullify(t.o);
    return y;
  end function nullify;

  function len(x: daq_mngt_grt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.STREAMS);
    l := l + len(x.PIPELINES);
    return l;
  end function len;
  function vectorify(x: daq_mngt_grt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.STREAMS)-1) := vectorify(x.STREAMS, y(left to left+len(x.STREAMS)-1));
      left := left + len(x.STREAMS);
      y(left to left+len(x.PIPELINES)-1) := vectorify(x.PIPELINES, y(left to left+len(x.PIPELINES)-1));
    else
      y(left downto left-len(x.STREAMS)+1) := vectorify(x.STREAMS, y(left downto left-len(x.STREAMS)+1));
      left := left - len(x.STREAMS);
      y(left downto left-len(x.PIPELINES)+1) := vectorify(x.PIPELINES, y(left downto left-len(x.PIPELINES)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_mngt_grt) return daq_mngt_grt is
    variable y: daq_mngt_grt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.STREAMS := structify(x(left to left+len(y.STREAMS)-1), y.STREAMS);
      left := left + len(y.STREAMS);
      y.PIPELINES := structify(x(left to left+len(y.PIPELINES)-1), y.PIPELINES);
    else
      y.STREAMS := structify(x(left downto left-len(y.STREAMS)+1), y.STREAMS);
      left := left - len(y.STREAMS);
      y.PIPELINES := structify(x(left downto left-len(y.PIPELINES)+1), y.PIPELINES);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_mngt_grt) return daq_mngt_grt is
  variable y: daq_mngt_grt;
  begin
    y.STREAMS := nullify(t.STREAMS);
    y.PIPELINES := nullify(t.PIPELINES);
    return y;
  end function nullify;

  function len(x: daq_mngt_irt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.sys);
    l := l + len(x.ttc);
    l := l + len(x.row);
    return l;
  end function len;
  function vectorify(x: daq_mngt_irt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.sys)-1) := vectorify(x.sys, y(left to left+len(x.sys)-1));
      left := left + len(x.sys);
      y(left to left+len(x.ttc)-1) := vectorify(x.ttc, y(left to left+len(x.ttc)-1));
      left := left + len(x.ttc);
      y(left to left+len(x.row)-1) := vectorify(x.row, y(left to left+len(x.row)-1));
    else
      y(left downto left-len(x.sys)+1) := vectorify(x.sys, y(left downto left-len(x.sys)+1));
      left := left - len(x.sys);
      y(left downto left-len(x.ttc)+1) := vectorify(x.ttc, y(left downto left-len(x.ttc)+1));
      left := left - len(x.ttc);
      y(left downto left-len(x.row)+1) := vectorify(x.row, y(left downto left-len(x.row)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_mngt_irt) return daq_mngt_irt is
    variable y: daq_mngt_irt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.sys := structify(x(left to left+len(y.sys)-1), y.sys);
      left := left + len(y.sys);
      y.ttc := structify(x(left to left+len(y.ttc)-1), y.ttc);
      left := left + len(y.ttc);
      y.row := structify(x(left to left+len(y.row)-1), y.row);
    else
      y.sys := structify(x(left downto left-len(y.sys)+1), y.sys);
      left := left - len(y.sys);
      y.ttc := structify(x(left downto left-len(y.ttc)+1), y.ttc);
      left := left - len(y.ttc);
      y.row := structify(x(left downto left-len(y.row)+1), y.row);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_mngt_irt) return daq_mngt_irt is
  variable y: daq_mngt_irt;
  begin
    y.sys := nullify(t.sys);
    y.ttc := nullify(t.ttc);
    y.row := nullify(t.row);
    return y;
  end function nullify;

  function len(x: daq_mngt_ort) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.row);
    l := l + len(x.pbldr);
    l := l + len(x.err);
    return l;
  end function len;
  function vectorify(x: daq_mngt_ort; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.row)-1) := vectorify(x.row, y(left to left+len(x.row)-1));
      left := left + len(x.row);
      y(left to left+len(x.pbldr)-1) := vectorify(x.pbldr, y(left to left+len(x.pbldr)-1));
      left := left + len(x.pbldr);
      y(left to left+len(x.err)-1) := vectorify(x.err, y(left to left+len(x.err)-1));
    else
      y(left downto left-len(x.row)+1) := vectorify(x.row, y(left downto left-len(x.row)+1));
      left := left - len(x.row);
      y(left downto left-len(x.pbldr)+1) := vectorify(x.pbldr, y(left downto left-len(x.pbldr)+1));
      left := left - len(x.pbldr);
      y(left downto left-len(x.err)+1) := vectorify(x.err, y(left downto left-len(x.err)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_mngt_ort) return daq_mngt_ort is
    variable y: daq_mngt_ort;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.row := structify(x(left to left+len(y.row)-1), y.row);
      left := left + len(y.row);
      y.pbldr := structify(x(left to left+len(y.pbldr)-1), y.pbldr);
      left := left + len(y.pbldr);
      y.err := structify(x(left to left+len(y.err)-1), y.err);
    else
      y.row := structify(x(left downto left-len(y.row)+1), y.row);
      left := left - len(y.row);
      y.pbldr := structify(x(left downto left-len(y.pbldr)+1), y.pbldr);
      left := left - len(y.pbldr);
      y.err := structify(x(left downto left-len(y.err)+1), y.err);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_mngt_ort) return daq_mngt_ort is
  variable y: daq_mngt_ort;
  begin
    y.row := nullify(t.row);
    y.pbldr := nullify(t.pbldr);
    y.err := nullify(t.err);
    return y;
  end function nullify;

  function len(x: daq_mngt_ert) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.i);
    l := l + len(x.o);
    return l;
  end function len;
  function vectorify(x: daq_mngt_ert; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.i)-1) := vectorify(x.i, y(left to left+len(x.i)-1));
      left := left + len(x.i);
      y(left to left+len(x.o)-1) := vectorify(x.o, y(left to left+len(x.o)-1));
    else
      y(left downto left-len(x.i)+1) := vectorify(x.i, y(left downto left-len(x.i)+1));
      left := left - len(x.i);
      y(left downto left-len(x.o)+1) := vectorify(x.o, y(left downto left-len(x.o)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_mngt_ert) return daq_mngt_ert is
    variable y: daq_mngt_ert;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.i := structify(x(left to left+len(y.i)-1), y.i);
      left := left + len(y.i);
      y.o := structify(x(left to left+len(y.o)-1), y.o);
    else
      y.i := structify(x(left downto left-len(y.i)+1), y.i);
      left := left - len(y.i);
      y.o := structify(x(left downto left-len(y.o)+1), y.o);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_mngt_ert) return daq_mngt_ert is
  variable y: daq_mngt_ert;
  begin
    y.i := nullify(t.i);
    y.o := nullify(t.o);
    return y;
  end function nullify;

  function len(x: daq_algo_grt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.PIPELINES);
    l := l + len(x.BRANCH_STRUCT);
    l := l + len(x.COUNTER_WIDTH);
    return l;
  end function len;
  function vectorify(x: daq_algo_grt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.PIPELINES)-1) := vectorify(x.PIPELINES, y(left to left+len(x.PIPELINES)-1));
      left := left + len(x.PIPELINES);
      y(left to left+len(x.BRANCH_STRUCT)-1) := vectorify(x.BRANCH_STRUCT, y(left to left+len(x.BRANCH_STRUCT)-1));
      left := left + len(x.BRANCH_STRUCT);
      y(left to left+len(x.COUNTER_WIDTH)-1) := vectorify(x.COUNTER_WIDTH, y(left to left+len(x.COUNTER_WIDTH)-1));
    else
      y(left downto left-len(x.PIPELINES)+1) := vectorify(x.PIPELINES, y(left downto left-len(x.PIPELINES)+1));
      left := left - len(x.PIPELINES);
      y(left downto left-len(x.BRANCH_STRUCT)+1) := vectorify(x.BRANCH_STRUCT, y(left downto left-len(x.BRANCH_STRUCT)+1));
      left := left - len(x.BRANCH_STRUCT);
      y(left downto left-len(x.COUNTER_WIDTH)+1) := vectorify(x.COUNTER_WIDTH, y(left downto left-len(x.COUNTER_WIDTH)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_algo_grt) return daq_algo_grt is
    variable y: daq_algo_grt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.PIPELINES := structify(x(left to left+len(y.PIPELINES)-1), y.PIPELINES);
      left := left + len(y.PIPELINES);
      y.BRANCH_STRUCT := structify(x(left to left+len(y.BRANCH_STRUCT)-1), y.BRANCH_STRUCT);
      left := left + len(y.BRANCH_STRUCT);
      y.COUNTER_WIDTH := structify(x(left to left+len(y.COUNTER_WIDTH)-1), y.COUNTER_WIDTH);
    else
      y.PIPELINES := structify(x(left downto left-len(y.PIPELINES)+1), y.PIPELINES);
      left := left - len(y.PIPELINES);
      y.BRANCH_STRUCT := structify(x(left downto left-len(y.BRANCH_STRUCT)+1), y.BRANCH_STRUCT);
      left := left - len(y.BRANCH_STRUCT);
      y.COUNTER_WIDTH := structify(x(left downto left-len(y.COUNTER_WIDTH)+1), y.COUNTER_WIDTH);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_algo_grt) return daq_algo_grt is
  variable y: daq_algo_grt;
  begin
    y.PIPELINES := nullify(t.PIPELINES);
    y.BRANCH_STRUCT := nullify(t.BRANCH_STRUCT);
    y.COUNTER_WIDTH := nullify(t.COUNTER_WIDTH);
    return y;
  end function nullify;

  function len(x: daq_algo_irt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.sys);
    l := l + len(x.ttc);
    l := l + len(x.ctrl);
    l := l + len(x.branch);
    l := l + len(x.f2e);
    return l;
  end function len;
  function vectorify(x: daq_algo_irt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.sys)-1) := vectorify(x.sys, y(left to left+len(x.sys)-1));
      left := left + len(x.sys);
      y(left to left+len(x.ttc)-1) := vectorify(x.ttc, y(left to left+len(x.ttc)-1));
      left := left + len(x.ttc);
      y(left to left+len(x.ctrl)-1) := vectorify(x.ctrl, y(left to left+len(x.ctrl)-1));
      left := left + len(x.ctrl);
      y(left to left+len(x.branch)-1) := vectorify(x.branch, y(left to left+len(x.branch)-1));
      left := left + len(x.branch);
      y(left to left+len(x.f2e)-1) := vectorify(x.f2e, y(left to left+len(x.f2e)-1));
    else
      y(left downto left-len(x.sys)+1) := vectorify(x.sys, y(left downto left-len(x.sys)+1));
      left := left - len(x.sys);
      y(left downto left-len(x.ttc)+1) := vectorify(x.ttc, y(left downto left-len(x.ttc)+1));
      left := left - len(x.ttc);
      y(left downto left-len(x.ctrl)+1) := vectorify(x.ctrl, y(left downto left-len(x.ctrl)+1));
      left := left - len(x.ctrl);
      y(left downto left-len(x.branch)+1) := vectorify(x.branch, y(left downto left-len(x.branch)+1));
      left := left - len(x.branch);
      y(left downto left-len(x.f2e)+1) := vectorify(x.f2e, y(left downto left-len(x.f2e)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_algo_irt) return daq_algo_irt is
    variable y: daq_algo_irt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.sys := structify(x(left to left+len(y.sys)-1), y.sys);
      left := left + len(y.sys);
      y.ttc := structify(x(left to left+len(y.ttc)-1), y.ttc);
      left := left + len(y.ttc);
      y.ctrl := structify(x(left to left+len(y.ctrl)-1), y.ctrl);
      left := left + len(y.ctrl);
      y.branch := structify(x(left to left+len(y.branch)-1), y.branch);
      left := left + len(y.branch);
      y.f2e := structify(x(left to left+len(y.f2e)-1), y.f2e);
    else
      y.sys := structify(x(left downto left-len(y.sys)+1), y.sys);
      left := left - len(y.sys);
      y.ttc := structify(x(left downto left-len(y.ttc)+1), y.ttc);
      left := left - len(y.ttc);
      y.ctrl := structify(x(left downto left-len(y.ctrl)+1), y.ctrl);
      left := left - len(y.ctrl);
      y.branch := structify(x(left downto left-len(y.branch)+1), y.branch);
      left := left - len(y.branch);
      y.f2e := structify(x(left downto left-len(y.f2e)+1), y.f2e);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_algo_irt) return daq_algo_irt is
  variable y: daq_algo_irt;
  begin
    y.sys := nullify(t.sys);
    y.ttc := nullify(t.ttc);
    y.ctrl := nullify(t.ctrl);
    y.branch := nullify(t.branch);
    y.f2e := nullify(t.f2e);
    return y;
  end function nullify;

  function len(x: daq_algo_ort) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.status);
    l := l + len(x.f2e);
    return l;
  end function len;
  function vectorify(x: daq_algo_ort; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.status)-1) := vectorify(x.status, y(left to left+len(x.status)-1));
      left := left + len(x.status);
      y(left to left+len(x.f2e)-1) := vectorify(x.f2e, y(left to left+len(x.f2e)-1));
    else
      y(left downto left-len(x.status)+1) := vectorify(x.status, y(left downto left-len(x.status)+1));
      left := left - len(x.status);
      y(left downto left-len(x.f2e)+1) := vectorify(x.f2e, y(left downto left-len(x.f2e)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_algo_ort) return daq_algo_ort is
    variable y: daq_algo_ort;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.status := structify(x(left to left+len(y.status)-1), y.status);
      left := left + len(y.status);
      y.f2e := structify(x(left to left+len(y.f2e)-1), y.f2e);
    else
      y.status := structify(x(left downto left-len(y.status)+1), y.status);
      left := left - len(y.status);
      y.f2e := structify(x(left downto left-len(y.f2e)+1), y.f2e);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_algo_ort) return daq_algo_ort is
  variable y: daq_algo_ort;
  begin
    y.status := nullify(t.status);
    y.f2e := nullify(t.f2e);
    return y;
  end function nullify;

  function len(x: daq_algo_ert) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.i);
    l := l + len(x.o);
    return l;
  end function len;
  function vectorify(x: daq_algo_ert; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.i)-1) := vectorify(x.i, y(left to left+len(x.i)-1));
      left := left + len(x.i);
      y(left to left+len(x.o)-1) := vectorify(x.o, y(left to left+len(x.o)-1));
    else
      y(left downto left-len(x.i)+1) := vectorify(x.i, y(left downto left-len(x.i)+1));
      left := left - len(x.i);
      y(left downto left-len(x.o)+1) := vectorify(x.o, y(left downto left-len(x.o)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_algo_ert) return daq_algo_ert is
    variable y: daq_algo_ert;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.i := structify(x(left to left+len(y.i)-1), y.i);
      left := left + len(y.i);
      y.o := structify(x(left to left+len(y.o)-1), y.o);
    else
      y.i := structify(x(left downto left-len(y.i)+1), y.i);
      left := left - len(y.i);
      y.o := structify(x(left downto left-len(y.o)+1), y.o);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_algo_ert) return daq_algo_ert is
  variable y: daq_algo_ert;
  begin
    y.i := nullify(t.i);
    y.o := nullify(t.o);
    return y;
  end function nullify;

  function len(x: mfelix_to_top_at) return natural is
    variable l : natural := 0;
  begin
    l := x'length * len(x(x'left));
    return l;
  end function len;
  function vectorify(x: mfelix_to_top_at; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(b to a) := vectorify(x(i), y(b to a));
      end loop;
    else
      for i in x'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(a downto b) := vectorify(x(i), y(a downto b));
      end loop;
    end if;
    return y;
  end function vectorify;
  function structify(x: std_logic_vector; t: mfelix_to_top_at) return mfelix_to_top_at is
    variable y : mfelix_to_top_at;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function nullify(x: mfelix_to_top_at) return mfelix_to_top_at is
    variable y : mfelix_to_top_at;
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;

  function len(x: top_to_mfelix_at) return natural is
    variable l : natural := 0;
  begin
    l := x'length * len(x(x'left));
    return l;
  end function len;
  function vectorify(x: top_to_mfelix_at; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(b to a) := vectorify(x(i), y(b to a));
      end loop;
    else
      for i in x'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(a downto b) := vectorify(x(i), y(a downto b));
      end loop;
    end if;
    return y;
  end function vectorify;
  function structify(x: std_logic_vector; t: top_to_mfelix_at) return top_to_mfelix_at is
    variable y : top_to_mfelix_at;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function nullify(x: top_to_mfelix_at) return top_to_mfelix_at is
    variable y : top_to_mfelix_at;
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;

  function len(x: top_to_status_at) return natural is
    variable l : natural := 0;
  begin
    l := x'length * len(x(x'left));
    return l;
  end function len;
  function vectorify(x: top_to_status_at; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(b to a) := vectorify(x(i), y(b to a));
      end loop;
    else
      for i in x'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(a downto b) := vectorify(x(i), y(a downto b));
      end loop;
    end if;
    return y;
  end function vectorify;
  function structify(x: std_logic_vector; t: top_to_status_at) return top_to_status_at is
    variable y : top_to_status_at;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function nullify(x: top_to_status_at) return top_to_status_at is
    variable y : top_to_status_at;
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;

  function len(x: daq_top_grt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.PIPELINES);
    l := l + len(x.BRANCHES_STRUCT);
    l := l + len(x.COUNTER_WIDTH);
    return l;
  end function len;
  function vectorify(x: daq_top_grt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.PIPELINES)-1) := vectorify(x.PIPELINES, y(left to left+len(x.PIPELINES)-1));
      left := left + len(x.PIPELINES);
      y(left to left+len(x.BRANCHES_STRUCT)-1) := vectorify(x.BRANCHES_STRUCT, y(left to left+len(x.BRANCHES_STRUCT)-1));
      left := left + len(x.BRANCHES_STRUCT);
      y(left to left+len(x.COUNTER_WIDTH)-1) := vectorify(x.COUNTER_WIDTH, y(left to left+len(x.COUNTER_WIDTH)-1));
    else
      y(left downto left-len(x.PIPELINES)+1) := vectorify(x.PIPELINES, y(left downto left-len(x.PIPELINES)+1));
      left := left - len(x.PIPELINES);
      y(left downto left-len(x.BRANCHES_STRUCT)+1) := vectorify(x.BRANCHES_STRUCT, y(left downto left-len(x.BRANCHES_STRUCT)+1));
      left := left - len(x.BRANCHES_STRUCT);
      y(left downto left-len(x.COUNTER_WIDTH)+1) := vectorify(x.COUNTER_WIDTH, y(left downto left-len(x.COUNTER_WIDTH)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_top_grt) return daq_top_grt is
    variable y: daq_top_grt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.PIPELINES := structify(x(left to left+len(y.PIPELINES)-1), y.PIPELINES);
      left := left + len(y.PIPELINES);
      y.BRANCHES_STRUCT := structify(x(left to left+len(y.BRANCHES_STRUCT)-1), y.BRANCHES_STRUCT);
      left := left + len(y.BRANCHES_STRUCT);
      y.COUNTER_WIDTH := structify(x(left to left+len(y.COUNTER_WIDTH)-1), y.COUNTER_WIDTH);
    else
      y.PIPELINES := structify(x(left downto left-len(y.PIPELINES)+1), y.PIPELINES);
      left := left - len(y.PIPELINES);
      y.BRANCHES_STRUCT := structify(x(left downto left-len(y.BRANCHES_STRUCT)+1), y.BRANCHES_STRUCT);
      left := left - len(y.BRANCHES_STRUCT);
      y.COUNTER_WIDTH := structify(x(left downto left-len(y.COUNTER_WIDTH)+1), y.COUNTER_WIDTH);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_top_grt) return daq_top_grt is
  variable y: daq_top_grt;
  begin
    y.PIPELINES := nullify(t.PIPELINES);
    y.BRANCHES_STRUCT := nullify(t.BRANCHES_STRUCT);
    y.COUNTER_WIDTH := nullify(t.COUNTER_WIDTH);
    return y;
  end function nullify;

  function len(x: daq_top_irt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.sys);
    l := l + len(x.ttc);
    l := l + len(x.ctrl);
    l := l + len(x.branches);
    l := l + len(x.f2e_bus);
    return l;
  end function len;
  function vectorify(x: daq_top_irt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.sys)-1) := vectorify(x.sys, y(left to left+len(x.sys)-1));
      left := left + len(x.sys);
      y(left to left+len(x.ttc)-1) := vectorify(x.ttc, y(left to left+len(x.ttc)-1));
      left := left + len(x.ttc);
      y(left to left+len(x.ctrl)-1) := vectorify(x.ctrl, y(left to left+len(x.ctrl)-1));
      left := left + len(x.ctrl);
      y(left to left+len(x.branches)-1) := vectorify(x.branches, y(left to left+len(x.branches)-1));
      left := left + len(x.branches);
      y(left to left+len(x.f2e_bus)-1) := vectorify(x.f2e_bus, y(left to left+len(x.f2e_bus)-1));
    else
      y(left downto left-len(x.sys)+1) := vectorify(x.sys, y(left downto left-len(x.sys)+1));
      left := left - len(x.sys);
      y(left downto left-len(x.ttc)+1) := vectorify(x.ttc, y(left downto left-len(x.ttc)+1));
      left := left - len(x.ttc);
      y(left downto left-len(x.ctrl)+1) := vectorify(x.ctrl, y(left downto left-len(x.ctrl)+1));
      left := left - len(x.ctrl);
      y(left downto left-len(x.branches)+1) := vectorify(x.branches, y(left downto left-len(x.branches)+1));
      left := left - len(x.branches);
      y(left downto left-len(x.f2e_bus)+1) := vectorify(x.f2e_bus, y(left downto left-len(x.f2e_bus)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_top_irt) return daq_top_irt is
    variable y: daq_top_irt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.sys := structify(x(left to left+len(y.sys)-1), y.sys);
      left := left + len(y.sys);
      y.ttc := structify(x(left to left+len(y.ttc)-1), y.ttc);
      left := left + len(y.ttc);
      y.ctrl := structify(x(left to left+len(y.ctrl)-1), y.ctrl);
      left := left + len(y.ctrl);
      y.branches := structify(x(left to left+len(y.branches)-1), y.branches);
      left := left + len(y.branches);
      y.f2e_bus := structify(x(left to left+len(y.f2e_bus)-1), y.f2e_bus);
    else
      y.sys := structify(x(left downto left-len(y.sys)+1), y.sys);
      left := left - len(y.sys);
      y.ttc := structify(x(left downto left-len(y.ttc)+1), y.ttc);
      left := left - len(y.ttc);
      y.ctrl := structify(x(left downto left-len(y.ctrl)+1), y.ctrl);
      left := left - len(y.ctrl);
      y.branches := structify(x(left downto left-len(y.branches)+1), y.branches);
      left := left - len(y.branches);
      y.f2e_bus := structify(x(left downto left-len(y.f2e_bus)+1), y.f2e_bus);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_top_irt) return daq_top_irt is
  variable y: daq_top_irt;
  begin
    y.sys := nullify(t.sys);
    y.ttc := nullify(t.ttc);
    y.ctrl := nullify(t.ctrl);
    y.branches := nullify(t.branches);
    y.f2e_bus := nullify(t.f2e_bus);
    return y;
  end function nullify;

  function len(x: daq_top_ort) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.status_bus);
    l := l + len(x.f2e_bus);
    return l;
  end function len;
  function vectorify(x: daq_top_ort; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.status_bus)-1) := vectorify(x.status_bus, y(left to left+len(x.status_bus)-1));
      left := left + len(x.status_bus);
      y(left to left+len(x.f2e_bus)-1) := vectorify(x.f2e_bus, y(left to left+len(x.f2e_bus)-1));
    else
      y(left downto left-len(x.status_bus)+1) := vectorify(x.status_bus, y(left downto left-len(x.status_bus)+1));
      left := left - len(x.status_bus);
      y(left downto left-len(x.f2e_bus)+1) := vectorify(x.f2e_bus, y(left downto left-len(x.f2e_bus)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_top_ort) return daq_top_ort is
    variable y: daq_top_ort;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.status_bus := structify(x(left to left+len(y.status_bus)-1), y.status_bus);
      left := left + len(y.status_bus);
      y.f2e_bus := structify(x(left to left+len(y.f2e_bus)-1), y.f2e_bus);
    else
      y.status_bus := structify(x(left downto left-len(y.status_bus)+1), y.status_bus);
      left := left - len(y.status_bus);
      y.f2e_bus := structify(x(left downto left-len(y.f2e_bus)+1), y.f2e_bus);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_top_ort) return daq_top_ort is
  variable y: daq_top_ort;
  begin
    y.status_bus := nullify(t.status_bus);
    y.f2e_bus := nullify(t.f2e_bus);
    return y;
  end function nullify;

  function len(x: daq_top_ert) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.i);
    l := l + len(x.o);
    return l;
  end function len;
  function vectorify(x: daq_top_ert; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.i)-1) := vectorify(x.i, y(left to left+len(x.i)-1));
      left := left + len(x.i);
      y(left to left+len(x.o)-1) := vectorify(x.o, y(left to left+len(x.o)-1));
    else
      y(left downto left-len(x.i)+1) := vectorify(x.i, y(left downto left-len(x.i)+1));
      left := left - len(x.i);
      y(left downto left-len(x.o)+1) := vectorify(x.o, y(left downto left-len(x.o)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_top_ert) return daq_top_ert is
    variable y: daq_top_ert;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.i := structify(x(left to left+len(y.i)-1), y.i);
      left := left + len(y.i);
      y.o := structify(x(left to left+len(y.o)-1), y.o);
    else
      y.i := structify(x(left downto left-len(y.i)+1), y.i);
      left := left - len(y.i);
      y.o := structify(x(left downto left-len(y.o)+1), y.o);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_top_ert) return daq_top_ert is
  variable y: daq_top_ert;
  begin
    y.i := nullify(t.i);
    y.o := nullify(t.o);
    return y;
  end function nullify;

  function len(x: daq_usr_irt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.sys);
    l := l + len(x.ttc);
    l := l + len(x.ctrl);
    l := l + len(x.stream_0);
    l := l + len(x.stream_1);
    l := l + len(x.stream_2);
    l := l + len(x.stream_3);
    l := l + len(x.stream_4);
    l := l + len(x.stream_5);
    l := l + len(x.stream_6);
    l := l + len(x.stream_7);
    l := l + len(x.stream_8);
    l := l + len(x.f2e0);
    l := l + len(x.f2e1);
    return l;
  end function len;
  function vectorify(x: daq_usr_irt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.sys)-1) := vectorify(x.sys, y(left to left+len(x.sys)-1));
      left := left + len(x.sys);
      y(left to left+len(x.ttc)-1) := vectorify(x.ttc, y(left to left+len(x.ttc)-1));
      left := left + len(x.ttc);
      y(left to left+len(x.ctrl)-1) := vectorify(x.ctrl, y(left to left+len(x.ctrl)-1));
      left := left + len(x.ctrl);
      y(left to left+len(x.stream_0)-1) := vectorify(x.stream_0, y(left to left+len(x.stream_0)-1));
      left := left + len(x.stream_0);
      y(left to left+len(x.stream_1)-1) := vectorify(x.stream_1, y(left to left+len(x.stream_1)-1));
      left := left + len(x.stream_1);
      y(left to left+len(x.stream_2)-1) := vectorify(x.stream_2, y(left to left+len(x.stream_2)-1));
      left := left + len(x.stream_2);
      y(left to left+len(x.stream_3)-1) := vectorify(x.stream_3, y(left to left+len(x.stream_3)-1));
      left := left + len(x.stream_3);
      y(left to left+len(x.stream_4)-1) := vectorify(x.stream_4, y(left to left+len(x.stream_4)-1));
      left := left + len(x.stream_4);
      y(left to left+len(x.stream_5)-1) := vectorify(x.stream_5, y(left to left+len(x.stream_5)-1));
      left := left + len(x.stream_5);
      y(left to left+len(x.stream_6)-1) := vectorify(x.stream_6, y(left to left+len(x.stream_6)-1));
      left := left + len(x.stream_6);
      y(left to left+len(x.stream_7)-1) := vectorify(x.stream_7, y(left to left+len(x.stream_7)-1));
      left := left + len(x.stream_7);
      y(left to left+len(x.stream_8)-1) := vectorify(x.stream_8, y(left to left+len(x.stream_8)-1));
      left := left + len(x.stream_8);
      y(left to left+len(x.f2e0)-1) := vectorify(x.f2e0, y(left to left+len(x.f2e0)-1));
      left := left + len(x.f2e0);
      y(left to left+len(x.f2e1)-1) := vectorify(x.f2e1, y(left to left+len(x.f2e1)-1));
    else
      y(left downto left-len(x.sys)+1) := vectorify(x.sys, y(left downto left-len(x.sys)+1));
      left := left - len(x.sys);
      y(left downto left-len(x.ttc)+1) := vectorify(x.ttc, y(left downto left-len(x.ttc)+1));
      left := left - len(x.ttc);
      y(left downto left-len(x.ctrl)+1) := vectorify(x.ctrl, y(left downto left-len(x.ctrl)+1));
      left := left - len(x.ctrl);
      y(left downto left-len(x.stream_0)+1) := vectorify(x.stream_0, y(left downto left-len(x.stream_0)+1));
      left := left - len(x.stream_0);
      y(left downto left-len(x.stream_1)+1) := vectorify(x.stream_1, y(left downto left-len(x.stream_1)+1));
      left := left - len(x.stream_1);
      y(left downto left-len(x.stream_2)+1) := vectorify(x.stream_2, y(left downto left-len(x.stream_2)+1));
      left := left - len(x.stream_2);
      y(left downto left-len(x.stream_3)+1) := vectorify(x.stream_3, y(left downto left-len(x.stream_3)+1));
      left := left - len(x.stream_3);
      y(left downto left-len(x.stream_4)+1) := vectorify(x.stream_4, y(left downto left-len(x.stream_4)+1));
      left := left - len(x.stream_4);
      y(left downto left-len(x.stream_5)+1) := vectorify(x.stream_5, y(left downto left-len(x.stream_5)+1));
      left := left - len(x.stream_5);
      y(left downto left-len(x.stream_6)+1) := vectorify(x.stream_6, y(left downto left-len(x.stream_6)+1));
      left := left - len(x.stream_6);
      y(left downto left-len(x.stream_7)+1) := vectorify(x.stream_7, y(left downto left-len(x.stream_7)+1));
      left := left - len(x.stream_7);
      y(left downto left-len(x.stream_8)+1) := vectorify(x.stream_8, y(left downto left-len(x.stream_8)+1));
      left := left - len(x.stream_8);
      y(left downto left-len(x.f2e0)+1) := vectorify(x.f2e0, y(left downto left-len(x.f2e0)+1));
      left := left - len(x.f2e0);
      y(left downto left-len(x.f2e1)+1) := vectorify(x.f2e1, y(left downto left-len(x.f2e1)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_usr_irt) return daq_usr_irt is
    variable y: daq_usr_irt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.sys := structify(x(left to left+len(y.sys)-1), y.sys);
      left := left + len(y.sys);
      y.ttc := structify(x(left to left+len(y.ttc)-1), y.ttc);
      left := left + len(y.ttc);
      y.ctrl := structify(x(left to left+len(y.ctrl)-1), y.ctrl);
      left := left + len(y.ctrl);
      y.stream_0 := structify(x(left to left+len(y.stream_0)-1), y.stream_0);
      left := left + len(y.stream_0);
      y.stream_1 := structify(x(left to left+len(y.stream_1)-1), y.stream_1);
      left := left + len(y.stream_1);
      y.stream_2 := structify(x(left to left+len(y.stream_2)-1), y.stream_2);
      left := left + len(y.stream_2);
      y.stream_3 := structify(x(left to left+len(y.stream_3)-1), y.stream_3);
      left := left + len(y.stream_3);
      y.stream_4 := structify(x(left to left+len(y.stream_4)-1), y.stream_4);
      left := left + len(y.stream_4);
      y.stream_5 := structify(x(left to left+len(y.stream_5)-1), y.stream_5);
      left := left + len(y.stream_5);
      y.stream_6 := structify(x(left to left+len(y.stream_6)-1), y.stream_6);
      left := left + len(y.stream_6);
      y.stream_7 := structify(x(left to left+len(y.stream_7)-1), y.stream_7);
      left := left + len(y.stream_7);
      y.stream_8 := structify(x(left to left+len(y.stream_8)-1), y.stream_8);
      left := left + len(y.stream_8);
      y.f2e0 := structify(x(left to left+len(y.f2e0)-1), y.f2e0);
      left := left + len(y.f2e0);
      y.f2e1 := structify(x(left to left+len(y.f2e1)-1), y.f2e1);
    else
      y.sys := structify(x(left downto left-len(y.sys)+1), y.sys);
      left := left - len(y.sys);
      y.ttc := structify(x(left downto left-len(y.ttc)+1), y.ttc);
      left := left - len(y.ttc);
      y.ctrl := structify(x(left downto left-len(y.ctrl)+1), y.ctrl);
      left := left - len(y.ctrl);
      y.stream_0 := structify(x(left downto left-len(y.stream_0)+1), y.stream_0);
      left := left - len(y.stream_0);
      y.stream_1 := structify(x(left downto left-len(y.stream_1)+1), y.stream_1);
      left := left - len(y.stream_1);
      y.stream_2 := structify(x(left downto left-len(y.stream_2)+1), y.stream_2);
      left := left - len(y.stream_2);
      y.stream_3 := structify(x(left downto left-len(y.stream_3)+1), y.stream_3);
      left := left - len(y.stream_3);
      y.stream_4 := structify(x(left downto left-len(y.stream_4)+1), y.stream_4);
      left := left - len(y.stream_4);
      y.stream_5 := structify(x(left downto left-len(y.stream_5)+1), y.stream_5);
      left := left - len(y.stream_5);
      y.stream_6 := structify(x(left downto left-len(y.stream_6)+1), y.stream_6);
      left := left - len(y.stream_6);
      y.stream_7 := structify(x(left downto left-len(y.stream_7)+1), y.stream_7);
      left := left - len(y.stream_7);
      y.stream_8 := structify(x(left downto left-len(y.stream_8)+1), y.stream_8);
      left := left - len(y.stream_8);
      y.f2e0 := structify(x(left downto left-len(y.f2e0)+1), y.f2e0);
      left := left - len(y.f2e0);
      y.f2e1 := structify(x(left downto left-len(y.f2e1)+1), y.f2e1);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_usr_irt) return daq_usr_irt is
  variable y: daq_usr_irt;
  begin
    y.sys := nullify(t.sys);
    y.ttc := nullify(t.ttc);
    y.ctrl := nullify(t.ctrl);
    y.stream_0 := nullify(t.stream_0);
    y.stream_1 := nullify(t.stream_1);
    y.stream_2 := nullify(t.stream_2);
    y.stream_3 := nullify(t.stream_3);
    y.stream_4 := nullify(t.stream_4);
    y.stream_5 := nullify(t.stream_5);
    y.stream_6 := nullify(t.stream_6);
    y.stream_7 := nullify(t.stream_7);
    y.stream_8 := nullify(t.stream_8);
    y.f2e0 := nullify(t.f2e0);
    y.f2e1 := nullify(t.f2e1);
    return y;
  end function nullify;

  function len(x: daq_usr_ort) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.status0);
    l := l + len(x.status1);
    l := l + len(x.f2e0);
    l := l + len(x.f2e1);
    return l;
  end function len;
  function vectorify(x: daq_usr_ort; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.status0)-1) := vectorify(x.status0, y(left to left+len(x.status0)-1));
      left := left + len(x.status0);
      y(left to left+len(x.status1)-1) := vectorify(x.status1, y(left to left+len(x.status1)-1));
      left := left + len(x.status1);
      y(left to left+len(x.f2e0)-1) := vectorify(x.f2e0, y(left to left+len(x.f2e0)-1));
      left := left + len(x.f2e0);
      y(left to left+len(x.f2e1)-1) := vectorify(x.f2e1, y(left to left+len(x.f2e1)-1));
    else
      y(left downto left-len(x.status0)+1) := vectorify(x.status0, y(left downto left-len(x.status0)+1));
      left := left - len(x.status0);
      y(left downto left-len(x.status1)+1) := vectorify(x.status1, y(left downto left-len(x.status1)+1));
      left := left - len(x.status1);
      y(left downto left-len(x.f2e0)+1) := vectorify(x.f2e0, y(left downto left-len(x.f2e0)+1));
      left := left - len(x.f2e0);
      y(left downto left-len(x.f2e1)+1) := vectorify(x.f2e1, y(left downto left-len(x.f2e1)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_usr_ort) return daq_usr_ort is
    variable y: daq_usr_ort;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.status0 := structify(x(left to left+len(y.status0)-1), y.status0);
      left := left + len(y.status0);
      y.status1 := structify(x(left to left+len(y.status1)-1), y.status1);
      left := left + len(y.status1);
      y.f2e0 := structify(x(left to left+len(y.f2e0)-1), y.f2e0);
      left := left + len(y.f2e0);
      y.f2e1 := structify(x(left to left+len(y.f2e1)-1), y.f2e1);
    else
      y.status0 := structify(x(left downto left-len(y.status0)+1), y.status0);
      left := left - len(y.status0);
      y.status1 := structify(x(left downto left-len(y.status1)+1), y.status1);
      left := left - len(y.status1);
      y.f2e0 := structify(x(left downto left-len(y.f2e0)+1), y.f2e0);
      left := left - len(y.f2e0);
      y.f2e1 := structify(x(left downto left-len(y.f2e1)+1), y.f2e1);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_usr_ort) return daq_usr_ort is
  variable y: daq_usr_ort;
  begin
    y.status0 := nullify(t.status0);
    y.status1 := nullify(t.status1);
    y.f2e0 := nullify(t.f2e0);
    y.f2e1 := nullify(t.f2e1);
    return y;
  end function nullify;

  function len(x: daq_usr_ert) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.i);
    l := l + len(x.o);
    return l;
  end function len;
  function vectorify(x: daq_usr_ert; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.i)-1) := vectorify(x.i, y(left to left+len(x.i)-1));
      left := left + len(x.i);
      y(left to left+len(x.o)-1) := vectorify(x.o, y(left to left+len(x.o)-1));
    else
      y(left downto left-len(x.i)+1) := vectorify(x.i, y(left downto left-len(x.i)+1));
      left := left - len(x.i);
      y(left downto left-len(x.o)+1) := vectorify(x.o, y(left downto left-len(x.o)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: daq_usr_ert) return daq_usr_ert is
    variable y: daq_usr_ert;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.i := structify(x(left to left+len(y.i)-1), y.i);
      left := left + len(y.i);
      y.o := structify(x(left to left+len(y.o)-1), y.o);
    else
      y.i := structify(x(left downto left-len(y.i)+1), y.i);
      left := left - len(y.i);
      y.o := structify(x(left downto left-len(y.o)+1), y.o);
    end if;
    return y;
  end function structify;
  function nullify(t: daq_usr_ert) return daq_usr_ert is
  variable y: daq_usr_ert;
  begin
    y.i := nullify(t.i);
    y.o := nullify(t.o);
    return y;
  end function nullify;

end package body daq_defs;
