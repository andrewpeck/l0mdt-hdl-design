-- This file was auto-generated by YML2HDL toll.
-- https://gitlab.com/tcpaiva/yml2hdl

library ieee;

use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library ttc_def;

use ttc_def.ttc_defs.all;

library types_def;

use types_def.common_defs.all;

library daq_def;

use daq_def.daq_devel_defs.all;
use daq_def.daq_defs.all;

package daq_row_defs is

  type node_to_mngt_rt is record
    done : std_logic;
    nempty : std_logic;
    err : std_logic;
  end record node_to_mngt_rt;
  function len(x: node_to_mngt_rt) return natural;
  function vectorify(x: node_to_mngt_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: node_to_mngt_rt) return node_to_mngt_rt;
  function nullify(t: node_to_mngt_rt) return node_to_mngt_rt;

  type mngt_to_node_rt is record
    en : std_logic;
    rd_en : std_logic;
  end record mngt_to_node_rt;
  function len(x: mngt_to_node_rt) return natural;
  function vectorify(x: mngt_to_node_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: mngt_to_node_rt) return mngt_to_node_rt;
  function nullify(t: mngt_to_node_rt) return mngt_to_node_rt;

  type node_to_bconv_rt is record
    counter : forward_rt;
    payload : forward_rt;
  end record node_to_bconv_rt;
  function len(x: node_to_bconv_rt) return natural;
  function vectorify(x: node_to_bconv_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: node_to_bconv_rt) return node_to_bconv_rt;
  function nullify(t: node_to_bconv_rt) return node_to_bconv_rt;

  type bconv_to_node_rt is record
    counter : backward_rt;
    payload : backward_rt;
  end record bconv_to_node_rt;
  function len(x: bconv_to_node_rt) return natural;
  function vectorify(x: bconv_to_node_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: bconv_to_node_rt) return bconv_to_node_rt;
  function nullify(t: bconv_to_node_rt) return bconv_to_node_rt;

  type bconv_to_pbldr_rt is record
    counter : forward_rt;
    payload : forward_rt;
  end record bconv_to_pbldr_rt;
  function len(x: bconv_to_pbldr_rt) return natural;
  function vectorify(x: bconv_to_pbldr_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: bconv_to_pbldr_rt) return bconv_to_pbldr_rt;
  function nullify(t: bconv_to_pbldr_rt) return bconv_to_pbldr_rt;

  type pbldr_to_bconv_rt is record
    counter : backward_rt;
    payload : backward_rt;
  end record pbldr_to_bconv_rt;
  function len(x: pbldr_to_bconv_rt) return natural;
  function vectorify(x: pbldr_to_bconv_rt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: pbldr_to_bconv_rt) return pbldr_to_bconv_rt;
  function nullify(t: pbldr_to_bconv_rt) return pbldr_to_bconv_rt;

  type node_ort is record
    mngt : node_to_mngt_rt;
    bconv : node_to_bconv_rt;
  end record node_ort;
  function len(x: node_ort) return natural;
  function vectorify(x: node_ort; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: node_ort) return node_ort;
  function nullify(t: node_ort) return node_ort;

  subtype node_ovt is std_logic_vector(89-1 downto 0);

  type dnode_grt is record
    DATA_LEN : natural;
    COUNTER_LEN : natural;
  end record dnode_grt;
  function len(x: dnode_grt) return natural;
  function vectorify(x: dnode_grt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: dnode_grt) return dnode_grt;
  function nullify(t: dnode_grt) return dnode_grt;

  type dnode_irt is record
    sys : daq_sys_rt;
    mngt : mngt_to_node_rt;
    req : req_to_row_common_rt;
    stream : daq_stream_rt;
    bconv : bconv_to_node_rt;
  end record dnode_irt;
  function len(x: dnode_irt) return natural;
  function vectorify(x: dnode_irt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: dnode_irt) return dnode_irt;
  function nullify(t: dnode_irt) return dnode_irt;

  type dnode_ert is record
    i : dnode_irt;
    o : node_ort;
  end record dnode_ert;
  function len(x: dnode_ert) return natural;
  function vectorify(x: dnode_ert; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: dnode_ert) return dnode_ert;
  function nullify(t: dnode_ert) return dnode_ert;

  subtype dnode_ivt is std_logic_vector(86-1 downto 0);

  type hnode_grt is record
    COUNTER_LEN : natural;
  end record hnode_grt;
  function len(x: hnode_grt) return natural;
  function vectorify(x: hnode_grt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: hnode_grt) return hnode_grt;
  function nullify(t: hnode_grt) return hnode_grt;

  type hnode_irt is record
    sys : daq_sys_rt;
    mngt : mngt_to_node_rt;
    req : req_to_row_rt;
    bconv : bconv_to_node_rt;
  end record hnode_irt;
  function len(x: hnode_irt) return natural;
  function vectorify(x: hnode_irt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: hnode_irt) return hnode_irt;
  function nullify(t: hnode_irt) return hnode_irt;

  type hnode_ert is record
    i : hnode_irt;
    o : node_ort;
  end record hnode_ert;
  function len(x: hnode_ert) return natural;
  function vectorify(x: hnode_ert; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: hnode_ert) return hnode_ert;
  function nullify(t: hnode_ert) return hnode_ert;

  subtype hnode_ivt is std_logic_vector(123-1 downto 0);

  type bconv_grt is record
    INPUT_DATA_LEN : natural;
    OUTPUT_DATA_LEN : natural;
  end record bconv_grt;
  function len(x: bconv_grt) return natural;
  function vectorify(x: bconv_grt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: bconv_grt) return bconv_grt;
  function nullify(t: bconv_grt) return bconv_grt;

  type bconv_irt is record
    sys : daq_sys_rt;
    src : forward_rt;
    dst : backward_rt;
  end record bconv_irt;
  function len(x: bconv_irt) return natural;
  function vectorify(x: bconv_irt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: bconv_irt) return bconv_irt;
  function nullify(t: bconv_irt) return bconv_irt;

  type bconv_ort is record
    src : backward_rt;
    dst : forward_rt;
  end record bconv_ort;
  function len(x: bconv_ort) return natural;
  function vectorify(x: bconv_ort; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: bconv_ort) return bconv_ort;
  function nullify(t: bconv_ort) return bconv_ort;

  type bconv_ert is record
    i : bconv_irt;
    o : bconv_ort;
  end record bconv_ert;
  function len(x: bconv_ert) return natural;
  function vectorify(x: bconv_ert; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: bconv_ert) return bconv_ert;
  function nullify(t: bconv_ert) return bconv_ert;

  subtype bconv_ivt is std_logic_vector(46-1 downto 0);

  subtype bconv_ovt is std_logic_vector(44-1 downto 0);

  type hub_grt is record
    DATA_LEN : natural;
  end record hub_grt;
  function len(x: hub_grt) return natural;
  function vectorify(x: hub_grt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: hub_grt) return hub_grt;
  function nullify(t: hub_grt) return hub_grt;

  type hub_irt is record
    cnt : forward_rt;
    pld : forward_rt;
    dst : backward_rt;
  end record hub_irt;
  function len(x: hub_irt) return natural;
  function vectorify(x: hub_irt; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: hub_irt) return hub_irt;
  function nullify(t: hub_irt) return hub_irt;

  type hub_ort is record
    cnt : backward_rt;
    pld : backward_rt;
    dst : forward_rt;
  end record hub_ort;
  function len(x: hub_ort) return natural;
  function vectorify(x: hub_ort; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: hub_ort) return hub_ort;
  function nullify(t: hub_ort) return hub_ort;

  type hub_ert is record
    i : hub_irt;
    o : hub_ort;
  end record hub_ert;
  function len(x: hub_ert) return natural;
  function vectorify(x: hub_ert; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: hub_ert) return hub_ert;
  function nullify(t: hub_ert) return hub_ert;

  subtype hub_ivt is std_logic_vector(87-1 downto 0);

  subtype hub_ovt is std_logic_vector(45-1 downto 0);

end package daq_row_defs;

------------------------------------------------------------

package body daq_row_defs is

  function len(x: node_to_mngt_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.done);
    l := l + len(x.nempty);
    l := l + len(x.err);
    return l;
  end function len;
  function vectorify(x: node_to_mngt_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.done)-1) := vectorify(x.done, y(left to left+len(x.done)-1));
      left := left + len(x.done);
      y(left to left+len(x.nempty)-1) := vectorify(x.nempty, y(left to left+len(x.nempty)-1));
      left := left + len(x.nempty);
      y(left to left+len(x.err)-1) := vectorify(x.err, y(left to left+len(x.err)-1));
    else
      y(left downto left-len(x.done)+1) := vectorify(x.done, y(left downto left-len(x.done)+1));
      left := left - len(x.done);
      y(left downto left-len(x.nempty)+1) := vectorify(x.nempty, y(left downto left-len(x.nempty)+1));
      left := left - len(x.nempty);
      y(left downto left-len(x.err)+1) := vectorify(x.err, y(left downto left-len(x.err)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: node_to_mngt_rt) return node_to_mngt_rt is
    variable y: node_to_mngt_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.done := structify(x(left to left+len(y.done)-1), y.done);
      left := left + len(y.done);
      y.nempty := structify(x(left to left+len(y.nempty)-1), y.nempty);
      left := left + len(y.nempty);
      y.err := structify(x(left to left+len(y.err)-1), y.err);
    else
      y.done := structify(x(left downto left-len(y.done)+1), y.done);
      left := left - len(y.done);
      y.nempty := structify(x(left downto left-len(y.nempty)+1), y.nempty);
      left := left - len(y.nempty);
      y.err := structify(x(left downto left-len(y.err)+1), y.err);
    end if;
    return y;
  end function structify;
  function nullify(t: node_to_mngt_rt) return node_to_mngt_rt is
  variable y: node_to_mngt_rt;
  begin
    y.done := nullify(t.done);
    y.nempty := nullify(t.nempty);
    y.err := nullify(t.err);
    return y;
  end function nullify;

  function len(x: mngt_to_node_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.en);
    l := l + len(x.rd_en);
    return l;
  end function len;
  function vectorify(x: mngt_to_node_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.en)-1) := vectorify(x.en, y(left to left+len(x.en)-1));
      left := left + len(x.en);
      y(left to left+len(x.rd_en)-1) := vectorify(x.rd_en, y(left to left+len(x.rd_en)-1));
    else
      y(left downto left-len(x.en)+1) := vectorify(x.en, y(left downto left-len(x.en)+1));
      left := left - len(x.en);
      y(left downto left-len(x.rd_en)+1) := vectorify(x.rd_en, y(left downto left-len(x.rd_en)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: mngt_to_node_rt) return mngt_to_node_rt is
    variable y: mngt_to_node_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.en := structify(x(left to left+len(y.en)-1), y.en);
      left := left + len(y.en);
      y.rd_en := structify(x(left to left+len(y.rd_en)-1), y.rd_en);
    else
      y.en := structify(x(left downto left-len(y.en)+1), y.en);
      left := left - len(y.en);
      y.rd_en := structify(x(left downto left-len(y.rd_en)+1), y.rd_en);
    end if;
    return y;
  end function structify;
  function nullify(t: mngt_to_node_rt) return mngt_to_node_rt is
  variable y: mngt_to_node_rt;
  begin
    y.en := nullify(t.en);
    y.rd_en := nullify(t.rd_en);
    return y;
  end function nullify;

  function len(x: node_to_bconv_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.counter);
    l := l + len(x.payload);
    return l;
  end function len;
  function vectorify(x: node_to_bconv_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.counter)-1) := vectorify(x.counter, y(left to left+len(x.counter)-1));
      left := left + len(x.counter);
      y(left to left+len(x.payload)-1) := vectorify(x.payload, y(left to left+len(x.payload)-1));
    else
      y(left downto left-len(x.counter)+1) := vectorify(x.counter, y(left downto left-len(x.counter)+1));
      left := left - len(x.counter);
      y(left downto left-len(x.payload)+1) := vectorify(x.payload, y(left downto left-len(x.payload)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: node_to_bconv_rt) return node_to_bconv_rt is
    variable y: node_to_bconv_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.counter := structify(x(left to left+len(y.counter)-1), y.counter);
      left := left + len(y.counter);
      y.payload := structify(x(left to left+len(y.payload)-1), y.payload);
    else
      y.counter := structify(x(left downto left-len(y.counter)+1), y.counter);
      left := left - len(y.counter);
      y.payload := structify(x(left downto left-len(y.payload)+1), y.payload);
    end if;
    return y;
  end function structify;
  function nullify(t: node_to_bconv_rt) return node_to_bconv_rt is
  variable y: node_to_bconv_rt;
  begin
    y.counter := nullify(t.counter);
    y.payload := nullify(t.payload);
    return y;
  end function nullify;

  function len(x: bconv_to_node_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.counter);
    l := l + len(x.payload);
    return l;
  end function len;
  function vectorify(x: bconv_to_node_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.counter)-1) := vectorify(x.counter, y(left to left+len(x.counter)-1));
      left := left + len(x.counter);
      y(left to left+len(x.payload)-1) := vectorify(x.payload, y(left to left+len(x.payload)-1));
    else
      y(left downto left-len(x.counter)+1) := vectorify(x.counter, y(left downto left-len(x.counter)+1));
      left := left - len(x.counter);
      y(left downto left-len(x.payload)+1) := vectorify(x.payload, y(left downto left-len(x.payload)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: bconv_to_node_rt) return bconv_to_node_rt is
    variable y: bconv_to_node_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.counter := structify(x(left to left+len(y.counter)-1), y.counter);
      left := left + len(y.counter);
      y.payload := structify(x(left to left+len(y.payload)-1), y.payload);
    else
      y.counter := structify(x(left downto left-len(y.counter)+1), y.counter);
      left := left - len(y.counter);
      y.payload := structify(x(left downto left-len(y.payload)+1), y.payload);
    end if;
    return y;
  end function structify;
  function nullify(t: bconv_to_node_rt) return bconv_to_node_rt is
  variable y: bconv_to_node_rt;
  begin
    y.counter := nullify(t.counter);
    y.payload := nullify(t.payload);
    return y;
  end function nullify;

  function len(x: bconv_to_pbldr_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.counter);
    l := l + len(x.payload);
    return l;
  end function len;
  function vectorify(x: bconv_to_pbldr_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.counter)-1) := vectorify(x.counter, y(left to left+len(x.counter)-1));
      left := left + len(x.counter);
      y(left to left+len(x.payload)-1) := vectorify(x.payload, y(left to left+len(x.payload)-1));
    else
      y(left downto left-len(x.counter)+1) := vectorify(x.counter, y(left downto left-len(x.counter)+1));
      left := left - len(x.counter);
      y(left downto left-len(x.payload)+1) := vectorify(x.payload, y(left downto left-len(x.payload)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: bconv_to_pbldr_rt) return bconv_to_pbldr_rt is
    variable y: bconv_to_pbldr_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.counter := structify(x(left to left+len(y.counter)-1), y.counter);
      left := left + len(y.counter);
      y.payload := structify(x(left to left+len(y.payload)-1), y.payload);
    else
      y.counter := structify(x(left downto left-len(y.counter)+1), y.counter);
      left := left - len(y.counter);
      y.payload := structify(x(left downto left-len(y.payload)+1), y.payload);
    end if;
    return y;
  end function structify;
  function nullify(t: bconv_to_pbldr_rt) return bconv_to_pbldr_rt is
  variable y: bconv_to_pbldr_rt;
  begin
    y.counter := nullify(t.counter);
    y.payload := nullify(t.payload);
    return y;
  end function nullify;

  function len(x: pbldr_to_bconv_rt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.counter);
    l := l + len(x.payload);
    return l;
  end function len;
  function vectorify(x: pbldr_to_bconv_rt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.counter)-1) := vectorify(x.counter, y(left to left+len(x.counter)-1));
      left := left + len(x.counter);
      y(left to left+len(x.payload)-1) := vectorify(x.payload, y(left to left+len(x.payload)-1));
    else
      y(left downto left-len(x.counter)+1) := vectorify(x.counter, y(left downto left-len(x.counter)+1));
      left := left - len(x.counter);
      y(left downto left-len(x.payload)+1) := vectorify(x.payload, y(left downto left-len(x.payload)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: pbldr_to_bconv_rt) return pbldr_to_bconv_rt is
    variable y: pbldr_to_bconv_rt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.counter := structify(x(left to left+len(y.counter)-1), y.counter);
      left := left + len(y.counter);
      y.payload := structify(x(left to left+len(y.payload)-1), y.payload);
    else
      y.counter := structify(x(left downto left-len(y.counter)+1), y.counter);
      left := left - len(y.counter);
      y.payload := structify(x(left downto left-len(y.payload)+1), y.payload);
    end if;
    return y;
  end function structify;
  function nullify(t: pbldr_to_bconv_rt) return pbldr_to_bconv_rt is
  variable y: pbldr_to_bconv_rt;
  begin
    y.counter := nullify(t.counter);
    y.payload := nullify(t.payload);
    return y;
  end function nullify;

  function len(x: node_ort) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.mngt);
    l := l + len(x.bconv);
    return l;
  end function len;
  function vectorify(x: node_ort; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.mngt)-1) := vectorify(x.mngt, y(left to left+len(x.mngt)-1));
      left := left + len(x.mngt);
      y(left to left+len(x.bconv)-1) := vectorify(x.bconv, y(left to left+len(x.bconv)-1));
    else
      y(left downto left-len(x.mngt)+1) := vectorify(x.mngt, y(left downto left-len(x.mngt)+1));
      left := left - len(x.mngt);
      y(left downto left-len(x.bconv)+1) := vectorify(x.bconv, y(left downto left-len(x.bconv)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: node_ort) return node_ort is
    variable y: node_ort;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.mngt := structify(x(left to left+len(y.mngt)-1), y.mngt);
      left := left + len(y.mngt);
      y.bconv := structify(x(left to left+len(y.bconv)-1), y.bconv);
    else
      y.mngt := structify(x(left downto left-len(y.mngt)+1), y.mngt);
      left := left - len(y.mngt);
      y.bconv := structify(x(left downto left-len(y.bconv)+1), y.bconv);
    end if;
    return y;
  end function structify;
  function nullify(t: node_ort) return node_ort is
  variable y: node_ort;
  begin
    y.mngt := nullify(t.mngt);
    y.bconv := nullify(t.bconv);
    return y;
  end function nullify;

  function len(x: dnode_grt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.DATA_LEN);
    l := l + len(x.COUNTER_LEN);
    return l;
  end function len;
  function vectorify(x: dnode_grt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.DATA_LEN)-1) := vectorify(x.DATA_LEN, y(left to left+len(x.DATA_LEN)-1));
      left := left + len(x.DATA_LEN);
      y(left to left+len(x.COUNTER_LEN)-1) := vectorify(x.COUNTER_LEN, y(left to left+len(x.COUNTER_LEN)-1));
    else
      y(left downto left-len(x.DATA_LEN)+1) := vectorify(x.DATA_LEN, y(left downto left-len(x.DATA_LEN)+1));
      left := left - len(x.DATA_LEN);
      y(left downto left-len(x.COUNTER_LEN)+1) := vectorify(x.COUNTER_LEN, y(left downto left-len(x.COUNTER_LEN)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: dnode_grt) return dnode_grt is
    variable y: dnode_grt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.DATA_LEN := structify(x(left to left+len(y.DATA_LEN)-1), y.DATA_LEN);
      left := left + len(y.DATA_LEN);
      y.COUNTER_LEN := structify(x(left to left+len(y.COUNTER_LEN)-1), y.COUNTER_LEN);
    else
      y.DATA_LEN := structify(x(left downto left-len(y.DATA_LEN)+1), y.DATA_LEN);
      left := left - len(y.DATA_LEN);
      y.COUNTER_LEN := structify(x(left downto left-len(y.COUNTER_LEN)+1), y.COUNTER_LEN);
    end if;
    return y;
  end function structify;
  function nullify(t: dnode_grt) return dnode_grt is
  variable y: dnode_grt;
  begin
    y.DATA_LEN := nullify(t.DATA_LEN);
    y.COUNTER_LEN := nullify(t.COUNTER_LEN);
    return y;
  end function nullify;

  function len(x: dnode_irt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.sys);
    l := l + len(x.mngt);
    l := l + len(x.req);
    l := l + len(x.stream);
    l := l + len(x.bconv);
    return l;
  end function len;
  function vectorify(x: dnode_irt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.sys)-1) := vectorify(x.sys, y(left to left+len(x.sys)-1));
      left := left + len(x.sys);
      y(left to left+len(x.mngt)-1) := vectorify(x.mngt, y(left to left+len(x.mngt)-1));
      left := left + len(x.mngt);
      y(left to left+len(x.req)-1) := vectorify(x.req, y(left to left+len(x.req)-1));
      left := left + len(x.req);
      y(left to left+len(x.stream)-1) := vectorify(x.stream, y(left to left+len(x.stream)-1));
      left := left + len(x.stream);
      y(left to left+len(x.bconv)-1) := vectorify(x.bconv, y(left to left+len(x.bconv)-1));
    else
      y(left downto left-len(x.sys)+1) := vectorify(x.sys, y(left downto left-len(x.sys)+1));
      left := left - len(x.sys);
      y(left downto left-len(x.mngt)+1) := vectorify(x.mngt, y(left downto left-len(x.mngt)+1));
      left := left - len(x.mngt);
      y(left downto left-len(x.req)+1) := vectorify(x.req, y(left downto left-len(x.req)+1));
      left := left - len(x.req);
      y(left downto left-len(x.stream)+1) := vectorify(x.stream, y(left downto left-len(x.stream)+1));
      left := left - len(x.stream);
      y(left downto left-len(x.bconv)+1) := vectorify(x.bconv, y(left downto left-len(x.bconv)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: dnode_irt) return dnode_irt is
    variable y: dnode_irt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.sys := structify(x(left to left+len(y.sys)-1), y.sys);
      left := left + len(y.sys);
      y.mngt := structify(x(left to left+len(y.mngt)-1), y.mngt);
      left := left + len(y.mngt);
      y.req := structify(x(left to left+len(y.req)-1), y.req);
      left := left + len(y.req);
      y.stream := structify(x(left to left+len(y.stream)-1), y.stream);
      left := left + len(y.stream);
      y.bconv := structify(x(left to left+len(y.bconv)-1), y.bconv);
    else
      y.sys := structify(x(left downto left-len(y.sys)+1), y.sys);
      left := left - len(y.sys);
      y.mngt := structify(x(left downto left-len(y.mngt)+1), y.mngt);
      left := left - len(y.mngt);
      y.req := structify(x(left downto left-len(y.req)+1), y.req);
      left := left - len(y.req);
      y.stream := structify(x(left downto left-len(y.stream)+1), y.stream);
      left := left - len(y.stream);
      y.bconv := structify(x(left downto left-len(y.bconv)+1), y.bconv);
    end if;
    return y;
  end function structify;
  function nullify(t: dnode_irt) return dnode_irt is
  variable y: dnode_irt;
  begin
    y.sys := nullify(t.sys);
    y.mngt := nullify(t.mngt);
    y.req := nullify(t.req);
    y.stream := nullify(t.stream);
    y.bconv := nullify(t.bconv);
    return y;
  end function nullify;

  function len(x: dnode_ert) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.i);
    l := l + len(x.o);
    return l;
  end function len;
  function vectorify(x: dnode_ert; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.i)-1) := vectorify(x.i, y(left to left+len(x.i)-1));
      left := left + len(x.i);
      y(left to left+len(x.o)-1) := vectorify(x.o, y(left to left+len(x.o)-1));
    else
      y(left downto left-len(x.i)+1) := vectorify(x.i, y(left downto left-len(x.i)+1));
      left := left - len(x.i);
      y(left downto left-len(x.o)+1) := vectorify(x.o, y(left downto left-len(x.o)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: dnode_ert) return dnode_ert is
    variable y: dnode_ert;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.i := structify(x(left to left+len(y.i)-1), y.i);
      left := left + len(y.i);
      y.o := structify(x(left to left+len(y.o)-1), y.o);
    else
      y.i := structify(x(left downto left-len(y.i)+1), y.i);
      left := left - len(y.i);
      y.o := structify(x(left downto left-len(y.o)+1), y.o);
    end if;
    return y;
  end function structify;
  function nullify(t: dnode_ert) return dnode_ert is
  variable y: dnode_ert;
  begin
    y.i := nullify(t.i);
    y.o := nullify(t.o);
    return y;
  end function nullify;

  function len(x: hnode_grt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.COUNTER_LEN);
    return l;
  end function len;
  function vectorify(x: hnode_grt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.COUNTER_LEN)-1) := vectorify(x.COUNTER_LEN, y(left to left+len(x.COUNTER_LEN)-1));
    else
      y(left downto left-len(x.COUNTER_LEN)+1) := vectorify(x.COUNTER_LEN, y(left downto left-len(x.COUNTER_LEN)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: hnode_grt) return hnode_grt is
    variable y: hnode_grt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.COUNTER_LEN := structify(x(left to left+len(y.COUNTER_LEN)-1), y.COUNTER_LEN);
    else
      y.COUNTER_LEN := structify(x(left downto left-len(y.COUNTER_LEN)+1), y.COUNTER_LEN);
    end if;
    return y;
  end function structify;
  function nullify(t: hnode_grt) return hnode_grt is
  variable y: hnode_grt;
  begin
    y.COUNTER_LEN := nullify(t.COUNTER_LEN);
    return y;
  end function nullify;

  function len(x: hnode_irt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.sys);
    l := l + len(x.mngt);
    l := l + len(x.req);
    l := l + len(x.bconv);
    return l;
  end function len;
  function vectorify(x: hnode_irt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.sys)-1) := vectorify(x.sys, y(left to left+len(x.sys)-1));
      left := left + len(x.sys);
      y(left to left+len(x.mngt)-1) := vectorify(x.mngt, y(left to left+len(x.mngt)-1));
      left := left + len(x.mngt);
      y(left to left+len(x.req)-1) := vectorify(x.req, y(left to left+len(x.req)-1));
      left := left + len(x.req);
      y(left to left+len(x.bconv)-1) := vectorify(x.bconv, y(left to left+len(x.bconv)-1));
    else
      y(left downto left-len(x.sys)+1) := vectorify(x.sys, y(left downto left-len(x.sys)+1));
      left := left - len(x.sys);
      y(left downto left-len(x.mngt)+1) := vectorify(x.mngt, y(left downto left-len(x.mngt)+1));
      left := left - len(x.mngt);
      y(left downto left-len(x.req)+1) := vectorify(x.req, y(left downto left-len(x.req)+1));
      left := left - len(x.req);
      y(left downto left-len(x.bconv)+1) := vectorify(x.bconv, y(left downto left-len(x.bconv)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: hnode_irt) return hnode_irt is
    variable y: hnode_irt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.sys := structify(x(left to left+len(y.sys)-1), y.sys);
      left := left + len(y.sys);
      y.mngt := structify(x(left to left+len(y.mngt)-1), y.mngt);
      left := left + len(y.mngt);
      y.req := structify(x(left to left+len(y.req)-1), y.req);
      left := left + len(y.req);
      y.bconv := structify(x(left to left+len(y.bconv)-1), y.bconv);
    else
      y.sys := structify(x(left downto left-len(y.sys)+1), y.sys);
      left := left - len(y.sys);
      y.mngt := structify(x(left downto left-len(y.mngt)+1), y.mngt);
      left := left - len(y.mngt);
      y.req := structify(x(left downto left-len(y.req)+1), y.req);
      left := left - len(y.req);
      y.bconv := structify(x(left downto left-len(y.bconv)+1), y.bconv);
    end if;
    return y;
  end function structify;
  function nullify(t: hnode_irt) return hnode_irt is
  variable y: hnode_irt;
  begin
    y.sys := nullify(t.sys);
    y.mngt := nullify(t.mngt);
    y.req := nullify(t.req);
    y.bconv := nullify(t.bconv);
    return y;
  end function nullify;

  function len(x: hnode_ert) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.i);
    l := l + len(x.o);
    return l;
  end function len;
  function vectorify(x: hnode_ert; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.i)-1) := vectorify(x.i, y(left to left+len(x.i)-1));
      left := left + len(x.i);
      y(left to left+len(x.o)-1) := vectorify(x.o, y(left to left+len(x.o)-1));
    else
      y(left downto left-len(x.i)+1) := vectorify(x.i, y(left downto left-len(x.i)+1));
      left := left - len(x.i);
      y(left downto left-len(x.o)+1) := vectorify(x.o, y(left downto left-len(x.o)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: hnode_ert) return hnode_ert is
    variable y: hnode_ert;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.i := structify(x(left to left+len(y.i)-1), y.i);
      left := left + len(y.i);
      y.o := structify(x(left to left+len(y.o)-1), y.o);
    else
      y.i := structify(x(left downto left-len(y.i)+1), y.i);
      left := left - len(y.i);
      y.o := structify(x(left downto left-len(y.o)+1), y.o);
    end if;
    return y;
  end function structify;
  function nullify(t: hnode_ert) return hnode_ert is
  variable y: hnode_ert;
  begin
    y.i := nullify(t.i);
    y.o := nullify(t.o);
    return y;
  end function nullify;

  function len(x: bconv_grt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.INPUT_DATA_LEN);
    l := l + len(x.OUTPUT_DATA_LEN);
    return l;
  end function len;
  function vectorify(x: bconv_grt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.INPUT_DATA_LEN)-1) := vectorify(x.INPUT_DATA_LEN, y(left to left+len(x.INPUT_DATA_LEN)-1));
      left := left + len(x.INPUT_DATA_LEN);
      y(left to left+len(x.OUTPUT_DATA_LEN)-1) := vectorify(x.OUTPUT_DATA_LEN, y(left to left+len(x.OUTPUT_DATA_LEN)-1));
    else
      y(left downto left-len(x.INPUT_DATA_LEN)+1) := vectorify(x.INPUT_DATA_LEN, y(left downto left-len(x.INPUT_DATA_LEN)+1));
      left := left - len(x.INPUT_DATA_LEN);
      y(left downto left-len(x.OUTPUT_DATA_LEN)+1) := vectorify(x.OUTPUT_DATA_LEN, y(left downto left-len(x.OUTPUT_DATA_LEN)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: bconv_grt) return bconv_grt is
    variable y: bconv_grt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.INPUT_DATA_LEN := structify(x(left to left+len(y.INPUT_DATA_LEN)-1), y.INPUT_DATA_LEN);
      left := left + len(y.INPUT_DATA_LEN);
      y.OUTPUT_DATA_LEN := structify(x(left to left+len(y.OUTPUT_DATA_LEN)-1), y.OUTPUT_DATA_LEN);
    else
      y.INPUT_DATA_LEN := structify(x(left downto left-len(y.INPUT_DATA_LEN)+1), y.INPUT_DATA_LEN);
      left := left - len(y.INPUT_DATA_LEN);
      y.OUTPUT_DATA_LEN := structify(x(left downto left-len(y.OUTPUT_DATA_LEN)+1), y.OUTPUT_DATA_LEN);
    end if;
    return y;
  end function structify;
  function nullify(t: bconv_grt) return bconv_grt is
  variable y: bconv_grt;
  begin
    y.INPUT_DATA_LEN := nullify(t.INPUT_DATA_LEN);
    y.OUTPUT_DATA_LEN := nullify(t.OUTPUT_DATA_LEN);
    return y;
  end function nullify;

  function len(x: bconv_irt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.sys);
    l := l + len(x.src);
    l := l + len(x.dst);
    return l;
  end function len;
  function vectorify(x: bconv_irt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.sys)-1) := vectorify(x.sys, y(left to left+len(x.sys)-1));
      left := left + len(x.sys);
      y(left to left+len(x.src)-1) := vectorify(x.src, y(left to left+len(x.src)-1));
      left := left + len(x.src);
      y(left to left+len(x.dst)-1) := vectorify(x.dst, y(left to left+len(x.dst)-1));
    else
      y(left downto left-len(x.sys)+1) := vectorify(x.sys, y(left downto left-len(x.sys)+1));
      left := left - len(x.sys);
      y(left downto left-len(x.src)+1) := vectorify(x.src, y(left downto left-len(x.src)+1));
      left := left - len(x.src);
      y(left downto left-len(x.dst)+1) := vectorify(x.dst, y(left downto left-len(x.dst)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: bconv_irt) return bconv_irt is
    variable y: bconv_irt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.sys := structify(x(left to left+len(y.sys)-1), y.sys);
      left := left + len(y.sys);
      y.src := structify(x(left to left+len(y.src)-1), y.src);
      left := left + len(y.src);
      y.dst := structify(x(left to left+len(y.dst)-1), y.dst);
    else
      y.sys := structify(x(left downto left-len(y.sys)+1), y.sys);
      left := left - len(y.sys);
      y.src := structify(x(left downto left-len(y.src)+1), y.src);
      left := left - len(y.src);
      y.dst := structify(x(left downto left-len(y.dst)+1), y.dst);
    end if;
    return y;
  end function structify;
  function nullify(t: bconv_irt) return bconv_irt is
  variable y: bconv_irt;
  begin
    y.sys := nullify(t.sys);
    y.src := nullify(t.src);
    y.dst := nullify(t.dst);
    return y;
  end function nullify;

  function len(x: bconv_ort) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.src);
    l := l + len(x.dst);
    return l;
  end function len;
  function vectorify(x: bconv_ort; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.src)-1) := vectorify(x.src, y(left to left+len(x.src)-1));
      left := left + len(x.src);
      y(left to left+len(x.dst)-1) := vectorify(x.dst, y(left to left+len(x.dst)-1));
    else
      y(left downto left-len(x.src)+1) := vectorify(x.src, y(left downto left-len(x.src)+1));
      left := left - len(x.src);
      y(left downto left-len(x.dst)+1) := vectorify(x.dst, y(left downto left-len(x.dst)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: bconv_ort) return bconv_ort is
    variable y: bconv_ort;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.src := structify(x(left to left+len(y.src)-1), y.src);
      left := left + len(y.src);
      y.dst := structify(x(left to left+len(y.dst)-1), y.dst);
    else
      y.src := structify(x(left downto left-len(y.src)+1), y.src);
      left := left - len(y.src);
      y.dst := structify(x(left downto left-len(y.dst)+1), y.dst);
    end if;
    return y;
  end function structify;
  function nullify(t: bconv_ort) return bconv_ort is
  variable y: bconv_ort;
  begin
    y.src := nullify(t.src);
    y.dst := nullify(t.dst);
    return y;
  end function nullify;

  function len(x: bconv_ert) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.i);
    l := l + len(x.o);
    return l;
  end function len;
  function vectorify(x: bconv_ert; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.i)-1) := vectorify(x.i, y(left to left+len(x.i)-1));
      left := left + len(x.i);
      y(left to left+len(x.o)-1) := vectorify(x.o, y(left to left+len(x.o)-1));
    else
      y(left downto left-len(x.i)+1) := vectorify(x.i, y(left downto left-len(x.i)+1));
      left := left - len(x.i);
      y(left downto left-len(x.o)+1) := vectorify(x.o, y(left downto left-len(x.o)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: bconv_ert) return bconv_ert is
    variable y: bconv_ert;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.i := structify(x(left to left+len(y.i)-1), y.i);
      left := left + len(y.i);
      y.o := structify(x(left to left+len(y.o)-1), y.o);
    else
      y.i := structify(x(left downto left-len(y.i)+1), y.i);
      left := left - len(y.i);
      y.o := structify(x(left downto left-len(y.o)+1), y.o);
    end if;
    return y;
  end function structify;
  function nullify(t: bconv_ert) return bconv_ert is
  variable y: bconv_ert;
  begin
    y.i := nullify(t.i);
    y.o := nullify(t.o);
    return y;
  end function nullify;

  function len(x: hub_grt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.DATA_LEN);
    return l;
  end function len;
  function vectorify(x: hub_grt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.DATA_LEN)-1) := vectorify(x.DATA_LEN, y(left to left+len(x.DATA_LEN)-1));
    else
      y(left downto left-len(x.DATA_LEN)+1) := vectorify(x.DATA_LEN, y(left downto left-len(x.DATA_LEN)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: hub_grt) return hub_grt is
    variable y: hub_grt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.DATA_LEN := structify(x(left to left+len(y.DATA_LEN)-1), y.DATA_LEN);
    else
      y.DATA_LEN := structify(x(left downto left-len(y.DATA_LEN)+1), y.DATA_LEN);
    end if;
    return y;
  end function structify;
  function nullify(t: hub_grt) return hub_grt is
  variable y: hub_grt;
  begin
    y.DATA_LEN := nullify(t.DATA_LEN);
    return y;
  end function nullify;

  function len(x: hub_irt) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.cnt);
    l := l + len(x.pld);
    l := l + len(x.dst);
    return l;
  end function len;
  function vectorify(x: hub_irt; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.cnt)-1) := vectorify(x.cnt, y(left to left+len(x.cnt)-1));
      left := left + len(x.cnt);
      y(left to left+len(x.pld)-1) := vectorify(x.pld, y(left to left+len(x.pld)-1));
      left := left + len(x.pld);
      y(left to left+len(x.dst)-1) := vectorify(x.dst, y(left to left+len(x.dst)-1));
    else
      y(left downto left-len(x.cnt)+1) := vectorify(x.cnt, y(left downto left-len(x.cnt)+1));
      left := left - len(x.cnt);
      y(left downto left-len(x.pld)+1) := vectorify(x.pld, y(left downto left-len(x.pld)+1));
      left := left - len(x.pld);
      y(left downto left-len(x.dst)+1) := vectorify(x.dst, y(left downto left-len(x.dst)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: hub_irt) return hub_irt is
    variable y: hub_irt;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.cnt := structify(x(left to left+len(y.cnt)-1), y.cnt);
      left := left + len(y.cnt);
      y.pld := structify(x(left to left+len(y.pld)-1), y.pld);
      left := left + len(y.pld);
      y.dst := structify(x(left to left+len(y.dst)-1), y.dst);
    else
      y.cnt := structify(x(left downto left-len(y.cnt)+1), y.cnt);
      left := left - len(y.cnt);
      y.pld := structify(x(left downto left-len(y.pld)+1), y.pld);
      left := left - len(y.pld);
      y.dst := structify(x(left downto left-len(y.dst)+1), y.dst);
    end if;
    return y;
  end function structify;
  function nullify(t: hub_irt) return hub_irt is
  variable y: hub_irt;
  begin
    y.cnt := nullify(t.cnt);
    y.pld := nullify(t.pld);
    y.dst := nullify(t.dst);
    return y;
  end function nullify;

  function len(x: hub_ort) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.cnt);
    l := l + len(x.pld);
    l := l + len(x.dst);
    return l;
  end function len;
  function vectorify(x: hub_ort; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.cnt)-1) := vectorify(x.cnt, y(left to left+len(x.cnt)-1));
      left := left + len(x.cnt);
      y(left to left+len(x.pld)-1) := vectorify(x.pld, y(left to left+len(x.pld)-1));
      left := left + len(x.pld);
      y(left to left+len(x.dst)-1) := vectorify(x.dst, y(left to left+len(x.dst)-1));
    else
      y(left downto left-len(x.cnt)+1) := vectorify(x.cnt, y(left downto left-len(x.cnt)+1));
      left := left - len(x.cnt);
      y(left downto left-len(x.pld)+1) := vectorify(x.pld, y(left downto left-len(x.pld)+1));
      left := left - len(x.pld);
      y(left downto left-len(x.dst)+1) := vectorify(x.dst, y(left downto left-len(x.dst)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: hub_ort) return hub_ort is
    variable y: hub_ort;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.cnt := structify(x(left to left+len(y.cnt)-1), y.cnt);
      left := left + len(y.cnt);
      y.pld := structify(x(left to left+len(y.pld)-1), y.pld);
      left := left + len(y.pld);
      y.dst := structify(x(left to left+len(y.dst)-1), y.dst);
    else
      y.cnt := structify(x(left downto left-len(y.cnt)+1), y.cnt);
      left := left - len(y.cnt);
      y.pld := structify(x(left downto left-len(y.pld)+1), y.pld);
      left := left - len(y.pld);
      y.dst := structify(x(left downto left-len(y.dst)+1), y.dst);
    end if;
    return y;
  end function structify;
  function nullify(t: hub_ort) return hub_ort is
  variable y: hub_ort;
  begin
    y.cnt := nullify(t.cnt);
    y.pld := nullify(t.pld);
    y.dst := nullify(t.dst);
    return y;
  end function nullify;

  function len(x: hub_ert) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.i);
    l := l + len(x.o);
    return l;
  end function len;
  function vectorify(x: hub_ert; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      y(left to left+len(x.i)-1) := vectorify(x.i, y(left to left+len(x.i)-1));
      left := left + len(x.i);
      y(left to left+len(x.o)-1) := vectorify(x.o, y(left to left+len(x.o)-1));
    else
      y(left downto left-len(x.i)+1) := vectorify(x.i, y(left downto left-len(x.i)+1));
      left := left - len(x.i);
      y(left downto left-len(x.o)+1) := vectorify(x.o, y(left downto left-len(x.o)+1));
    end if;
    return y;
  end function vectorify;
  function structify(x: in std_logic_vector; t: hub_ert) return hub_ert is
    variable y: hub_ert;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.i := structify(x(left to left+len(y.i)-1), y.i);
      left := left + len(y.i);
      y.o := structify(x(left to left+len(y.o)-1), y.o);
    else
      y.i := structify(x(left downto left-len(y.i)+1), y.i);
      left := left - len(y.i);
      y.o := structify(x(left downto left-len(y.o)+1), y.o);
    end if;
    return y;
  end function structify;
  function nullify(t: hub_ert) return hub_ert is
  variable y: hub_ert;
  begin
    y.i := nullify(t.i);
    y.o := nullify(t.o);
    return y;
  end function nullify;

end package body daq_row_defs;
