-- This file was auto-generated by YML2HDL toll.
-- https://gitlab.com/tcpaiva/yml2hdl

library ieee;

use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package common_defs is

  procedure assign(
    variable y : out std_logic_vector;
    constant y0 : in integer;
    constant x : in std_logic_vector;
    constant x0 : in integer;
    constant l : in integer);

  function len(x: std_logic) return natural;
  function len(x: std_logic_vector) return natural;
  function len(x: unsigned) return natural;
  function len(x: signed) return natural;
  function len(x: natural) return natural;

  function structify(x: std_logic_vector; t: signed) return signed;
  function structify(x: std_logic_vector; t: unsigned) return unsigned;
  function structify(x: std_logic_vector; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: integer) return integer;
  function structify(x: std_logic_vector; t: std_logic) return std_logic;

  function vectorify(x: signed; t: std_logic_vector) return std_logic_vector;
  function vectorify(x: unsigned; t: std_logic_vector) return std_logic_vector;
  function vectorify(x: std_logic_vector; t: std_logic_vector) return std_logic_vector;
  function vectorify(x: integer; t: std_logic_vector) return std_logic_vector;
  function vectorify(x: std_logic; t: std_logic_vector) return std_logic_vector;

  function nullify(y: std_logic) return std_logic;
  function nullify(y: std_logic_vector) return std_logic_vector;
  function nullify(y: unsigned) return unsigned;
  function nullify(y: signed) return signed;
  function nullify(y: integer) return integer;

  type integer_at is array(integer range <>) of integer;
  function len(x: integer_at) return natural;
  function vectorify(x: integer_at; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: integer_at) return integer_at;
  function nullify(x: integer_at) return integer_at;

  subtype bcid_t is unsigned(12-1 downto 0);

end package common_defs;

------------------------------------------------------------

package body common_defs is

  procedure assign(
    variable y : out std_logic_vector;
    constant y0 : in integer;
    constant x : in std_logic_vector;
    constant x0 : in integer;
    constant l : in integer) is
    variable tmp : std_logic_vector(y'range);
  begin
    for j in 0 to l-1 loop
      tmp(j+y0) := x(j+x0);
    end loop;
    y := tmp;
  end procedure assign;
  function len(x: std_logic) return natural is
  begin
    return 1;
  end function len;
  function len(x: std_logic_vector) return natural is
  begin
    return x'length;
  end function len;
  function len(x: unsigned) return natural is
  begin
    return x'length;
  end function len;
  function len(x: signed) return natural is
  begin
    return x'length;
  end function len;
  function len(x: natural) return natural is
  begin
    return 32;
  end function len;

  function structify(x: std_logic_vector; t: signed) return signed is
    variable y: signed(t'range);
  begin
    y := signed(x);
    return y;
  end function structify;
  function structify(x: std_logic_vector; t: unsigned) return unsigned is
    variable y: unsigned(t'range);
  begin
    y := unsigned(x);
    return y;
  end function structify;
  function structify(x: std_logic_vector; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
  begin
    assign(y, t'low, x, x'low, x'length);
    return y;
  end function structify;
  function structify(x: std_logic_vector; t: integer) return integer is
    variable y: integer;
  begin
    y := to_integer(unsigned(x));
    return y;
  end function structify;
  function structify(x: std_logic_vector; t: std_logic) return std_logic is
    variable y: std_logic;
  begin
    y := x(x'low);
    return y;
  end function structify;

  function vectorify(x: signed; t: std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(x);
  end function vectorify;
  function vectorify(x: unsigned; t: std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(x);
  end function vectorify;
  function vectorify(x: std_logic_vector; t: std_logic_vector) return std_logic_vector is
  begin
    return x;
  end function vectorify;
  function vectorify(x: integer; t: std_logic_vector) return std_logic_vector is
  begin
    return std_logic_vector(to_unsigned(x, 32));
  end function vectorify;
  function vectorify(x: std_logic; t: std_logic_vector) return std_logic_vector is
    variable y: std_logic_vector(t'range);
  begin
    y(y'low) := x;
    return y;
  end function vectorify;

  function nullify(y: std_logic) return std_logic is
  begin
      return '0';
  end function nullify;
  function nullify(y: std_logic_vector) return std_logic_vector is
  begin
      return (y'range => '0');
  end function nullify;
  function nullify(y: unsigned) return unsigned is
  begin
    return to_unsigned(0, y'length);
  end function nullify;
  function nullify(y: signed) return signed is
  begin
    return to_signed(0, y'length);
  end function nullify;
  function nullify(y: integer) return integer is
  begin
    return 0;
  end function nullify;

  function len(x: integer_at) return natural is
    variable l : natural := 0;
  begin
    l := x'length * 32;
    return l;
  end function len;
  function vectorify(x: integer_at; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l : integer := 32;
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(b to a) := vectorify(x(i), y(b to a));
      end loop;
    else
      for i in x'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(a downto b) := vectorify(x(i), y(a downto b));
      end loop;
    end if;
    return y;
  end function vectorify;
  function structify(x: std_logic_vector; t: integer_at) return integer_at is
    variable y : integer_at(t'range);
    constant l : integer := 32;
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i+l-1+x'low;
        b := l*i+x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function nullify(x: integer_at) return integer_at is
    variable y : integer_at(x'range);
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;

end package body common_defs;
