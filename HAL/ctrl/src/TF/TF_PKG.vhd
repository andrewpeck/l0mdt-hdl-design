-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.common_ieee_pkg.all;

package TF_CTRL is

   -- Custom types and functions --

   type TF_MON_t is record
      STATUS : std_logic;
      READY : std_logic;
   end record TF_MON_t;
   attribute w of TF_MON_t : type is 2;
   function width(x: TF_MON_t) return natural;
   function convert(x: TF_MON_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: TF_MON_t) return TF_MON_t;
   function zero(tpl: TF_MON_t) return TF_MON_t;

   type TF_CTRL_t is record
      RESET : std_logic;
   end record TF_CTRL_t;
   attribute w of TF_CTRL_t : type is 1;
   function width(x: TF_CTRL_t) return natural;
   function convert(x: TF_CTRL_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: TF_CTRL_t) return TF_CTRL_t;
   function zero(tpl: TF_CTRL_t) return TF_CTRL_t;

end package TF_CTRL;

------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.common_ieee_pkg.all;

package body TF_CTRL is

   -- Custom types and functions --

   function width(x: TF_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.STATUS);
      w := w + width(x.READY);
      return w;
   end function width;
   function convert(x: TF_MON_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.STATUS);
         y(u to u+w-1) := convert(x.STATUS, y(u to u+w-1));
         u := u + w;
         w := width(x.READY);
         y(u to u+w-1) := convert(x.READY, y(u to u+w-1));
      else
         w := width(x.STATUS);
         y(u downto u-w+1) := convert(x.STATUS, y(u downto u-w+1));
         u := u - w;
         w := width(x.READY);
         y(u downto u-w+1) := convert(x.READY, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: TF_MON_t) return TF_MON_t is
      variable y : TF_MON_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.STATUS);
         y.STATUS := convert(x(u to u+w-1), tpl.STATUS);
         u := u + w;
         w := width(tpl.READY);
         y.READY := convert(x(u to u+w-1), tpl.READY);
      else
         w := width(tpl.STATUS);
         y.STATUS := convert(x(u downto u-w+1), tpl.STATUS);
         u := u - w;
         w := width(tpl.READY);
         y.READY := convert(x(u downto u-w+1), tpl.READY);
      end if;
      return y;
   end function convert;
   function zero(tpl: TF_MON_t) return TF_MON_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: TF_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.RESET);
      return w;
   end function width;
   function convert(x: TF_CTRL_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.RESET);
         y(u to u+w-1) := convert(x.RESET, y(u to u+w-1));
      else
         w := width(x.RESET);
         y(u downto u-w+1) := convert(x.RESET, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: TF_CTRL_t) return TF_CTRL_t is
      variable y : TF_CTRL_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.RESET);
         y.RESET := convert(x(u to u+w-1), tpl.RESET);
      else
         w := width(tpl.RESET);
         y.RESET := convert(x(u downto u-w+1), tpl.RESET);
      end if;
      return y;
   end function convert;
   function zero(tpl: TF_CTRL_t) return TF_CTRL_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

end package body TF_CTRL;
