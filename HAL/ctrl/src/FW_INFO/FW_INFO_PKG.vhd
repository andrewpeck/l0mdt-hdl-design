-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl

library ieee;

use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;

use shared_lib.common_ieee_pkg.all;

package FW_INFO_CTRL is

  type FW_INFO_FW_INFO_BUILD_DATE_MON_t is record
    DAY : std_logic_vector(8-1 downto 0);
    MONTH : std_logic_vector(8-1 downto 0);
    YEAR : std_logic_vector(16-1 downto 0);
  end record FW_INFO_FW_INFO_BUILD_DATE_MON_t;
  function len(x: FW_INFO_FW_INFO_BUILD_DATE_MON_t) return natural;
  function width(x: FW_INFO_FW_INFO_BUILD_DATE_MON_t) return natural;
  function vectorify(x: FW_INFO_FW_INFO_BUILD_DATE_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FW_INFO_FW_INFO_BUILD_DATE_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FW_INFO_FW_INFO_BUILD_DATE_MON_t) return FW_INFO_FW_INFO_BUILD_DATE_MON_t;
  function convert(x: in std_logic_vector; t: FW_INFO_FW_INFO_BUILD_DATE_MON_t) return FW_INFO_FW_INFO_BUILD_DATE_MON_t;
  function nullify(t: FW_INFO_FW_INFO_BUILD_DATE_MON_t) return FW_INFO_FW_INFO_BUILD_DATE_MON_t;
  function zeroed(t: FW_INFO_FW_INFO_BUILD_DATE_MON_t) return FW_INFO_FW_INFO_BUILD_DATE_MON_t;

  type FW_INFO_FW_INFO_BUILD_TIME_MON_t is record
    SEC : std_logic_vector(8-1 downto 0);
    MIN : std_logic_vector(8-1 downto 0);
    HOUR : std_logic_vector(8-1 downto 0);
  end record FW_INFO_FW_INFO_BUILD_TIME_MON_t;
  function len(x: FW_INFO_FW_INFO_BUILD_TIME_MON_t) return natural;
  function width(x: FW_INFO_FW_INFO_BUILD_TIME_MON_t) return natural;
  function vectorify(x: FW_INFO_FW_INFO_BUILD_TIME_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FW_INFO_FW_INFO_BUILD_TIME_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FW_INFO_FW_INFO_BUILD_TIME_MON_t) return FW_INFO_FW_INFO_BUILD_TIME_MON_t;
  function convert(x: in std_logic_vector; t: FW_INFO_FW_INFO_BUILD_TIME_MON_t) return FW_INFO_FW_INFO_BUILD_TIME_MON_t;
  function nullify(t: FW_INFO_FW_INFO_BUILD_TIME_MON_t) return FW_INFO_FW_INFO_BUILD_TIME_MON_t;
  function zeroed(t: FW_INFO_FW_INFO_BUILD_TIME_MON_t) return FW_INFO_FW_INFO_BUILD_TIME_MON_t;

  type FW_INFO_FW_INFO_MON_t is record
    GIT_VALID : std_logic;
    GIT_HASH_1 : std_logic_vector(32-1 downto 0);
    GIT_HASH_2 : std_logic_vector(32-1 downto 0);
    GIT_HASH_3 : std_logic_vector(32-1 downto 0);
    GIT_HASH_4 : std_logic_vector(32-1 downto 0);
    GIT_HASH_5 : std_logic_vector(32-1 downto 0);
    BUILD_DATE : FW_INFO_FW_INFO_BUILD_DATE_MON_t;
    BUILD_TIME : FW_INFO_FW_INFO_BUILD_TIME_MON_t;
  end record FW_INFO_FW_INFO_MON_t;
  function len(x: FW_INFO_FW_INFO_MON_t) return natural;
  function width(x: FW_INFO_FW_INFO_MON_t) return natural;
  function vectorify(x: FW_INFO_FW_INFO_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FW_INFO_FW_INFO_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FW_INFO_FW_INFO_MON_t) return FW_INFO_FW_INFO_MON_t;
  function convert(x: in std_logic_vector; t: FW_INFO_FW_INFO_MON_t) return FW_INFO_FW_INFO_MON_t;
  function nullify(t: FW_INFO_FW_INFO_MON_t) return FW_INFO_FW_INFO_MON_t;
  function zeroed(t: FW_INFO_FW_INFO_MON_t) return FW_INFO_FW_INFO_MON_t;

  type FW_INFO_HOG_INFO_MON_t is record
    GLOBAL_FWDATE : std_logic_vector(32-1 downto 0);
    GLOBAL_FWTIME : std_logic_vector(32-1 downto 0);
    OFFICIAL : std_logic_vector(32-1 downto 0);
    GLOBAL_FWHASH : std_logic_vector(32-1 downto 0);
    TOP_FWHASH : std_logic_vector(32-1 downto 0);
    XML_HASH : std_logic_vector(32-1 downto 0);
    GLOBAL_FWVERSION : std_logic_vector(32-1 downto 0);
    TOP_FWVERSION : std_logic_vector(32-1 downto 0);
    XML_VERSION : std_logic_vector(32-1 downto 0);
    HOG_FWHASH : std_logic_vector(32-1 downto 0);
    FRAMEWORK_FWVERSION : std_logic_vector(32-1 downto 0);
    FRAMEWORK_FWHASH : std_logic_vector(32-1 downto 0);
  end record FW_INFO_HOG_INFO_MON_t;
  function len(x: FW_INFO_HOG_INFO_MON_t) return natural;
  function width(x: FW_INFO_HOG_INFO_MON_t) return natural;
  function vectorify(x: FW_INFO_HOG_INFO_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FW_INFO_HOG_INFO_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FW_INFO_HOG_INFO_MON_t) return FW_INFO_HOG_INFO_MON_t;
  function convert(x: in std_logic_vector; t: FW_INFO_HOG_INFO_MON_t) return FW_INFO_HOG_INFO_MON_t;
  function nullify(t: FW_INFO_HOG_INFO_MON_t) return FW_INFO_HOG_INFO_MON_t;
  function zeroed(t: FW_INFO_HOG_INFO_MON_t) return FW_INFO_HOG_INFO_MON_t;

  type FW_INFO_CONFIG_MON_t is record
    MAIN_CFG_COMPILE_HW : std_logic;
    MAIN_CFG_COMPILE_UL : std_logic;
    ST_nBARREL_ENDCAP : std_logic;
    ENDCAP_nSMALL_LARGE : std_logic;
    ENABLE_NEIGHBORS : std_logic;
    SECTOR_ID : std_logic_vector(32-1 downto 0);
    PHY_BARREL_R0 : std_logic_vector(32-1 downto 0);
    PHY_BARREL_R1 : std_logic_vector(32-1 downto 0);
    PHY_BARREL_R2 : std_logic_vector(32-1 downto 0);
    PHY_BARREL_R3 : std_logic_vector(32-1 downto 0);
    HPS_ENABLE_ST_INN : std_logic;
    HPS_ENABLE_ST_EXT : std_logic;
    HPS_ENABLE_ST_MID : std_logic;
    HPS_ENABLE_ST_OUT : std_logic;
    HPS_NUM_MDT_CH_INN : std_logic_vector(8-1 downto 0);
    HPS_NUM_MDT_CH_EXT : std_logic_vector(8-1 downto 0);
    HPS_NUM_MDT_CH_MID : std_logic_vector(8-1 downto 0);
    HPS_NUM_MDT_CH_OUT : std_logic_vector(8-1 downto 0);
    NUM_MTC : std_logic_vector(8-1 downto 0);
    NUM_NSP : std_logic_vector(8-1 downto 0);
    UCM_ENABLED : std_logic;
    MPL_ENABLED : std_logic;
    SF_ENABLED : std_logic;
    SF_TYPE : std_logic;
    NUM_DAQ_STREAMS : std_logic_vector(8-1 downto 0);
    NUM_SF_INPUTS : std_logic_vector(8-1 downto 0);
    NUM_SF_OUTPUTS : std_logic_vector(8-1 downto 0);
    MAX_NUM_SL : std_logic_vector(8-1 downto 0);
    NUM_THREADS : std_logic_vector(8-1 downto 0);
  end record FW_INFO_CONFIG_MON_t;
  function len(x: FW_INFO_CONFIG_MON_t) return natural;
  function width(x: FW_INFO_CONFIG_MON_t) return natural;
  function vectorify(x: FW_INFO_CONFIG_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FW_INFO_CONFIG_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FW_INFO_CONFIG_MON_t) return FW_INFO_CONFIG_MON_t;
  function convert(x: in std_logic_vector; t: FW_INFO_CONFIG_MON_t) return FW_INFO_CONFIG_MON_t;
  function nullify(t: FW_INFO_CONFIG_MON_t) return FW_INFO_CONFIG_MON_t;
  function zeroed(t: FW_INFO_CONFIG_MON_t) return FW_INFO_CONFIG_MON_t;

  type FW_INFO_MON_t is record
    FW_INFO : FW_INFO_FW_INFO_MON_t;
    HOG_INFO : FW_INFO_HOG_INFO_MON_t;
    CONFIG : FW_INFO_CONFIG_MON_t;
  end record FW_INFO_MON_t;
  function len(x: FW_INFO_MON_t) return natural;
  function width(x: FW_INFO_MON_t) return natural;
  function vectorify(x: FW_INFO_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FW_INFO_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FW_INFO_MON_t) return FW_INFO_MON_t;
  function convert(x: in std_logic_vector; t: FW_INFO_MON_t) return FW_INFO_MON_t;
  function nullify(t: FW_INFO_MON_t) return FW_INFO_MON_t;
  function zeroed(t: FW_INFO_MON_t) return FW_INFO_MON_t;

end package FW_INFO_CTRL;

------------------------------------------------------------

package body FW_INFO_CTRL is

  function len(x: FW_INFO_FW_INFO_BUILD_DATE_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.DAY);
    l := l + len(x.MONTH);
    l := l + len(x.YEAR);
    return l;
  end function len;
  function width(x: FW_INFO_FW_INFO_BUILD_DATE_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.DAY);
    l := l + width(x.MONTH);
    l := l + width(x.YEAR);
    return l;
  end function width;
  function vectorify(x: FW_INFO_FW_INFO_BUILD_DATE_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.DAY)-1), vectorify(x.DAY, y(left to left+len(x.DAY)-1)));
      left := left + len(x.DAY);
      assign(y(left to left+len(x.MONTH)-1), vectorify(x.MONTH, y(left to left+len(x.MONTH)-1)));
      left := left + len(x.MONTH);
      assign(y(left to left+len(x.YEAR)-1), vectorify(x.YEAR, y(left to left+len(x.YEAR)-1)));
    else
      assign(y(left downto left-len(x.DAY)+1), vectorify(x.DAY, y(left downto left-len(x.DAY)+1)));
      left := left - len(x.DAY);
      assign(y(left downto left-len(x.MONTH)+1), vectorify(x.MONTH, y(left downto left-len(x.MONTH)+1)));
      left := left - len(x.MONTH);
      assign(y(left downto left-len(x.YEAR)+1), vectorify(x.YEAR, y(left downto left-len(x.YEAR)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FW_INFO_FW_INFO_BUILD_DATE_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.DAY)-1), convert(x.DAY, y(left to left+len(x.DAY)-1)));
      left := left + len(x.DAY);
      assign(y(left to left+len(x.MONTH)-1), convert(x.MONTH, y(left to left+len(x.MONTH)-1)));
      left := left + len(x.MONTH);
      assign(y(left to left+len(x.YEAR)-1), convert(x.YEAR, y(left to left+len(x.YEAR)-1)));
    else
      assign(y(left downto left-len(x.DAY)+1), convert(x.DAY, y(left downto left-len(x.DAY)+1)));
      left := left - len(x.DAY);
      assign(y(left downto left-len(x.MONTH)+1), convert(x.MONTH, y(left downto left-len(x.MONTH)+1)));
      left := left - len(x.MONTH);
      assign(y(left downto left-len(x.YEAR)+1), convert(x.YEAR, y(left downto left-len(x.YEAR)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FW_INFO_FW_INFO_BUILD_DATE_MON_t) return FW_INFO_FW_INFO_BUILD_DATE_MON_t is
    variable y: FW_INFO_FW_INFO_BUILD_DATE_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.DAY := structify(x(left to left+len(y.DAY)-1), y.DAY);
      left := left + len(y.DAY);
      y.MONTH := structify(x(left to left+len(y.MONTH)-1), y.MONTH);
      left := left + len(y.MONTH);
      y.YEAR := structify(x(left to left+len(y.YEAR)-1), y.YEAR);
    else
      y.DAY := structify(x(left downto left-len(y.DAY)+1), y.DAY);
      left := left - len(y.DAY);
      y.MONTH := structify(x(left downto left-len(y.MONTH)+1), y.MONTH);
      left := left - len(y.MONTH);
      y.YEAR := structify(x(left downto left-len(y.YEAR)+1), y.YEAR);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FW_INFO_FW_INFO_BUILD_DATE_MON_t) return FW_INFO_FW_INFO_BUILD_DATE_MON_t is
    variable y: FW_INFO_FW_INFO_BUILD_DATE_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.DAY := convert(x(left to left+len(y.DAY)-1), y.DAY);
      left := left + len(y.DAY);
      y.MONTH := convert(x(left to left+len(y.MONTH)-1), y.MONTH);
      left := left + len(y.MONTH);
      y.YEAR := convert(x(left to left+len(y.YEAR)-1), y.YEAR);
    else
      y.DAY := convert(x(left downto left-len(y.DAY)+1), y.DAY);
      left := left - len(y.DAY);
      y.MONTH := convert(x(left downto left-len(y.MONTH)+1), y.MONTH);
      left := left - len(y.MONTH);
      y.YEAR := convert(x(left downto left-len(y.YEAR)+1), y.YEAR);
    end if;
    return y;
  end function convert;
  function nullify(t: FW_INFO_FW_INFO_BUILD_DATE_MON_t) return FW_INFO_FW_INFO_BUILD_DATE_MON_t is
  variable y: FW_INFO_FW_INFO_BUILD_DATE_MON_t;
  begin
    y.DAY := nullify(t.DAY);
    y.MONTH := nullify(t.MONTH);
    y.YEAR := nullify(t.YEAR);
    return y;
  end function nullify;
  function zeroed(t: FW_INFO_FW_INFO_BUILD_DATE_MON_t) return FW_INFO_FW_INFO_BUILD_DATE_MON_t is
  variable y: FW_INFO_FW_INFO_BUILD_DATE_MON_t;
  begin
    y.DAY := zeroed(t.DAY);
    y.MONTH := zeroed(t.MONTH);
    y.YEAR := zeroed(t.YEAR);
    return y;
  end function zeroed;

  function len(x: FW_INFO_FW_INFO_BUILD_TIME_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SEC);
    l := l + len(x.MIN);
    l := l + len(x.HOUR);
    return l;
  end function len;
  function width(x: FW_INFO_FW_INFO_BUILD_TIME_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SEC);
    l := l + width(x.MIN);
    l := l + width(x.HOUR);
    return l;
  end function width;
  function vectorify(x: FW_INFO_FW_INFO_BUILD_TIME_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SEC)-1), vectorify(x.SEC, y(left to left+len(x.SEC)-1)));
      left := left + len(x.SEC);
      assign(y(left to left+len(x.MIN)-1), vectorify(x.MIN, y(left to left+len(x.MIN)-1)));
      left := left + len(x.MIN);
      assign(y(left to left+len(x.HOUR)-1), vectorify(x.HOUR, y(left to left+len(x.HOUR)-1)));
    else
      assign(y(left downto left-len(x.SEC)+1), vectorify(x.SEC, y(left downto left-len(x.SEC)+1)));
      left := left - len(x.SEC);
      assign(y(left downto left-len(x.MIN)+1), vectorify(x.MIN, y(left downto left-len(x.MIN)+1)));
      left := left - len(x.MIN);
      assign(y(left downto left-len(x.HOUR)+1), vectorify(x.HOUR, y(left downto left-len(x.HOUR)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FW_INFO_FW_INFO_BUILD_TIME_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SEC)-1), convert(x.SEC, y(left to left+len(x.SEC)-1)));
      left := left + len(x.SEC);
      assign(y(left to left+len(x.MIN)-1), convert(x.MIN, y(left to left+len(x.MIN)-1)));
      left := left + len(x.MIN);
      assign(y(left to left+len(x.HOUR)-1), convert(x.HOUR, y(left to left+len(x.HOUR)-1)));
    else
      assign(y(left downto left-len(x.SEC)+1), convert(x.SEC, y(left downto left-len(x.SEC)+1)));
      left := left - len(x.SEC);
      assign(y(left downto left-len(x.MIN)+1), convert(x.MIN, y(left downto left-len(x.MIN)+1)));
      left := left - len(x.MIN);
      assign(y(left downto left-len(x.HOUR)+1), convert(x.HOUR, y(left downto left-len(x.HOUR)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FW_INFO_FW_INFO_BUILD_TIME_MON_t) return FW_INFO_FW_INFO_BUILD_TIME_MON_t is
    variable y: FW_INFO_FW_INFO_BUILD_TIME_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SEC := structify(x(left to left+len(y.SEC)-1), y.SEC);
      left := left + len(y.SEC);
      y.MIN := structify(x(left to left+len(y.MIN)-1), y.MIN);
      left := left + len(y.MIN);
      y.HOUR := structify(x(left to left+len(y.HOUR)-1), y.HOUR);
    else
      y.SEC := structify(x(left downto left-len(y.SEC)+1), y.SEC);
      left := left - len(y.SEC);
      y.MIN := structify(x(left downto left-len(y.MIN)+1), y.MIN);
      left := left - len(y.MIN);
      y.HOUR := structify(x(left downto left-len(y.HOUR)+1), y.HOUR);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FW_INFO_FW_INFO_BUILD_TIME_MON_t) return FW_INFO_FW_INFO_BUILD_TIME_MON_t is
    variable y: FW_INFO_FW_INFO_BUILD_TIME_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SEC := convert(x(left to left+len(y.SEC)-1), y.SEC);
      left := left + len(y.SEC);
      y.MIN := convert(x(left to left+len(y.MIN)-1), y.MIN);
      left := left + len(y.MIN);
      y.HOUR := convert(x(left to left+len(y.HOUR)-1), y.HOUR);
    else
      y.SEC := convert(x(left downto left-len(y.SEC)+1), y.SEC);
      left := left - len(y.SEC);
      y.MIN := convert(x(left downto left-len(y.MIN)+1), y.MIN);
      left := left - len(y.MIN);
      y.HOUR := convert(x(left downto left-len(y.HOUR)+1), y.HOUR);
    end if;
    return y;
  end function convert;
  function nullify(t: FW_INFO_FW_INFO_BUILD_TIME_MON_t) return FW_INFO_FW_INFO_BUILD_TIME_MON_t is
  variable y: FW_INFO_FW_INFO_BUILD_TIME_MON_t;
  begin
    y.SEC := nullify(t.SEC);
    y.MIN := nullify(t.MIN);
    y.HOUR := nullify(t.HOUR);
    return y;
  end function nullify;
  function zeroed(t: FW_INFO_FW_INFO_BUILD_TIME_MON_t) return FW_INFO_FW_INFO_BUILD_TIME_MON_t is
  variable y: FW_INFO_FW_INFO_BUILD_TIME_MON_t;
  begin
    y.SEC := zeroed(t.SEC);
    y.MIN := zeroed(t.MIN);
    y.HOUR := zeroed(t.HOUR);
    return y;
  end function zeroed;

  function len(x: FW_INFO_FW_INFO_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.GIT_VALID);
    l := l + len(x.GIT_HASH_1);
    l := l + len(x.GIT_HASH_2);
    l := l + len(x.GIT_HASH_3);
    l := l + len(x.GIT_HASH_4);
    l := l + len(x.GIT_HASH_5);
    l := l + len(x.BUILD_DATE);
    l := l + len(x.BUILD_TIME);
    return l;
  end function len;
  function width(x: FW_INFO_FW_INFO_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.GIT_VALID);
    l := l + width(x.GIT_HASH_1);
    l := l + width(x.GIT_HASH_2);
    l := l + width(x.GIT_HASH_3);
    l := l + width(x.GIT_HASH_4);
    l := l + width(x.GIT_HASH_5);
    l := l + width(x.BUILD_DATE);
    l := l + width(x.BUILD_TIME);
    return l;
  end function width;
  function vectorify(x: FW_INFO_FW_INFO_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.GIT_VALID)-1), vectorify(x.GIT_VALID, y(left to left+len(x.GIT_VALID)-1)));
      left := left + len(x.GIT_VALID);
      assign(y(left to left+len(x.GIT_HASH_1)-1), vectorify(x.GIT_HASH_1, y(left to left+len(x.GIT_HASH_1)-1)));
      left := left + len(x.GIT_HASH_1);
      assign(y(left to left+len(x.GIT_HASH_2)-1), vectorify(x.GIT_HASH_2, y(left to left+len(x.GIT_HASH_2)-1)));
      left := left + len(x.GIT_HASH_2);
      assign(y(left to left+len(x.GIT_HASH_3)-1), vectorify(x.GIT_HASH_3, y(left to left+len(x.GIT_HASH_3)-1)));
      left := left + len(x.GIT_HASH_3);
      assign(y(left to left+len(x.GIT_HASH_4)-1), vectorify(x.GIT_HASH_4, y(left to left+len(x.GIT_HASH_4)-1)));
      left := left + len(x.GIT_HASH_4);
      assign(y(left to left+len(x.GIT_HASH_5)-1), vectorify(x.GIT_HASH_5, y(left to left+len(x.GIT_HASH_5)-1)));
      left := left + len(x.GIT_HASH_5);
      assign(y(left to left+len(x.BUILD_DATE)-1), vectorify(x.BUILD_DATE, y(left to left+len(x.BUILD_DATE)-1)));
      left := left + len(x.BUILD_DATE);
      assign(y(left to left+len(x.BUILD_TIME)-1), vectorify(x.BUILD_TIME, y(left to left+len(x.BUILD_TIME)-1)));
    else
      assign(y(left downto left-len(x.GIT_VALID)+1), vectorify(x.GIT_VALID, y(left downto left-len(x.GIT_VALID)+1)));
      left := left - len(x.GIT_VALID);
      assign(y(left downto left-len(x.GIT_HASH_1)+1), vectorify(x.GIT_HASH_1, y(left downto left-len(x.GIT_HASH_1)+1)));
      left := left - len(x.GIT_HASH_1);
      assign(y(left downto left-len(x.GIT_HASH_2)+1), vectorify(x.GIT_HASH_2, y(left downto left-len(x.GIT_HASH_2)+1)));
      left := left - len(x.GIT_HASH_2);
      assign(y(left downto left-len(x.GIT_HASH_3)+1), vectorify(x.GIT_HASH_3, y(left downto left-len(x.GIT_HASH_3)+1)));
      left := left - len(x.GIT_HASH_3);
      assign(y(left downto left-len(x.GIT_HASH_4)+1), vectorify(x.GIT_HASH_4, y(left downto left-len(x.GIT_HASH_4)+1)));
      left := left - len(x.GIT_HASH_4);
      assign(y(left downto left-len(x.GIT_HASH_5)+1), vectorify(x.GIT_HASH_5, y(left downto left-len(x.GIT_HASH_5)+1)));
      left := left - len(x.GIT_HASH_5);
      assign(y(left downto left-len(x.BUILD_DATE)+1), vectorify(x.BUILD_DATE, y(left downto left-len(x.BUILD_DATE)+1)));
      left := left - len(x.BUILD_DATE);
      assign(y(left downto left-len(x.BUILD_TIME)+1), vectorify(x.BUILD_TIME, y(left downto left-len(x.BUILD_TIME)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FW_INFO_FW_INFO_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.GIT_VALID)-1), convert(x.GIT_VALID, y(left to left+len(x.GIT_VALID)-1)));
      left := left + len(x.GIT_VALID);
      assign(y(left to left+len(x.GIT_HASH_1)-1), convert(x.GIT_HASH_1, y(left to left+len(x.GIT_HASH_1)-1)));
      left := left + len(x.GIT_HASH_1);
      assign(y(left to left+len(x.GIT_HASH_2)-1), convert(x.GIT_HASH_2, y(left to left+len(x.GIT_HASH_2)-1)));
      left := left + len(x.GIT_HASH_2);
      assign(y(left to left+len(x.GIT_HASH_3)-1), convert(x.GIT_HASH_3, y(left to left+len(x.GIT_HASH_3)-1)));
      left := left + len(x.GIT_HASH_3);
      assign(y(left to left+len(x.GIT_HASH_4)-1), convert(x.GIT_HASH_4, y(left to left+len(x.GIT_HASH_4)-1)));
      left := left + len(x.GIT_HASH_4);
      assign(y(left to left+len(x.GIT_HASH_5)-1), convert(x.GIT_HASH_5, y(left to left+len(x.GIT_HASH_5)-1)));
      left := left + len(x.GIT_HASH_5);
      assign(y(left to left+len(x.BUILD_DATE)-1), convert(x.BUILD_DATE, y(left to left+len(x.BUILD_DATE)-1)));
      left := left + len(x.BUILD_DATE);
      assign(y(left to left+len(x.BUILD_TIME)-1), convert(x.BUILD_TIME, y(left to left+len(x.BUILD_TIME)-1)));
    else
      assign(y(left downto left-len(x.GIT_VALID)+1), convert(x.GIT_VALID, y(left downto left-len(x.GIT_VALID)+1)));
      left := left - len(x.GIT_VALID);
      assign(y(left downto left-len(x.GIT_HASH_1)+1), convert(x.GIT_HASH_1, y(left downto left-len(x.GIT_HASH_1)+1)));
      left := left - len(x.GIT_HASH_1);
      assign(y(left downto left-len(x.GIT_HASH_2)+1), convert(x.GIT_HASH_2, y(left downto left-len(x.GIT_HASH_2)+1)));
      left := left - len(x.GIT_HASH_2);
      assign(y(left downto left-len(x.GIT_HASH_3)+1), convert(x.GIT_HASH_3, y(left downto left-len(x.GIT_HASH_3)+1)));
      left := left - len(x.GIT_HASH_3);
      assign(y(left downto left-len(x.GIT_HASH_4)+1), convert(x.GIT_HASH_4, y(left downto left-len(x.GIT_HASH_4)+1)));
      left := left - len(x.GIT_HASH_4);
      assign(y(left downto left-len(x.GIT_HASH_5)+1), convert(x.GIT_HASH_5, y(left downto left-len(x.GIT_HASH_5)+1)));
      left := left - len(x.GIT_HASH_5);
      assign(y(left downto left-len(x.BUILD_DATE)+1), convert(x.BUILD_DATE, y(left downto left-len(x.BUILD_DATE)+1)));
      left := left - len(x.BUILD_DATE);
      assign(y(left downto left-len(x.BUILD_TIME)+1), convert(x.BUILD_TIME, y(left downto left-len(x.BUILD_TIME)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FW_INFO_FW_INFO_MON_t) return FW_INFO_FW_INFO_MON_t is
    variable y: FW_INFO_FW_INFO_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.GIT_VALID := structify(x(left to left+len(y.GIT_VALID)-1), y.GIT_VALID);
      left := left + len(y.GIT_VALID);
      y.GIT_HASH_1 := structify(x(left to left+len(y.GIT_HASH_1)-1), y.GIT_HASH_1);
      left := left + len(y.GIT_HASH_1);
      y.GIT_HASH_2 := structify(x(left to left+len(y.GIT_HASH_2)-1), y.GIT_HASH_2);
      left := left + len(y.GIT_HASH_2);
      y.GIT_HASH_3 := structify(x(left to left+len(y.GIT_HASH_3)-1), y.GIT_HASH_3);
      left := left + len(y.GIT_HASH_3);
      y.GIT_HASH_4 := structify(x(left to left+len(y.GIT_HASH_4)-1), y.GIT_HASH_4);
      left := left + len(y.GIT_HASH_4);
      y.GIT_HASH_5 := structify(x(left to left+len(y.GIT_HASH_5)-1), y.GIT_HASH_5);
      left := left + len(y.GIT_HASH_5);
      y.BUILD_DATE := structify(x(left to left+len(y.BUILD_DATE)-1), y.BUILD_DATE);
      left := left + len(y.BUILD_DATE);
      y.BUILD_TIME := structify(x(left to left+len(y.BUILD_TIME)-1), y.BUILD_TIME);
    else
      y.GIT_VALID := structify(x(left downto left-len(y.GIT_VALID)+1), y.GIT_VALID);
      left := left - len(y.GIT_VALID);
      y.GIT_HASH_1 := structify(x(left downto left-len(y.GIT_HASH_1)+1), y.GIT_HASH_1);
      left := left - len(y.GIT_HASH_1);
      y.GIT_HASH_2 := structify(x(left downto left-len(y.GIT_HASH_2)+1), y.GIT_HASH_2);
      left := left - len(y.GIT_HASH_2);
      y.GIT_HASH_3 := structify(x(left downto left-len(y.GIT_HASH_3)+1), y.GIT_HASH_3);
      left := left - len(y.GIT_HASH_3);
      y.GIT_HASH_4 := structify(x(left downto left-len(y.GIT_HASH_4)+1), y.GIT_HASH_4);
      left := left - len(y.GIT_HASH_4);
      y.GIT_HASH_5 := structify(x(left downto left-len(y.GIT_HASH_5)+1), y.GIT_HASH_5);
      left := left - len(y.GIT_HASH_5);
      y.BUILD_DATE := structify(x(left downto left-len(y.BUILD_DATE)+1), y.BUILD_DATE);
      left := left - len(y.BUILD_DATE);
      y.BUILD_TIME := structify(x(left downto left-len(y.BUILD_TIME)+1), y.BUILD_TIME);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FW_INFO_FW_INFO_MON_t) return FW_INFO_FW_INFO_MON_t is
    variable y: FW_INFO_FW_INFO_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.GIT_VALID := convert(x(left to left+len(y.GIT_VALID)-1), y.GIT_VALID);
      left := left + len(y.GIT_VALID);
      y.GIT_HASH_1 := convert(x(left to left+len(y.GIT_HASH_1)-1), y.GIT_HASH_1);
      left := left + len(y.GIT_HASH_1);
      y.GIT_HASH_2 := convert(x(left to left+len(y.GIT_HASH_2)-1), y.GIT_HASH_2);
      left := left + len(y.GIT_HASH_2);
      y.GIT_HASH_3 := convert(x(left to left+len(y.GIT_HASH_3)-1), y.GIT_HASH_3);
      left := left + len(y.GIT_HASH_3);
      y.GIT_HASH_4 := convert(x(left to left+len(y.GIT_HASH_4)-1), y.GIT_HASH_4);
      left := left + len(y.GIT_HASH_4);
      y.GIT_HASH_5 := convert(x(left to left+len(y.GIT_HASH_5)-1), y.GIT_HASH_5);
      left := left + len(y.GIT_HASH_5);
      y.BUILD_DATE := convert(x(left to left+len(y.BUILD_DATE)-1), y.BUILD_DATE);
      left := left + len(y.BUILD_DATE);
      y.BUILD_TIME := convert(x(left to left+len(y.BUILD_TIME)-1), y.BUILD_TIME);
    else
      y.GIT_VALID := convert(x(left downto left-len(y.GIT_VALID)+1), y.GIT_VALID);
      left := left - len(y.GIT_VALID);
      y.GIT_HASH_1 := convert(x(left downto left-len(y.GIT_HASH_1)+1), y.GIT_HASH_1);
      left := left - len(y.GIT_HASH_1);
      y.GIT_HASH_2 := convert(x(left downto left-len(y.GIT_HASH_2)+1), y.GIT_HASH_2);
      left := left - len(y.GIT_HASH_2);
      y.GIT_HASH_3 := convert(x(left downto left-len(y.GIT_HASH_3)+1), y.GIT_HASH_3);
      left := left - len(y.GIT_HASH_3);
      y.GIT_HASH_4 := convert(x(left downto left-len(y.GIT_HASH_4)+1), y.GIT_HASH_4);
      left := left - len(y.GIT_HASH_4);
      y.GIT_HASH_5 := convert(x(left downto left-len(y.GIT_HASH_5)+1), y.GIT_HASH_5);
      left := left - len(y.GIT_HASH_5);
      y.BUILD_DATE := convert(x(left downto left-len(y.BUILD_DATE)+1), y.BUILD_DATE);
      left := left - len(y.BUILD_DATE);
      y.BUILD_TIME := convert(x(left downto left-len(y.BUILD_TIME)+1), y.BUILD_TIME);
    end if;
    return y;
  end function convert;
  function nullify(t: FW_INFO_FW_INFO_MON_t) return FW_INFO_FW_INFO_MON_t is
  variable y: FW_INFO_FW_INFO_MON_t;
  begin
    y.GIT_VALID := nullify(t.GIT_VALID);
    y.GIT_HASH_1 := nullify(t.GIT_HASH_1);
    y.GIT_HASH_2 := nullify(t.GIT_HASH_2);
    y.GIT_HASH_3 := nullify(t.GIT_HASH_3);
    y.GIT_HASH_4 := nullify(t.GIT_HASH_4);
    y.GIT_HASH_5 := nullify(t.GIT_HASH_5);
    y.BUILD_DATE := nullify(t.BUILD_DATE);
    y.BUILD_TIME := nullify(t.BUILD_TIME);
    return y;
  end function nullify;
  function zeroed(t: FW_INFO_FW_INFO_MON_t) return FW_INFO_FW_INFO_MON_t is
  variable y: FW_INFO_FW_INFO_MON_t;
  begin
    y.GIT_VALID := zeroed(t.GIT_VALID);
    y.GIT_HASH_1 := zeroed(t.GIT_HASH_1);
    y.GIT_HASH_2 := zeroed(t.GIT_HASH_2);
    y.GIT_HASH_3 := zeroed(t.GIT_HASH_3);
    y.GIT_HASH_4 := zeroed(t.GIT_HASH_4);
    y.GIT_HASH_5 := zeroed(t.GIT_HASH_5);
    y.BUILD_DATE := zeroed(t.BUILD_DATE);
    y.BUILD_TIME := zeroed(t.BUILD_TIME);
    return y;
  end function zeroed;

  function len(x: FW_INFO_HOG_INFO_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.GLOBAL_FWDATE);
    l := l + len(x.GLOBAL_FWTIME);
    l := l + len(x.OFFICIAL);
    l := l + len(x.GLOBAL_FWHASH);
    l := l + len(x.TOP_FWHASH);
    l := l + len(x.XML_HASH);
    l := l + len(x.GLOBAL_FWVERSION);
    l := l + len(x.TOP_FWVERSION);
    l := l + len(x.XML_VERSION);
    l := l + len(x.HOG_FWHASH);
    l := l + len(x.FRAMEWORK_FWVERSION);
    l := l + len(x.FRAMEWORK_FWHASH);
    return l;
  end function len;
  function width(x: FW_INFO_HOG_INFO_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.GLOBAL_FWDATE);
    l := l + width(x.GLOBAL_FWTIME);
    l := l + width(x.OFFICIAL);
    l := l + width(x.GLOBAL_FWHASH);
    l := l + width(x.TOP_FWHASH);
    l := l + width(x.XML_HASH);
    l := l + width(x.GLOBAL_FWVERSION);
    l := l + width(x.TOP_FWVERSION);
    l := l + width(x.XML_VERSION);
    l := l + width(x.HOG_FWHASH);
    l := l + width(x.FRAMEWORK_FWVERSION);
    l := l + width(x.FRAMEWORK_FWHASH);
    return l;
  end function width;
  function vectorify(x: FW_INFO_HOG_INFO_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.GLOBAL_FWDATE)-1), vectorify(x.GLOBAL_FWDATE, y(left to left+len(x.GLOBAL_FWDATE)-1)));
      left := left + len(x.GLOBAL_FWDATE);
      assign(y(left to left+len(x.GLOBAL_FWTIME)-1), vectorify(x.GLOBAL_FWTIME, y(left to left+len(x.GLOBAL_FWTIME)-1)));
      left := left + len(x.GLOBAL_FWTIME);
      assign(y(left to left+len(x.OFFICIAL)-1), vectorify(x.OFFICIAL, y(left to left+len(x.OFFICIAL)-1)));
      left := left + len(x.OFFICIAL);
      assign(y(left to left+len(x.GLOBAL_FWHASH)-1), vectorify(x.GLOBAL_FWHASH, y(left to left+len(x.GLOBAL_FWHASH)-1)));
      left := left + len(x.GLOBAL_FWHASH);
      assign(y(left to left+len(x.TOP_FWHASH)-1), vectorify(x.TOP_FWHASH, y(left to left+len(x.TOP_FWHASH)-1)));
      left := left + len(x.TOP_FWHASH);
      assign(y(left to left+len(x.XML_HASH)-1), vectorify(x.XML_HASH, y(left to left+len(x.XML_HASH)-1)));
      left := left + len(x.XML_HASH);
      assign(y(left to left+len(x.GLOBAL_FWVERSION)-1), vectorify(x.GLOBAL_FWVERSION, y(left to left+len(x.GLOBAL_FWVERSION)-1)));
      left := left + len(x.GLOBAL_FWVERSION);
      assign(y(left to left+len(x.TOP_FWVERSION)-1), vectorify(x.TOP_FWVERSION, y(left to left+len(x.TOP_FWVERSION)-1)));
      left := left + len(x.TOP_FWVERSION);
      assign(y(left to left+len(x.XML_VERSION)-1), vectorify(x.XML_VERSION, y(left to left+len(x.XML_VERSION)-1)));
      left := left + len(x.XML_VERSION);
      assign(y(left to left+len(x.HOG_FWHASH)-1), vectorify(x.HOG_FWHASH, y(left to left+len(x.HOG_FWHASH)-1)));
      left := left + len(x.HOG_FWHASH);
      assign(y(left to left+len(x.FRAMEWORK_FWVERSION)-1), vectorify(x.FRAMEWORK_FWVERSION, y(left to left+len(x.FRAMEWORK_FWVERSION)-1)));
      left := left + len(x.FRAMEWORK_FWVERSION);
      assign(y(left to left+len(x.FRAMEWORK_FWHASH)-1), vectorify(x.FRAMEWORK_FWHASH, y(left to left+len(x.FRAMEWORK_FWHASH)-1)));
    else
      assign(y(left downto left-len(x.GLOBAL_FWDATE)+1), vectorify(x.GLOBAL_FWDATE, y(left downto left-len(x.GLOBAL_FWDATE)+1)));
      left := left - len(x.GLOBAL_FWDATE);
      assign(y(left downto left-len(x.GLOBAL_FWTIME)+1), vectorify(x.GLOBAL_FWTIME, y(left downto left-len(x.GLOBAL_FWTIME)+1)));
      left := left - len(x.GLOBAL_FWTIME);
      assign(y(left downto left-len(x.OFFICIAL)+1), vectorify(x.OFFICIAL, y(left downto left-len(x.OFFICIAL)+1)));
      left := left - len(x.OFFICIAL);
      assign(y(left downto left-len(x.GLOBAL_FWHASH)+1), vectorify(x.GLOBAL_FWHASH, y(left downto left-len(x.GLOBAL_FWHASH)+1)));
      left := left - len(x.GLOBAL_FWHASH);
      assign(y(left downto left-len(x.TOP_FWHASH)+1), vectorify(x.TOP_FWHASH, y(left downto left-len(x.TOP_FWHASH)+1)));
      left := left - len(x.TOP_FWHASH);
      assign(y(left downto left-len(x.XML_HASH)+1), vectorify(x.XML_HASH, y(left downto left-len(x.XML_HASH)+1)));
      left := left - len(x.XML_HASH);
      assign(y(left downto left-len(x.GLOBAL_FWVERSION)+1), vectorify(x.GLOBAL_FWVERSION, y(left downto left-len(x.GLOBAL_FWVERSION)+1)));
      left := left - len(x.GLOBAL_FWVERSION);
      assign(y(left downto left-len(x.TOP_FWVERSION)+1), vectorify(x.TOP_FWVERSION, y(left downto left-len(x.TOP_FWVERSION)+1)));
      left := left - len(x.TOP_FWVERSION);
      assign(y(left downto left-len(x.XML_VERSION)+1), vectorify(x.XML_VERSION, y(left downto left-len(x.XML_VERSION)+1)));
      left := left - len(x.XML_VERSION);
      assign(y(left downto left-len(x.HOG_FWHASH)+1), vectorify(x.HOG_FWHASH, y(left downto left-len(x.HOG_FWHASH)+1)));
      left := left - len(x.HOG_FWHASH);
      assign(y(left downto left-len(x.FRAMEWORK_FWVERSION)+1), vectorify(x.FRAMEWORK_FWVERSION, y(left downto left-len(x.FRAMEWORK_FWVERSION)+1)));
      left := left - len(x.FRAMEWORK_FWVERSION);
      assign(y(left downto left-len(x.FRAMEWORK_FWHASH)+1), vectorify(x.FRAMEWORK_FWHASH, y(left downto left-len(x.FRAMEWORK_FWHASH)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FW_INFO_HOG_INFO_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.GLOBAL_FWDATE)-1), convert(x.GLOBAL_FWDATE, y(left to left+len(x.GLOBAL_FWDATE)-1)));
      left := left + len(x.GLOBAL_FWDATE);
      assign(y(left to left+len(x.GLOBAL_FWTIME)-1), convert(x.GLOBAL_FWTIME, y(left to left+len(x.GLOBAL_FWTIME)-1)));
      left := left + len(x.GLOBAL_FWTIME);
      assign(y(left to left+len(x.OFFICIAL)-1), convert(x.OFFICIAL, y(left to left+len(x.OFFICIAL)-1)));
      left := left + len(x.OFFICIAL);
      assign(y(left to left+len(x.GLOBAL_FWHASH)-1), convert(x.GLOBAL_FWHASH, y(left to left+len(x.GLOBAL_FWHASH)-1)));
      left := left + len(x.GLOBAL_FWHASH);
      assign(y(left to left+len(x.TOP_FWHASH)-1), convert(x.TOP_FWHASH, y(left to left+len(x.TOP_FWHASH)-1)));
      left := left + len(x.TOP_FWHASH);
      assign(y(left to left+len(x.XML_HASH)-1), convert(x.XML_HASH, y(left to left+len(x.XML_HASH)-1)));
      left := left + len(x.XML_HASH);
      assign(y(left to left+len(x.GLOBAL_FWVERSION)-1), convert(x.GLOBAL_FWVERSION, y(left to left+len(x.GLOBAL_FWVERSION)-1)));
      left := left + len(x.GLOBAL_FWVERSION);
      assign(y(left to left+len(x.TOP_FWVERSION)-1), convert(x.TOP_FWVERSION, y(left to left+len(x.TOP_FWVERSION)-1)));
      left := left + len(x.TOP_FWVERSION);
      assign(y(left to left+len(x.XML_VERSION)-1), convert(x.XML_VERSION, y(left to left+len(x.XML_VERSION)-1)));
      left := left + len(x.XML_VERSION);
      assign(y(left to left+len(x.HOG_FWHASH)-1), convert(x.HOG_FWHASH, y(left to left+len(x.HOG_FWHASH)-1)));
      left := left + len(x.HOG_FWHASH);
      assign(y(left to left+len(x.FRAMEWORK_FWVERSION)-1), convert(x.FRAMEWORK_FWVERSION, y(left to left+len(x.FRAMEWORK_FWVERSION)-1)));
      left := left + len(x.FRAMEWORK_FWVERSION);
      assign(y(left to left+len(x.FRAMEWORK_FWHASH)-1), convert(x.FRAMEWORK_FWHASH, y(left to left+len(x.FRAMEWORK_FWHASH)-1)));
    else
      assign(y(left downto left-len(x.GLOBAL_FWDATE)+1), convert(x.GLOBAL_FWDATE, y(left downto left-len(x.GLOBAL_FWDATE)+1)));
      left := left - len(x.GLOBAL_FWDATE);
      assign(y(left downto left-len(x.GLOBAL_FWTIME)+1), convert(x.GLOBAL_FWTIME, y(left downto left-len(x.GLOBAL_FWTIME)+1)));
      left := left - len(x.GLOBAL_FWTIME);
      assign(y(left downto left-len(x.OFFICIAL)+1), convert(x.OFFICIAL, y(left downto left-len(x.OFFICIAL)+1)));
      left := left - len(x.OFFICIAL);
      assign(y(left downto left-len(x.GLOBAL_FWHASH)+1), convert(x.GLOBAL_FWHASH, y(left downto left-len(x.GLOBAL_FWHASH)+1)));
      left := left - len(x.GLOBAL_FWHASH);
      assign(y(left downto left-len(x.TOP_FWHASH)+1), convert(x.TOP_FWHASH, y(left downto left-len(x.TOP_FWHASH)+1)));
      left := left - len(x.TOP_FWHASH);
      assign(y(left downto left-len(x.XML_HASH)+1), convert(x.XML_HASH, y(left downto left-len(x.XML_HASH)+1)));
      left := left - len(x.XML_HASH);
      assign(y(left downto left-len(x.GLOBAL_FWVERSION)+1), convert(x.GLOBAL_FWVERSION, y(left downto left-len(x.GLOBAL_FWVERSION)+1)));
      left := left - len(x.GLOBAL_FWVERSION);
      assign(y(left downto left-len(x.TOP_FWVERSION)+1), convert(x.TOP_FWVERSION, y(left downto left-len(x.TOP_FWVERSION)+1)));
      left := left - len(x.TOP_FWVERSION);
      assign(y(left downto left-len(x.XML_VERSION)+1), convert(x.XML_VERSION, y(left downto left-len(x.XML_VERSION)+1)));
      left := left - len(x.XML_VERSION);
      assign(y(left downto left-len(x.HOG_FWHASH)+1), convert(x.HOG_FWHASH, y(left downto left-len(x.HOG_FWHASH)+1)));
      left := left - len(x.HOG_FWHASH);
      assign(y(left downto left-len(x.FRAMEWORK_FWVERSION)+1), convert(x.FRAMEWORK_FWVERSION, y(left downto left-len(x.FRAMEWORK_FWVERSION)+1)));
      left := left - len(x.FRAMEWORK_FWVERSION);
      assign(y(left downto left-len(x.FRAMEWORK_FWHASH)+1), convert(x.FRAMEWORK_FWHASH, y(left downto left-len(x.FRAMEWORK_FWHASH)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FW_INFO_HOG_INFO_MON_t) return FW_INFO_HOG_INFO_MON_t is
    variable y: FW_INFO_HOG_INFO_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.GLOBAL_FWDATE := structify(x(left to left+len(y.GLOBAL_FWDATE)-1), y.GLOBAL_FWDATE);
      left := left + len(y.GLOBAL_FWDATE);
      y.GLOBAL_FWTIME := structify(x(left to left+len(y.GLOBAL_FWTIME)-1), y.GLOBAL_FWTIME);
      left := left + len(y.GLOBAL_FWTIME);
      y.OFFICIAL := structify(x(left to left+len(y.OFFICIAL)-1), y.OFFICIAL);
      left := left + len(y.OFFICIAL);
      y.GLOBAL_FWHASH := structify(x(left to left+len(y.GLOBAL_FWHASH)-1), y.GLOBAL_FWHASH);
      left := left + len(y.GLOBAL_FWHASH);
      y.TOP_FWHASH := structify(x(left to left+len(y.TOP_FWHASH)-1), y.TOP_FWHASH);
      left := left + len(y.TOP_FWHASH);
      y.XML_HASH := structify(x(left to left+len(y.XML_HASH)-1), y.XML_HASH);
      left := left + len(y.XML_HASH);
      y.GLOBAL_FWVERSION := structify(x(left to left+len(y.GLOBAL_FWVERSION)-1), y.GLOBAL_FWVERSION);
      left := left + len(y.GLOBAL_FWVERSION);
      y.TOP_FWVERSION := structify(x(left to left+len(y.TOP_FWVERSION)-1), y.TOP_FWVERSION);
      left := left + len(y.TOP_FWVERSION);
      y.XML_VERSION := structify(x(left to left+len(y.XML_VERSION)-1), y.XML_VERSION);
      left := left + len(y.XML_VERSION);
      y.HOG_FWHASH := structify(x(left to left+len(y.HOG_FWHASH)-1), y.HOG_FWHASH);
      left := left + len(y.HOG_FWHASH);
      y.FRAMEWORK_FWVERSION := structify(x(left to left+len(y.FRAMEWORK_FWVERSION)-1), y.FRAMEWORK_FWVERSION);
      left := left + len(y.FRAMEWORK_FWVERSION);
      y.FRAMEWORK_FWHASH := structify(x(left to left+len(y.FRAMEWORK_FWHASH)-1), y.FRAMEWORK_FWHASH);
    else
      y.GLOBAL_FWDATE := structify(x(left downto left-len(y.GLOBAL_FWDATE)+1), y.GLOBAL_FWDATE);
      left := left - len(y.GLOBAL_FWDATE);
      y.GLOBAL_FWTIME := structify(x(left downto left-len(y.GLOBAL_FWTIME)+1), y.GLOBAL_FWTIME);
      left := left - len(y.GLOBAL_FWTIME);
      y.OFFICIAL := structify(x(left downto left-len(y.OFFICIAL)+1), y.OFFICIAL);
      left := left - len(y.OFFICIAL);
      y.GLOBAL_FWHASH := structify(x(left downto left-len(y.GLOBAL_FWHASH)+1), y.GLOBAL_FWHASH);
      left := left - len(y.GLOBAL_FWHASH);
      y.TOP_FWHASH := structify(x(left downto left-len(y.TOP_FWHASH)+1), y.TOP_FWHASH);
      left := left - len(y.TOP_FWHASH);
      y.XML_HASH := structify(x(left downto left-len(y.XML_HASH)+1), y.XML_HASH);
      left := left - len(y.XML_HASH);
      y.GLOBAL_FWVERSION := structify(x(left downto left-len(y.GLOBAL_FWVERSION)+1), y.GLOBAL_FWVERSION);
      left := left - len(y.GLOBAL_FWVERSION);
      y.TOP_FWVERSION := structify(x(left downto left-len(y.TOP_FWVERSION)+1), y.TOP_FWVERSION);
      left := left - len(y.TOP_FWVERSION);
      y.XML_VERSION := structify(x(left downto left-len(y.XML_VERSION)+1), y.XML_VERSION);
      left := left - len(y.XML_VERSION);
      y.HOG_FWHASH := structify(x(left downto left-len(y.HOG_FWHASH)+1), y.HOG_FWHASH);
      left := left - len(y.HOG_FWHASH);
      y.FRAMEWORK_FWVERSION := structify(x(left downto left-len(y.FRAMEWORK_FWVERSION)+1), y.FRAMEWORK_FWVERSION);
      left := left - len(y.FRAMEWORK_FWVERSION);
      y.FRAMEWORK_FWHASH := structify(x(left downto left-len(y.FRAMEWORK_FWHASH)+1), y.FRAMEWORK_FWHASH);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FW_INFO_HOG_INFO_MON_t) return FW_INFO_HOG_INFO_MON_t is
    variable y: FW_INFO_HOG_INFO_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.GLOBAL_FWDATE := convert(x(left to left+len(y.GLOBAL_FWDATE)-1), y.GLOBAL_FWDATE);
      left := left + len(y.GLOBAL_FWDATE);
      y.GLOBAL_FWTIME := convert(x(left to left+len(y.GLOBAL_FWTIME)-1), y.GLOBAL_FWTIME);
      left := left + len(y.GLOBAL_FWTIME);
      y.OFFICIAL := convert(x(left to left+len(y.OFFICIAL)-1), y.OFFICIAL);
      left := left + len(y.OFFICIAL);
      y.GLOBAL_FWHASH := convert(x(left to left+len(y.GLOBAL_FWHASH)-1), y.GLOBAL_FWHASH);
      left := left + len(y.GLOBAL_FWHASH);
      y.TOP_FWHASH := convert(x(left to left+len(y.TOP_FWHASH)-1), y.TOP_FWHASH);
      left := left + len(y.TOP_FWHASH);
      y.XML_HASH := convert(x(left to left+len(y.XML_HASH)-1), y.XML_HASH);
      left := left + len(y.XML_HASH);
      y.GLOBAL_FWVERSION := convert(x(left to left+len(y.GLOBAL_FWVERSION)-1), y.GLOBAL_FWVERSION);
      left := left + len(y.GLOBAL_FWVERSION);
      y.TOP_FWVERSION := convert(x(left to left+len(y.TOP_FWVERSION)-1), y.TOP_FWVERSION);
      left := left + len(y.TOP_FWVERSION);
      y.XML_VERSION := convert(x(left to left+len(y.XML_VERSION)-1), y.XML_VERSION);
      left := left + len(y.XML_VERSION);
      y.HOG_FWHASH := convert(x(left to left+len(y.HOG_FWHASH)-1), y.HOG_FWHASH);
      left := left + len(y.HOG_FWHASH);
      y.FRAMEWORK_FWVERSION := convert(x(left to left+len(y.FRAMEWORK_FWVERSION)-1), y.FRAMEWORK_FWVERSION);
      left := left + len(y.FRAMEWORK_FWVERSION);
      y.FRAMEWORK_FWHASH := convert(x(left to left+len(y.FRAMEWORK_FWHASH)-1), y.FRAMEWORK_FWHASH);
    else
      y.GLOBAL_FWDATE := convert(x(left downto left-len(y.GLOBAL_FWDATE)+1), y.GLOBAL_FWDATE);
      left := left - len(y.GLOBAL_FWDATE);
      y.GLOBAL_FWTIME := convert(x(left downto left-len(y.GLOBAL_FWTIME)+1), y.GLOBAL_FWTIME);
      left := left - len(y.GLOBAL_FWTIME);
      y.OFFICIAL := convert(x(left downto left-len(y.OFFICIAL)+1), y.OFFICIAL);
      left := left - len(y.OFFICIAL);
      y.GLOBAL_FWHASH := convert(x(left downto left-len(y.GLOBAL_FWHASH)+1), y.GLOBAL_FWHASH);
      left := left - len(y.GLOBAL_FWHASH);
      y.TOP_FWHASH := convert(x(left downto left-len(y.TOP_FWHASH)+1), y.TOP_FWHASH);
      left := left - len(y.TOP_FWHASH);
      y.XML_HASH := convert(x(left downto left-len(y.XML_HASH)+1), y.XML_HASH);
      left := left - len(y.XML_HASH);
      y.GLOBAL_FWVERSION := convert(x(left downto left-len(y.GLOBAL_FWVERSION)+1), y.GLOBAL_FWVERSION);
      left := left - len(y.GLOBAL_FWVERSION);
      y.TOP_FWVERSION := convert(x(left downto left-len(y.TOP_FWVERSION)+1), y.TOP_FWVERSION);
      left := left - len(y.TOP_FWVERSION);
      y.XML_VERSION := convert(x(left downto left-len(y.XML_VERSION)+1), y.XML_VERSION);
      left := left - len(y.XML_VERSION);
      y.HOG_FWHASH := convert(x(left downto left-len(y.HOG_FWHASH)+1), y.HOG_FWHASH);
      left := left - len(y.HOG_FWHASH);
      y.FRAMEWORK_FWVERSION := convert(x(left downto left-len(y.FRAMEWORK_FWVERSION)+1), y.FRAMEWORK_FWVERSION);
      left := left - len(y.FRAMEWORK_FWVERSION);
      y.FRAMEWORK_FWHASH := convert(x(left downto left-len(y.FRAMEWORK_FWHASH)+1), y.FRAMEWORK_FWHASH);
    end if;
    return y;
  end function convert;
  function nullify(t: FW_INFO_HOG_INFO_MON_t) return FW_INFO_HOG_INFO_MON_t is
  variable y: FW_INFO_HOG_INFO_MON_t;
  begin
    y.GLOBAL_FWDATE := nullify(t.GLOBAL_FWDATE);
    y.GLOBAL_FWTIME := nullify(t.GLOBAL_FWTIME);
    y.OFFICIAL := nullify(t.OFFICIAL);
    y.GLOBAL_FWHASH := nullify(t.GLOBAL_FWHASH);
    y.TOP_FWHASH := nullify(t.TOP_FWHASH);
    y.XML_HASH := nullify(t.XML_HASH);
    y.GLOBAL_FWVERSION := nullify(t.GLOBAL_FWVERSION);
    y.TOP_FWVERSION := nullify(t.TOP_FWVERSION);
    y.XML_VERSION := nullify(t.XML_VERSION);
    y.HOG_FWHASH := nullify(t.HOG_FWHASH);
    y.FRAMEWORK_FWVERSION := nullify(t.FRAMEWORK_FWVERSION);
    y.FRAMEWORK_FWHASH := nullify(t.FRAMEWORK_FWHASH);
    return y;
  end function nullify;
  function zeroed(t: FW_INFO_HOG_INFO_MON_t) return FW_INFO_HOG_INFO_MON_t is
  variable y: FW_INFO_HOG_INFO_MON_t;
  begin
    y.GLOBAL_FWDATE := zeroed(t.GLOBAL_FWDATE);
    y.GLOBAL_FWTIME := zeroed(t.GLOBAL_FWTIME);
    y.OFFICIAL := zeroed(t.OFFICIAL);
    y.GLOBAL_FWHASH := zeroed(t.GLOBAL_FWHASH);
    y.TOP_FWHASH := zeroed(t.TOP_FWHASH);
    y.XML_HASH := zeroed(t.XML_HASH);
    y.GLOBAL_FWVERSION := zeroed(t.GLOBAL_FWVERSION);
    y.TOP_FWVERSION := zeroed(t.TOP_FWVERSION);
    y.XML_VERSION := zeroed(t.XML_VERSION);
    y.HOG_FWHASH := zeroed(t.HOG_FWHASH);
    y.FRAMEWORK_FWVERSION := zeroed(t.FRAMEWORK_FWVERSION);
    y.FRAMEWORK_FWHASH := zeroed(t.FRAMEWORK_FWHASH);
    return y;
  end function zeroed;

  function len(x: FW_INFO_CONFIG_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.MAIN_CFG_COMPILE_HW);
    l := l + len(x.MAIN_CFG_COMPILE_UL);
    l := l + len(x.ST_nBARREL_ENDCAP);
    l := l + len(x.ENDCAP_nSMALL_LARGE);
    l := l + len(x.ENABLE_NEIGHBORS);
    l := l + len(x.SECTOR_ID);
    l := l + len(x.PHY_BARREL_R0);
    l := l + len(x.PHY_BARREL_R1);
    l := l + len(x.PHY_BARREL_R2);
    l := l + len(x.PHY_BARREL_R3);
    l := l + len(x.HPS_ENABLE_ST_INN);
    l := l + len(x.HPS_ENABLE_ST_EXT);
    l := l + len(x.HPS_ENABLE_ST_MID);
    l := l + len(x.HPS_ENABLE_ST_OUT);
    l := l + len(x.HPS_NUM_MDT_CH_INN);
    l := l + len(x.HPS_NUM_MDT_CH_EXT);
    l := l + len(x.HPS_NUM_MDT_CH_MID);
    l := l + len(x.HPS_NUM_MDT_CH_OUT);
    l := l + len(x.NUM_MTC);
    l := l + len(x.NUM_NSP);
    l := l + len(x.UCM_ENABLED);
    l := l + len(x.MPL_ENABLED);
    l := l + len(x.SF_ENABLED);
    l := l + len(x.SF_TYPE);
    l := l + len(x.NUM_DAQ_STREAMS);
    l := l + len(x.NUM_SF_INPUTS);
    l := l + len(x.NUM_SF_OUTPUTS);
    l := l + len(x.MAX_NUM_SL);
    l := l + len(x.NUM_THREADS);
    return l;
  end function len;
  function width(x: FW_INFO_CONFIG_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.MAIN_CFG_COMPILE_HW);
    l := l + width(x.MAIN_CFG_COMPILE_UL);
    l := l + width(x.ST_nBARREL_ENDCAP);
    l := l + width(x.ENDCAP_nSMALL_LARGE);
    l := l + width(x.ENABLE_NEIGHBORS);
    l := l + width(x.SECTOR_ID);
    l := l + width(x.PHY_BARREL_R0);
    l := l + width(x.PHY_BARREL_R1);
    l := l + width(x.PHY_BARREL_R2);
    l := l + width(x.PHY_BARREL_R3);
    l := l + width(x.HPS_ENABLE_ST_INN);
    l := l + width(x.HPS_ENABLE_ST_EXT);
    l := l + width(x.HPS_ENABLE_ST_MID);
    l := l + width(x.HPS_ENABLE_ST_OUT);
    l := l + width(x.HPS_NUM_MDT_CH_INN);
    l := l + width(x.HPS_NUM_MDT_CH_EXT);
    l := l + width(x.HPS_NUM_MDT_CH_MID);
    l := l + width(x.HPS_NUM_MDT_CH_OUT);
    l := l + width(x.NUM_MTC);
    l := l + width(x.NUM_NSP);
    l := l + width(x.UCM_ENABLED);
    l := l + width(x.MPL_ENABLED);
    l := l + width(x.SF_ENABLED);
    l := l + width(x.SF_TYPE);
    l := l + width(x.NUM_DAQ_STREAMS);
    l := l + width(x.NUM_SF_INPUTS);
    l := l + width(x.NUM_SF_OUTPUTS);
    l := l + width(x.MAX_NUM_SL);
    l := l + width(x.NUM_THREADS);
    return l;
  end function width;
  function vectorify(x: FW_INFO_CONFIG_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.MAIN_CFG_COMPILE_HW)-1), vectorify(x.MAIN_CFG_COMPILE_HW, y(left to left+len(x.MAIN_CFG_COMPILE_HW)-1)));
      left := left + len(x.MAIN_CFG_COMPILE_HW);
      assign(y(left to left+len(x.MAIN_CFG_COMPILE_UL)-1), vectorify(x.MAIN_CFG_COMPILE_UL, y(left to left+len(x.MAIN_CFG_COMPILE_UL)-1)));
      left := left + len(x.MAIN_CFG_COMPILE_UL);
      assign(y(left to left+len(x.ST_nBARREL_ENDCAP)-1), vectorify(x.ST_nBARREL_ENDCAP, y(left to left+len(x.ST_nBARREL_ENDCAP)-1)));
      left := left + len(x.ST_nBARREL_ENDCAP);
      assign(y(left to left+len(x.ENDCAP_nSMALL_LARGE)-1), vectorify(x.ENDCAP_nSMALL_LARGE, y(left to left+len(x.ENDCAP_nSMALL_LARGE)-1)));
      left := left + len(x.ENDCAP_nSMALL_LARGE);
      assign(y(left to left+len(x.ENABLE_NEIGHBORS)-1), vectorify(x.ENABLE_NEIGHBORS, y(left to left+len(x.ENABLE_NEIGHBORS)-1)));
      left := left + len(x.ENABLE_NEIGHBORS);
      assign(y(left to left+len(x.SECTOR_ID)-1), vectorify(x.SECTOR_ID, y(left to left+len(x.SECTOR_ID)-1)));
      left := left + len(x.SECTOR_ID);
      assign(y(left to left+len(x.PHY_BARREL_R0)-1), vectorify(x.PHY_BARREL_R0, y(left to left+len(x.PHY_BARREL_R0)-1)));
      left := left + len(x.PHY_BARREL_R0);
      assign(y(left to left+len(x.PHY_BARREL_R1)-1), vectorify(x.PHY_BARREL_R1, y(left to left+len(x.PHY_BARREL_R1)-1)));
      left := left + len(x.PHY_BARREL_R1);
      assign(y(left to left+len(x.PHY_BARREL_R2)-1), vectorify(x.PHY_BARREL_R2, y(left to left+len(x.PHY_BARREL_R2)-1)));
      left := left + len(x.PHY_BARREL_R2);
      assign(y(left to left+len(x.PHY_BARREL_R3)-1), vectorify(x.PHY_BARREL_R3, y(left to left+len(x.PHY_BARREL_R3)-1)));
      left := left + len(x.PHY_BARREL_R3);
      assign(y(left to left+len(x.HPS_ENABLE_ST_INN)-1), vectorify(x.HPS_ENABLE_ST_INN, y(left to left+len(x.HPS_ENABLE_ST_INN)-1)));
      left := left + len(x.HPS_ENABLE_ST_INN);
      assign(y(left to left+len(x.HPS_ENABLE_ST_EXT)-1), vectorify(x.HPS_ENABLE_ST_EXT, y(left to left+len(x.HPS_ENABLE_ST_EXT)-1)));
      left := left + len(x.HPS_ENABLE_ST_EXT);
      assign(y(left to left+len(x.HPS_ENABLE_ST_MID)-1), vectorify(x.HPS_ENABLE_ST_MID, y(left to left+len(x.HPS_ENABLE_ST_MID)-1)));
      left := left + len(x.HPS_ENABLE_ST_MID);
      assign(y(left to left+len(x.HPS_ENABLE_ST_OUT)-1), vectorify(x.HPS_ENABLE_ST_OUT, y(left to left+len(x.HPS_ENABLE_ST_OUT)-1)));
      left := left + len(x.HPS_ENABLE_ST_OUT);
      assign(y(left to left+len(x.HPS_NUM_MDT_CH_INN)-1), vectorify(x.HPS_NUM_MDT_CH_INN, y(left to left+len(x.HPS_NUM_MDT_CH_INN)-1)));
      left := left + len(x.HPS_NUM_MDT_CH_INN);
      assign(y(left to left+len(x.HPS_NUM_MDT_CH_EXT)-1), vectorify(x.HPS_NUM_MDT_CH_EXT, y(left to left+len(x.HPS_NUM_MDT_CH_EXT)-1)));
      left := left + len(x.HPS_NUM_MDT_CH_EXT);
      assign(y(left to left+len(x.HPS_NUM_MDT_CH_MID)-1), vectorify(x.HPS_NUM_MDT_CH_MID, y(left to left+len(x.HPS_NUM_MDT_CH_MID)-1)));
      left := left + len(x.HPS_NUM_MDT_CH_MID);
      assign(y(left to left+len(x.HPS_NUM_MDT_CH_OUT)-1), vectorify(x.HPS_NUM_MDT_CH_OUT, y(left to left+len(x.HPS_NUM_MDT_CH_OUT)-1)));
      left := left + len(x.HPS_NUM_MDT_CH_OUT);
      assign(y(left to left+len(x.NUM_MTC)-1), vectorify(x.NUM_MTC, y(left to left+len(x.NUM_MTC)-1)));
      left := left + len(x.NUM_MTC);
      assign(y(left to left+len(x.NUM_NSP)-1), vectorify(x.NUM_NSP, y(left to left+len(x.NUM_NSP)-1)));
      left := left + len(x.NUM_NSP);
      assign(y(left to left+len(x.UCM_ENABLED)-1), vectorify(x.UCM_ENABLED, y(left to left+len(x.UCM_ENABLED)-1)));
      left := left + len(x.UCM_ENABLED);
      assign(y(left to left+len(x.MPL_ENABLED)-1), vectorify(x.MPL_ENABLED, y(left to left+len(x.MPL_ENABLED)-1)));
      left := left + len(x.MPL_ENABLED);
      assign(y(left to left+len(x.SF_ENABLED)-1), vectorify(x.SF_ENABLED, y(left to left+len(x.SF_ENABLED)-1)));
      left := left + len(x.SF_ENABLED);
      assign(y(left to left+len(x.SF_TYPE)-1), vectorify(x.SF_TYPE, y(left to left+len(x.SF_TYPE)-1)));
      left := left + len(x.SF_TYPE);
      assign(y(left to left+len(x.NUM_DAQ_STREAMS)-1), vectorify(x.NUM_DAQ_STREAMS, y(left to left+len(x.NUM_DAQ_STREAMS)-1)));
      left := left + len(x.NUM_DAQ_STREAMS);
      assign(y(left to left+len(x.NUM_SF_INPUTS)-1), vectorify(x.NUM_SF_INPUTS, y(left to left+len(x.NUM_SF_INPUTS)-1)));
      left := left + len(x.NUM_SF_INPUTS);
      assign(y(left to left+len(x.NUM_SF_OUTPUTS)-1), vectorify(x.NUM_SF_OUTPUTS, y(left to left+len(x.NUM_SF_OUTPUTS)-1)));
      left := left + len(x.NUM_SF_OUTPUTS);
      assign(y(left to left+len(x.MAX_NUM_SL)-1), vectorify(x.MAX_NUM_SL, y(left to left+len(x.MAX_NUM_SL)-1)));
      left := left + len(x.MAX_NUM_SL);
      assign(y(left to left+len(x.NUM_THREADS)-1), vectorify(x.NUM_THREADS, y(left to left+len(x.NUM_THREADS)-1)));
    else
      assign(y(left downto left-len(x.MAIN_CFG_COMPILE_HW)+1), vectorify(x.MAIN_CFG_COMPILE_HW, y(left downto left-len(x.MAIN_CFG_COMPILE_HW)+1)));
      left := left - len(x.MAIN_CFG_COMPILE_HW);
      assign(y(left downto left-len(x.MAIN_CFG_COMPILE_UL)+1), vectorify(x.MAIN_CFG_COMPILE_UL, y(left downto left-len(x.MAIN_CFG_COMPILE_UL)+1)));
      left := left - len(x.MAIN_CFG_COMPILE_UL);
      assign(y(left downto left-len(x.ST_nBARREL_ENDCAP)+1), vectorify(x.ST_nBARREL_ENDCAP, y(left downto left-len(x.ST_nBARREL_ENDCAP)+1)));
      left := left - len(x.ST_nBARREL_ENDCAP);
      assign(y(left downto left-len(x.ENDCAP_nSMALL_LARGE)+1), vectorify(x.ENDCAP_nSMALL_LARGE, y(left downto left-len(x.ENDCAP_nSMALL_LARGE)+1)));
      left := left - len(x.ENDCAP_nSMALL_LARGE);
      assign(y(left downto left-len(x.ENABLE_NEIGHBORS)+1), vectorify(x.ENABLE_NEIGHBORS, y(left downto left-len(x.ENABLE_NEIGHBORS)+1)));
      left := left - len(x.ENABLE_NEIGHBORS);
      assign(y(left downto left-len(x.SECTOR_ID)+1), vectorify(x.SECTOR_ID, y(left downto left-len(x.SECTOR_ID)+1)));
      left := left - len(x.SECTOR_ID);
      assign(y(left downto left-len(x.PHY_BARREL_R0)+1), vectorify(x.PHY_BARREL_R0, y(left downto left-len(x.PHY_BARREL_R0)+1)));
      left := left - len(x.PHY_BARREL_R0);
      assign(y(left downto left-len(x.PHY_BARREL_R1)+1), vectorify(x.PHY_BARREL_R1, y(left downto left-len(x.PHY_BARREL_R1)+1)));
      left := left - len(x.PHY_BARREL_R1);
      assign(y(left downto left-len(x.PHY_BARREL_R2)+1), vectorify(x.PHY_BARREL_R2, y(left downto left-len(x.PHY_BARREL_R2)+1)));
      left := left - len(x.PHY_BARREL_R2);
      assign(y(left downto left-len(x.PHY_BARREL_R3)+1), vectorify(x.PHY_BARREL_R3, y(left downto left-len(x.PHY_BARREL_R3)+1)));
      left := left - len(x.PHY_BARREL_R3);
      assign(y(left downto left-len(x.HPS_ENABLE_ST_INN)+1), vectorify(x.HPS_ENABLE_ST_INN, y(left downto left-len(x.HPS_ENABLE_ST_INN)+1)));
      left := left - len(x.HPS_ENABLE_ST_INN);
      assign(y(left downto left-len(x.HPS_ENABLE_ST_EXT)+1), vectorify(x.HPS_ENABLE_ST_EXT, y(left downto left-len(x.HPS_ENABLE_ST_EXT)+1)));
      left := left - len(x.HPS_ENABLE_ST_EXT);
      assign(y(left downto left-len(x.HPS_ENABLE_ST_MID)+1), vectorify(x.HPS_ENABLE_ST_MID, y(left downto left-len(x.HPS_ENABLE_ST_MID)+1)));
      left := left - len(x.HPS_ENABLE_ST_MID);
      assign(y(left downto left-len(x.HPS_ENABLE_ST_OUT)+1), vectorify(x.HPS_ENABLE_ST_OUT, y(left downto left-len(x.HPS_ENABLE_ST_OUT)+1)));
      left := left - len(x.HPS_ENABLE_ST_OUT);
      assign(y(left downto left-len(x.HPS_NUM_MDT_CH_INN)+1), vectorify(x.HPS_NUM_MDT_CH_INN, y(left downto left-len(x.HPS_NUM_MDT_CH_INN)+1)));
      left := left - len(x.HPS_NUM_MDT_CH_INN);
      assign(y(left downto left-len(x.HPS_NUM_MDT_CH_EXT)+1), vectorify(x.HPS_NUM_MDT_CH_EXT, y(left downto left-len(x.HPS_NUM_MDT_CH_EXT)+1)));
      left := left - len(x.HPS_NUM_MDT_CH_EXT);
      assign(y(left downto left-len(x.HPS_NUM_MDT_CH_MID)+1), vectorify(x.HPS_NUM_MDT_CH_MID, y(left downto left-len(x.HPS_NUM_MDT_CH_MID)+1)));
      left := left - len(x.HPS_NUM_MDT_CH_MID);
      assign(y(left downto left-len(x.HPS_NUM_MDT_CH_OUT)+1), vectorify(x.HPS_NUM_MDT_CH_OUT, y(left downto left-len(x.HPS_NUM_MDT_CH_OUT)+1)));
      left := left - len(x.HPS_NUM_MDT_CH_OUT);
      assign(y(left downto left-len(x.NUM_MTC)+1), vectorify(x.NUM_MTC, y(left downto left-len(x.NUM_MTC)+1)));
      left := left - len(x.NUM_MTC);
      assign(y(left downto left-len(x.NUM_NSP)+1), vectorify(x.NUM_NSP, y(left downto left-len(x.NUM_NSP)+1)));
      left := left - len(x.NUM_NSP);
      assign(y(left downto left-len(x.UCM_ENABLED)+1), vectorify(x.UCM_ENABLED, y(left downto left-len(x.UCM_ENABLED)+1)));
      left := left - len(x.UCM_ENABLED);
      assign(y(left downto left-len(x.MPL_ENABLED)+1), vectorify(x.MPL_ENABLED, y(left downto left-len(x.MPL_ENABLED)+1)));
      left := left - len(x.MPL_ENABLED);
      assign(y(left downto left-len(x.SF_ENABLED)+1), vectorify(x.SF_ENABLED, y(left downto left-len(x.SF_ENABLED)+1)));
      left := left - len(x.SF_ENABLED);
      assign(y(left downto left-len(x.SF_TYPE)+1), vectorify(x.SF_TYPE, y(left downto left-len(x.SF_TYPE)+1)));
      left := left - len(x.SF_TYPE);
      assign(y(left downto left-len(x.NUM_DAQ_STREAMS)+1), vectorify(x.NUM_DAQ_STREAMS, y(left downto left-len(x.NUM_DAQ_STREAMS)+1)));
      left := left - len(x.NUM_DAQ_STREAMS);
      assign(y(left downto left-len(x.NUM_SF_INPUTS)+1), vectorify(x.NUM_SF_INPUTS, y(left downto left-len(x.NUM_SF_INPUTS)+1)));
      left := left - len(x.NUM_SF_INPUTS);
      assign(y(left downto left-len(x.NUM_SF_OUTPUTS)+1), vectorify(x.NUM_SF_OUTPUTS, y(left downto left-len(x.NUM_SF_OUTPUTS)+1)));
      left := left - len(x.NUM_SF_OUTPUTS);
      assign(y(left downto left-len(x.MAX_NUM_SL)+1), vectorify(x.MAX_NUM_SL, y(left downto left-len(x.MAX_NUM_SL)+1)));
      left := left - len(x.MAX_NUM_SL);
      assign(y(left downto left-len(x.NUM_THREADS)+1), vectorify(x.NUM_THREADS, y(left downto left-len(x.NUM_THREADS)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FW_INFO_CONFIG_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.MAIN_CFG_COMPILE_HW)-1), convert(x.MAIN_CFG_COMPILE_HW, y(left to left+len(x.MAIN_CFG_COMPILE_HW)-1)));
      left := left + len(x.MAIN_CFG_COMPILE_HW);
      assign(y(left to left+len(x.MAIN_CFG_COMPILE_UL)-1), convert(x.MAIN_CFG_COMPILE_UL, y(left to left+len(x.MAIN_CFG_COMPILE_UL)-1)));
      left := left + len(x.MAIN_CFG_COMPILE_UL);
      assign(y(left to left+len(x.ST_nBARREL_ENDCAP)-1), convert(x.ST_nBARREL_ENDCAP, y(left to left+len(x.ST_nBARREL_ENDCAP)-1)));
      left := left + len(x.ST_nBARREL_ENDCAP);
      assign(y(left to left+len(x.ENDCAP_nSMALL_LARGE)-1), convert(x.ENDCAP_nSMALL_LARGE, y(left to left+len(x.ENDCAP_nSMALL_LARGE)-1)));
      left := left + len(x.ENDCAP_nSMALL_LARGE);
      assign(y(left to left+len(x.ENABLE_NEIGHBORS)-1), convert(x.ENABLE_NEIGHBORS, y(left to left+len(x.ENABLE_NEIGHBORS)-1)));
      left := left + len(x.ENABLE_NEIGHBORS);
      assign(y(left to left+len(x.SECTOR_ID)-1), convert(x.SECTOR_ID, y(left to left+len(x.SECTOR_ID)-1)));
      left := left + len(x.SECTOR_ID);
      assign(y(left to left+len(x.PHY_BARREL_R0)-1), convert(x.PHY_BARREL_R0, y(left to left+len(x.PHY_BARREL_R0)-1)));
      left := left + len(x.PHY_BARREL_R0);
      assign(y(left to left+len(x.PHY_BARREL_R1)-1), convert(x.PHY_BARREL_R1, y(left to left+len(x.PHY_BARREL_R1)-1)));
      left := left + len(x.PHY_BARREL_R1);
      assign(y(left to left+len(x.PHY_BARREL_R2)-1), convert(x.PHY_BARREL_R2, y(left to left+len(x.PHY_BARREL_R2)-1)));
      left := left + len(x.PHY_BARREL_R2);
      assign(y(left to left+len(x.PHY_BARREL_R3)-1), convert(x.PHY_BARREL_R3, y(left to left+len(x.PHY_BARREL_R3)-1)));
      left := left + len(x.PHY_BARREL_R3);
      assign(y(left to left+len(x.HPS_ENABLE_ST_INN)-1), convert(x.HPS_ENABLE_ST_INN, y(left to left+len(x.HPS_ENABLE_ST_INN)-1)));
      left := left + len(x.HPS_ENABLE_ST_INN);
      assign(y(left to left+len(x.HPS_ENABLE_ST_EXT)-1), convert(x.HPS_ENABLE_ST_EXT, y(left to left+len(x.HPS_ENABLE_ST_EXT)-1)));
      left := left + len(x.HPS_ENABLE_ST_EXT);
      assign(y(left to left+len(x.HPS_ENABLE_ST_MID)-1), convert(x.HPS_ENABLE_ST_MID, y(left to left+len(x.HPS_ENABLE_ST_MID)-1)));
      left := left + len(x.HPS_ENABLE_ST_MID);
      assign(y(left to left+len(x.HPS_ENABLE_ST_OUT)-1), convert(x.HPS_ENABLE_ST_OUT, y(left to left+len(x.HPS_ENABLE_ST_OUT)-1)));
      left := left + len(x.HPS_ENABLE_ST_OUT);
      assign(y(left to left+len(x.HPS_NUM_MDT_CH_INN)-1), convert(x.HPS_NUM_MDT_CH_INN, y(left to left+len(x.HPS_NUM_MDT_CH_INN)-1)));
      left := left + len(x.HPS_NUM_MDT_CH_INN);
      assign(y(left to left+len(x.HPS_NUM_MDT_CH_EXT)-1), convert(x.HPS_NUM_MDT_CH_EXT, y(left to left+len(x.HPS_NUM_MDT_CH_EXT)-1)));
      left := left + len(x.HPS_NUM_MDT_CH_EXT);
      assign(y(left to left+len(x.HPS_NUM_MDT_CH_MID)-1), convert(x.HPS_NUM_MDT_CH_MID, y(left to left+len(x.HPS_NUM_MDT_CH_MID)-1)));
      left := left + len(x.HPS_NUM_MDT_CH_MID);
      assign(y(left to left+len(x.HPS_NUM_MDT_CH_OUT)-1), convert(x.HPS_NUM_MDT_CH_OUT, y(left to left+len(x.HPS_NUM_MDT_CH_OUT)-1)));
      left := left + len(x.HPS_NUM_MDT_CH_OUT);
      assign(y(left to left+len(x.NUM_MTC)-1), convert(x.NUM_MTC, y(left to left+len(x.NUM_MTC)-1)));
      left := left + len(x.NUM_MTC);
      assign(y(left to left+len(x.NUM_NSP)-1), convert(x.NUM_NSP, y(left to left+len(x.NUM_NSP)-1)));
      left := left + len(x.NUM_NSP);
      assign(y(left to left+len(x.UCM_ENABLED)-1), convert(x.UCM_ENABLED, y(left to left+len(x.UCM_ENABLED)-1)));
      left := left + len(x.UCM_ENABLED);
      assign(y(left to left+len(x.MPL_ENABLED)-1), convert(x.MPL_ENABLED, y(left to left+len(x.MPL_ENABLED)-1)));
      left := left + len(x.MPL_ENABLED);
      assign(y(left to left+len(x.SF_ENABLED)-1), convert(x.SF_ENABLED, y(left to left+len(x.SF_ENABLED)-1)));
      left := left + len(x.SF_ENABLED);
      assign(y(left to left+len(x.SF_TYPE)-1), convert(x.SF_TYPE, y(left to left+len(x.SF_TYPE)-1)));
      left := left + len(x.SF_TYPE);
      assign(y(left to left+len(x.NUM_DAQ_STREAMS)-1), convert(x.NUM_DAQ_STREAMS, y(left to left+len(x.NUM_DAQ_STREAMS)-1)));
      left := left + len(x.NUM_DAQ_STREAMS);
      assign(y(left to left+len(x.NUM_SF_INPUTS)-1), convert(x.NUM_SF_INPUTS, y(left to left+len(x.NUM_SF_INPUTS)-1)));
      left := left + len(x.NUM_SF_INPUTS);
      assign(y(left to left+len(x.NUM_SF_OUTPUTS)-1), convert(x.NUM_SF_OUTPUTS, y(left to left+len(x.NUM_SF_OUTPUTS)-1)));
      left := left + len(x.NUM_SF_OUTPUTS);
      assign(y(left to left+len(x.MAX_NUM_SL)-1), convert(x.MAX_NUM_SL, y(left to left+len(x.MAX_NUM_SL)-1)));
      left := left + len(x.MAX_NUM_SL);
      assign(y(left to left+len(x.NUM_THREADS)-1), convert(x.NUM_THREADS, y(left to left+len(x.NUM_THREADS)-1)));
    else
      assign(y(left downto left-len(x.MAIN_CFG_COMPILE_HW)+1), convert(x.MAIN_CFG_COMPILE_HW, y(left downto left-len(x.MAIN_CFG_COMPILE_HW)+1)));
      left := left - len(x.MAIN_CFG_COMPILE_HW);
      assign(y(left downto left-len(x.MAIN_CFG_COMPILE_UL)+1), convert(x.MAIN_CFG_COMPILE_UL, y(left downto left-len(x.MAIN_CFG_COMPILE_UL)+1)));
      left := left - len(x.MAIN_CFG_COMPILE_UL);
      assign(y(left downto left-len(x.ST_nBARREL_ENDCAP)+1), convert(x.ST_nBARREL_ENDCAP, y(left downto left-len(x.ST_nBARREL_ENDCAP)+1)));
      left := left - len(x.ST_nBARREL_ENDCAP);
      assign(y(left downto left-len(x.ENDCAP_nSMALL_LARGE)+1), convert(x.ENDCAP_nSMALL_LARGE, y(left downto left-len(x.ENDCAP_nSMALL_LARGE)+1)));
      left := left - len(x.ENDCAP_nSMALL_LARGE);
      assign(y(left downto left-len(x.ENABLE_NEIGHBORS)+1), convert(x.ENABLE_NEIGHBORS, y(left downto left-len(x.ENABLE_NEIGHBORS)+1)));
      left := left - len(x.ENABLE_NEIGHBORS);
      assign(y(left downto left-len(x.SECTOR_ID)+1), convert(x.SECTOR_ID, y(left downto left-len(x.SECTOR_ID)+1)));
      left := left - len(x.SECTOR_ID);
      assign(y(left downto left-len(x.PHY_BARREL_R0)+1), convert(x.PHY_BARREL_R0, y(left downto left-len(x.PHY_BARREL_R0)+1)));
      left := left - len(x.PHY_BARREL_R0);
      assign(y(left downto left-len(x.PHY_BARREL_R1)+1), convert(x.PHY_BARREL_R1, y(left downto left-len(x.PHY_BARREL_R1)+1)));
      left := left - len(x.PHY_BARREL_R1);
      assign(y(left downto left-len(x.PHY_BARREL_R2)+1), convert(x.PHY_BARREL_R2, y(left downto left-len(x.PHY_BARREL_R2)+1)));
      left := left - len(x.PHY_BARREL_R2);
      assign(y(left downto left-len(x.PHY_BARREL_R3)+1), convert(x.PHY_BARREL_R3, y(left downto left-len(x.PHY_BARREL_R3)+1)));
      left := left - len(x.PHY_BARREL_R3);
      assign(y(left downto left-len(x.HPS_ENABLE_ST_INN)+1), convert(x.HPS_ENABLE_ST_INN, y(left downto left-len(x.HPS_ENABLE_ST_INN)+1)));
      left := left - len(x.HPS_ENABLE_ST_INN);
      assign(y(left downto left-len(x.HPS_ENABLE_ST_EXT)+1), convert(x.HPS_ENABLE_ST_EXT, y(left downto left-len(x.HPS_ENABLE_ST_EXT)+1)));
      left := left - len(x.HPS_ENABLE_ST_EXT);
      assign(y(left downto left-len(x.HPS_ENABLE_ST_MID)+1), convert(x.HPS_ENABLE_ST_MID, y(left downto left-len(x.HPS_ENABLE_ST_MID)+1)));
      left := left - len(x.HPS_ENABLE_ST_MID);
      assign(y(left downto left-len(x.HPS_ENABLE_ST_OUT)+1), convert(x.HPS_ENABLE_ST_OUT, y(left downto left-len(x.HPS_ENABLE_ST_OUT)+1)));
      left := left - len(x.HPS_ENABLE_ST_OUT);
      assign(y(left downto left-len(x.HPS_NUM_MDT_CH_INN)+1), convert(x.HPS_NUM_MDT_CH_INN, y(left downto left-len(x.HPS_NUM_MDT_CH_INN)+1)));
      left := left - len(x.HPS_NUM_MDT_CH_INN);
      assign(y(left downto left-len(x.HPS_NUM_MDT_CH_EXT)+1), convert(x.HPS_NUM_MDT_CH_EXT, y(left downto left-len(x.HPS_NUM_MDT_CH_EXT)+1)));
      left := left - len(x.HPS_NUM_MDT_CH_EXT);
      assign(y(left downto left-len(x.HPS_NUM_MDT_CH_MID)+1), convert(x.HPS_NUM_MDT_CH_MID, y(left downto left-len(x.HPS_NUM_MDT_CH_MID)+1)));
      left := left - len(x.HPS_NUM_MDT_CH_MID);
      assign(y(left downto left-len(x.HPS_NUM_MDT_CH_OUT)+1), convert(x.HPS_NUM_MDT_CH_OUT, y(left downto left-len(x.HPS_NUM_MDT_CH_OUT)+1)));
      left := left - len(x.HPS_NUM_MDT_CH_OUT);
      assign(y(left downto left-len(x.NUM_MTC)+1), convert(x.NUM_MTC, y(left downto left-len(x.NUM_MTC)+1)));
      left := left - len(x.NUM_MTC);
      assign(y(left downto left-len(x.NUM_NSP)+1), convert(x.NUM_NSP, y(left downto left-len(x.NUM_NSP)+1)));
      left := left - len(x.NUM_NSP);
      assign(y(left downto left-len(x.UCM_ENABLED)+1), convert(x.UCM_ENABLED, y(left downto left-len(x.UCM_ENABLED)+1)));
      left := left - len(x.UCM_ENABLED);
      assign(y(left downto left-len(x.MPL_ENABLED)+1), convert(x.MPL_ENABLED, y(left downto left-len(x.MPL_ENABLED)+1)));
      left := left - len(x.MPL_ENABLED);
      assign(y(left downto left-len(x.SF_ENABLED)+1), convert(x.SF_ENABLED, y(left downto left-len(x.SF_ENABLED)+1)));
      left := left - len(x.SF_ENABLED);
      assign(y(left downto left-len(x.SF_TYPE)+1), convert(x.SF_TYPE, y(left downto left-len(x.SF_TYPE)+1)));
      left := left - len(x.SF_TYPE);
      assign(y(left downto left-len(x.NUM_DAQ_STREAMS)+1), convert(x.NUM_DAQ_STREAMS, y(left downto left-len(x.NUM_DAQ_STREAMS)+1)));
      left := left - len(x.NUM_DAQ_STREAMS);
      assign(y(left downto left-len(x.NUM_SF_INPUTS)+1), convert(x.NUM_SF_INPUTS, y(left downto left-len(x.NUM_SF_INPUTS)+1)));
      left := left - len(x.NUM_SF_INPUTS);
      assign(y(left downto left-len(x.NUM_SF_OUTPUTS)+1), convert(x.NUM_SF_OUTPUTS, y(left downto left-len(x.NUM_SF_OUTPUTS)+1)));
      left := left - len(x.NUM_SF_OUTPUTS);
      assign(y(left downto left-len(x.MAX_NUM_SL)+1), convert(x.MAX_NUM_SL, y(left downto left-len(x.MAX_NUM_SL)+1)));
      left := left - len(x.MAX_NUM_SL);
      assign(y(left downto left-len(x.NUM_THREADS)+1), convert(x.NUM_THREADS, y(left downto left-len(x.NUM_THREADS)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FW_INFO_CONFIG_MON_t) return FW_INFO_CONFIG_MON_t is
    variable y: FW_INFO_CONFIG_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.MAIN_CFG_COMPILE_HW := structify(x(left to left+len(y.MAIN_CFG_COMPILE_HW)-1), y.MAIN_CFG_COMPILE_HW);
      left := left + len(y.MAIN_CFG_COMPILE_HW);
      y.MAIN_CFG_COMPILE_UL := structify(x(left to left+len(y.MAIN_CFG_COMPILE_UL)-1), y.MAIN_CFG_COMPILE_UL);
      left := left + len(y.MAIN_CFG_COMPILE_UL);
      y.ST_nBARREL_ENDCAP := structify(x(left to left+len(y.ST_nBARREL_ENDCAP)-1), y.ST_nBARREL_ENDCAP);
      left := left + len(y.ST_nBARREL_ENDCAP);
      y.ENDCAP_nSMALL_LARGE := structify(x(left to left+len(y.ENDCAP_nSMALL_LARGE)-1), y.ENDCAP_nSMALL_LARGE);
      left := left + len(y.ENDCAP_nSMALL_LARGE);
      y.ENABLE_NEIGHBORS := structify(x(left to left+len(y.ENABLE_NEIGHBORS)-1), y.ENABLE_NEIGHBORS);
      left := left + len(y.ENABLE_NEIGHBORS);
      y.SECTOR_ID := structify(x(left to left+len(y.SECTOR_ID)-1), y.SECTOR_ID);
      left := left + len(y.SECTOR_ID);
      y.PHY_BARREL_R0 := structify(x(left to left+len(y.PHY_BARREL_R0)-1), y.PHY_BARREL_R0);
      left := left + len(y.PHY_BARREL_R0);
      y.PHY_BARREL_R1 := structify(x(left to left+len(y.PHY_BARREL_R1)-1), y.PHY_BARREL_R1);
      left := left + len(y.PHY_BARREL_R1);
      y.PHY_BARREL_R2 := structify(x(left to left+len(y.PHY_BARREL_R2)-1), y.PHY_BARREL_R2);
      left := left + len(y.PHY_BARREL_R2);
      y.PHY_BARREL_R3 := structify(x(left to left+len(y.PHY_BARREL_R3)-1), y.PHY_BARREL_R3);
      left := left + len(y.PHY_BARREL_R3);
      y.HPS_ENABLE_ST_INN := structify(x(left to left+len(y.HPS_ENABLE_ST_INN)-1), y.HPS_ENABLE_ST_INN);
      left := left + len(y.HPS_ENABLE_ST_INN);
      y.HPS_ENABLE_ST_EXT := structify(x(left to left+len(y.HPS_ENABLE_ST_EXT)-1), y.HPS_ENABLE_ST_EXT);
      left := left + len(y.HPS_ENABLE_ST_EXT);
      y.HPS_ENABLE_ST_MID := structify(x(left to left+len(y.HPS_ENABLE_ST_MID)-1), y.HPS_ENABLE_ST_MID);
      left := left + len(y.HPS_ENABLE_ST_MID);
      y.HPS_ENABLE_ST_OUT := structify(x(left to left+len(y.HPS_ENABLE_ST_OUT)-1), y.HPS_ENABLE_ST_OUT);
      left := left + len(y.HPS_ENABLE_ST_OUT);
      y.HPS_NUM_MDT_CH_INN := structify(x(left to left+len(y.HPS_NUM_MDT_CH_INN)-1), y.HPS_NUM_MDT_CH_INN);
      left := left + len(y.HPS_NUM_MDT_CH_INN);
      y.HPS_NUM_MDT_CH_EXT := structify(x(left to left+len(y.HPS_NUM_MDT_CH_EXT)-1), y.HPS_NUM_MDT_CH_EXT);
      left := left + len(y.HPS_NUM_MDT_CH_EXT);
      y.HPS_NUM_MDT_CH_MID := structify(x(left to left+len(y.HPS_NUM_MDT_CH_MID)-1), y.HPS_NUM_MDT_CH_MID);
      left := left + len(y.HPS_NUM_MDT_CH_MID);
      y.HPS_NUM_MDT_CH_OUT := structify(x(left to left+len(y.HPS_NUM_MDT_CH_OUT)-1), y.HPS_NUM_MDT_CH_OUT);
      left := left + len(y.HPS_NUM_MDT_CH_OUT);
      y.NUM_MTC := structify(x(left to left+len(y.NUM_MTC)-1), y.NUM_MTC);
      left := left + len(y.NUM_MTC);
      y.NUM_NSP := structify(x(left to left+len(y.NUM_NSP)-1), y.NUM_NSP);
      left := left + len(y.NUM_NSP);
      y.UCM_ENABLED := structify(x(left to left+len(y.UCM_ENABLED)-1), y.UCM_ENABLED);
      left := left + len(y.UCM_ENABLED);
      y.MPL_ENABLED := structify(x(left to left+len(y.MPL_ENABLED)-1), y.MPL_ENABLED);
      left := left + len(y.MPL_ENABLED);
      y.SF_ENABLED := structify(x(left to left+len(y.SF_ENABLED)-1), y.SF_ENABLED);
      left := left + len(y.SF_ENABLED);
      y.SF_TYPE := structify(x(left to left+len(y.SF_TYPE)-1), y.SF_TYPE);
      left := left + len(y.SF_TYPE);
      y.NUM_DAQ_STREAMS := structify(x(left to left+len(y.NUM_DAQ_STREAMS)-1), y.NUM_DAQ_STREAMS);
      left := left + len(y.NUM_DAQ_STREAMS);
      y.NUM_SF_INPUTS := structify(x(left to left+len(y.NUM_SF_INPUTS)-1), y.NUM_SF_INPUTS);
      left := left + len(y.NUM_SF_INPUTS);
      y.NUM_SF_OUTPUTS := structify(x(left to left+len(y.NUM_SF_OUTPUTS)-1), y.NUM_SF_OUTPUTS);
      left := left + len(y.NUM_SF_OUTPUTS);
      y.MAX_NUM_SL := structify(x(left to left+len(y.MAX_NUM_SL)-1), y.MAX_NUM_SL);
      left := left + len(y.MAX_NUM_SL);
      y.NUM_THREADS := structify(x(left to left+len(y.NUM_THREADS)-1), y.NUM_THREADS);
    else
      y.MAIN_CFG_COMPILE_HW := structify(x(left downto left-len(y.MAIN_CFG_COMPILE_HW)+1), y.MAIN_CFG_COMPILE_HW);
      left := left - len(y.MAIN_CFG_COMPILE_HW);
      y.MAIN_CFG_COMPILE_UL := structify(x(left downto left-len(y.MAIN_CFG_COMPILE_UL)+1), y.MAIN_CFG_COMPILE_UL);
      left := left - len(y.MAIN_CFG_COMPILE_UL);
      y.ST_nBARREL_ENDCAP := structify(x(left downto left-len(y.ST_nBARREL_ENDCAP)+1), y.ST_nBARREL_ENDCAP);
      left := left - len(y.ST_nBARREL_ENDCAP);
      y.ENDCAP_nSMALL_LARGE := structify(x(left downto left-len(y.ENDCAP_nSMALL_LARGE)+1), y.ENDCAP_nSMALL_LARGE);
      left := left - len(y.ENDCAP_nSMALL_LARGE);
      y.ENABLE_NEIGHBORS := structify(x(left downto left-len(y.ENABLE_NEIGHBORS)+1), y.ENABLE_NEIGHBORS);
      left := left - len(y.ENABLE_NEIGHBORS);
      y.SECTOR_ID := structify(x(left downto left-len(y.SECTOR_ID)+1), y.SECTOR_ID);
      left := left - len(y.SECTOR_ID);
      y.PHY_BARREL_R0 := structify(x(left downto left-len(y.PHY_BARREL_R0)+1), y.PHY_BARREL_R0);
      left := left - len(y.PHY_BARREL_R0);
      y.PHY_BARREL_R1 := structify(x(left downto left-len(y.PHY_BARREL_R1)+1), y.PHY_BARREL_R1);
      left := left - len(y.PHY_BARREL_R1);
      y.PHY_BARREL_R2 := structify(x(left downto left-len(y.PHY_BARREL_R2)+1), y.PHY_BARREL_R2);
      left := left - len(y.PHY_BARREL_R2);
      y.PHY_BARREL_R3 := structify(x(left downto left-len(y.PHY_BARREL_R3)+1), y.PHY_BARREL_R3);
      left := left - len(y.PHY_BARREL_R3);
      y.HPS_ENABLE_ST_INN := structify(x(left downto left-len(y.HPS_ENABLE_ST_INN)+1), y.HPS_ENABLE_ST_INN);
      left := left - len(y.HPS_ENABLE_ST_INN);
      y.HPS_ENABLE_ST_EXT := structify(x(left downto left-len(y.HPS_ENABLE_ST_EXT)+1), y.HPS_ENABLE_ST_EXT);
      left := left - len(y.HPS_ENABLE_ST_EXT);
      y.HPS_ENABLE_ST_MID := structify(x(left downto left-len(y.HPS_ENABLE_ST_MID)+1), y.HPS_ENABLE_ST_MID);
      left := left - len(y.HPS_ENABLE_ST_MID);
      y.HPS_ENABLE_ST_OUT := structify(x(left downto left-len(y.HPS_ENABLE_ST_OUT)+1), y.HPS_ENABLE_ST_OUT);
      left := left - len(y.HPS_ENABLE_ST_OUT);
      y.HPS_NUM_MDT_CH_INN := structify(x(left downto left-len(y.HPS_NUM_MDT_CH_INN)+1), y.HPS_NUM_MDT_CH_INN);
      left := left - len(y.HPS_NUM_MDT_CH_INN);
      y.HPS_NUM_MDT_CH_EXT := structify(x(left downto left-len(y.HPS_NUM_MDT_CH_EXT)+1), y.HPS_NUM_MDT_CH_EXT);
      left := left - len(y.HPS_NUM_MDT_CH_EXT);
      y.HPS_NUM_MDT_CH_MID := structify(x(left downto left-len(y.HPS_NUM_MDT_CH_MID)+1), y.HPS_NUM_MDT_CH_MID);
      left := left - len(y.HPS_NUM_MDT_CH_MID);
      y.HPS_NUM_MDT_CH_OUT := structify(x(left downto left-len(y.HPS_NUM_MDT_CH_OUT)+1), y.HPS_NUM_MDT_CH_OUT);
      left := left - len(y.HPS_NUM_MDT_CH_OUT);
      y.NUM_MTC := structify(x(left downto left-len(y.NUM_MTC)+1), y.NUM_MTC);
      left := left - len(y.NUM_MTC);
      y.NUM_NSP := structify(x(left downto left-len(y.NUM_NSP)+1), y.NUM_NSP);
      left := left - len(y.NUM_NSP);
      y.UCM_ENABLED := structify(x(left downto left-len(y.UCM_ENABLED)+1), y.UCM_ENABLED);
      left := left - len(y.UCM_ENABLED);
      y.MPL_ENABLED := structify(x(left downto left-len(y.MPL_ENABLED)+1), y.MPL_ENABLED);
      left := left - len(y.MPL_ENABLED);
      y.SF_ENABLED := structify(x(left downto left-len(y.SF_ENABLED)+1), y.SF_ENABLED);
      left := left - len(y.SF_ENABLED);
      y.SF_TYPE := structify(x(left downto left-len(y.SF_TYPE)+1), y.SF_TYPE);
      left := left - len(y.SF_TYPE);
      y.NUM_DAQ_STREAMS := structify(x(left downto left-len(y.NUM_DAQ_STREAMS)+1), y.NUM_DAQ_STREAMS);
      left := left - len(y.NUM_DAQ_STREAMS);
      y.NUM_SF_INPUTS := structify(x(left downto left-len(y.NUM_SF_INPUTS)+1), y.NUM_SF_INPUTS);
      left := left - len(y.NUM_SF_INPUTS);
      y.NUM_SF_OUTPUTS := structify(x(left downto left-len(y.NUM_SF_OUTPUTS)+1), y.NUM_SF_OUTPUTS);
      left := left - len(y.NUM_SF_OUTPUTS);
      y.MAX_NUM_SL := structify(x(left downto left-len(y.MAX_NUM_SL)+1), y.MAX_NUM_SL);
      left := left - len(y.MAX_NUM_SL);
      y.NUM_THREADS := structify(x(left downto left-len(y.NUM_THREADS)+1), y.NUM_THREADS);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FW_INFO_CONFIG_MON_t) return FW_INFO_CONFIG_MON_t is
    variable y: FW_INFO_CONFIG_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.MAIN_CFG_COMPILE_HW := convert(x(left to left+len(y.MAIN_CFG_COMPILE_HW)-1), y.MAIN_CFG_COMPILE_HW);
      left := left + len(y.MAIN_CFG_COMPILE_HW);
      y.MAIN_CFG_COMPILE_UL := convert(x(left to left+len(y.MAIN_CFG_COMPILE_UL)-1), y.MAIN_CFG_COMPILE_UL);
      left := left + len(y.MAIN_CFG_COMPILE_UL);
      y.ST_nBARREL_ENDCAP := convert(x(left to left+len(y.ST_nBARREL_ENDCAP)-1), y.ST_nBARREL_ENDCAP);
      left := left + len(y.ST_nBARREL_ENDCAP);
      y.ENDCAP_nSMALL_LARGE := convert(x(left to left+len(y.ENDCAP_nSMALL_LARGE)-1), y.ENDCAP_nSMALL_LARGE);
      left := left + len(y.ENDCAP_nSMALL_LARGE);
      y.ENABLE_NEIGHBORS := convert(x(left to left+len(y.ENABLE_NEIGHBORS)-1), y.ENABLE_NEIGHBORS);
      left := left + len(y.ENABLE_NEIGHBORS);
      y.SECTOR_ID := convert(x(left to left+len(y.SECTOR_ID)-1), y.SECTOR_ID);
      left := left + len(y.SECTOR_ID);
      y.PHY_BARREL_R0 := convert(x(left to left+len(y.PHY_BARREL_R0)-1), y.PHY_BARREL_R0);
      left := left + len(y.PHY_BARREL_R0);
      y.PHY_BARREL_R1 := convert(x(left to left+len(y.PHY_BARREL_R1)-1), y.PHY_BARREL_R1);
      left := left + len(y.PHY_BARREL_R1);
      y.PHY_BARREL_R2 := convert(x(left to left+len(y.PHY_BARREL_R2)-1), y.PHY_BARREL_R2);
      left := left + len(y.PHY_BARREL_R2);
      y.PHY_BARREL_R3 := convert(x(left to left+len(y.PHY_BARREL_R3)-1), y.PHY_BARREL_R3);
      left := left + len(y.PHY_BARREL_R3);
      y.HPS_ENABLE_ST_INN := convert(x(left to left+len(y.HPS_ENABLE_ST_INN)-1), y.HPS_ENABLE_ST_INN);
      left := left + len(y.HPS_ENABLE_ST_INN);
      y.HPS_ENABLE_ST_EXT := convert(x(left to left+len(y.HPS_ENABLE_ST_EXT)-1), y.HPS_ENABLE_ST_EXT);
      left := left + len(y.HPS_ENABLE_ST_EXT);
      y.HPS_ENABLE_ST_MID := convert(x(left to left+len(y.HPS_ENABLE_ST_MID)-1), y.HPS_ENABLE_ST_MID);
      left := left + len(y.HPS_ENABLE_ST_MID);
      y.HPS_ENABLE_ST_OUT := convert(x(left to left+len(y.HPS_ENABLE_ST_OUT)-1), y.HPS_ENABLE_ST_OUT);
      left := left + len(y.HPS_ENABLE_ST_OUT);
      y.HPS_NUM_MDT_CH_INN := convert(x(left to left+len(y.HPS_NUM_MDT_CH_INN)-1), y.HPS_NUM_MDT_CH_INN);
      left := left + len(y.HPS_NUM_MDT_CH_INN);
      y.HPS_NUM_MDT_CH_EXT := convert(x(left to left+len(y.HPS_NUM_MDT_CH_EXT)-1), y.HPS_NUM_MDT_CH_EXT);
      left := left + len(y.HPS_NUM_MDT_CH_EXT);
      y.HPS_NUM_MDT_CH_MID := convert(x(left to left+len(y.HPS_NUM_MDT_CH_MID)-1), y.HPS_NUM_MDT_CH_MID);
      left := left + len(y.HPS_NUM_MDT_CH_MID);
      y.HPS_NUM_MDT_CH_OUT := convert(x(left to left+len(y.HPS_NUM_MDT_CH_OUT)-1), y.HPS_NUM_MDT_CH_OUT);
      left := left + len(y.HPS_NUM_MDT_CH_OUT);
      y.NUM_MTC := convert(x(left to left+len(y.NUM_MTC)-1), y.NUM_MTC);
      left := left + len(y.NUM_MTC);
      y.NUM_NSP := convert(x(left to left+len(y.NUM_NSP)-1), y.NUM_NSP);
      left := left + len(y.NUM_NSP);
      y.UCM_ENABLED := convert(x(left to left+len(y.UCM_ENABLED)-1), y.UCM_ENABLED);
      left := left + len(y.UCM_ENABLED);
      y.MPL_ENABLED := convert(x(left to left+len(y.MPL_ENABLED)-1), y.MPL_ENABLED);
      left := left + len(y.MPL_ENABLED);
      y.SF_ENABLED := convert(x(left to left+len(y.SF_ENABLED)-1), y.SF_ENABLED);
      left := left + len(y.SF_ENABLED);
      y.SF_TYPE := convert(x(left to left+len(y.SF_TYPE)-1), y.SF_TYPE);
      left := left + len(y.SF_TYPE);
      y.NUM_DAQ_STREAMS := convert(x(left to left+len(y.NUM_DAQ_STREAMS)-1), y.NUM_DAQ_STREAMS);
      left := left + len(y.NUM_DAQ_STREAMS);
      y.NUM_SF_INPUTS := convert(x(left to left+len(y.NUM_SF_INPUTS)-1), y.NUM_SF_INPUTS);
      left := left + len(y.NUM_SF_INPUTS);
      y.NUM_SF_OUTPUTS := convert(x(left to left+len(y.NUM_SF_OUTPUTS)-1), y.NUM_SF_OUTPUTS);
      left := left + len(y.NUM_SF_OUTPUTS);
      y.MAX_NUM_SL := convert(x(left to left+len(y.MAX_NUM_SL)-1), y.MAX_NUM_SL);
      left := left + len(y.MAX_NUM_SL);
      y.NUM_THREADS := convert(x(left to left+len(y.NUM_THREADS)-1), y.NUM_THREADS);
    else
      y.MAIN_CFG_COMPILE_HW := convert(x(left downto left-len(y.MAIN_CFG_COMPILE_HW)+1), y.MAIN_CFG_COMPILE_HW);
      left := left - len(y.MAIN_CFG_COMPILE_HW);
      y.MAIN_CFG_COMPILE_UL := convert(x(left downto left-len(y.MAIN_CFG_COMPILE_UL)+1), y.MAIN_CFG_COMPILE_UL);
      left := left - len(y.MAIN_CFG_COMPILE_UL);
      y.ST_nBARREL_ENDCAP := convert(x(left downto left-len(y.ST_nBARREL_ENDCAP)+1), y.ST_nBARREL_ENDCAP);
      left := left - len(y.ST_nBARREL_ENDCAP);
      y.ENDCAP_nSMALL_LARGE := convert(x(left downto left-len(y.ENDCAP_nSMALL_LARGE)+1), y.ENDCAP_nSMALL_LARGE);
      left := left - len(y.ENDCAP_nSMALL_LARGE);
      y.ENABLE_NEIGHBORS := convert(x(left downto left-len(y.ENABLE_NEIGHBORS)+1), y.ENABLE_NEIGHBORS);
      left := left - len(y.ENABLE_NEIGHBORS);
      y.SECTOR_ID := convert(x(left downto left-len(y.SECTOR_ID)+1), y.SECTOR_ID);
      left := left - len(y.SECTOR_ID);
      y.PHY_BARREL_R0 := convert(x(left downto left-len(y.PHY_BARREL_R0)+1), y.PHY_BARREL_R0);
      left := left - len(y.PHY_BARREL_R0);
      y.PHY_BARREL_R1 := convert(x(left downto left-len(y.PHY_BARREL_R1)+1), y.PHY_BARREL_R1);
      left := left - len(y.PHY_BARREL_R1);
      y.PHY_BARREL_R2 := convert(x(left downto left-len(y.PHY_BARREL_R2)+1), y.PHY_BARREL_R2);
      left := left - len(y.PHY_BARREL_R2);
      y.PHY_BARREL_R3 := convert(x(left downto left-len(y.PHY_BARREL_R3)+1), y.PHY_BARREL_R3);
      left := left - len(y.PHY_BARREL_R3);
      y.HPS_ENABLE_ST_INN := convert(x(left downto left-len(y.HPS_ENABLE_ST_INN)+1), y.HPS_ENABLE_ST_INN);
      left := left - len(y.HPS_ENABLE_ST_INN);
      y.HPS_ENABLE_ST_EXT := convert(x(left downto left-len(y.HPS_ENABLE_ST_EXT)+1), y.HPS_ENABLE_ST_EXT);
      left := left - len(y.HPS_ENABLE_ST_EXT);
      y.HPS_ENABLE_ST_MID := convert(x(left downto left-len(y.HPS_ENABLE_ST_MID)+1), y.HPS_ENABLE_ST_MID);
      left := left - len(y.HPS_ENABLE_ST_MID);
      y.HPS_ENABLE_ST_OUT := convert(x(left downto left-len(y.HPS_ENABLE_ST_OUT)+1), y.HPS_ENABLE_ST_OUT);
      left := left - len(y.HPS_ENABLE_ST_OUT);
      y.HPS_NUM_MDT_CH_INN := convert(x(left downto left-len(y.HPS_NUM_MDT_CH_INN)+1), y.HPS_NUM_MDT_CH_INN);
      left := left - len(y.HPS_NUM_MDT_CH_INN);
      y.HPS_NUM_MDT_CH_EXT := convert(x(left downto left-len(y.HPS_NUM_MDT_CH_EXT)+1), y.HPS_NUM_MDT_CH_EXT);
      left := left - len(y.HPS_NUM_MDT_CH_EXT);
      y.HPS_NUM_MDT_CH_MID := convert(x(left downto left-len(y.HPS_NUM_MDT_CH_MID)+1), y.HPS_NUM_MDT_CH_MID);
      left := left - len(y.HPS_NUM_MDT_CH_MID);
      y.HPS_NUM_MDT_CH_OUT := convert(x(left downto left-len(y.HPS_NUM_MDT_CH_OUT)+1), y.HPS_NUM_MDT_CH_OUT);
      left := left - len(y.HPS_NUM_MDT_CH_OUT);
      y.NUM_MTC := convert(x(left downto left-len(y.NUM_MTC)+1), y.NUM_MTC);
      left := left - len(y.NUM_MTC);
      y.NUM_NSP := convert(x(left downto left-len(y.NUM_NSP)+1), y.NUM_NSP);
      left := left - len(y.NUM_NSP);
      y.UCM_ENABLED := convert(x(left downto left-len(y.UCM_ENABLED)+1), y.UCM_ENABLED);
      left := left - len(y.UCM_ENABLED);
      y.MPL_ENABLED := convert(x(left downto left-len(y.MPL_ENABLED)+1), y.MPL_ENABLED);
      left := left - len(y.MPL_ENABLED);
      y.SF_ENABLED := convert(x(left downto left-len(y.SF_ENABLED)+1), y.SF_ENABLED);
      left := left - len(y.SF_ENABLED);
      y.SF_TYPE := convert(x(left downto left-len(y.SF_TYPE)+1), y.SF_TYPE);
      left := left - len(y.SF_TYPE);
      y.NUM_DAQ_STREAMS := convert(x(left downto left-len(y.NUM_DAQ_STREAMS)+1), y.NUM_DAQ_STREAMS);
      left := left - len(y.NUM_DAQ_STREAMS);
      y.NUM_SF_INPUTS := convert(x(left downto left-len(y.NUM_SF_INPUTS)+1), y.NUM_SF_INPUTS);
      left := left - len(y.NUM_SF_INPUTS);
      y.NUM_SF_OUTPUTS := convert(x(left downto left-len(y.NUM_SF_OUTPUTS)+1), y.NUM_SF_OUTPUTS);
      left := left - len(y.NUM_SF_OUTPUTS);
      y.MAX_NUM_SL := convert(x(left downto left-len(y.MAX_NUM_SL)+1), y.MAX_NUM_SL);
      left := left - len(y.MAX_NUM_SL);
      y.NUM_THREADS := convert(x(left downto left-len(y.NUM_THREADS)+1), y.NUM_THREADS);
    end if;
    return y;
  end function convert;
  function nullify(t: FW_INFO_CONFIG_MON_t) return FW_INFO_CONFIG_MON_t is
  variable y: FW_INFO_CONFIG_MON_t;
  begin
    y.MAIN_CFG_COMPILE_HW := nullify(t.MAIN_CFG_COMPILE_HW);
    y.MAIN_CFG_COMPILE_UL := nullify(t.MAIN_CFG_COMPILE_UL);
    y.ST_nBARREL_ENDCAP := nullify(t.ST_nBARREL_ENDCAP);
    y.ENDCAP_nSMALL_LARGE := nullify(t.ENDCAP_nSMALL_LARGE);
    y.ENABLE_NEIGHBORS := nullify(t.ENABLE_NEIGHBORS);
    y.SECTOR_ID := nullify(t.SECTOR_ID);
    y.PHY_BARREL_R0 := nullify(t.PHY_BARREL_R0);
    y.PHY_BARREL_R1 := nullify(t.PHY_BARREL_R1);
    y.PHY_BARREL_R2 := nullify(t.PHY_BARREL_R2);
    y.PHY_BARREL_R3 := nullify(t.PHY_BARREL_R3);
    y.HPS_ENABLE_ST_INN := nullify(t.HPS_ENABLE_ST_INN);
    y.HPS_ENABLE_ST_EXT := nullify(t.HPS_ENABLE_ST_EXT);
    y.HPS_ENABLE_ST_MID := nullify(t.HPS_ENABLE_ST_MID);
    y.HPS_ENABLE_ST_OUT := nullify(t.HPS_ENABLE_ST_OUT);
    y.HPS_NUM_MDT_CH_INN := nullify(t.HPS_NUM_MDT_CH_INN);
    y.HPS_NUM_MDT_CH_EXT := nullify(t.HPS_NUM_MDT_CH_EXT);
    y.HPS_NUM_MDT_CH_MID := nullify(t.HPS_NUM_MDT_CH_MID);
    y.HPS_NUM_MDT_CH_OUT := nullify(t.HPS_NUM_MDT_CH_OUT);
    y.NUM_MTC := nullify(t.NUM_MTC);
    y.NUM_NSP := nullify(t.NUM_NSP);
    y.UCM_ENABLED := nullify(t.UCM_ENABLED);
    y.MPL_ENABLED := nullify(t.MPL_ENABLED);
    y.SF_ENABLED := nullify(t.SF_ENABLED);
    y.SF_TYPE := nullify(t.SF_TYPE);
    y.NUM_DAQ_STREAMS := nullify(t.NUM_DAQ_STREAMS);
    y.NUM_SF_INPUTS := nullify(t.NUM_SF_INPUTS);
    y.NUM_SF_OUTPUTS := nullify(t.NUM_SF_OUTPUTS);
    y.MAX_NUM_SL := nullify(t.MAX_NUM_SL);
    y.NUM_THREADS := nullify(t.NUM_THREADS);
    return y;
  end function nullify;
  function zeroed(t: FW_INFO_CONFIG_MON_t) return FW_INFO_CONFIG_MON_t is
  variable y: FW_INFO_CONFIG_MON_t;
  begin
    y.MAIN_CFG_COMPILE_HW := zeroed(t.MAIN_CFG_COMPILE_HW);
    y.MAIN_CFG_COMPILE_UL := zeroed(t.MAIN_CFG_COMPILE_UL);
    y.ST_nBARREL_ENDCAP := zeroed(t.ST_nBARREL_ENDCAP);
    y.ENDCAP_nSMALL_LARGE := zeroed(t.ENDCAP_nSMALL_LARGE);
    y.ENABLE_NEIGHBORS := zeroed(t.ENABLE_NEIGHBORS);
    y.SECTOR_ID := zeroed(t.SECTOR_ID);
    y.PHY_BARREL_R0 := zeroed(t.PHY_BARREL_R0);
    y.PHY_BARREL_R1 := zeroed(t.PHY_BARREL_R1);
    y.PHY_BARREL_R2 := zeroed(t.PHY_BARREL_R2);
    y.PHY_BARREL_R3 := zeroed(t.PHY_BARREL_R3);
    y.HPS_ENABLE_ST_INN := zeroed(t.HPS_ENABLE_ST_INN);
    y.HPS_ENABLE_ST_EXT := zeroed(t.HPS_ENABLE_ST_EXT);
    y.HPS_ENABLE_ST_MID := zeroed(t.HPS_ENABLE_ST_MID);
    y.HPS_ENABLE_ST_OUT := zeroed(t.HPS_ENABLE_ST_OUT);
    y.HPS_NUM_MDT_CH_INN := zeroed(t.HPS_NUM_MDT_CH_INN);
    y.HPS_NUM_MDT_CH_EXT := zeroed(t.HPS_NUM_MDT_CH_EXT);
    y.HPS_NUM_MDT_CH_MID := zeroed(t.HPS_NUM_MDT_CH_MID);
    y.HPS_NUM_MDT_CH_OUT := zeroed(t.HPS_NUM_MDT_CH_OUT);
    y.NUM_MTC := zeroed(t.NUM_MTC);
    y.NUM_NSP := zeroed(t.NUM_NSP);
    y.UCM_ENABLED := zeroed(t.UCM_ENABLED);
    y.MPL_ENABLED := zeroed(t.MPL_ENABLED);
    y.SF_ENABLED := zeroed(t.SF_ENABLED);
    y.SF_TYPE := zeroed(t.SF_TYPE);
    y.NUM_DAQ_STREAMS := zeroed(t.NUM_DAQ_STREAMS);
    y.NUM_SF_INPUTS := zeroed(t.NUM_SF_INPUTS);
    y.NUM_SF_OUTPUTS := zeroed(t.NUM_SF_OUTPUTS);
    y.MAX_NUM_SL := zeroed(t.MAX_NUM_SL);
    y.NUM_THREADS := zeroed(t.NUM_THREADS);
    return y;
  end function zeroed;

  function len(x: FW_INFO_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.FW_INFO);
    l := l + len(x.HOG_INFO);
    l := l + len(x.CONFIG);
    return l;
  end function len;
  function width(x: FW_INFO_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.FW_INFO);
    l := l + width(x.HOG_INFO);
    l := l + width(x.CONFIG);
    return l;
  end function width;
  function vectorify(x: FW_INFO_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.FW_INFO)-1), vectorify(x.FW_INFO, y(left to left+len(x.FW_INFO)-1)));
      left := left + len(x.FW_INFO);
      assign(y(left to left+len(x.HOG_INFO)-1), vectorify(x.HOG_INFO, y(left to left+len(x.HOG_INFO)-1)));
      left := left + len(x.HOG_INFO);
      assign(y(left to left+len(x.CONFIG)-1), vectorify(x.CONFIG, y(left to left+len(x.CONFIG)-1)));
    else
      assign(y(left downto left-len(x.FW_INFO)+1), vectorify(x.FW_INFO, y(left downto left-len(x.FW_INFO)+1)));
      left := left - len(x.FW_INFO);
      assign(y(left downto left-len(x.HOG_INFO)+1), vectorify(x.HOG_INFO, y(left downto left-len(x.HOG_INFO)+1)));
      left := left - len(x.HOG_INFO);
      assign(y(left downto left-len(x.CONFIG)+1), vectorify(x.CONFIG, y(left downto left-len(x.CONFIG)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FW_INFO_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.FW_INFO)-1), convert(x.FW_INFO, y(left to left+len(x.FW_INFO)-1)));
      left := left + len(x.FW_INFO);
      assign(y(left to left+len(x.HOG_INFO)-1), convert(x.HOG_INFO, y(left to left+len(x.HOG_INFO)-1)));
      left := left + len(x.HOG_INFO);
      assign(y(left to left+len(x.CONFIG)-1), convert(x.CONFIG, y(left to left+len(x.CONFIG)-1)));
    else
      assign(y(left downto left-len(x.FW_INFO)+1), convert(x.FW_INFO, y(left downto left-len(x.FW_INFO)+1)));
      left := left - len(x.FW_INFO);
      assign(y(left downto left-len(x.HOG_INFO)+1), convert(x.HOG_INFO, y(left downto left-len(x.HOG_INFO)+1)));
      left := left - len(x.HOG_INFO);
      assign(y(left downto left-len(x.CONFIG)+1), convert(x.CONFIG, y(left downto left-len(x.CONFIG)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FW_INFO_MON_t) return FW_INFO_MON_t is
    variable y: FW_INFO_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.FW_INFO := structify(x(left to left+len(y.FW_INFO)-1), y.FW_INFO);
      left := left + len(y.FW_INFO);
      y.HOG_INFO := structify(x(left to left+len(y.HOG_INFO)-1), y.HOG_INFO);
      left := left + len(y.HOG_INFO);
      y.CONFIG := structify(x(left to left+len(y.CONFIG)-1), y.CONFIG);
    else
      y.FW_INFO := structify(x(left downto left-len(y.FW_INFO)+1), y.FW_INFO);
      left := left - len(y.FW_INFO);
      y.HOG_INFO := structify(x(left downto left-len(y.HOG_INFO)+1), y.HOG_INFO);
      left := left - len(y.HOG_INFO);
      y.CONFIG := structify(x(left downto left-len(y.CONFIG)+1), y.CONFIG);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FW_INFO_MON_t) return FW_INFO_MON_t is
    variable y: FW_INFO_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.FW_INFO := convert(x(left to left+len(y.FW_INFO)-1), y.FW_INFO);
      left := left + len(y.FW_INFO);
      y.HOG_INFO := convert(x(left to left+len(y.HOG_INFO)-1), y.HOG_INFO);
      left := left + len(y.HOG_INFO);
      y.CONFIG := convert(x(left to left+len(y.CONFIG)-1), y.CONFIG);
    else
      y.FW_INFO := convert(x(left downto left-len(y.FW_INFO)+1), y.FW_INFO);
      left := left - len(y.FW_INFO);
      y.HOG_INFO := convert(x(left downto left-len(y.HOG_INFO)+1), y.HOG_INFO);
      left := left - len(y.HOG_INFO);
      y.CONFIG := convert(x(left downto left-len(y.CONFIG)+1), y.CONFIG);
    end if;
    return y;
  end function convert;
  function nullify(t: FW_INFO_MON_t) return FW_INFO_MON_t is
  variable y: FW_INFO_MON_t;
  begin
    y.FW_INFO := nullify(t.FW_INFO);
    y.HOG_INFO := nullify(t.HOG_INFO);
    y.CONFIG := nullify(t.CONFIG);
    return y;
  end function nullify;
  function zeroed(t: FW_INFO_MON_t) return FW_INFO_MON_t is
  variable y: FW_INFO_MON_t;
  begin
    y.FW_INFO := zeroed(t.FW_INFO);
    y.HOG_INFO := zeroed(t.HOG_INFO);
    y.CONFIG := zeroed(t.CONFIG);
    return y;
  end function zeroed;

end package body FW_INFO_CTRL;
