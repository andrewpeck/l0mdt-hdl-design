-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl
-- 2022-03-16 16:47:26

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.common_ieee_pkg.all;

package FW_INFO_CTRL is

   -- Custom types and functions --

   type FW_INFO_FW_INFO_BUILD_DATE_MON_t is record
      DAY : std_logic_vector(8 - 1 downto 0);
      MONTH : std_logic_vector(8 - 1 downto 0);
      YEAR : std_logic_vector(16 - 1 downto 0);
   end record FW_INFO_FW_INFO_BUILD_DATE_MON_t;
   function width(x: FW_INFO_FW_INFO_BUILD_DATE_MON_t) return natural;
   function convert(x: FW_INFO_FW_INFO_BUILD_DATE_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: FW_INFO_FW_INFO_BUILD_DATE_MON_t) return FW_INFO_FW_INFO_BUILD_DATE_MON_t;

   type FW_INFO_FW_INFO_BUILD_TIME_MON_t is record
      SEC : std_logic_vector(8 - 1 downto 0);
      MIN : std_logic_vector(8 - 1 downto 0);
      HOUR : std_logic_vector(8 - 1 downto 0);
   end record FW_INFO_FW_INFO_BUILD_TIME_MON_t;
   function width(x: FW_INFO_FW_INFO_BUILD_TIME_MON_t) return natural;
   function convert(x: FW_INFO_FW_INFO_BUILD_TIME_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: FW_INFO_FW_INFO_BUILD_TIME_MON_t) return FW_INFO_FW_INFO_BUILD_TIME_MON_t;

   type FW_INFO_FW_INFO_MON_t is record
      GIT_VALID : std_logic;
      GIT_HASH_1 : std_logic_vector(32 - 1 downto 0);
      GIT_HASH_2 : std_logic_vector(32 - 1 downto 0);
      GIT_HASH_3 : std_logic_vector(32 - 1 downto 0);
      GIT_HASH_4 : std_logic_vector(32 - 1 downto 0);
      GIT_HASH_5 : std_logic_vector(32 - 1 downto 0);
      BUILD_DATE : FW_INFO_FW_INFO_BUILD_DATE_MON_t;
      BUILD_TIME : FW_INFO_FW_INFO_BUILD_TIME_MON_t;
   end record FW_INFO_FW_INFO_MON_t;
   function width(x: FW_INFO_FW_INFO_MON_t) return natural;
   function convert(x: FW_INFO_FW_INFO_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: FW_INFO_FW_INFO_MON_t) return FW_INFO_FW_INFO_MON_t;

   type FW_INFO_HOG_INFO_MON_t is record
      GLOBAL_FWDATE : std_logic_vector(32 - 1 downto 0);
      GLOBAL_FWTIME : std_logic_vector(32 - 1 downto 0);
      OFFICIAL : std_logic_vector(32 - 1 downto 0);
      GLOBAL_FWHASH : std_logic_vector(32 - 1 downto 0);
      TOP_FWHASH : std_logic_vector(32 - 1 downto 0);
      XML_HASH : std_logic_vector(32 - 1 downto 0);
      GLOBAL_FWVERSION : std_logic_vector(32 - 1 downto 0);
      TOP_FWVERSION : std_logic_vector(32 - 1 downto 0);
      XML_VERSION : std_logic_vector(32 - 1 downto 0);
      HOG_FWHASH : std_logic_vector(32 - 1 downto 0);
      FRAMEWORK_FWVERSION : std_logic_vector(32 - 1 downto 0);
      FRAMEWORK_FWHASH : std_logic_vector(32 - 1 downto 0);
   end record FW_INFO_HOG_INFO_MON_t;
   function width(x: FW_INFO_HOG_INFO_MON_t) return natural;
   function convert(x: FW_INFO_HOG_INFO_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: FW_INFO_HOG_INFO_MON_t) return FW_INFO_HOG_INFO_MON_t;

   type FW_INFO_CONFIG_MON_t is record
      MAIN_CFG_COMPILE_HW : std_logic;
      MAIN_CFG_COMPILE_UL : std_logic;
      ST_nBARREL_ENDCAP : std_logic;
      ENDCAP_nSMALL_LARGE : std_logic;
      ENABLE_NEIGHBORS : std_logic;
      SECTOR_ID : std_logic_vector(32 - 1 downto 0);
      PHY_BARREL_R0 : std_logic_vector(32 - 1 downto 0);
      PHY_BARREL_R1 : std_logic_vector(32 - 1 downto 0);
      PHY_BARREL_R2 : std_logic_vector(32 - 1 downto 0);
      PHY_BARREL_R3 : std_logic_vector(32 - 1 downto 0);
      HPS_ENABLE_ST_INN : std_logic;
      HPS_ENABLE_ST_EXT : std_logic;
      HPS_ENABLE_ST_MID : std_logic;
      HPS_ENABLE_ST_OUT : std_logic;
      HPS_NUM_MDT_CH_INN : std_logic_vector(8 - 1 downto 0);
      HPS_NUM_MDT_CH_EXT : std_logic_vector(8 - 1 downto 0);
      HPS_NUM_MDT_CH_MID : std_logic_vector(8 - 1 downto 0);
      HPS_NUM_MDT_CH_OUT : std_logic_vector(8 - 1 downto 0);
      NUM_MTC : std_logic_vector(8 - 1 downto 0);
      NUM_NSP : std_logic_vector(8 - 1 downto 0);
      UCM_ENABLED : std_logic;
      MPL_ENABLED : std_logic;
      SF_ENABLED : std_logic;
      SF_TYPE : std_logic;
      NUM_DAQ_STREAMS : std_logic_vector(8 - 1 downto 0);
      NUM_SF_INPUTS : std_logic_vector(8 - 1 downto 0);
      NUM_SF_OUTPUTS : std_logic_vector(8 - 1 downto 0);
      MAX_NUM_SL : std_logic_vector(8 - 1 downto 0);
      NUM_THREADS : std_logic_vector(8 - 1 downto 0);
   end record FW_INFO_CONFIG_MON_t;
   function width(x: FW_INFO_CONFIG_MON_t) return natural;
   function convert(x: FW_INFO_CONFIG_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: FW_INFO_CONFIG_MON_t) return FW_INFO_CONFIG_MON_t;

   type FW_INFO_MON_t is record
      FW_INFO : FW_INFO_FW_INFO_MON_t;
      HOG_INFO : FW_INFO_HOG_INFO_MON_t;
      CONFIG : FW_INFO_CONFIG_MON_t;
   end record FW_INFO_MON_t;
   function width(x: FW_INFO_MON_t) return natural;
   function convert(x: FW_INFO_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: FW_INFO_MON_t) return FW_INFO_MON_t;

end package FW_INFO_CTRL;

------------------------------------------------------------

package body FW_INFO_CTRL is

   -- Custom types and functions --

   function width(x: FW_INFO_FW_INFO_BUILD_DATE_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.DAY);
      w := w + width(x.MONTH);
      w := w + width(x.YEAR);
      return w;
   end function width;
   function convert(x: FW_INFO_FW_INFO_BUILD_DATE_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.DAY);
         y(u to u+w-1) := convert(x.DAY, y(u to u+w-1));
         u := u + w;
         w := width(x.MONTH);
         y(u to u+w-1) := convert(x.MONTH, y(u to u+w-1));
         u := u + w;
         w := width(x.YEAR);
         y(u to u+w-1) := convert(x.YEAR, y(u to u+w-1));
      else
         w := width(x.DAY);
         y(u downto u-w+1) := convert(x.DAY, y(u downto u-w+1));
         u := u - w;
         w := width(x.MONTH);
         y(u downto u-w+1) := convert(x.MONTH, y(u downto u-w+1));
         u := u - w;
         w := width(x.YEAR);
         y(u downto u-w+1) := convert(x.YEAR, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: FW_INFO_FW_INFO_BUILD_DATE_MON_t) return FW_INFO_FW_INFO_BUILD_DATE_MON_t is
      variable y : FW_INFO_FW_INFO_BUILD_DATE_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.DAY);
         y.DAY := convert(x(u to u+w-1), t.DAY);
         u := u + w;
         w := width(t.MONTH);
         y.MONTH := convert(x(u to u+w-1), t.MONTH);
         u := u + w;
         w := width(t.YEAR);
         y.YEAR := convert(x(u to u+w-1), t.YEAR);
      else
         w := width(t.DAY);
         y.DAY := convert(x(u downto u-w+1), t.DAY);
         u := u - w;
         w := width(t.MONTH);
         y.MONTH := convert(x(u downto u-w+1), t.MONTH);
         u := u - w;
         w := width(t.YEAR);
         y.YEAR := convert(x(u downto u-w+1), t.YEAR);
      end if;
      return y;
   end function convert;

   function width(x: FW_INFO_FW_INFO_BUILD_TIME_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.SEC);
      w := w + width(x.MIN);
      w := w + width(x.HOUR);
      return w;
   end function width;
   function convert(x: FW_INFO_FW_INFO_BUILD_TIME_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.SEC);
         y(u to u+w-1) := convert(x.SEC, y(u to u+w-1));
         u := u + w;
         w := width(x.MIN);
         y(u to u+w-1) := convert(x.MIN, y(u to u+w-1));
         u := u + w;
         w := width(x.HOUR);
         y(u to u+w-1) := convert(x.HOUR, y(u to u+w-1));
      else
         w := width(x.SEC);
         y(u downto u-w+1) := convert(x.SEC, y(u downto u-w+1));
         u := u - w;
         w := width(x.MIN);
         y(u downto u-w+1) := convert(x.MIN, y(u downto u-w+1));
         u := u - w;
         w := width(x.HOUR);
         y(u downto u-w+1) := convert(x.HOUR, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: FW_INFO_FW_INFO_BUILD_TIME_MON_t) return FW_INFO_FW_INFO_BUILD_TIME_MON_t is
      variable y : FW_INFO_FW_INFO_BUILD_TIME_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.SEC);
         y.SEC := convert(x(u to u+w-1), t.SEC);
         u := u + w;
         w := width(t.MIN);
         y.MIN := convert(x(u to u+w-1), t.MIN);
         u := u + w;
         w := width(t.HOUR);
         y.HOUR := convert(x(u to u+w-1), t.HOUR);
      else
         w := width(t.SEC);
         y.SEC := convert(x(u downto u-w+1), t.SEC);
         u := u - w;
         w := width(t.MIN);
         y.MIN := convert(x(u downto u-w+1), t.MIN);
         u := u - w;
         w := width(t.HOUR);
         y.HOUR := convert(x(u downto u-w+1), t.HOUR);
      end if;
      return y;
   end function convert;

   function width(x: FW_INFO_FW_INFO_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.GIT_VALID);
      w := w + width(x.GIT_HASH_1);
      w := w + width(x.GIT_HASH_2);
      w := w + width(x.GIT_HASH_3);
      w := w + width(x.GIT_HASH_4);
      w := w + width(x.GIT_HASH_5);
      w := w + width(x.BUILD_DATE);
      w := w + width(x.BUILD_TIME);
      return w;
   end function width;
   function convert(x: FW_INFO_FW_INFO_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.GIT_VALID);
         y(u to u+w-1) := convert(x.GIT_VALID, y(u to u+w-1));
         u := u + w;
         w := width(x.GIT_HASH_1);
         y(u to u+w-1) := convert(x.GIT_HASH_1, y(u to u+w-1));
         u := u + w;
         w := width(x.GIT_HASH_2);
         y(u to u+w-1) := convert(x.GIT_HASH_2, y(u to u+w-1));
         u := u + w;
         w := width(x.GIT_HASH_3);
         y(u to u+w-1) := convert(x.GIT_HASH_3, y(u to u+w-1));
         u := u + w;
         w := width(x.GIT_HASH_4);
         y(u to u+w-1) := convert(x.GIT_HASH_4, y(u to u+w-1));
         u := u + w;
         w := width(x.GIT_HASH_5);
         y(u to u+w-1) := convert(x.GIT_HASH_5, y(u to u+w-1));
         u := u + w;
         w := width(x.BUILD_DATE);
         y(u to u+w-1) := convert(x.BUILD_DATE, y(u to u+w-1));
         u := u + w;
         w := width(x.BUILD_TIME);
         y(u to u+w-1) := convert(x.BUILD_TIME, y(u to u+w-1));
      else
         w := width(x.GIT_VALID);
         y(u downto u-w+1) := convert(x.GIT_VALID, y(u downto u-w+1));
         u := u - w;
         w := width(x.GIT_HASH_1);
         y(u downto u-w+1) := convert(x.GIT_HASH_1, y(u downto u-w+1));
         u := u - w;
         w := width(x.GIT_HASH_2);
         y(u downto u-w+1) := convert(x.GIT_HASH_2, y(u downto u-w+1));
         u := u - w;
         w := width(x.GIT_HASH_3);
         y(u downto u-w+1) := convert(x.GIT_HASH_3, y(u downto u-w+1));
         u := u - w;
         w := width(x.GIT_HASH_4);
         y(u downto u-w+1) := convert(x.GIT_HASH_4, y(u downto u-w+1));
         u := u - w;
         w := width(x.GIT_HASH_5);
         y(u downto u-w+1) := convert(x.GIT_HASH_5, y(u downto u-w+1));
         u := u - w;
         w := width(x.BUILD_DATE);
         y(u downto u-w+1) := convert(x.BUILD_DATE, y(u downto u-w+1));
         u := u - w;
         w := width(x.BUILD_TIME);
         y(u downto u-w+1) := convert(x.BUILD_TIME, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: FW_INFO_FW_INFO_MON_t) return FW_INFO_FW_INFO_MON_t is
      variable y : FW_INFO_FW_INFO_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.GIT_VALID);
         y.GIT_VALID := convert(x(u to u+w-1), t.GIT_VALID);
         u := u + w;
         w := width(t.GIT_HASH_1);
         y.GIT_HASH_1 := convert(x(u to u+w-1), t.GIT_HASH_1);
         u := u + w;
         w := width(t.GIT_HASH_2);
         y.GIT_HASH_2 := convert(x(u to u+w-1), t.GIT_HASH_2);
         u := u + w;
         w := width(t.GIT_HASH_3);
         y.GIT_HASH_3 := convert(x(u to u+w-1), t.GIT_HASH_3);
         u := u + w;
         w := width(t.GIT_HASH_4);
         y.GIT_HASH_4 := convert(x(u to u+w-1), t.GIT_HASH_4);
         u := u + w;
         w := width(t.GIT_HASH_5);
         y.GIT_HASH_5 := convert(x(u to u+w-1), t.GIT_HASH_5);
         u := u + w;
         w := width(t.BUILD_DATE);
         y.BUILD_DATE := convert(x(u to u+w-1), t.BUILD_DATE);
         u := u + w;
         w := width(t.BUILD_TIME);
         y.BUILD_TIME := convert(x(u to u+w-1), t.BUILD_TIME);
      else
         w := width(t.GIT_VALID);
         y.GIT_VALID := convert(x(u downto u-w+1), t.GIT_VALID);
         u := u - w;
         w := width(t.GIT_HASH_1);
         y.GIT_HASH_1 := convert(x(u downto u-w+1), t.GIT_HASH_1);
         u := u - w;
         w := width(t.GIT_HASH_2);
         y.GIT_HASH_2 := convert(x(u downto u-w+1), t.GIT_HASH_2);
         u := u - w;
         w := width(t.GIT_HASH_3);
         y.GIT_HASH_3 := convert(x(u downto u-w+1), t.GIT_HASH_3);
         u := u - w;
         w := width(t.GIT_HASH_4);
         y.GIT_HASH_4 := convert(x(u downto u-w+1), t.GIT_HASH_4);
         u := u - w;
         w := width(t.GIT_HASH_5);
         y.GIT_HASH_5 := convert(x(u downto u-w+1), t.GIT_HASH_5);
         u := u - w;
         w := width(t.BUILD_DATE);
         y.BUILD_DATE := convert(x(u downto u-w+1), t.BUILD_DATE);
         u := u - w;
         w := width(t.BUILD_TIME);
         y.BUILD_TIME := convert(x(u downto u-w+1), t.BUILD_TIME);
      end if;
      return y;
   end function convert;

   function width(x: FW_INFO_HOG_INFO_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.GLOBAL_FWDATE);
      w := w + width(x.GLOBAL_FWTIME);
      w := w + width(x.OFFICIAL);
      w := w + width(x.GLOBAL_FWHASH);
      w := w + width(x.TOP_FWHASH);
      w := w + width(x.XML_HASH);
      w := w + width(x.GLOBAL_FWVERSION);
      w := w + width(x.TOP_FWVERSION);
      w := w + width(x.XML_VERSION);
      w := w + width(x.HOG_FWHASH);
      w := w + width(x.FRAMEWORK_FWVERSION);
      w := w + width(x.FRAMEWORK_FWHASH);
      return w;
   end function width;
   function convert(x: FW_INFO_HOG_INFO_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.GLOBAL_FWDATE);
         y(u to u+w-1) := convert(x.GLOBAL_FWDATE, y(u to u+w-1));
         u := u + w;
         w := width(x.GLOBAL_FWTIME);
         y(u to u+w-1) := convert(x.GLOBAL_FWTIME, y(u to u+w-1));
         u := u + w;
         w := width(x.OFFICIAL);
         y(u to u+w-1) := convert(x.OFFICIAL, y(u to u+w-1));
         u := u + w;
         w := width(x.GLOBAL_FWHASH);
         y(u to u+w-1) := convert(x.GLOBAL_FWHASH, y(u to u+w-1));
         u := u + w;
         w := width(x.TOP_FWHASH);
         y(u to u+w-1) := convert(x.TOP_FWHASH, y(u to u+w-1));
         u := u + w;
         w := width(x.XML_HASH);
         y(u to u+w-1) := convert(x.XML_HASH, y(u to u+w-1));
         u := u + w;
         w := width(x.GLOBAL_FWVERSION);
         y(u to u+w-1) := convert(x.GLOBAL_FWVERSION, y(u to u+w-1));
         u := u + w;
         w := width(x.TOP_FWVERSION);
         y(u to u+w-1) := convert(x.TOP_FWVERSION, y(u to u+w-1));
         u := u + w;
         w := width(x.XML_VERSION);
         y(u to u+w-1) := convert(x.XML_VERSION, y(u to u+w-1));
         u := u + w;
         w := width(x.HOG_FWHASH);
         y(u to u+w-1) := convert(x.HOG_FWHASH, y(u to u+w-1));
         u := u + w;
         w := width(x.FRAMEWORK_FWVERSION);
         y(u to u+w-1) := convert(x.FRAMEWORK_FWVERSION, y(u to u+w-1));
         u := u + w;
         w := width(x.FRAMEWORK_FWHASH);
         y(u to u+w-1) := convert(x.FRAMEWORK_FWHASH, y(u to u+w-1));
      else
         w := width(x.GLOBAL_FWDATE);
         y(u downto u-w+1) := convert(x.GLOBAL_FWDATE, y(u downto u-w+1));
         u := u - w;
         w := width(x.GLOBAL_FWTIME);
         y(u downto u-w+1) := convert(x.GLOBAL_FWTIME, y(u downto u-w+1));
         u := u - w;
         w := width(x.OFFICIAL);
         y(u downto u-w+1) := convert(x.OFFICIAL, y(u downto u-w+1));
         u := u - w;
         w := width(x.GLOBAL_FWHASH);
         y(u downto u-w+1) := convert(x.GLOBAL_FWHASH, y(u downto u-w+1));
         u := u - w;
         w := width(x.TOP_FWHASH);
         y(u downto u-w+1) := convert(x.TOP_FWHASH, y(u downto u-w+1));
         u := u - w;
         w := width(x.XML_HASH);
         y(u downto u-w+1) := convert(x.XML_HASH, y(u downto u-w+1));
         u := u - w;
         w := width(x.GLOBAL_FWVERSION);
         y(u downto u-w+1) := convert(x.GLOBAL_FWVERSION, y(u downto u-w+1));
         u := u - w;
         w := width(x.TOP_FWVERSION);
         y(u downto u-w+1) := convert(x.TOP_FWVERSION, y(u downto u-w+1));
         u := u - w;
         w := width(x.XML_VERSION);
         y(u downto u-w+1) := convert(x.XML_VERSION, y(u downto u-w+1));
         u := u - w;
         w := width(x.HOG_FWHASH);
         y(u downto u-w+1) := convert(x.HOG_FWHASH, y(u downto u-w+1));
         u := u - w;
         w := width(x.FRAMEWORK_FWVERSION);
         y(u downto u-w+1) := convert(x.FRAMEWORK_FWVERSION, y(u downto u-w+1));
         u := u - w;
         w := width(x.FRAMEWORK_FWHASH);
         y(u downto u-w+1) := convert(x.FRAMEWORK_FWHASH, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: FW_INFO_HOG_INFO_MON_t) return FW_INFO_HOG_INFO_MON_t is
      variable y : FW_INFO_HOG_INFO_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.GLOBAL_FWDATE);
         y.GLOBAL_FWDATE := convert(x(u to u+w-1), t.GLOBAL_FWDATE);
         u := u + w;
         w := width(t.GLOBAL_FWTIME);
         y.GLOBAL_FWTIME := convert(x(u to u+w-1), t.GLOBAL_FWTIME);
         u := u + w;
         w := width(t.OFFICIAL);
         y.OFFICIAL := convert(x(u to u+w-1), t.OFFICIAL);
         u := u + w;
         w := width(t.GLOBAL_FWHASH);
         y.GLOBAL_FWHASH := convert(x(u to u+w-1), t.GLOBAL_FWHASH);
         u := u + w;
         w := width(t.TOP_FWHASH);
         y.TOP_FWHASH := convert(x(u to u+w-1), t.TOP_FWHASH);
         u := u + w;
         w := width(t.XML_HASH);
         y.XML_HASH := convert(x(u to u+w-1), t.XML_HASH);
         u := u + w;
         w := width(t.GLOBAL_FWVERSION);
         y.GLOBAL_FWVERSION := convert(x(u to u+w-1), t.GLOBAL_FWVERSION);
         u := u + w;
         w := width(t.TOP_FWVERSION);
         y.TOP_FWVERSION := convert(x(u to u+w-1), t.TOP_FWVERSION);
         u := u + w;
         w := width(t.XML_VERSION);
         y.XML_VERSION := convert(x(u to u+w-1), t.XML_VERSION);
         u := u + w;
         w := width(t.HOG_FWHASH);
         y.HOG_FWHASH := convert(x(u to u+w-1), t.HOG_FWHASH);
         u := u + w;
         w := width(t.FRAMEWORK_FWVERSION);
         y.FRAMEWORK_FWVERSION := convert(x(u to u+w-1), t.FRAMEWORK_FWVERSION);
         u := u + w;
         w := width(t.FRAMEWORK_FWHASH);
         y.FRAMEWORK_FWHASH := convert(x(u to u+w-1), t.FRAMEWORK_FWHASH);
      else
         w := width(t.GLOBAL_FWDATE);
         y.GLOBAL_FWDATE := convert(x(u downto u-w+1), t.GLOBAL_FWDATE);
         u := u - w;
         w := width(t.GLOBAL_FWTIME);
         y.GLOBAL_FWTIME := convert(x(u downto u-w+1), t.GLOBAL_FWTIME);
         u := u - w;
         w := width(t.OFFICIAL);
         y.OFFICIAL := convert(x(u downto u-w+1), t.OFFICIAL);
         u := u - w;
         w := width(t.GLOBAL_FWHASH);
         y.GLOBAL_FWHASH := convert(x(u downto u-w+1), t.GLOBAL_FWHASH);
         u := u - w;
         w := width(t.TOP_FWHASH);
         y.TOP_FWHASH := convert(x(u downto u-w+1), t.TOP_FWHASH);
         u := u - w;
         w := width(t.XML_HASH);
         y.XML_HASH := convert(x(u downto u-w+1), t.XML_HASH);
         u := u - w;
         w := width(t.GLOBAL_FWVERSION);
         y.GLOBAL_FWVERSION := convert(x(u downto u-w+1), t.GLOBAL_FWVERSION);
         u := u - w;
         w := width(t.TOP_FWVERSION);
         y.TOP_FWVERSION := convert(x(u downto u-w+1), t.TOP_FWVERSION);
         u := u - w;
         w := width(t.XML_VERSION);
         y.XML_VERSION := convert(x(u downto u-w+1), t.XML_VERSION);
         u := u - w;
         w := width(t.HOG_FWHASH);
         y.HOG_FWHASH := convert(x(u downto u-w+1), t.HOG_FWHASH);
         u := u - w;
         w := width(t.FRAMEWORK_FWVERSION);
         y.FRAMEWORK_FWVERSION := convert(x(u downto u-w+1), t.FRAMEWORK_FWVERSION);
         u := u - w;
         w := width(t.FRAMEWORK_FWHASH);
         y.FRAMEWORK_FWHASH := convert(x(u downto u-w+1), t.FRAMEWORK_FWHASH);
      end if;
      return y;
   end function convert;

   function width(x: FW_INFO_CONFIG_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.MAIN_CFG_COMPILE_HW);
      w := w + width(x.MAIN_CFG_COMPILE_UL);
      w := w + width(x.ST_nBARREL_ENDCAP);
      w := w + width(x.ENDCAP_nSMALL_LARGE);
      w := w + width(x.ENABLE_NEIGHBORS);
      w := w + width(x.SECTOR_ID);
      w := w + width(x.PHY_BARREL_R0);
      w := w + width(x.PHY_BARREL_R1);
      w := w + width(x.PHY_BARREL_R2);
      w := w + width(x.PHY_BARREL_R3);
      w := w + width(x.HPS_ENABLE_ST_INN);
      w := w + width(x.HPS_ENABLE_ST_EXT);
      w := w + width(x.HPS_ENABLE_ST_MID);
      w := w + width(x.HPS_ENABLE_ST_OUT);
      w := w + width(x.HPS_NUM_MDT_CH_INN);
      w := w + width(x.HPS_NUM_MDT_CH_EXT);
      w := w + width(x.HPS_NUM_MDT_CH_MID);
      w := w + width(x.HPS_NUM_MDT_CH_OUT);
      w := w + width(x.NUM_MTC);
      w := w + width(x.NUM_NSP);
      w := w + width(x.UCM_ENABLED);
      w := w + width(x.MPL_ENABLED);
      w := w + width(x.SF_ENABLED);
      w := w + width(x.SF_TYPE);
      w := w + width(x.NUM_DAQ_STREAMS);
      w := w + width(x.NUM_SF_INPUTS);
      w := w + width(x.NUM_SF_OUTPUTS);
      w := w + width(x.MAX_NUM_SL);
      w := w + width(x.NUM_THREADS);
      return w;
   end function width;
   function convert(x: FW_INFO_CONFIG_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.MAIN_CFG_COMPILE_HW);
         y(u to u+w-1) := convert(x.MAIN_CFG_COMPILE_HW, y(u to u+w-1));
         u := u + w;
         w := width(x.MAIN_CFG_COMPILE_UL);
         y(u to u+w-1) := convert(x.MAIN_CFG_COMPILE_UL, y(u to u+w-1));
         u := u + w;
         w := width(x.ST_nBARREL_ENDCAP);
         y(u to u+w-1) := convert(x.ST_nBARREL_ENDCAP, y(u to u+w-1));
         u := u + w;
         w := width(x.ENDCAP_nSMALL_LARGE);
         y(u to u+w-1) := convert(x.ENDCAP_nSMALL_LARGE, y(u to u+w-1));
         u := u + w;
         w := width(x.ENABLE_NEIGHBORS);
         y(u to u+w-1) := convert(x.ENABLE_NEIGHBORS, y(u to u+w-1));
         u := u + w;
         w := width(x.SECTOR_ID);
         y(u to u+w-1) := convert(x.SECTOR_ID, y(u to u+w-1));
         u := u + w;
         w := width(x.PHY_BARREL_R0);
         y(u to u+w-1) := convert(x.PHY_BARREL_R0, y(u to u+w-1));
         u := u + w;
         w := width(x.PHY_BARREL_R1);
         y(u to u+w-1) := convert(x.PHY_BARREL_R1, y(u to u+w-1));
         u := u + w;
         w := width(x.PHY_BARREL_R2);
         y(u to u+w-1) := convert(x.PHY_BARREL_R2, y(u to u+w-1));
         u := u + w;
         w := width(x.PHY_BARREL_R3);
         y(u to u+w-1) := convert(x.PHY_BARREL_R3, y(u to u+w-1));
         u := u + w;
         w := width(x.HPS_ENABLE_ST_INN);
         y(u to u+w-1) := convert(x.HPS_ENABLE_ST_INN, y(u to u+w-1));
         u := u + w;
         w := width(x.HPS_ENABLE_ST_EXT);
         y(u to u+w-1) := convert(x.HPS_ENABLE_ST_EXT, y(u to u+w-1));
         u := u + w;
         w := width(x.HPS_ENABLE_ST_MID);
         y(u to u+w-1) := convert(x.HPS_ENABLE_ST_MID, y(u to u+w-1));
         u := u + w;
         w := width(x.HPS_ENABLE_ST_OUT);
         y(u to u+w-1) := convert(x.HPS_ENABLE_ST_OUT, y(u to u+w-1));
         u := u + w;
         w := width(x.HPS_NUM_MDT_CH_INN);
         y(u to u+w-1) := convert(x.HPS_NUM_MDT_CH_INN, y(u to u+w-1));
         u := u + w;
         w := width(x.HPS_NUM_MDT_CH_EXT);
         y(u to u+w-1) := convert(x.HPS_NUM_MDT_CH_EXT, y(u to u+w-1));
         u := u + w;
         w := width(x.HPS_NUM_MDT_CH_MID);
         y(u to u+w-1) := convert(x.HPS_NUM_MDT_CH_MID, y(u to u+w-1));
         u := u + w;
         w := width(x.HPS_NUM_MDT_CH_OUT);
         y(u to u+w-1) := convert(x.HPS_NUM_MDT_CH_OUT, y(u to u+w-1));
         u := u + w;
         w := width(x.NUM_MTC);
         y(u to u+w-1) := convert(x.NUM_MTC, y(u to u+w-1));
         u := u + w;
         w := width(x.NUM_NSP);
         y(u to u+w-1) := convert(x.NUM_NSP, y(u to u+w-1));
         u := u + w;
         w := width(x.UCM_ENABLED);
         y(u to u+w-1) := convert(x.UCM_ENABLED, y(u to u+w-1));
         u := u + w;
         w := width(x.MPL_ENABLED);
         y(u to u+w-1) := convert(x.MPL_ENABLED, y(u to u+w-1));
         u := u + w;
         w := width(x.SF_ENABLED);
         y(u to u+w-1) := convert(x.SF_ENABLED, y(u to u+w-1));
         u := u + w;
         w := width(x.SF_TYPE);
         y(u to u+w-1) := convert(x.SF_TYPE, y(u to u+w-1));
         u := u + w;
         w := width(x.NUM_DAQ_STREAMS);
         y(u to u+w-1) := convert(x.NUM_DAQ_STREAMS, y(u to u+w-1));
         u := u + w;
         w := width(x.NUM_SF_INPUTS);
         y(u to u+w-1) := convert(x.NUM_SF_INPUTS, y(u to u+w-1));
         u := u + w;
         w := width(x.NUM_SF_OUTPUTS);
         y(u to u+w-1) := convert(x.NUM_SF_OUTPUTS, y(u to u+w-1));
         u := u + w;
         w := width(x.MAX_NUM_SL);
         y(u to u+w-1) := convert(x.MAX_NUM_SL, y(u to u+w-1));
         u := u + w;
         w := width(x.NUM_THREADS);
         y(u to u+w-1) := convert(x.NUM_THREADS, y(u to u+w-1));
      else
         w := width(x.MAIN_CFG_COMPILE_HW);
         y(u downto u-w+1) := convert(x.MAIN_CFG_COMPILE_HW, y(u downto u-w+1));
         u := u - w;
         w := width(x.MAIN_CFG_COMPILE_UL);
         y(u downto u-w+1) := convert(x.MAIN_CFG_COMPILE_UL, y(u downto u-w+1));
         u := u - w;
         w := width(x.ST_nBARREL_ENDCAP);
         y(u downto u-w+1) := convert(x.ST_nBARREL_ENDCAP, y(u downto u-w+1));
         u := u - w;
         w := width(x.ENDCAP_nSMALL_LARGE);
         y(u downto u-w+1) := convert(x.ENDCAP_nSMALL_LARGE, y(u downto u-w+1));
         u := u - w;
         w := width(x.ENABLE_NEIGHBORS);
         y(u downto u-w+1) := convert(x.ENABLE_NEIGHBORS, y(u downto u-w+1));
         u := u - w;
         w := width(x.SECTOR_ID);
         y(u downto u-w+1) := convert(x.SECTOR_ID, y(u downto u-w+1));
         u := u - w;
         w := width(x.PHY_BARREL_R0);
         y(u downto u-w+1) := convert(x.PHY_BARREL_R0, y(u downto u-w+1));
         u := u - w;
         w := width(x.PHY_BARREL_R1);
         y(u downto u-w+1) := convert(x.PHY_BARREL_R1, y(u downto u-w+1));
         u := u - w;
         w := width(x.PHY_BARREL_R2);
         y(u downto u-w+1) := convert(x.PHY_BARREL_R2, y(u downto u-w+1));
         u := u - w;
         w := width(x.PHY_BARREL_R3);
         y(u downto u-w+1) := convert(x.PHY_BARREL_R3, y(u downto u-w+1));
         u := u - w;
         w := width(x.HPS_ENABLE_ST_INN);
         y(u downto u-w+1) := convert(x.HPS_ENABLE_ST_INN, y(u downto u-w+1));
         u := u - w;
         w := width(x.HPS_ENABLE_ST_EXT);
         y(u downto u-w+1) := convert(x.HPS_ENABLE_ST_EXT, y(u downto u-w+1));
         u := u - w;
         w := width(x.HPS_ENABLE_ST_MID);
         y(u downto u-w+1) := convert(x.HPS_ENABLE_ST_MID, y(u downto u-w+1));
         u := u - w;
         w := width(x.HPS_ENABLE_ST_OUT);
         y(u downto u-w+1) := convert(x.HPS_ENABLE_ST_OUT, y(u downto u-w+1));
         u := u - w;
         w := width(x.HPS_NUM_MDT_CH_INN);
         y(u downto u-w+1) := convert(x.HPS_NUM_MDT_CH_INN, y(u downto u-w+1));
         u := u - w;
         w := width(x.HPS_NUM_MDT_CH_EXT);
         y(u downto u-w+1) := convert(x.HPS_NUM_MDT_CH_EXT, y(u downto u-w+1));
         u := u - w;
         w := width(x.HPS_NUM_MDT_CH_MID);
         y(u downto u-w+1) := convert(x.HPS_NUM_MDT_CH_MID, y(u downto u-w+1));
         u := u - w;
         w := width(x.HPS_NUM_MDT_CH_OUT);
         y(u downto u-w+1) := convert(x.HPS_NUM_MDT_CH_OUT, y(u downto u-w+1));
         u := u - w;
         w := width(x.NUM_MTC);
         y(u downto u-w+1) := convert(x.NUM_MTC, y(u downto u-w+1));
         u := u - w;
         w := width(x.NUM_NSP);
         y(u downto u-w+1) := convert(x.NUM_NSP, y(u downto u-w+1));
         u := u - w;
         w := width(x.UCM_ENABLED);
         y(u downto u-w+1) := convert(x.UCM_ENABLED, y(u downto u-w+1));
         u := u - w;
         w := width(x.MPL_ENABLED);
         y(u downto u-w+1) := convert(x.MPL_ENABLED, y(u downto u-w+1));
         u := u - w;
         w := width(x.SF_ENABLED);
         y(u downto u-w+1) := convert(x.SF_ENABLED, y(u downto u-w+1));
         u := u - w;
         w := width(x.SF_TYPE);
         y(u downto u-w+1) := convert(x.SF_TYPE, y(u downto u-w+1));
         u := u - w;
         w := width(x.NUM_DAQ_STREAMS);
         y(u downto u-w+1) := convert(x.NUM_DAQ_STREAMS, y(u downto u-w+1));
         u := u - w;
         w := width(x.NUM_SF_INPUTS);
         y(u downto u-w+1) := convert(x.NUM_SF_INPUTS, y(u downto u-w+1));
         u := u - w;
         w := width(x.NUM_SF_OUTPUTS);
         y(u downto u-w+1) := convert(x.NUM_SF_OUTPUTS, y(u downto u-w+1));
         u := u - w;
         w := width(x.MAX_NUM_SL);
         y(u downto u-w+1) := convert(x.MAX_NUM_SL, y(u downto u-w+1));
         u := u - w;
         w := width(x.NUM_THREADS);
         y(u downto u-w+1) := convert(x.NUM_THREADS, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: FW_INFO_CONFIG_MON_t) return FW_INFO_CONFIG_MON_t is
      variable y : FW_INFO_CONFIG_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.MAIN_CFG_COMPILE_HW);
         y.MAIN_CFG_COMPILE_HW := convert(x(u to u+w-1), t.MAIN_CFG_COMPILE_HW);
         u := u + w;
         w := width(t.MAIN_CFG_COMPILE_UL);
         y.MAIN_CFG_COMPILE_UL := convert(x(u to u+w-1), t.MAIN_CFG_COMPILE_UL);
         u := u + w;
         w := width(t.ST_nBARREL_ENDCAP);
         y.ST_nBARREL_ENDCAP := convert(x(u to u+w-1), t.ST_nBARREL_ENDCAP);
         u := u + w;
         w := width(t.ENDCAP_nSMALL_LARGE);
         y.ENDCAP_nSMALL_LARGE := convert(x(u to u+w-1), t.ENDCAP_nSMALL_LARGE);
         u := u + w;
         w := width(t.ENABLE_NEIGHBORS);
         y.ENABLE_NEIGHBORS := convert(x(u to u+w-1), t.ENABLE_NEIGHBORS);
         u := u + w;
         w := width(t.SECTOR_ID);
         y.SECTOR_ID := convert(x(u to u+w-1), t.SECTOR_ID);
         u := u + w;
         w := width(t.PHY_BARREL_R0);
         y.PHY_BARREL_R0 := convert(x(u to u+w-1), t.PHY_BARREL_R0);
         u := u + w;
         w := width(t.PHY_BARREL_R1);
         y.PHY_BARREL_R1 := convert(x(u to u+w-1), t.PHY_BARREL_R1);
         u := u + w;
         w := width(t.PHY_BARREL_R2);
         y.PHY_BARREL_R2 := convert(x(u to u+w-1), t.PHY_BARREL_R2);
         u := u + w;
         w := width(t.PHY_BARREL_R3);
         y.PHY_BARREL_R3 := convert(x(u to u+w-1), t.PHY_BARREL_R3);
         u := u + w;
         w := width(t.HPS_ENABLE_ST_INN);
         y.HPS_ENABLE_ST_INN := convert(x(u to u+w-1), t.HPS_ENABLE_ST_INN);
         u := u + w;
         w := width(t.HPS_ENABLE_ST_EXT);
         y.HPS_ENABLE_ST_EXT := convert(x(u to u+w-1), t.HPS_ENABLE_ST_EXT);
         u := u + w;
         w := width(t.HPS_ENABLE_ST_MID);
         y.HPS_ENABLE_ST_MID := convert(x(u to u+w-1), t.HPS_ENABLE_ST_MID);
         u := u + w;
         w := width(t.HPS_ENABLE_ST_OUT);
         y.HPS_ENABLE_ST_OUT := convert(x(u to u+w-1), t.HPS_ENABLE_ST_OUT);
         u := u + w;
         w := width(t.HPS_NUM_MDT_CH_INN);
         y.HPS_NUM_MDT_CH_INN := convert(x(u to u+w-1), t.HPS_NUM_MDT_CH_INN);
         u := u + w;
         w := width(t.HPS_NUM_MDT_CH_EXT);
         y.HPS_NUM_MDT_CH_EXT := convert(x(u to u+w-1), t.HPS_NUM_MDT_CH_EXT);
         u := u + w;
         w := width(t.HPS_NUM_MDT_CH_MID);
         y.HPS_NUM_MDT_CH_MID := convert(x(u to u+w-1), t.HPS_NUM_MDT_CH_MID);
         u := u + w;
         w := width(t.HPS_NUM_MDT_CH_OUT);
         y.HPS_NUM_MDT_CH_OUT := convert(x(u to u+w-1), t.HPS_NUM_MDT_CH_OUT);
         u := u + w;
         w := width(t.NUM_MTC);
         y.NUM_MTC := convert(x(u to u+w-1), t.NUM_MTC);
         u := u + w;
         w := width(t.NUM_NSP);
         y.NUM_NSP := convert(x(u to u+w-1), t.NUM_NSP);
         u := u + w;
         w := width(t.UCM_ENABLED);
         y.UCM_ENABLED := convert(x(u to u+w-1), t.UCM_ENABLED);
         u := u + w;
         w := width(t.MPL_ENABLED);
         y.MPL_ENABLED := convert(x(u to u+w-1), t.MPL_ENABLED);
         u := u + w;
         w := width(t.SF_ENABLED);
         y.SF_ENABLED := convert(x(u to u+w-1), t.SF_ENABLED);
         u := u + w;
         w := width(t.SF_TYPE);
         y.SF_TYPE := convert(x(u to u+w-1), t.SF_TYPE);
         u := u + w;
         w := width(t.NUM_DAQ_STREAMS);
         y.NUM_DAQ_STREAMS := convert(x(u to u+w-1), t.NUM_DAQ_STREAMS);
         u := u + w;
         w := width(t.NUM_SF_INPUTS);
         y.NUM_SF_INPUTS := convert(x(u to u+w-1), t.NUM_SF_INPUTS);
         u := u + w;
         w := width(t.NUM_SF_OUTPUTS);
         y.NUM_SF_OUTPUTS := convert(x(u to u+w-1), t.NUM_SF_OUTPUTS);
         u := u + w;
         w := width(t.MAX_NUM_SL);
         y.MAX_NUM_SL := convert(x(u to u+w-1), t.MAX_NUM_SL);
         u := u + w;
         w := width(t.NUM_THREADS);
         y.NUM_THREADS := convert(x(u to u+w-1), t.NUM_THREADS);
      else
         w := width(t.MAIN_CFG_COMPILE_HW);
         y.MAIN_CFG_COMPILE_HW := convert(x(u downto u-w+1), t.MAIN_CFG_COMPILE_HW);
         u := u - w;
         w := width(t.MAIN_CFG_COMPILE_UL);
         y.MAIN_CFG_COMPILE_UL := convert(x(u downto u-w+1), t.MAIN_CFG_COMPILE_UL);
         u := u - w;
         w := width(t.ST_nBARREL_ENDCAP);
         y.ST_nBARREL_ENDCAP := convert(x(u downto u-w+1), t.ST_nBARREL_ENDCAP);
         u := u - w;
         w := width(t.ENDCAP_nSMALL_LARGE);
         y.ENDCAP_nSMALL_LARGE := convert(x(u downto u-w+1), t.ENDCAP_nSMALL_LARGE);
         u := u - w;
         w := width(t.ENABLE_NEIGHBORS);
         y.ENABLE_NEIGHBORS := convert(x(u downto u-w+1), t.ENABLE_NEIGHBORS);
         u := u - w;
         w := width(t.SECTOR_ID);
         y.SECTOR_ID := convert(x(u downto u-w+1), t.SECTOR_ID);
         u := u - w;
         w := width(t.PHY_BARREL_R0);
         y.PHY_BARREL_R0 := convert(x(u downto u-w+1), t.PHY_BARREL_R0);
         u := u - w;
         w := width(t.PHY_BARREL_R1);
         y.PHY_BARREL_R1 := convert(x(u downto u-w+1), t.PHY_BARREL_R1);
         u := u - w;
         w := width(t.PHY_BARREL_R2);
         y.PHY_BARREL_R2 := convert(x(u downto u-w+1), t.PHY_BARREL_R2);
         u := u - w;
         w := width(t.PHY_BARREL_R3);
         y.PHY_BARREL_R3 := convert(x(u downto u-w+1), t.PHY_BARREL_R3);
         u := u - w;
         w := width(t.HPS_ENABLE_ST_INN);
         y.HPS_ENABLE_ST_INN := convert(x(u downto u-w+1), t.HPS_ENABLE_ST_INN);
         u := u - w;
         w := width(t.HPS_ENABLE_ST_EXT);
         y.HPS_ENABLE_ST_EXT := convert(x(u downto u-w+1), t.HPS_ENABLE_ST_EXT);
         u := u - w;
         w := width(t.HPS_ENABLE_ST_MID);
         y.HPS_ENABLE_ST_MID := convert(x(u downto u-w+1), t.HPS_ENABLE_ST_MID);
         u := u - w;
         w := width(t.HPS_ENABLE_ST_OUT);
         y.HPS_ENABLE_ST_OUT := convert(x(u downto u-w+1), t.HPS_ENABLE_ST_OUT);
         u := u - w;
         w := width(t.HPS_NUM_MDT_CH_INN);
         y.HPS_NUM_MDT_CH_INN := convert(x(u downto u-w+1), t.HPS_NUM_MDT_CH_INN);
         u := u - w;
         w := width(t.HPS_NUM_MDT_CH_EXT);
         y.HPS_NUM_MDT_CH_EXT := convert(x(u downto u-w+1), t.HPS_NUM_MDT_CH_EXT);
         u := u - w;
         w := width(t.HPS_NUM_MDT_CH_MID);
         y.HPS_NUM_MDT_CH_MID := convert(x(u downto u-w+1), t.HPS_NUM_MDT_CH_MID);
         u := u - w;
         w := width(t.HPS_NUM_MDT_CH_OUT);
         y.HPS_NUM_MDT_CH_OUT := convert(x(u downto u-w+1), t.HPS_NUM_MDT_CH_OUT);
         u := u - w;
         w := width(t.NUM_MTC);
         y.NUM_MTC := convert(x(u downto u-w+1), t.NUM_MTC);
         u := u - w;
         w := width(t.NUM_NSP);
         y.NUM_NSP := convert(x(u downto u-w+1), t.NUM_NSP);
         u := u - w;
         w := width(t.UCM_ENABLED);
         y.UCM_ENABLED := convert(x(u downto u-w+1), t.UCM_ENABLED);
         u := u - w;
         w := width(t.MPL_ENABLED);
         y.MPL_ENABLED := convert(x(u downto u-w+1), t.MPL_ENABLED);
         u := u - w;
         w := width(t.SF_ENABLED);
         y.SF_ENABLED := convert(x(u downto u-w+1), t.SF_ENABLED);
         u := u - w;
         w := width(t.SF_TYPE);
         y.SF_TYPE := convert(x(u downto u-w+1), t.SF_TYPE);
         u := u - w;
         w := width(t.NUM_DAQ_STREAMS);
         y.NUM_DAQ_STREAMS := convert(x(u downto u-w+1), t.NUM_DAQ_STREAMS);
         u := u - w;
         w := width(t.NUM_SF_INPUTS);
         y.NUM_SF_INPUTS := convert(x(u downto u-w+1), t.NUM_SF_INPUTS);
         u := u - w;
         w := width(t.NUM_SF_OUTPUTS);
         y.NUM_SF_OUTPUTS := convert(x(u downto u-w+1), t.NUM_SF_OUTPUTS);
         u := u - w;
         w := width(t.MAX_NUM_SL);
         y.MAX_NUM_SL := convert(x(u downto u-w+1), t.MAX_NUM_SL);
         u := u - w;
         w := width(t.NUM_THREADS);
         y.NUM_THREADS := convert(x(u downto u-w+1), t.NUM_THREADS);
      end if;
      return y;
   end function convert;

   function width(x: FW_INFO_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.FW_INFO);
      w := w + width(x.HOG_INFO);
      w := w + width(x.CONFIG);
      return w;
   end function width;
   function convert(x: FW_INFO_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.FW_INFO);
         y(u to u+w-1) := convert(x.FW_INFO, y(u to u+w-1));
         u := u + w;
         w := width(x.HOG_INFO);
         y(u to u+w-1) := convert(x.HOG_INFO, y(u to u+w-1));
         u := u + w;
         w := width(x.CONFIG);
         y(u to u+w-1) := convert(x.CONFIG, y(u to u+w-1));
      else
         w := width(x.FW_INFO);
         y(u downto u-w+1) := convert(x.FW_INFO, y(u downto u-w+1));
         u := u - w;
         w := width(x.HOG_INFO);
         y(u downto u-w+1) := convert(x.HOG_INFO, y(u downto u-w+1));
         u := u - w;
         w := width(x.CONFIG);
         y(u downto u-w+1) := convert(x.CONFIG, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: FW_INFO_MON_t) return FW_INFO_MON_t is
      variable y : FW_INFO_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.FW_INFO);
         y.FW_INFO := convert(x(u to u+w-1), t.FW_INFO);
         u := u + w;
         w := width(t.HOG_INFO);
         y.HOG_INFO := convert(x(u to u+w-1), t.HOG_INFO);
         u := u + w;
         w := width(t.CONFIG);
         y.CONFIG := convert(x(u to u+w-1), t.CONFIG);
      else
         w := width(t.FW_INFO);
         y.FW_INFO := convert(x(u downto u-w+1), t.FW_INFO);
         u := u - w;
         w := width(t.HOG_INFO);
         y.HOG_INFO := convert(x(u downto u-w+1), t.HOG_INFO);
         u := u - w;
         w := width(t.CONFIG);
         y.CONFIG := convert(x(u downto u-w+1), t.CONFIG);
      end if;
      return y;
   end function convert;

end package body FW_INFO_CTRL;
