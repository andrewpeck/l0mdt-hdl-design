-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl

library ieee;

use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;

use shared_lib.common_ieee.all;

package APB_MEM_SIG_CTRL is

  type APB_MEM_SIG_MON_t is record
    rd_rdy : std_logic;
  end record APB_MEM_SIG_MON_t;
  function len(x: APB_MEM_SIG_MON_t) return natural;
  function width(x: APB_MEM_SIG_MON_t) return natural;
  function vectorify(x: APB_MEM_SIG_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: APB_MEM_SIG_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: APB_MEM_SIG_MON_t) return APB_MEM_SIG_MON_t;
  function convert(x: in std_logic_vector; t: APB_MEM_SIG_MON_t) return APB_MEM_SIG_MON_t;
  function nullify(t: APB_MEM_SIG_MON_t) return APB_MEM_SIG_MON_t;
  function zeroed(t: APB_MEM_SIG_MON_t) return APB_MEM_SIG_MON_t;

  type APB_MEM_SIG_CTRL_t is record
    wr_req : std_logic;
    wr_ack : std_logic;
    rd_req : std_logic;
    rd_ack : std_logic;
    flush_req : std_logic;
  end record APB_MEM_SIG_CTRL_t;
  function len(x: APB_MEM_SIG_CTRL_t) return natural;
  function width(x: APB_MEM_SIG_CTRL_t) return natural;
  function vectorify(x: APB_MEM_SIG_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: APB_MEM_SIG_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: APB_MEM_SIG_CTRL_t) return APB_MEM_SIG_CTRL_t;
  function convert(x: in std_logic_vector; t: APB_MEM_SIG_CTRL_t) return APB_MEM_SIG_CTRL_t;
  function nullify(t: APB_MEM_SIG_CTRL_t) return APB_MEM_SIG_CTRL_t;
  function zeroed(t: APB_MEM_SIG_CTRL_t) return APB_MEM_SIG_CTRL_t;

end package APB_MEM_SIG_CTRL;

------------------------------------------------------------

package body APB_MEM_SIG_CTRL is

  function len(x: APB_MEM_SIG_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.rd_rdy);
    return l;
  end function len;
  function width(x: APB_MEM_SIG_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.rd_rdy);
    return l;
  end function width;
  function vectorify(x: APB_MEM_SIG_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.rd_rdy)-1), vectorify(x.rd_rdy, y(left to left+len(x.rd_rdy)-1)));
    else
      assign(y(left downto left-len(x.rd_rdy)+1), vectorify(x.rd_rdy, y(left downto left-len(x.rd_rdy)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: APB_MEM_SIG_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.rd_rdy)-1), convert(x.rd_rdy, y(left to left+len(x.rd_rdy)-1)));
    else
      assign(y(left downto left-len(x.rd_rdy)+1), convert(x.rd_rdy, y(left downto left-len(x.rd_rdy)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: APB_MEM_SIG_MON_t) return APB_MEM_SIG_MON_t is
    variable y: APB_MEM_SIG_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.rd_rdy := structify(x(left to left+len(y.rd_rdy)-1), y.rd_rdy);
    else
      y.rd_rdy := structify(x(left downto left-len(y.rd_rdy)+1), y.rd_rdy);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: APB_MEM_SIG_MON_t) return APB_MEM_SIG_MON_t is
    variable y: APB_MEM_SIG_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.rd_rdy := convert(x(left to left+len(y.rd_rdy)-1), y.rd_rdy);
    else
      y.rd_rdy := convert(x(left downto left-len(y.rd_rdy)+1), y.rd_rdy);
    end if;
    return y;
  end function convert;
  function nullify(t: APB_MEM_SIG_MON_t) return APB_MEM_SIG_MON_t is
  variable y: APB_MEM_SIG_MON_t;
  begin
    y.rd_rdy := nullify(t.rd_rdy);
    return y;
  end function nullify;
  function zeroed(t: APB_MEM_SIG_MON_t) return APB_MEM_SIG_MON_t is
  variable y: APB_MEM_SIG_MON_t;
  begin
    y.rd_rdy := zeroed(t.rd_rdy);
    return y;
  end function zeroed;

  function len(x: APB_MEM_SIG_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.wr_req);
    l := l + len(x.wr_ack);
    l := l + len(x.rd_req);
    l := l + len(x.rd_ack);
    l := l + len(x.flush_req);
    return l;
  end function len;
  function width(x: APB_MEM_SIG_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.wr_req);
    l := l + width(x.wr_ack);
    l := l + width(x.rd_req);
    l := l + width(x.rd_ack);
    l := l + width(x.flush_req);
    return l;
  end function width;
  function vectorify(x: APB_MEM_SIG_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.wr_req)-1), vectorify(x.wr_req, y(left to left+len(x.wr_req)-1)));
      left := left + len(x.wr_req);
      assign(y(left to left+len(x.wr_ack)-1), vectorify(x.wr_ack, y(left to left+len(x.wr_ack)-1)));
      left := left + len(x.wr_ack);
      assign(y(left to left+len(x.rd_req)-1), vectorify(x.rd_req, y(left to left+len(x.rd_req)-1)));
      left := left + len(x.rd_req);
      assign(y(left to left+len(x.rd_ack)-1), vectorify(x.rd_ack, y(left to left+len(x.rd_ack)-1)));
      left := left + len(x.rd_ack);
      assign(y(left to left+len(x.flush_req)-1), vectorify(x.flush_req, y(left to left+len(x.flush_req)-1)));
    else
      assign(y(left downto left-len(x.wr_req)+1), vectorify(x.wr_req, y(left downto left-len(x.wr_req)+1)));
      left := left - len(x.wr_req);
      assign(y(left downto left-len(x.wr_ack)+1), vectorify(x.wr_ack, y(left downto left-len(x.wr_ack)+1)));
      left := left - len(x.wr_ack);
      assign(y(left downto left-len(x.rd_req)+1), vectorify(x.rd_req, y(left downto left-len(x.rd_req)+1)));
      left := left - len(x.rd_req);
      assign(y(left downto left-len(x.rd_ack)+1), vectorify(x.rd_ack, y(left downto left-len(x.rd_ack)+1)));
      left := left - len(x.rd_ack);
      assign(y(left downto left-len(x.flush_req)+1), vectorify(x.flush_req, y(left downto left-len(x.flush_req)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: APB_MEM_SIG_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.wr_req)-1), convert(x.wr_req, y(left to left+len(x.wr_req)-1)));
      left := left + len(x.wr_req);
      assign(y(left to left+len(x.wr_ack)-1), convert(x.wr_ack, y(left to left+len(x.wr_ack)-1)));
      left := left + len(x.wr_ack);
      assign(y(left to left+len(x.rd_req)-1), convert(x.rd_req, y(left to left+len(x.rd_req)-1)));
      left := left + len(x.rd_req);
      assign(y(left to left+len(x.rd_ack)-1), convert(x.rd_ack, y(left to left+len(x.rd_ack)-1)));
      left := left + len(x.rd_ack);
      assign(y(left to left+len(x.flush_req)-1), convert(x.flush_req, y(left to left+len(x.flush_req)-1)));
    else
      assign(y(left downto left-len(x.wr_req)+1), convert(x.wr_req, y(left downto left-len(x.wr_req)+1)));
      left := left - len(x.wr_req);
      assign(y(left downto left-len(x.wr_ack)+1), convert(x.wr_ack, y(left downto left-len(x.wr_ack)+1)));
      left := left - len(x.wr_ack);
      assign(y(left downto left-len(x.rd_req)+1), convert(x.rd_req, y(left downto left-len(x.rd_req)+1)));
      left := left - len(x.rd_req);
      assign(y(left downto left-len(x.rd_ack)+1), convert(x.rd_ack, y(left downto left-len(x.rd_ack)+1)));
      left := left - len(x.rd_ack);
      assign(y(left downto left-len(x.flush_req)+1), convert(x.flush_req, y(left downto left-len(x.flush_req)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: APB_MEM_SIG_CTRL_t) return APB_MEM_SIG_CTRL_t is
    variable y: APB_MEM_SIG_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.wr_req := structify(x(left to left+len(y.wr_req)-1), y.wr_req);
      left := left + len(y.wr_req);
      y.wr_ack := structify(x(left to left+len(y.wr_ack)-1), y.wr_ack);
      left := left + len(y.wr_ack);
      y.rd_req := structify(x(left to left+len(y.rd_req)-1), y.rd_req);
      left := left + len(y.rd_req);
      y.rd_ack := structify(x(left to left+len(y.rd_ack)-1), y.rd_ack);
      left := left + len(y.rd_ack);
      y.flush_req := structify(x(left to left+len(y.flush_req)-1), y.flush_req);
    else
      y.wr_req := structify(x(left downto left-len(y.wr_req)+1), y.wr_req);
      left := left - len(y.wr_req);
      y.wr_ack := structify(x(left downto left-len(y.wr_ack)+1), y.wr_ack);
      left := left - len(y.wr_ack);
      y.rd_req := structify(x(left downto left-len(y.rd_req)+1), y.rd_req);
      left := left - len(y.rd_req);
      y.rd_ack := structify(x(left downto left-len(y.rd_ack)+1), y.rd_ack);
      left := left - len(y.rd_ack);
      y.flush_req := structify(x(left downto left-len(y.flush_req)+1), y.flush_req);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: APB_MEM_SIG_CTRL_t) return APB_MEM_SIG_CTRL_t is
    variable y: APB_MEM_SIG_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.wr_req := convert(x(left to left+len(y.wr_req)-1), y.wr_req);
      left := left + len(y.wr_req);
      y.wr_ack := convert(x(left to left+len(y.wr_ack)-1), y.wr_ack);
      left := left + len(y.wr_ack);
      y.rd_req := convert(x(left to left+len(y.rd_req)-1), y.rd_req);
      left := left + len(y.rd_req);
      y.rd_ack := convert(x(left to left+len(y.rd_ack)-1), y.rd_ack);
      left := left + len(y.rd_ack);
      y.flush_req := convert(x(left to left+len(y.flush_req)-1), y.flush_req);
    else
      y.wr_req := convert(x(left downto left-len(y.wr_req)+1), y.wr_req);
      left := left - len(y.wr_req);
      y.wr_ack := convert(x(left downto left-len(y.wr_ack)+1), y.wr_ack);
      left := left - len(y.wr_ack);
      y.rd_req := convert(x(left downto left-len(y.rd_req)+1), y.rd_req);
      left := left - len(y.rd_req);
      y.rd_ack := convert(x(left downto left-len(y.rd_ack)+1), y.rd_ack);
      left := left - len(y.rd_ack);
      y.flush_req := convert(x(left downto left-len(y.flush_req)+1), y.flush_req);
    end if;
    return y;
  end function convert;
  function nullify(t: APB_MEM_SIG_CTRL_t) return APB_MEM_SIG_CTRL_t is
  variable y: APB_MEM_SIG_CTRL_t;
  begin
    y.wr_req := nullify(t.wr_req);
    y.wr_ack := nullify(t.wr_ack);
    y.rd_req := nullify(t.rd_req);
    y.rd_ack := nullify(t.rd_ack);
    y.flush_req := nullify(t.flush_req);
    return y;
  end function nullify;
  function zeroed(t: APB_MEM_SIG_CTRL_t) return APB_MEM_SIG_CTRL_t is
  variable y: APB_MEM_SIG_CTRL_t;
  begin
    y.wr_req := zeroed(t.wr_req);
    y.wr_ack := zeroed(t.wr_ack);
    y.rd_req := zeroed(t.rd_req);
    y.rd_ack := zeroed(t.rd_ack);
    y.flush_req := zeroed(t.flush_req);
    return y;
  end function zeroed;

end package body APB_MEM_SIG_CTRL;
