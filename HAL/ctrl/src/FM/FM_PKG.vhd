-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl
-- 2022-03-16 23:03:39

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.common_ieee_pkg.all;

package FM_CTRL is

   -- Custom types and functions --

   type FM_SPY_CTRL_CTRL_t is record
      GLOBAL_FREEZE : std_logic;
      GLOBAL_PLAYBACK_MODE : std_logic_vector(2 - 1 downto 0);
   end record FM_SPY_CTRL_CTRL_t;
   function width(x: FM_SPY_CTRL_CTRL_t) return natural;
   function convert(x: FM_SPY_CTRL_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: FM_SPY_CTRL_CTRL_t) return FM_SPY_CTRL_CTRL_t;

   type FM_CTRL_t is record
      SPY_CTRL : FM_SPY_CTRL_CTRL_t;
      FREEZE_MASK_0 : std_logic_vector(32 - 1 downto 0);
      FREEZE_MASK_1 : std_logic_vector(32 - 1 downto 0);
      PLAYBACK_MASK_0 : std_logic_vector(32 - 1 downto 0);
      PLAYBACK_MASK_1 : std_logic_vector(32 - 1 downto 0);
   end record FM_CTRL_t;
   function width(x: FM_CTRL_t) return natural;
   function convert(x: FM_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: FM_CTRL_t) return FM_CTRL_t;

end package FM_CTRL;

------------------------------------------------------------

package body FM_CTRL is

   -- Custom types and functions --

   function width(x: FM_SPY_CTRL_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.GLOBAL_FREEZE);
      w := w + width(x.GLOBAL_PLAYBACK_MODE);
      return w;
   end function width;
   function convert(x: FM_SPY_CTRL_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.GLOBAL_FREEZE);
         y(u to u+w-1) := convert(x.GLOBAL_FREEZE, y(u to u+w-1));
         u := u + w;
         w := width(x.GLOBAL_PLAYBACK_MODE);
         y(u to u+w-1) := convert(x.GLOBAL_PLAYBACK_MODE, y(u to u+w-1));
      else
         w := width(x.GLOBAL_FREEZE);
         y(u downto u-w+1) := convert(x.GLOBAL_FREEZE, y(u downto u-w+1));
         u := u - w;
         w := width(x.GLOBAL_PLAYBACK_MODE);
         y(u downto u-w+1) := convert(x.GLOBAL_PLAYBACK_MODE, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: FM_SPY_CTRL_CTRL_t) return FM_SPY_CTRL_CTRL_t is
      variable y : FM_SPY_CTRL_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.GLOBAL_FREEZE);
         y.GLOBAL_FREEZE := convert(x(u to u+w-1), t.GLOBAL_FREEZE);
         u := u + w;
         w := width(t.GLOBAL_PLAYBACK_MODE);
         y.GLOBAL_PLAYBACK_MODE := convert(x(u to u+w-1), t.GLOBAL_PLAYBACK_MODE);
      else
         w := width(t.GLOBAL_FREEZE);
         y.GLOBAL_FREEZE := convert(x(u downto u-w+1), t.GLOBAL_FREEZE);
         u := u - w;
         w := width(t.GLOBAL_PLAYBACK_MODE);
         y.GLOBAL_PLAYBACK_MODE := convert(x(u downto u-w+1), t.GLOBAL_PLAYBACK_MODE);
      end if;
      return y;
   end function convert;

   function width(x: FM_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.SPY_CTRL);
      w := w + width(x.FREEZE_MASK_0);
      w := w + width(x.FREEZE_MASK_1);
      w := w + width(x.PLAYBACK_MASK_0);
      w := w + width(x.PLAYBACK_MASK_1);
      return w;
   end function width;
   function convert(x: FM_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.SPY_CTRL);
         y(u to u+w-1) := convert(x.SPY_CTRL, y(u to u+w-1));
         u := u + w;
         w := width(x.FREEZE_MASK_0);
         y(u to u+w-1) := convert(x.FREEZE_MASK_0, y(u to u+w-1));
         u := u + w;
         w := width(x.FREEZE_MASK_1);
         y(u to u+w-1) := convert(x.FREEZE_MASK_1, y(u to u+w-1));
         u := u + w;
         w := width(x.PLAYBACK_MASK_0);
         y(u to u+w-1) := convert(x.PLAYBACK_MASK_0, y(u to u+w-1));
         u := u + w;
         w := width(x.PLAYBACK_MASK_1);
         y(u to u+w-1) := convert(x.PLAYBACK_MASK_1, y(u to u+w-1));
      else
         w := width(x.SPY_CTRL);
         y(u downto u-w+1) := convert(x.SPY_CTRL, y(u downto u-w+1));
         u := u - w;
         w := width(x.FREEZE_MASK_0);
         y(u downto u-w+1) := convert(x.FREEZE_MASK_0, y(u downto u-w+1));
         u := u - w;
         w := width(x.FREEZE_MASK_1);
         y(u downto u-w+1) := convert(x.FREEZE_MASK_1, y(u downto u-w+1));
         u := u - w;
         w := width(x.PLAYBACK_MASK_0);
         y(u downto u-w+1) := convert(x.PLAYBACK_MASK_0, y(u downto u-w+1));
         u := u - w;
         w := width(x.PLAYBACK_MASK_1);
         y(u downto u-w+1) := convert(x.PLAYBACK_MASK_1, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: FM_CTRL_t) return FM_CTRL_t is
      variable y : FM_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.SPY_CTRL);
         y.SPY_CTRL := convert(x(u to u+w-1), t.SPY_CTRL);
         u := u + w;
         w := width(t.FREEZE_MASK_0);
         y.FREEZE_MASK_0 := convert(x(u to u+w-1), t.FREEZE_MASK_0);
         u := u + w;
         w := width(t.FREEZE_MASK_1);
         y.FREEZE_MASK_1 := convert(x(u to u+w-1), t.FREEZE_MASK_1);
         u := u + w;
         w := width(t.PLAYBACK_MASK_0);
         y.PLAYBACK_MASK_0 := convert(x(u to u+w-1), t.PLAYBACK_MASK_0);
         u := u + w;
         w := width(t.PLAYBACK_MASK_1);
         y.PLAYBACK_MASK_1 := convert(x(u to u+w-1), t.PLAYBACK_MASK_1);
      else
         w := width(t.SPY_CTRL);
         y.SPY_CTRL := convert(x(u downto u-w+1), t.SPY_CTRL);
         u := u - w;
         w := width(t.FREEZE_MASK_0);
         y.FREEZE_MASK_0 := convert(x(u downto u-w+1), t.FREEZE_MASK_0);
         u := u - w;
         w := width(t.FREEZE_MASK_1);
         y.FREEZE_MASK_1 := convert(x(u downto u-w+1), t.FREEZE_MASK_1);
         u := u - w;
         w := width(t.PLAYBACK_MASK_0);
         y.PLAYBACK_MASK_0 := convert(x(u downto u-w+1), t.PLAYBACK_MASK_0);
         u := u - w;
         w := width(t.PLAYBACK_MASK_1);
         y.PLAYBACK_MASK_1 := convert(x(u downto u-w+1), t.PLAYBACK_MASK_1);
      end if;
      return y;
   end function convert;

end package body FM_CTRL;
