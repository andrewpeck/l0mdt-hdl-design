-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl

library ieee;

use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;

use shared_lib.common_ieee.all;

package FM_CTRL is

  type FM_SPY_CTRL_CTRL_t is record
    GLOBAL_FREEZE : std_logic;
    GLOBAL_PLAYBACK_MODE : std_logic_vector(2-1 downto 0);
  end record FM_SPY_CTRL_CTRL_t;
  function len(x: FM_SPY_CTRL_CTRL_t) return natural;
  function width(x: FM_SPY_CTRL_CTRL_t) return natural;
  function vectorify(x: FM_SPY_CTRL_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SPY_CTRL_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SPY_CTRL_CTRL_t) return FM_SPY_CTRL_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SPY_CTRL_CTRL_t) return FM_SPY_CTRL_CTRL_t;
  function nullify(t: FM_SPY_CTRL_CTRL_t) return FM_SPY_CTRL_CTRL_t;
  function zeroed(t: FM_SPY_CTRL_CTRL_t) return FM_SPY_CTRL_CTRL_t;

  type FM_SB0_MON_t is record
    SB_MEM : FM_SB0_SB_MEM_MISO_t;
    SB_META : FM_SB0_SB_META_MISO_t;
  end record FM_SB0_MON_t;
  function len(x: FM_SB0_MON_t) return natural;
  function width(x: FM_SB0_MON_t) return natural;
  function vectorify(x: FM_SB0_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB0_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB0_MON_t) return FM_SB0_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB0_MON_t) return FM_SB0_MON_t;
  function nullify(t: FM_SB0_MON_t) return FM_SB0_MON_t;
  function zeroed(t: FM_SB0_MON_t) return FM_SB0_MON_t;

  type FM_SB0_CTRL_t is record
    SB_MEM : FM_SB0_SB_MEM_MOSI_t;
    SB_META : FM_SB0_SB_META_MOSI_t;
  end record FM_SB0_CTRL_t;
  function len(x: FM_SB0_CTRL_t) return natural;
  function width(x: FM_SB0_CTRL_t) return natural;
  function vectorify(x: FM_SB0_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB0_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB0_CTRL_t) return FM_SB0_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB0_CTRL_t) return FM_SB0_CTRL_t;
  function nullify(t: FM_SB0_CTRL_t) return FM_SB0_CTRL_t;
  function zeroed(t: FM_SB0_CTRL_t) return FM_SB0_CTRL_t;

  type FM_SB1_MON_t is record
    SB_MEM : FM_SB1_SB_MEM_MISO_t;
    SB_META : FM_SB1_SB_META_MISO_t;
  end record FM_SB1_MON_t;
  function len(x: FM_SB1_MON_t) return natural;
  function width(x: FM_SB1_MON_t) return natural;
  function vectorify(x: FM_SB1_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB1_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB1_MON_t) return FM_SB1_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB1_MON_t) return FM_SB1_MON_t;
  function nullify(t: FM_SB1_MON_t) return FM_SB1_MON_t;
  function zeroed(t: FM_SB1_MON_t) return FM_SB1_MON_t;

  type FM_SB1_CTRL_t is record
    SB_MEM : FM_SB1_SB_MEM_MOSI_t;
    SB_META : FM_SB1_SB_META_MOSI_t;
  end record FM_SB1_CTRL_t;
  function len(x: FM_SB1_CTRL_t) return natural;
  function width(x: FM_SB1_CTRL_t) return natural;
  function vectorify(x: FM_SB1_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB1_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB1_CTRL_t) return FM_SB1_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB1_CTRL_t) return FM_SB1_CTRL_t;
  function nullify(t: FM_SB1_CTRL_t) return FM_SB1_CTRL_t;
  function zeroed(t: FM_SB1_CTRL_t) return FM_SB1_CTRL_t;

  type FM_SB2_MON_t is record
    SB_MEM : FM_SB2_SB_MEM_MISO_t;
    SB_META : FM_SB2_SB_META_MISO_t;
  end record FM_SB2_MON_t;
  function len(x: FM_SB2_MON_t) return natural;
  function width(x: FM_SB2_MON_t) return natural;
  function vectorify(x: FM_SB2_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB2_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB2_MON_t) return FM_SB2_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB2_MON_t) return FM_SB2_MON_t;
  function nullify(t: FM_SB2_MON_t) return FM_SB2_MON_t;
  function zeroed(t: FM_SB2_MON_t) return FM_SB2_MON_t;

  type FM_SB2_CTRL_t is record
    SB_MEM : FM_SB2_SB_MEM_MOSI_t;
    SB_META : FM_SB2_SB_META_MOSI_t;
  end record FM_SB2_CTRL_t;
  function len(x: FM_SB2_CTRL_t) return natural;
  function width(x: FM_SB2_CTRL_t) return natural;
  function vectorify(x: FM_SB2_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB2_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB2_CTRL_t) return FM_SB2_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB2_CTRL_t) return FM_SB2_CTRL_t;
  function nullify(t: FM_SB2_CTRL_t) return FM_SB2_CTRL_t;
  function zeroed(t: FM_SB2_CTRL_t) return FM_SB2_CTRL_t;

  type FM_SB3_MON_t is record
    SB_MEM : FM_SB3_SB_MEM_MISO_t;
    SB_META : FM_SB3_SB_META_MISO_t;
  end record FM_SB3_MON_t;
  function len(x: FM_SB3_MON_t) return natural;
  function width(x: FM_SB3_MON_t) return natural;
  function vectorify(x: FM_SB3_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB3_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB3_MON_t) return FM_SB3_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB3_MON_t) return FM_SB3_MON_t;
  function nullify(t: FM_SB3_MON_t) return FM_SB3_MON_t;
  function zeroed(t: FM_SB3_MON_t) return FM_SB3_MON_t;

  type FM_SB3_CTRL_t is record
    SB_MEM : FM_SB3_SB_MEM_MOSI_t;
    SB_META : FM_SB3_SB_META_MOSI_t;
  end record FM_SB3_CTRL_t;
  function len(x: FM_SB3_CTRL_t) return natural;
  function width(x: FM_SB3_CTRL_t) return natural;
  function vectorify(x: FM_SB3_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB3_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB3_CTRL_t) return FM_SB3_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB3_CTRL_t) return FM_SB3_CTRL_t;
  function nullify(t: FM_SB3_CTRL_t) return FM_SB3_CTRL_t;
  function zeroed(t: FM_SB3_CTRL_t) return FM_SB3_CTRL_t;

  type FM_SB4_MON_t is record
    SB_MEM : FM_SB4_SB_MEM_MISO_t;
    SB_META : FM_SB4_SB_META_MISO_t;
  end record FM_SB4_MON_t;
  function len(x: FM_SB4_MON_t) return natural;
  function width(x: FM_SB4_MON_t) return natural;
  function vectorify(x: FM_SB4_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB4_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB4_MON_t) return FM_SB4_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB4_MON_t) return FM_SB4_MON_t;
  function nullify(t: FM_SB4_MON_t) return FM_SB4_MON_t;
  function zeroed(t: FM_SB4_MON_t) return FM_SB4_MON_t;

  type FM_SB4_CTRL_t is record
    SB_MEM : FM_SB4_SB_MEM_MOSI_t;
    SB_META : FM_SB4_SB_META_MOSI_t;
  end record FM_SB4_CTRL_t;
  function len(x: FM_SB4_CTRL_t) return natural;
  function width(x: FM_SB4_CTRL_t) return natural;
  function vectorify(x: FM_SB4_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB4_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB4_CTRL_t) return FM_SB4_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB4_CTRL_t) return FM_SB4_CTRL_t;
  function nullify(t: FM_SB4_CTRL_t) return FM_SB4_CTRL_t;
  function zeroed(t: FM_SB4_CTRL_t) return FM_SB4_CTRL_t;

  type FM_SB5_MON_t is record
    SB_MEM : FM_SB5_SB_MEM_MISO_t;
    SB_META : FM_SB5_SB_META_MISO_t;
  end record FM_SB5_MON_t;
  function len(x: FM_SB5_MON_t) return natural;
  function width(x: FM_SB5_MON_t) return natural;
  function vectorify(x: FM_SB5_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB5_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB5_MON_t) return FM_SB5_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB5_MON_t) return FM_SB5_MON_t;
  function nullify(t: FM_SB5_MON_t) return FM_SB5_MON_t;
  function zeroed(t: FM_SB5_MON_t) return FM_SB5_MON_t;

  type FM_SB5_CTRL_t is record
    SB_MEM : FM_SB5_SB_MEM_MOSI_t;
    SB_META : FM_SB5_SB_META_MOSI_t;
  end record FM_SB5_CTRL_t;
  function len(x: FM_SB5_CTRL_t) return natural;
  function width(x: FM_SB5_CTRL_t) return natural;
  function vectorify(x: FM_SB5_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB5_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB5_CTRL_t) return FM_SB5_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB5_CTRL_t) return FM_SB5_CTRL_t;
  function nullify(t: FM_SB5_CTRL_t) return FM_SB5_CTRL_t;
  function zeroed(t: FM_SB5_CTRL_t) return FM_SB5_CTRL_t;

  type FM_SB6_MON_t is record
    SB_MEM : FM_SB6_SB_MEM_MISO_t;
    SB_META : FM_SB6_SB_META_MISO_t;
  end record FM_SB6_MON_t;
  function len(x: FM_SB6_MON_t) return natural;
  function width(x: FM_SB6_MON_t) return natural;
  function vectorify(x: FM_SB6_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB6_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB6_MON_t) return FM_SB6_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB6_MON_t) return FM_SB6_MON_t;
  function nullify(t: FM_SB6_MON_t) return FM_SB6_MON_t;
  function zeroed(t: FM_SB6_MON_t) return FM_SB6_MON_t;

  type FM_SB6_CTRL_t is record
    SB_MEM : FM_SB6_SB_MEM_MOSI_t;
    SB_META : FM_SB6_SB_META_MOSI_t;
  end record FM_SB6_CTRL_t;
  function len(x: FM_SB6_CTRL_t) return natural;
  function width(x: FM_SB6_CTRL_t) return natural;
  function vectorify(x: FM_SB6_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB6_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB6_CTRL_t) return FM_SB6_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB6_CTRL_t) return FM_SB6_CTRL_t;
  function nullify(t: FM_SB6_CTRL_t) return FM_SB6_CTRL_t;
  function zeroed(t: FM_SB6_CTRL_t) return FM_SB6_CTRL_t;

  type FM_SB7_MON_t is record
    SB_MEM : FM_SB7_SB_MEM_MISO_t;
    SB_META : FM_SB7_SB_META_MISO_t;
  end record FM_SB7_MON_t;
  function len(x: FM_SB7_MON_t) return natural;
  function width(x: FM_SB7_MON_t) return natural;
  function vectorify(x: FM_SB7_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB7_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB7_MON_t) return FM_SB7_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB7_MON_t) return FM_SB7_MON_t;
  function nullify(t: FM_SB7_MON_t) return FM_SB7_MON_t;
  function zeroed(t: FM_SB7_MON_t) return FM_SB7_MON_t;

  type FM_SB7_CTRL_t is record
    SB_MEM : FM_SB7_SB_MEM_MOSI_t;
    SB_META : FM_SB7_SB_META_MOSI_t;
  end record FM_SB7_CTRL_t;
  function len(x: FM_SB7_CTRL_t) return natural;
  function width(x: FM_SB7_CTRL_t) return natural;
  function vectorify(x: FM_SB7_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB7_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB7_CTRL_t) return FM_SB7_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB7_CTRL_t) return FM_SB7_CTRL_t;
  function nullify(t: FM_SB7_CTRL_t) return FM_SB7_CTRL_t;
  function zeroed(t: FM_SB7_CTRL_t) return FM_SB7_CTRL_t;

  type FM_SB8_MON_t is record
    SB_MEM : FM_SB8_SB_MEM_MISO_t;
    SB_META : FM_SB8_SB_META_MISO_t;
  end record FM_SB8_MON_t;
  function len(x: FM_SB8_MON_t) return natural;
  function width(x: FM_SB8_MON_t) return natural;
  function vectorify(x: FM_SB8_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB8_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB8_MON_t) return FM_SB8_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB8_MON_t) return FM_SB8_MON_t;
  function nullify(t: FM_SB8_MON_t) return FM_SB8_MON_t;
  function zeroed(t: FM_SB8_MON_t) return FM_SB8_MON_t;

  type FM_SB8_CTRL_t is record
    SB_MEM : FM_SB8_SB_MEM_MOSI_t;
    SB_META : FM_SB8_SB_META_MOSI_t;
  end record FM_SB8_CTRL_t;
  function len(x: FM_SB8_CTRL_t) return natural;
  function width(x: FM_SB8_CTRL_t) return natural;
  function vectorify(x: FM_SB8_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB8_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB8_CTRL_t) return FM_SB8_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB8_CTRL_t) return FM_SB8_CTRL_t;
  function nullify(t: FM_SB8_CTRL_t) return FM_SB8_CTRL_t;
  function zeroed(t: FM_SB8_CTRL_t) return FM_SB8_CTRL_t;

  type FM_SB9_MON_t is record
    SB_MEM : FM_SB9_SB_MEM_MISO_t;
    SB_META : FM_SB9_SB_META_MISO_t;
  end record FM_SB9_MON_t;
  function len(x: FM_SB9_MON_t) return natural;
  function width(x: FM_SB9_MON_t) return natural;
  function vectorify(x: FM_SB9_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB9_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB9_MON_t) return FM_SB9_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB9_MON_t) return FM_SB9_MON_t;
  function nullify(t: FM_SB9_MON_t) return FM_SB9_MON_t;
  function zeroed(t: FM_SB9_MON_t) return FM_SB9_MON_t;

  type FM_SB9_CTRL_t is record
    SB_MEM : FM_SB9_SB_MEM_MOSI_t;
    SB_META : FM_SB9_SB_META_MOSI_t;
  end record FM_SB9_CTRL_t;
  function len(x: FM_SB9_CTRL_t) return natural;
  function width(x: FM_SB9_CTRL_t) return natural;
  function vectorify(x: FM_SB9_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB9_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB9_CTRL_t) return FM_SB9_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB9_CTRL_t) return FM_SB9_CTRL_t;
  function nullify(t: FM_SB9_CTRL_t) return FM_SB9_CTRL_t;
  function zeroed(t: FM_SB9_CTRL_t) return FM_SB9_CTRL_t;

  type FM_SB10_MON_t is record
    SB_MEM : FM_SB10_SB_MEM_MISO_t;
    SB_META : FM_SB10_SB_META_MISO_t;
  end record FM_SB10_MON_t;
  function len(x: FM_SB10_MON_t) return natural;
  function width(x: FM_SB10_MON_t) return natural;
  function vectorify(x: FM_SB10_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB10_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB10_MON_t) return FM_SB10_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB10_MON_t) return FM_SB10_MON_t;
  function nullify(t: FM_SB10_MON_t) return FM_SB10_MON_t;
  function zeroed(t: FM_SB10_MON_t) return FM_SB10_MON_t;

  type FM_SB10_CTRL_t is record
    SB_MEM : FM_SB10_SB_MEM_MOSI_t;
    SB_META : FM_SB10_SB_META_MOSI_t;
  end record FM_SB10_CTRL_t;
  function len(x: FM_SB10_CTRL_t) return natural;
  function width(x: FM_SB10_CTRL_t) return natural;
  function vectorify(x: FM_SB10_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB10_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB10_CTRL_t) return FM_SB10_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB10_CTRL_t) return FM_SB10_CTRL_t;
  function nullify(t: FM_SB10_CTRL_t) return FM_SB10_CTRL_t;
  function zeroed(t: FM_SB10_CTRL_t) return FM_SB10_CTRL_t;

  type FM_SB11_MON_t is record
    SB_MEM : FM_SB11_SB_MEM_MISO_t;
    SB_META : FM_SB11_SB_META_MISO_t;
  end record FM_SB11_MON_t;
  function len(x: FM_SB11_MON_t) return natural;
  function width(x: FM_SB11_MON_t) return natural;
  function vectorify(x: FM_SB11_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB11_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB11_MON_t) return FM_SB11_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB11_MON_t) return FM_SB11_MON_t;
  function nullify(t: FM_SB11_MON_t) return FM_SB11_MON_t;
  function zeroed(t: FM_SB11_MON_t) return FM_SB11_MON_t;

  type FM_SB11_CTRL_t is record
    SB_MEM : FM_SB11_SB_MEM_MOSI_t;
    SB_META : FM_SB11_SB_META_MOSI_t;
  end record FM_SB11_CTRL_t;
  function len(x: FM_SB11_CTRL_t) return natural;
  function width(x: FM_SB11_CTRL_t) return natural;
  function vectorify(x: FM_SB11_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB11_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB11_CTRL_t) return FM_SB11_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB11_CTRL_t) return FM_SB11_CTRL_t;
  function nullify(t: FM_SB11_CTRL_t) return FM_SB11_CTRL_t;
  function zeroed(t: FM_SB11_CTRL_t) return FM_SB11_CTRL_t;

  type FM_SB12_MON_t is record
    SB_MEM : FM_SB12_SB_MEM_MISO_t;
    SB_META : FM_SB12_SB_META_MISO_t;
  end record FM_SB12_MON_t;
  function len(x: FM_SB12_MON_t) return natural;
  function width(x: FM_SB12_MON_t) return natural;
  function vectorify(x: FM_SB12_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB12_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB12_MON_t) return FM_SB12_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB12_MON_t) return FM_SB12_MON_t;
  function nullify(t: FM_SB12_MON_t) return FM_SB12_MON_t;
  function zeroed(t: FM_SB12_MON_t) return FM_SB12_MON_t;

  type FM_SB12_CTRL_t is record
    SB_MEM : FM_SB12_SB_MEM_MOSI_t;
    SB_META : FM_SB12_SB_META_MOSI_t;
  end record FM_SB12_CTRL_t;
  function len(x: FM_SB12_CTRL_t) return natural;
  function width(x: FM_SB12_CTRL_t) return natural;
  function vectorify(x: FM_SB12_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB12_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB12_CTRL_t) return FM_SB12_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB12_CTRL_t) return FM_SB12_CTRL_t;
  function nullify(t: FM_SB12_CTRL_t) return FM_SB12_CTRL_t;
  function zeroed(t: FM_SB12_CTRL_t) return FM_SB12_CTRL_t;

  type FM_SB13_MON_t is record
    SB_MEM : FM_SB13_SB_MEM_MISO_t;
    SB_META : FM_SB13_SB_META_MISO_t;
  end record FM_SB13_MON_t;
  function len(x: FM_SB13_MON_t) return natural;
  function width(x: FM_SB13_MON_t) return natural;
  function vectorify(x: FM_SB13_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB13_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB13_MON_t) return FM_SB13_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB13_MON_t) return FM_SB13_MON_t;
  function nullify(t: FM_SB13_MON_t) return FM_SB13_MON_t;
  function zeroed(t: FM_SB13_MON_t) return FM_SB13_MON_t;

  type FM_SB13_CTRL_t is record
    SB_MEM : FM_SB13_SB_MEM_MOSI_t;
    SB_META : FM_SB13_SB_META_MOSI_t;
  end record FM_SB13_CTRL_t;
  function len(x: FM_SB13_CTRL_t) return natural;
  function width(x: FM_SB13_CTRL_t) return natural;
  function vectorify(x: FM_SB13_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB13_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB13_CTRL_t) return FM_SB13_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB13_CTRL_t) return FM_SB13_CTRL_t;
  function nullify(t: FM_SB13_CTRL_t) return FM_SB13_CTRL_t;
  function zeroed(t: FM_SB13_CTRL_t) return FM_SB13_CTRL_t;

  type FM_SB14_MON_t is record
    SB_MEM : FM_SB14_SB_MEM_MISO_t;
    SB_META : FM_SB14_SB_META_MISO_t;
  end record FM_SB14_MON_t;
  function len(x: FM_SB14_MON_t) return natural;
  function width(x: FM_SB14_MON_t) return natural;
  function vectorify(x: FM_SB14_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB14_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB14_MON_t) return FM_SB14_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB14_MON_t) return FM_SB14_MON_t;
  function nullify(t: FM_SB14_MON_t) return FM_SB14_MON_t;
  function zeroed(t: FM_SB14_MON_t) return FM_SB14_MON_t;

  type FM_SB14_CTRL_t is record
    SB_MEM : FM_SB14_SB_MEM_MOSI_t;
    SB_META : FM_SB14_SB_META_MOSI_t;
  end record FM_SB14_CTRL_t;
  function len(x: FM_SB14_CTRL_t) return natural;
  function width(x: FM_SB14_CTRL_t) return natural;
  function vectorify(x: FM_SB14_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB14_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB14_CTRL_t) return FM_SB14_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB14_CTRL_t) return FM_SB14_CTRL_t;
  function nullify(t: FM_SB14_CTRL_t) return FM_SB14_CTRL_t;
  function zeroed(t: FM_SB14_CTRL_t) return FM_SB14_CTRL_t;

  type FM_SB15_MON_t is record
    SB_MEM : FM_SB15_SB_MEM_MISO_t;
    SB_META : FM_SB15_SB_META_MISO_t;
  end record FM_SB15_MON_t;
  function len(x: FM_SB15_MON_t) return natural;
  function width(x: FM_SB15_MON_t) return natural;
  function vectorify(x: FM_SB15_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB15_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB15_MON_t) return FM_SB15_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB15_MON_t) return FM_SB15_MON_t;
  function nullify(t: FM_SB15_MON_t) return FM_SB15_MON_t;
  function zeroed(t: FM_SB15_MON_t) return FM_SB15_MON_t;

  type FM_SB15_CTRL_t is record
    SB_MEM : FM_SB15_SB_MEM_MOSI_t;
    SB_META : FM_SB15_SB_META_MOSI_t;
  end record FM_SB15_CTRL_t;
  function len(x: FM_SB15_CTRL_t) return natural;
  function width(x: FM_SB15_CTRL_t) return natural;
  function vectorify(x: FM_SB15_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB15_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB15_CTRL_t) return FM_SB15_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB15_CTRL_t) return FM_SB15_CTRL_t;
  function nullify(t: FM_SB15_CTRL_t) return FM_SB15_CTRL_t;
  function zeroed(t: FM_SB15_CTRL_t) return FM_SB15_CTRL_t;

  type FM_SB16_MON_t is record
    SB_MEM : FM_SB16_SB_MEM_MISO_t;
    SB_META : FM_SB16_SB_META_MISO_t;
  end record FM_SB16_MON_t;
  function len(x: FM_SB16_MON_t) return natural;
  function width(x: FM_SB16_MON_t) return natural;
  function vectorify(x: FM_SB16_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB16_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB16_MON_t) return FM_SB16_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB16_MON_t) return FM_SB16_MON_t;
  function nullify(t: FM_SB16_MON_t) return FM_SB16_MON_t;
  function zeroed(t: FM_SB16_MON_t) return FM_SB16_MON_t;

  type FM_SB16_CTRL_t is record
    SB_MEM : FM_SB16_SB_MEM_MOSI_t;
    SB_META : FM_SB16_SB_META_MOSI_t;
  end record FM_SB16_CTRL_t;
  function len(x: FM_SB16_CTRL_t) return natural;
  function width(x: FM_SB16_CTRL_t) return natural;
  function vectorify(x: FM_SB16_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB16_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB16_CTRL_t) return FM_SB16_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB16_CTRL_t) return FM_SB16_CTRL_t;
  function nullify(t: FM_SB16_CTRL_t) return FM_SB16_CTRL_t;
  function zeroed(t: FM_SB16_CTRL_t) return FM_SB16_CTRL_t;

  type FM_SB17_MON_t is record
    SB_MEM : FM_SB17_SB_MEM_MISO_t;
    SB_META : FM_SB17_SB_META_MISO_t;
  end record FM_SB17_MON_t;
  function len(x: FM_SB17_MON_t) return natural;
  function width(x: FM_SB17_MON_t) return natural;
  function vectorify(x: FM_SB17_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB17_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB17_MON_t) return FM_SB17_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB17_MON_t) return FM_SB17_MON_t;
  function nullify(t: FM_SB17_MON_t) return FM_SB17_MON_t;
  function zeroed(t: FM_SB17_MON_t) return FM_SB17_MON_t;

  type FM_SB17_CTRL_t is record
    SB_MEM : FM_SB17_SB_MEM_MOSI_t;
    SB_META : FM_SB17_SB_META_MOSI_t;
  end record FM_SB17_CTRL_t;
  function len(x: FM_SB17_CTRL_t) return natural;
  function width(x: FM_SB17_CTRL_t) return natural;
  function vectorify(x: FM_SB17_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB17_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB17_CTRL_t) return FM_SB17_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB17_CTRL_t) return FM_SB17_CTRL_t;
  function nullify(t: FM_SB17_CTRL_t) return FM_SB17_CTRL_t;
  function zeroed(t: FM_SB17_CTRL_t) return FM_SB17_CTRL_t;

  type FM_SB18_MON_t is record
    SB_MEM : FM_SB18_SB_MEM_MISO_t;
    SB_META : FM_SB18_SB_META_MISO_t;
  end record FM_SB18_MON_t;
  function len(x: FM_SB18_MON_t) return natural;
  function width(x: FM_SB18_MON_t) return natural;
  function vectorify(x: FM_SB18_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB18_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB18_MON_t) return FM_SB18_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB18_MON_t) return FM_SB18_MON_t;
  function nullify(t: FM_SB18_MON_t) return FM_SB18_MON_t;
  function zeroed(t: FM_SB18_MON_t) return FM_SB18_MON_t;

  type FM_SB18_CTRL_t is record
    SB_MEM : FM_SB18_SB_MEM_MOSI_t;
    SB_META : FM_SB18_SB_META_MOSI_t;
  end record FM_SB18_CTRL_t;
  function len(x: FM_SB18_CTRL_t) return natural;
  function width(x: FM_SB18_CTRL_t) return natural;
  function vectorify(x: FM_SB18_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB18_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB18_CTRL_t) return FM_SB18_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB18_CTRL_t) return FM_SB18_CTRL_t;
  function nullify(t: FM_SB18_CTRL_t) return FM_SB18_CTRL_t;
  function zeroed(t: FM_SB18_CTRL_t) return FM_SB18_CTRL_t;

  type FM_SB19_MON_t is record
    SB_MEM : FM_SB19_SB_MEM_MISO_t;
    SB_META : FM_SB19_SB_META_MISO_t;
  end record FM_SB19_MON_t;
  function len(x: FM_SB19_MON_t) return natural;
  function width(x: FM_SB19_MON_t) return natural;
  function vectorify(x: FM_SB19_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB19_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB19_MON_t) return FM_SB19_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB19_MON_t) return FM_SB19_MON_t;
  function nullify(t: FM_SB19_MON_t) return FM_SB19_MON_t;
  function zeroed(t: FM_SB19_MON_t) return FM_SB19_MON_t;

  type FM_SB19_CTRL_t is record
    SB_MEM : FM_SB19_SB_MEM_MOSI_t;
    SB_META : FM_SB19_SB_META_MOSI_t;
  end record FM_SB19_CTRL_t;
  function len(x: FM_SB19_CTRL_t) return natural;
  function width(x: FM_SB19_CTRL_t) return natural;
  function vectorify(x: FM_SB19_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB19_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB19_CTRL_t) return FM_SB19_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB19_CTRL_t) return FM_SB19_CTRL_t;
  function nullify(t: FM_SB19_CTRL_t) return FM_SB19_CTRL_t;
  function zeroed(t: FM_SB19_CTRL_t) return FM_SB19_CTRL_t;

  type FM_SB20_MON_t is record
    SB_MEM : FM_SB20_SB_MEM_MISO_t;
    SB_META : FM_SB20_SB_META_MISO_t;
  end record FM_SB20_MON_t;
  function len(x: FM_SB20_MON_t) return natural;
  function width(x: FM_SB20_MON_t) return natural;
  function vectorify(x: FM_SB20_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB20_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB20_MON_t) return FM_SB20_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB20_MON_t) return FM_SB20_MON_t;
  function nullify(t: FM_SB20_MON_t) return FM_SB20_MON_t;
  function zeroed(t: FM_SB20_MON_t) return FM_SB20_MON_t;

  type FM_SB20_CTRL_t is record
    SB_MEM : FM_SB20_SB_MEM_MOSI_t;
    SB_META : FM_SB20_SB_META_MOSI_t;
  end record FM_SB20_CTRL_t;
  function len(x: FM_SB20_CTRL_t) return natural;
  function width(x: FM_SB20_CTRL_t) return natural;
  function vectorify(x: FM_SB20_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB20_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB20_CTRL_t) return FM_SB20_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB20_CTRL_t) return FM_SB20_CTRL_t;
  function nullify(t: FM_SB20_CTRL_t) return FM_SB20_CTRL_t;
  function zeroed(t: FM_SB20_CTRL_t) return FM_SB20_CTRL_t;

  type FM_SB21_MON_t is record
    SB_MEM : FM_SB21_SB_MEM_MISO_t;
    SB_META : FM_SB21_SB_META_MISO_t;
  end record FM_SB21_MON_t;
  function len(x: FM_SB21_MON_t) return natural;
  function width(x: FM_SB21_MON_t) return natural;
  function vectorify(x: FM_SB21_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB21_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB21_MON_t) return FM_SB21_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB21_MON_t) return FM_SB21_MON_t;
  function nullify(t: FM_SB21_MON_t) return FM_SB21_MON_t;
  function zeroed(t: FM_SB21_MON_t) return FM_SB21_MON_t;

  type FM_SB21_CTRL_t is record
    SB_MEM : FM_SB21_SB_MEM_MOSI_t;
    SB_META : FM_SB21_SB_META_MOSI_t;
  end record FM_SB21_CTRL_t;
  function len(x: FM_SB21_CTRL_t) return natural;
  function width(x: FM_SB21_CTRL_t) return natural;
  function vectorify(x: FM_SB21_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB21_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB21_CTRL_t) return FM_SB21_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB21_CTRL_t) return FM_SB21_CTRL_t;
  function nullify(t: FM_SB21_CTRL_t) return FM_SB21_CTRL_t;
  function zeroed(t: FM_SB21_CTRL_t) return FM_SB21_CTRL_t;

  type FM_SB22_MON_t is record
    SB_MEM : FM_SB22_SB_MEM_MISO_t;
    SB_META : FM_SB22_SB_META_MISO_t;
  end record FM_SB22_MON_t;
  function len(x: FM_SB22_MON_t) return natural;
  function width(x: FM_SB22_MON_t) return natural;
  function vectorify(x: FM_SB22_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB22_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB22_MON_t) return FM_SB22_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB22_MON_t) return FM_SB22_MON_t;
  function nullify(t: FM_SB22_MON_t) return FM_SB22_MON_t;
  function zeroed(t: FM_SB22_MON_t) return FM_SB22_MON_t;

  type FM_SB22_CTRL_t is record
    SB_MEM : FM_SB22_SB_MEM_MOSI_t;
    SB_META : FM_SB22_SB_META_MOSI_t;
  end record FM_SB22_CTRL_t;
  function len(x: FM_SB22_CTRL_t) return natural;
  function width(x: FM_SB22_CTRL_t) return natural;
  function vectorify(x: FM_SB22_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB22_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB22_CTRL_t) return FM_SB22_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB22_CTRL_t) return FM_SB22_CTRL_t;
  function nullify(t: FM_SB22_CTRL_t) return FM_SB22_CTRL_t;
  function zeroed(t: FM_SB22_CTRL_t) return FM_SB22_CTRL_t;

  type FM_SB23_MON_t is record
    SB_MEM : FM_SB23_SB_MEM_MISO_t;
    SB_META : FM_SB23_SB_META_MISO_t;
  end record FM_SB23_MON_t;
  function len(x: FM_SB23_MON_t) return natural;
  function width(x: FM_SB23_MON_t) return natural;
  function vectorify(x: FM_SB23_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB23_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB23_MON_t) return FM_SB23_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB23_MON_t) return FM_SB23_MON_t;
  function nullify(t: FM_SB23_MON_t) return FM_SB23_MON_t;
  function zeroed(t: FM_SB23_MON_t) return FM_SB23_MON_t;

  type FM_SB23_CTRL_t is record
    SB_MEM : FM_SB23_SB_MEM_MOSI_t;
    SB_META : FM_SB23_SB_META_MOSI_t;
  end record FM_SB23_CTRL_t;
  function len(x: FM_SB23_CTRL_t) return natural;
  function width(x: FM_SB23_CTRL_t) return natural;
  function vectorify(x: FM_SB23_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB23_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB23_CTRL_t) return FM_SB23_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB23_CTRL_t) return FM_SB23_CTRL_t;
  function nullify(t: FM_SB23_CTRL_t) return FM_SB23_CTRL_t;
  function zeroed(t: FM_SB23_CTRL_t) return FM_SB23_CTRL_t;

  type FM_SB24_MON_t is record
    SB_MEM : FM_SB24_SB_MEM_MISO_t;
    SB_META : FM_SB24_SB_META_MISO_t;
  end record FM_SB24_MON_t;
  function len(x: FM_SB24_MON_t) return natural;
  function width(x: FM_SB24_MON_t) return natural;
  function vectorify(x: FM_SB24_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB24_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB24_MON_t) return FM_SB24_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB24_MON_t) return FM_SB24_MON_t;
  function nullify(t: FM_SB24_MON_t) return FM_SB24_MON_t;
  function zeroed(t: FM_SB24_MON_t) return FM_SB24_MON_t;

  type FM_SB24_CTRL_t is record
    SB_MEM : FM_SB24_SB_MEM_MOSI_t;
    SB_META : FM_SB24_SB_META_MOSI_t;
  end record FM_SB24_CTRL_t;
  function len(x: FM_SB24_CTRL_t) return natural;
  function width(x: FM_SB24_CTRL_t) return natural;
  function vectorify(x: FM_SB24_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB24_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB24_CTRL_t) return FM_SB24_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB24_CTRL_t) return FM_SB24_CTRL_t;
  function nullify(t: FM_SB24_CTRL_t) return FM_SB24_CTRL_t;
  function zeroed(t: FM_SB24_CTRL_t) return FM_SB24_CTRL_t;

  type FM_SB25_MON_t is record
    SB_MEM : FM_SB25_SB_MEM_MISO_t;
    SB_META : FM_SB25_SB_META_MISO_t;
  end record FM_SB25_MON_t;
  function len(x: FM_SB25_MON_t) return natural;
  function width(x: FM_SB25_MON_t) return natural;
  function vectorify(x: FM_SB25_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB25_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB25_MON_t) return FM_SB25_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB25_MON_t) return FM_SB25_MON_t;
  function nullify(t: FM_SB25_MON_t) return FM_SB25_MON_t;
  function zeroed(t: FM_SB25_MON_t) return FM_SB25_MON_t;

  type FM_SB25_CTRL_t is record
    SB_MEM : FM_SB25_SB_MEM_MOSI_t;
    SB_META : FM_SB25_SB_META_MOSI_t;
  end record FM_SB25_CTRL_t;
  function len(x: FM_SB25_CTRL_t) return natural;
  function width(x: FM_SB25_CTRL_t) return natural;
  function vectorify(x: FM_SB25_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB25_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB25_CTRL_t) return FM_SB25_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB25_CTRL_t) return FM_SB25_CTRL_t;
  function nullify(t: FM_SB25_CTRL_t) return FM_SB25_CTRL_t;
  function zeroed(t: FM_SB25_CTRL_t) return FM_SB25_CTRL_t;

  type FM_SB26_MON_t is record
    SB_MEM : FM_SB26_SB_MEM_MISO_t;
    SB_META : FM_SB26_SB_META_MISO_t;
  end record FM_SB26_MON_t;
  function len(x: FM_SB26_MON_t) return natural;
  function width(x: FM_SB26_MON_t) return natural;
  function vectorify(x: FM_SB26_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB26_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB26_MON_t) return FM_SB26_MON_t;
  function convert(x: in std_logic_vector; t: FM_SB26_MON_t) return FM_SB26_MON_t;
  function nullify(t: FM_SB26_MON_t) return FM_SB26_MON_t;
  function zeroed(t: FM_SB26_MON_t) return FM_SB26_MON_t;

  type FM_SB26_CTRL_t is record
    SB_MEM : FM_SB26_SB_MEM_MOSI_t;
    SB_META : FM_SB26_SB_META_MOSI_t;
  end record FM_SB26_CTRL_t;
  function len(x: FM_SB26_CTRL_t) return natural;
  function width(x: FM_SB26_CTRL_t) return natural;
  function vectorify(x: FM_SB26_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_SB26_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_SB26_CTRL_t) return FM_SB26_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_SB26_CTRL_t) return FM_SB26_CTRL_t;
  function nullify(t: FM_SB26_CTRL_t) return FM_SB26_CTRL_t;
  function zeroed(t: FM_SB26_CTRL_t) return FM_SB26_CTRL_t;

  type FM_MON_t is record
    SB0 : FM_SB0_MON_t;
    SB1 : FM_SB1_MON_t;
    SB2 : FM_SB2_MON_t;
    SB3 : FM_SB3_MON_t;
    SB4 : FM_SB4_MON_t;
    SB5 : FM_SB5_MON_t;
    SB6 : FM_SB6_MON_t;
    SB7 : FM_SB7_MON_t;
    SB8 : FM_SB8_MON_t;
    SB9 : FM_SB9_MON_t;
    SB10 : FM_SB10_MON_t;
    SB11 : FM_SB11_MON_t;
    SB12 : FM_SB12_MON_t;
    SB13 : FM_SB13_MON_t;
    SB14 : FM_SB14_MON_t;
    SB15 : FM_SB15_MON_t;
    SB16 : FM_SB16_MON_t;
    SB17 : FM_SB17_MON_t;
    SB18 : FM_SB18_MON_t;
    SB19 : FM_SB19_MON_t;
    SB20 : FM_SB20_MON_t;
    SB21 : FM_SB21_MON_t;
    SB22 : FM_SB22_MON_t;
    SB23 : FM_SB23_MON_t;
    SB24 : FM_SB24_MON_t;
    SB25 : FM_SB25_MON_t;
    SB26 : FM_SB26_MON_t;
  end record FM_MON_t;
  function len(x: FM_MON_t) return natural;
  function width(x: FM_MON_t) return natural;
  function vectorify(x: FM_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_MON_t) return FM_MON_t;
  function convert(x: in std_logic_vector; t: FM_MON_t) return FM_MON_t;
  function nullify(t: FM_MON_t) return FM_MON_t;
  function zeroed(t: FM_MON_t) return FM_MON_t;

  type FM_CTRL_t is record
    SPY_CTRL : FM_SPY_CTRL_CTRL_t;
    FREEZE_MASK_0 : std_logic_vector(32-1 downto 0);
    FREEZE_MASK_1 : std_logic_vector(32-1 downto 0);
    PLAYBACK_MASK_0 : std_logic_vector(32-1 downto 0);
    PLAYBACK_MASK_1 : std_logic_vector(32-1 downto 0);
    SB0 : FM_SB0_CTRL_t;
    SB1 : FM_SB1_CTRL_t;
    SB2 : FM_SB2_CTRL_t;
    SB3 : FM_SB3_CTRL_t;
    SB4 : FM_SB4_CTRL_t;
    SB5 : FM_SB5_CTRL_t;
    SB6 : FM_SB6_CTRL_t;
    SB7 : FM_SB7_CTRL_t;
    SB8 : FM_SB8_CTRL_t;
    SB9 : FM_SB9_CTRL_t;
    SB10 : FM_SB10_CTRL_t;
    SB11 : FM_SB11_CTRL_t;
    SB12 : FM_SB12_CTRL_t;
    SB13 : FM_SB13_CTRL_t;
    SB14 : FM_SB14_CTRL_t;
    SB15 : FM_SB15_CTRL_t;
    SB16 : FM_SB16_CTRL_t;
    SB17 : FM_SB17_CTRL_t;
    SB18 : FM_SB18_CTRL_t;
    SB19 : FM_SB19_CTRL_t;
    SB20 : FM_SB20_CTRL_t;
    SB21 : FM_SB21_CTRL_t;
    SB22 : FM_SB22_CTRL_t;
    SB23 : FM_SB23_CTRL_t;
    SB24 : FM_SB24_CTRL_t;
    SB25 : FM_SB25_CTRL_t;
    SB26 : FM_SB26_CTRL_t;
  end record FM_CTRL_t;
  function len(x: FM_CTRL_t) return natural;
  function width(x: FM_CTRL_t) return natural;
  function vectorify(x: FM_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: FM_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: FM_CTRL_t) return FM_CTRL_t;
  function convert(x: in std_logic_vector; t: FM_CTRL_t) return FM_CTRL_t;
  function nullify(t: FM_CTRL_t) return FM_CTRL_t;
  function zeroed(t: FM_CTRL_t) return FM_CTRL_t;

end package FM_CTRL;

------------------------------------------------------------

package body FM_CTRL is

  function len(x: FM_SPY_CTRL_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.GLOBAL_FREEZE);
    l := l + len(x.GLOBAL_PLAYBACK_MODE);
    return l;
  end function len;
  function width(x: FM_SPY_CTRL_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.GLOBAL_FREEZE);
    l := l + width(x.GLOBAL_PLAYBACK_MODE);
    return l;
  end function width;
  function vectorify(x: FM_SPY_CTRL_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.GLOBAL_FREEZE)-1), vectorify(x.GLOBAL_FREEZE, y(left to left+len(x.GLOBAL_FREEZE)-1)));
      left := left + len(x.GLOBAL_FREEZE);
      assign(y(left to left+len(x.GLOBAL_PLAYBACK_MODE)-1), vectorify(x.GLOBAL_PLAYBACK_MODE, y(left to left+len(x.GLOBAL_PLAYBACK_MODE)-1)));
    else
      assign(y(left downto left-len(x.GLOBAL_FREEZE)+1), vectorify(x.GLOBAL_FREEZE, y(left downto left-len(x.GLOBAL_FREEZE)+1)));
      left := left - len(x.GLOBAL_FREEZE);
      assign(y(left downto left-len(x.GLOBAL_PLAYBACK_MODE)+1), vectorify(x.GLOBAL_PLAYBACK_MODE, y(left downto left-len(x.GLOBAL_PLAYBACK_MODE)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SPY_CTRL_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.GLOBAL_FREEZE)-1), convert(x.GLOBAL_FREEZE, y(left to left+len(x.GLOBAL_FREEZE)-1)));
      left := left + len(x.GLOBAL_FREEZE);
      assign(y(left to left+len(x.GLOBAL_PLAYBACK_MODE)-1), convert(x.GLOBAL_PLAYBACK_MODE, y(left to left+len(x.GLOBAL_PLAYBACK_MODE)-1)));
    else
      assign(y(left downto left-len(x.GLOBAL_FREEZE)+1), convert(x.GLOBAL_FREEZE, y(left downto left-len(x.GLOBAL_FREEZE)+1)));
      left := left - len(x.GLOBAL_FREEZE);
      assign(y(left downto left-len(x.GLOBAL_PLAYBACK_MODE)+1), convert(x.GLOBAL_PLAYBACK_MODE, y(left downto left-len(x.GLOBAL_PLAYBACK_MODE)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SPY_CTRL_CTRL_t) return FM_SPY_CTRL_CTRL_t is
    variable y: FM_SPY_CTRL_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.GLOBAL_FREEZE := structify(x(left to left+len(y.GLOBAL_FREEZE)-1), y.GLOBAL_FREEZE);
      left := left + len(y.GLOBAL_FREEZE);
      y.GLOBAL_PLAYBACK_MODE := structify(x(left to left+len(y.GLOBAL_PLAYBACK_MODE)-1), y.GLOBAL_PLAYBACK_MODE);
    else
      y.GLOBAL_FREEZE := structify(x(left downto left-len(y.GLOBAL_FREEZE)+1), y.GLOBAL_FREEZE);
      left := left - len(y.GLOBAL_FREEZE);
      y.GLOBAL_PLAYBACK_MODE := structify(x(left downto left-len(y.GLOBAL_PLAYBACK_MODE)+1), y.GLOBAL_PLAYBACK_MODE);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SPY_CTRL_CTRL_t) return FM_SPY_CTRL_CTRL_t is
    variable y: FM_SPY_CTRL_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.GLOBAL_FREEZE := convert(x(left to left+len(y.GLOBAL_FREEZE)-1), y.GLOBAL_FREEZE);
      left := left + len(y.GLOBAL_FREEZE);
      y.GLOBAL_PLAYBACK_MODE := convert(x(left to left+len(y.GLOBAL_PLAYBACK_MODE)-1), y.GLOBAL_PLAYBACK_MODE);
    else
      y.GLOBAL_FREEZE := convert(x(left downto left-len(y.GLOBAL_FREEZE)+1), y.GLOBAL_FREEZE);
      left := left - len(y.GLOBAL_FREEZE);
      y.GLOBAL_PLAYBACK_MODE := convert(x(left downto left-len(y.GLOBAL_PLAYBACK_MODE)+1), y.GLOBAL_PLAYBACK_MODE);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SPY_CTRL_CTRL_t) return FM_SPY_CTRL_CTRL_t is
  variable y: FM_SPY_CTRL_CTRL_t;
  begin
    y.GLOBAL_FREEZE := nullify(t.GLOBAL_FREEZE);
    y.GLOBAL_PLAYBACK_MODE := nullify(t.GLOBAL_PLAYBACK_MODE);
    return y;
  end function nullify;
  function zeroed(t: FM_SPY_CTRL_CTRL_t) return FM_SPY_CTRL_CTRL_t is
  variable y: FM_SPY_CTRL_CTRL_t;
  begin
    y.GLOBAL_FREEZE := zeroed(t.GLOBAL_FREEZE);
    y.GLOBAL_PLAYBACK_MODE := zeroed(t.GLOBAL_PLAYBACK_MODE);
    return y;
  end function zeroed;

  function len(x: FM_SB0_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB0_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB0_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB0_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB0_MON_t) return FM_SB0_MON_t is
    variable y: FM_SB0_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB0_MON_t) return FM_SB0_MON_t is
    variable y: FM_SB0_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB0_MON_t) return FM_SB0_MON_t is
  variable y: FM_SB0_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB0_MON_t) return FM_SB0_MON_t is
  variable y: FM_SB0_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB0_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB0_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB0_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB0_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB0_CTRL_t) return FM_SB0_CTRL_t is
    variable y: FM_SB0_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB0_CTRL_t) return FM_SB0_CTRL_t is
    variable y: FM_SB0_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB0_CTRL_t) return FM_SB0_CTRL_t is
  variable y: FM_SB0_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB0_CTRL_t) return FM_SB0_CTRL_t is
  variable y: FM_SB0_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB1_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB1_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB1_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB1_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB1_MON_t) return FM_SB1_MON_t is
    variable y: FM_SB1_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB1_MON_t) return FM_SB1_MON_t is
    variable y: FM_SB1_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB1_MON_t) return FM_SB1_MON_t is
  variable y: FM_SB1_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB1_MON_t) return FM_SB1_MON_t is
  variable y: FM_SB1_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB1_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB1_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB1_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB1_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB1_CTRL_t) return FM_SB1_CTRL_t is
    variable y: FM_SB1_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB1_CTRL_t) return FM_SB1_CTRL_t is
    variable y: FM_SB1_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB1_CTRL_t) return FM_SB1_CTRL_t is
  variable y: FM_SB1_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB1_CTRL_t) return FM_SB1_CTRL_t is
  variable y: FM_SB1_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB2_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB2_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB2_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB2_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB2_MON_t) return FM_SB2_MON_t is
    variable y: FM_SB2_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB2_MON_t) return FM_SB2_MON_t is
    variable y: FM_SB2_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB2_MON_t) return FM_SB2_MON_t is
  variable y: FM_SB2_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB2_MON_t) return FM_SB2_MON_t is
  variable y: FM_SB2_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB2_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB2_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB2_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB2_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB2_CTRL_t) return FM_SB2_CTRL_t is
    variable y: FM_SB2_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB2_CTRL_t) return FM_SB2_CTRL_t is
    variable y: FM_SB2_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB2_CTRL_t) return FM_SB2_CTRL_t is
  variable y: FM_SB2_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB2_CTRL_t) return FM_SB2_CTRL_t is
  variable y: FM_SB2_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB3_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB3_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB3_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB3_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB3_MON_t) return FM_SB3_MON_t is
    variable y: FM_SB3_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB3_MON_t) return FM_SB3_MON_t is
    variable y: FM_SB3_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB3_MON_t) return FM_SB3_MON_t is
  variable y: FM_SB3_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB3_MON_t) return FM_SB3_MON_t is
  variable y: FM_SB3_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB3_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB3_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB3_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB3_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB3_CTRL_t) return FM_SB3_CTRL_t is
    variable y: FM_SB3_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB3_CTRL_t) return FM_SB3_CTRL_t is
    variable y: FM_SB3_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB3_CTRL_t) return FM_SB3_CTRL_t is
  variable y: FM_SB3_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB3_CTRL_t) return FM_SB3_CTRL_t is
  variable y: FM_SB3_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB4_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB4_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB4_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB4_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB4_MON_t) return FM_SB4_MON_t is
    variable y: FM_SB4_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB4_MON_t) return FM_SB4_MON_t is
    variable y: FM_SB4_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB4_MON_t) return FM_SB4_MON_t is
  variable y: FM_SB4_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB4_MON_t) return FM_SB4_MON_t is
  variable y: FM_SB4_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB4_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB4_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB4_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB4_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB4_CTRL_t) return FM_SB4_CTRL_t is
    variable y: FM_SB4_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB4_CTRL_t) return FM_SB4_CTRL_t is
    variable y: FM_SB4_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB4_CTRL_t) return FM_SB4_CTRL_t is
  variable y: FM_SB4_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB4_CTRL_t) return FM_SB4_CTRL_t is
  variable y: FM_SB4_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB5_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB5_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB5_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB5_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB5_MON_t) return FM_SB5_MON_t is
    variable y: FM_SB5_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB5_MON_t) return FM_SB5_MON_t is
    variable y: FM_SB5_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB5_MON_t) return FM_SB5_MON_t is
  variable y: FM_SB5_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB5_MON_t) return FM_SB5_MON_t is
  variable y: FM_SB5_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB5_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB5_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB5_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB5_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB5_CTRL_t) return FM_SB5_CTRL_t is
    variable y: FM_SB5_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB5_CTRL_t) return FM_SB5_CTRL_t is
    variable y: FM_SB5_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB5_CTRL_t) return FM_SB5_CTRL_t is
  variable y: FM_SB5_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB5_CTRL_t) return FM_SB5_CTRL_t is
  variable y: FM_SB5_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB6_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB6_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB6_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB6_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB6_MON_t) return FM_SB6_MON_t is
    variable y: FM_SB6_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB6_MON_t) return FM_SB6_MON_t is
    variable y: FM_SB6_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB6_MON_t) return FM_SB6_MON_t is
  variable y: FM_SB6_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB6_MON_t) return FM_SB6_MON_t is
  variable y: FM_SB6_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB6_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB6_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB6_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB6_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB6_CTRL_t) return FM_SB6_CTRL_t is
    variable y: FM_SB6_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB6_CTRL_t) return FM_SB6_CTRL_t is
    variable y: FM_SB6_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB6_CTRL_t) return FM_SB6_CTRL_t is
  variable y: FM_SB6_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB6_CTRL_t) return FM_SB6_CTRL_t is
  variable y: FM_SB6_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB7_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB7_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB7_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB7_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB7_MON_t) return FM_SB7_MON_t is
    variable y: FM_SB7_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB7_MON_t) return FM_SB7_MON_t is
    variable y: FM_SB7_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB7_MON_t) return FM_SB7_MON_t is
  variable y: FM_SB7_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB7_MON_t) return FM_SB7_MON_t is
  variable y: FM_SB7_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB7_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB7_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB7_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB7_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB7_CTRL_t) return FM_SB7_CTRL_t is
    variable y: FM_SB7_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB7_CTRL_t) return FM_SB7_CTRL_t is
    variable y: FM_SB7_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB7_CTRL_t) return FM_SB7_CTRL_t is
  variable y: FM_SB7_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB7_CTRL_t) return FM_SB7_CTRL_t is
  variable y: FM_SB7_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB8_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB8_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB8_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB8_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB8_MON_t) return FM_SB8_MON_t is
    variable y: FM_SB8_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB8_MON_t) return FM_SB8_MON_t is
    variable y: FM_SB8_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB8_MON_t) return FM_SB8_MON_t is
  variable y: FM_SB8_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB8_MON_t) return FM_SB8_MON_t is
  variable y: FM_SB8_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB8_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB8_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB8_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB8_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB8_CTRL_t) return FM_SB8_CTRL_t is
    variable y: FM_SB8_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB8_CTRL_t) return FM_SB8_CTRL_t is
    variable y: FM_SB8_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB8_CTRL_t) return FM_SB8_CTRL_t is
  variable y: FM_SB8_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB8_CTRL_t) return FM_SB8_CTRL_t is
  variable y: FM_SB8_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB9_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB9_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB9_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB9_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB9_MON_t) return FM_SB9_MON_t is
    variable y: FM_SB9_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB9_MON_t) return FM_SB9_MON_t is
    variable y: FM_SB9_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB9_MON_t) return FM_SB9_MON_t is
  variable y: FM_SB9_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB9_MON_t) return FM_SB9_MON_t is
  variable y: FM_SB9_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB9_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB9_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB9_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB9_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB9_CTRL_t) return FM_SB9_CTRL_t is
    variable y: FM_SB9_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB9_CTRL_t) return FM_SB9_CTRL_t is
    variable y: FM_SB9_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB9_CTRL_t) return FM_SB9_CTRL_t is
  variable y: FM_SB9_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB9_CTRL_t) return FM_SB9_CTRL_t is
  variable y: FM_SB9_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB10_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB10_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB10_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB10_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB10_MON_t) return FM_SB10_MON_t is
    variable y: FM_SB10_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB10_MON_t) return FM_SB10_MON_t is
    variable y: FM_SB10_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB10_MON_t) return FM_SB10_MON_t is
  variable y: FM_SB10_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB10_MON_t) return FM_SB10_MON_t is
  variable y: FM_SB10_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB10_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB10_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB10_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB10_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB10_CTRL_t) return FM_SB10_CTRL_t is
    variable y: FM_SB10_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB10_CTRL_t) return FM_SB10_CTRL_t is
    variable y: FM_SB10_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB10_CTRL_t) return FM_SB10_CTRL_t is
  variable y: FM_SB10_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB10_CTRL_t) return FM_SB10_CTRL_t is
  variable y: FM_SB10_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB11_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB11_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB11_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB11_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB11_MON_t) return FM_SB11_MON_t is
    variable y: FM_SB11_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB11_MON_t) return FM_SB11_MON_t is
    variable y: FM_SB11_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB11_MON_t) return FM_SB11_MON_t is
  variable y: FM_SB11_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB11_MON_t) return FM_SB11_MON_t is
  variable y: FM_SB11_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB11_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB11_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB11_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB11_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB11_CTRL_t) return FM_SB11_CTRL_t is
    variable y: FM_SB11_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB11_CTRL_t) return FM_SB11_CTRL_t is
    variable y: FM_SB11_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB11_CTRL_t) return FM_SB11_CTRL_t is
  variable y: FM_SB11_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB11_CTRL_t) return FM_SB11_CTRL_t is
  variable y: FM_SB11_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB12_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB12_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB12_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB12_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB12_MON_t) return FM_SB12_MON_t is
    variable y: FM_SB12_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB12_MON_t) return FM_SB12_MON_t is
    variable y: FM_SB12_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB12_MON_t) return FM_SB12_MON_t is
  variable y: FM_SB12_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB12_MON_t) return FM_SB12_MON_t is
  variable y: FM_SB12_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB12_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB12_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB12_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB12_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB12_CTRL_t) return FM_SB12_CTRL_t is
    variable y: FM_SB12_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB12_CTRL_t) return FM_SB12_CTRL_t is
    variable y: FM_SB12_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB12_CTRL_t) return FM_SB12_CTRL_t is
  variable y: FM_SB12_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB12_CTRL_t) return FM_SB12_CTRL_t is
  variable y: FM_SB12_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB13_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB13_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB13_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB13_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB13_MON_t) return FM_SB13_MON_t is
    variable y: FM_SB13_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB13_MON_t) return FM_SB13_MON_t is
    variable y: FM_SB13_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB13_MON_t) return FM_SB13_MON_t is
  variable y: FM_SB13_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB13_MON_t) return FM_SB13_MON_t is
  variable y: FM_SB13_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB13_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB13_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB13_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB13_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB13_CTRL_t) return FM_SB13_CTRL_t is
    variable y: FM_SB13_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB13_CTRL_t) return FM_SB13_CTRL_t is
    variable y: FM_SB13_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB13_CTRL_t) return FM_SB13_CTRL_t is
  variable y: FM_SB13_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB13_CTRL_t) return FM_SB13_CTRL_t is
  variable y: FM_SB13_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB14_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB14_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB14_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB14_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB14_MON_t) return FM_SB14_MON_t is
    variable y: FM_SB14_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB14_MON_t) return FM_SB14_MON_t is
    variable y: FM_SB14_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB14_MON_t) return FM_SB14_MON_t is
  variable y: FM_SB14_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB14_MON_t) return FM_SB14_MON_t is
  variable y: FM_SB14_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB14_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB14_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB14_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB14_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB14_CTRL_t) return FM_SB14_CTRL_t is
    variable y: FM_SB14_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB14_CTRL_t) return FM_SB14_CTRL_t is
    variable y: FM_SB14_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB14_CTRL_t) return FM_SB14_CTRL_t is
  variable y: FM_SB14_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB14_CTRL_t) return FM_SB14_CTRL_t is
  variable y: FM_SB14_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB15_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB15_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB15_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB15_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB15_MON_t) return FM_SB15_MON_t is
    variable y: FM_SB15_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB15_MON_t) return FM_SB15_MON_t is
    variable y: FM_SB15_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB15_MON_t) return FM_SB15_MON_t is
  variable y: FM_SB15_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB15_MON_t) return FM_SB15_MON_t is
  variable y: FM_SB15_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB15_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB15_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB15_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB15_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB15_CTRL_t) return FM_SB15_CTRL_t is
    variable y: FM_SB15_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB15_CTRL_t) return FM_SB15_CTRL_t is
    variable y: FM_SB15_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB15_CTRL_t) return FM_SB15_CTRL_t is
  variable y: FM_SB15_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB15_CTRL_t) return FM_SB15_CTRL_t is
  variable y: FM_SB15_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB16_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB16_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB16_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB16_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB16_MON_t) return FM_SB16_MON_t is
    variable y: FM_SB16_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB16_MON_t) return FM_SB16_MON_t is
    variable y: FM_SB16_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB16_MON_t) return FM_SB16_MON_t is
  variable y: FM_SB16_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB16_MON_t) return FM_SB16_MON_t is
  variable y: FM_SB16_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB16_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB16_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB16_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB16_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB16_CTRL_t) return FM_SB16_CTRL_t is
    variable y: FM_SB16_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB16_CTRL_t) return FM_SB16_CTRL_t is
    variable y: FM_SB16_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB16_CTRL_t) return FM_SB16_CTRL_t is
  variable y: FM_SB16_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB16_CTRL_t) return FM_SB16_CTRL_t is
  variable y: FM_SB16_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB17_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB17_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB17_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB17_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB17_MON_t) return FM_SB17_MON_t is
    variable y: FM_SB17_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB17_MON_t) return FM_SB17_MON_t is
    variable y: FM_SB17_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB17_MON_t) return FM_SB17_MON_t is
  variable y: FM_SB17_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB17_MON_t) return FM_SB17_MON_t is
  variable y: FM_SB17_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB17_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB17_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB17_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB17_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB17_CTRL_t) return FM_SB17_CTRL_t is
    variable y: FM_SB17_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB17_CTRL_t) return FM_SB17_CTRL_t is
    variable y: FM_SB17_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB17_CTRL_t) return FM_SB17_CTRL_t is
  variable y: FM_SB17_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB17_CTRL_t) return FM_SB17_CTRL_t is
  variable y: FM_SB17_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB18_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB18_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB18_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB18_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB18_MON_t) return FM_SB18_MON_t is
    variable y: FM_SB18_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB18_MON_t) return FM_SB18_MON_t is
    variable y: FM_SB18_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB18_MON_t) return FM_SB18_MON_t is
  variable y: FM_SB18_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB18_MON_t) return FM_SB18_MON_t is
  variable y: FM_SB18_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB18_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB18_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB18_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB18_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB18_CTRL_t) return FM_SB18_CTRL_t is
    variable y: FM_SB18_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB18_CTRL_t) return FM_SB18_CTRL_t is
    variable y: FM_SB18_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB18_CTRL_t) return FM_SB18_CTRL_t is
  variable y: FM_SB18_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB18_CTRL_t) return FM_SB18_CTRL_t is
  variable y: FM_SB18_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB19_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB19_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB19_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB19_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB19_MON_t) return FM_SB19_MON_t is
    variable y: FM_SB19_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB19_MON_t) return FM_SB19_MON_t is
    variable y: FM_SB19_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB19_MON_t) return FM_SB19_MON_t is
  variable y: FM_SB19_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB19_MON_t) return FM_SB19_MON_t is
  variable y: FM_SB19_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB19_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB19_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB19_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB19_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB19_CTRL_t) return FM_SB19_CTRL_t is
    variable y: FM_SB19_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB19_CTRL_t) return FM_SB19_CTRL_t is
    variable y: FM_SB19_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB19_CTRL_t) return FM_SB19_CTRL_t is
  variable y: FM_SB19_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB19_CTRL_t) return FM_SB19_CTRL_t is
  variable y: FM_SB19_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB20_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB20_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB20_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB20_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB20_MON_t) return FM_SB20_MON_t is
    variable y: FM_SB20_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB20_MON_t) return FM_SB20_MON_t is
    variable y: FM_SB20_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB20_MON_t) return FM_SB20_MON_t is
  variable y: FM_SB20_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB20_MON_t) return FM_SB20_MON_t is
  variable y: FM_SB20_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB20_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB20_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB20_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB20_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB20_CTRL_t) return FM_SB20_CTRL_t is
    variable y: FM_SB20_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB20_CTRL_t) return FM_SB20_CTRL_t is
    variable y: FM_SB20_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB20_CTRL_t) return FM_SB20_CTRL_t is
  variable y: FM_SB20_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB20_CTRL_t) return FM_SB20_CTRL_t is
  variable y: FM_SB20_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB21_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB21_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB21_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB21_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB21_MON_t) return FM_SB21_MON_t is
    variable y: FM_SB21_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB21_MON_t) return FM_SB21_MON_t is
    variable y: FM_SB21_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB21_MON_t) return FM_SB21_MON_t is
  variable y: FM_SB21_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB21_MON_t) return FM_SB21_MON_t is
  variable y: FM_SB21_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB21_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB21_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB21_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB21_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB21_CTRL_t) return FM_SB21_CTRL_t is
    variable y: FM_SB21_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB21_CTRL_t) return FM_SB21_CTRL_t is
    variable y: FM_SB21_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB21_CTRL_t) return FM_SB21_CTRL_t is
  variable y: FM_SB21_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB21_CTRL_t) return FM_SB21_CTRL_t is
  variable y: FM_SB21_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB22_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB22_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB22_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB22_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB22_MON_t) return FM_SB22_MON_t is
    variable y: FM_SB22_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB22_MON_t) return FM_SB22_MON_t is
    variable y: FM_SB22_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB22_MON_t) return FM_SB22_MON_t is
  variable y: FM_SB22_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB22_MON_t) return FM_SB22_MON_t is
  variable y: FM_SB22_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB22_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB22_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB22_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB22_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB22_CTRL_t) return FM_SB22_CTRL_t is
    variable y: FM_SB22_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB22_CTRL_t) return FM_SB22_CTRL_t is
    variable y: FM_SB22_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB22_CTRL_t) return FM_SB22_CTRL_t is
  variable y: FM_SB22_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB22_CTRL_t) return FM_SB22_CTRL_t is
  variable y: FM_SB22_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB23_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB23_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB23_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB23_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB23_MON_t) return FM_SB23_MON_t is
    variable y: FM_SB23_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB23_MON_t) return FM_SB23_MON_t is
    variable y: FM_SB23_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB23_MON_t) return FM_SB23_MON_t is
  variable y: FM_SB23_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB23_MON_t) return FM_SB23_MON_t is
  variable y: FM_SB23_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB23_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB23_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB23_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB23_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB23_CTRL_t) return FM_SB23_CTRL_t is
    variable y: FM_SB23_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB23_CTRL_t) return FM_SB23_CTRL_t is
    variable y: FM_SB23_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB23_CTRL_t) return FM_SB23_CTRL_t is
  variable y: FM_SB23_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB23_CTRL_t) return FM_SB23_CTRL_t is
  variable y: FM_SB23_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB24_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB24_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB24_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB24_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB24_MON_t) return FM_SB24_MON_t is
    variable y: FM_SB24_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB24_MON_t) return FM_SB24_MON_t is
    variable y: FM_SB24_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB24_MON_t) return FM_SB24_MON_t is
  variable y: FM_SB24_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB24_MON_t) return FM_SB24_MON_t is
  variable y: FM_SB24_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB24_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB24_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB24_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB24_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB24_CTRL_t) return FM_SB24_CTRL_t is
    variable y: FM_SB24_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB24_CTRL_t) return FM_SB24_CTRL_t is
    variable y: FM_SB24_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB24_CTRL_t) return FM_SB24_CTRL_t is
  variable y: FM_SB24_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB24_CTRL_t) return FM_SB24_CTRL_t is
  variable y: FM_SB24_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB25_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB25_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB25_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB25_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB25_MON_t) return FM_SB25_MON_t is
    variable y: FM_SB25_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB25_MON_t) return FM_SB25_MON_t is
    variable y: FM_SB25_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB25_MON_t) return FM_SB25_MON_t is
  variable y: FM_SB25_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB25_MON_t) return FM_SB25_MON_t is
  variable y: FM_SB25_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB25_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB25_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB25_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB25_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB25_CTRL_t) return FM_SB25_CTRL_t is
    variable y: FM_SB25_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB25_CTRL_t) return FM_SB25_CTRL_t is
    variable y: FM_SB25_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB25_CTRL_t) return FM_SB25_CTRL_t is
  variable y: FM_SB25_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB25_CTRL_t) return FM_SB25_CTRL_t is
  variable y: FM_SB25_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB26_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB26_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB26_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB26_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB26_MON_t) return FM_SB26_MON_t is
    variable y: FM_SB26_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB26_MON_t) return FM_SB26_MON_t is
    variable y: FM_SB26_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB26_MON_t) return FM_SB26_MON_t is
  variable y: FM_SB26_MON_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB26_MON_t) return FM_SB26_MON_t is
  variable y: FM_SB26_MON_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_SB26_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB_MEM);
    l := l + len(x.SB_META);
    return l;
  end function len;
  function width(x: FM_SB26_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB_MEM);
    l := l + width(x.SB_META);
    return l;
  end function width;
  function vectorify(x: FM_SB26_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), vectorify(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), vectorify(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), vectorify(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), vectorify(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_SB26_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB_MEM)-1), convert(x.SB_MEM, y(left to left+len(x.SB_MEM)-1)));
      left := left + len(x.SB_MEM);
      assign(y(left to left+len(x.SB_META)-1), convert(x.SB_META, y(left to left+len(x.SB_META)-1)));
    else
      assign(y(left downto left-len(x.SB_MEM)+1), convert(x.SB_MEM, y(left downto left-len(x.SB_MEM)+1)));
      left := left - len(x.SB_MEM);
      assign(y(left downto left-len(x.SB_META)+1), convert(x.SB_META, y(left downto left-len(x.SB_META)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_SB26_CTRL_t) return FM_SB26_CTRL_t is
    variable y: FM_SB26_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := structify(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := structify(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := structify(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := structify(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_SB26_CTRL_t) return FM_SB26_CTRL_t is
    variable y: FM_SB26_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB_MEM := convert(x(left to left+len(y.SB_MEM)-1), y.SB_MEM);
      left := left + len(y.SB_MEM);
      y.SB_META := convert(x(left to left+len(y.SB_META)-1), y.SB_META);
    else
      y.SB_MEM := convert(x(left downto left-len(y.SB_MEM)+1), y.SB_MEM);
      left := left - len(y.SB_MEM);
      y.SB_META := convert(x(left downto left-len(y.SB_META)+1), y.SB_META);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_SB26_CTRL_t) return FM_SB26_CTRL_t is
  variable y: FM_SB26_CTRL_t;
  begin
    y.SB_MEM := nullify(t.SB_MEM);
    y.SB_META := nullify(t.SB_META);
    return y;
  end function nullify;
  function zeroed(t: FM_SB26_CTRL_t) return FM_SB26_CTRL_t is
  variable y: FM_SB26_CTRL_t;
  begin
    y.SB_MEM := zeroed(t.SB_MEM);
    y.SB_META := zeroed(t.SB_META);
    return y;
  end function zeroed;

  function len(x: FM_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SB0);
    l := l + len(x.SB1);
    l := l + len(x.SB2);
    l := l + len(x.SB3);
    l := l + len(x.SB4);
    l := l + len(x.SB5);
    l := l + len(x.SB6);
    l := l + len(x.SB7);
    l := l + len(x.SB8);
    l := l + len(x.SB9);
    l := l + len(x.SB10);
    l := l + len(x.SB11);
    l := l + len(x.SB12);
    l := l + len(x.SB13);
    l := l + len(x.SB14);
    l := l + len(x.SB15);
    l := l + len(x.SB16);
    l := l + len(x.SB17);
    l := l + len(x.SB18);
    l := l + len(x.SB19);
    l := l + len(x.SB20);
    l := l + len(x.SB21);
    l := l + len(x.SB22);
    l := l + len(x.SB23);
    l := l + len(x.SB24);
    l := l + len(x.SB25);
    l := l + len(x.SB26);
    return l;
  end function len;
  function width(x: FM_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SB0);
    l := l + width(x.SB1);
    l := l + width(x.SB2);
    l := l + width(x.SB3);
    l := l + width(x.SB4);
    l := l + width(x.SB5);
    l := l + width(x.SB6);
    l := l + width(x.SB7);
    l := l + width(x.SB8);
    l := l + width(x.SB9);
    l := l + width(x.SB10);
    l := l + width(x.SB11);
    l := l + width(x.SB12);
    l := l + width(x.SB13);
    l := l + width(x.SB14);
    l := l + width(x.SB15);
    l := l + width(x.SB16);
    l := l + width(x.SB17);
    l := l + width(x.SB18);
    l := l + width(x.SB19);
    l := l + width(x.SB20);
    l := l + width(x.SB21);
    l := l + width(x.SB22);
    l := l + width(x.SB23);
    l := l + width(x.SB24);
    l := l + width(x.SB25);
    l := l + width(x.SB26);
    return l;
  end function width;
  function vectorify(x: FM_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB0)-1), vectorify(x.SB0, y(left to left+len(x.SB0)-1)));
      left := left + len(x.SB0);
      assign(y(left to left+len(x.SB1)-1), vectorify(x.SB1, y(left to left+len(x.SB1)-1)));
      left := left + len(x.SB1);
      assign(y(left to left+len(x.SB2)-1), vectorify(x.SB2, y(left to left+len(x.SB2)-1)));
      left := left + len(x.SB2);
      assign(y(left to left+len(x.SB3)-1), vectorify(x.SB3, y(left to left+len(x.SB3)-1)));
      left := left + len(x.SB3);
      assign(y(left to left+len(x.SB4)-1), vectorify(x.SB4, y(left to left+len(x.SB4)-1)));
      left := left + len(x.SB4);
      assign(y(left to left+len(x.SB5)-1), vectorify(x.SB5, y(left to left+len(x.SB5)-1)));
      left := left + len(x.SB5);
      assign(y(left to left+len(x.SB6)-1), vectorify(x.SB6, y(left to left+len(x.SB6)-1)));
      left := left + len(x.SB6);
      assign(y(left to left+len(x.SB7)-1), vectorify(x.SB7, y(left to left+len(x.SB7)-1)));
      left := left + len(x.SB7);
      assign(y(left to left+len(x.SB8)-1), vectorify(x.SB8, y(left to left+len(x.SB8)-1)));
      left := left + len(x.SB8);
      assign(y(left to left+len(x.SB9)-1), vectorify(x.SB9, y(left to left+len(x.SB9)-1)));
      left := left + len(x.SB9);
      assign(y(left to left+len(x.SB10)-1), vectorify(x.SB10, y(left to left+len(x.SB10)-1)));
      left := left + len(x.SB10);
      assign(y(left to left+len(x.SB11)-1), vectorify(x.SB11, y(left to left+len(x.SB11)-1)));
      left := left + len(x.SB11);
      assign(y(left to left+len(x.SB12)-1), vectorify(x.SB12, y(left to left+len(x.SB12)-1)));
      left := left + len(x.SB12);
      assign(y(left to left+len(x.SB13)-1), vectorify(x.SB13, y(left to left+len(x.SB13)-1)));
      left := left + len(x.SB13);
      assign(y(left to left+len(x.SB14)-1), vectorify(x.SB14, y(left to left+len(x.SB14)-1)));
      left := left + len(x.SB14);
      assign(y(left to left+len(x.SB15)-1), vectorify(x.SB15, y(left to left+len(x.SB15)-1)));
      left := left + len(x.SB15);
      assign(y(left to left+len(x.SB16)-1), vectorify(x.SB16, y(left to left+len(x.SB16)-1)));
      left := left + len(x.SB16);
      assign(y(left to left+len(x.SB17)-1), vectorify(x.SB17, y(left to left+len(x.SB17)-1)));
      left := left + len(x.SB17);
      assign(y(left to left+len(x.SB18)-1), vectorify(x.SB18, y(left to left+len(x.SB18)-1)));
      left := left + len(x.SB18);
      assign(y(left to left+len(x.SB19)-1), vectorify(x.SB19, y(left to left+len(x.SB19)-1)));
      left := left + len(x.SB19);
      assign(y(left to left+len(x.SB20)-1), vectorify(x.SB20, y(left to left+len(x.SB20)-1)));
      left := left + len(x.SB20);
      assign(y(left to left+len(x.SB21)-1), vectorify(x.SB21, y(left to left+len(x.SB21)-1)));
      left := left + len(x.SB21);
      assign(y(left to left+len(x.SB22)-1), vectorify(x.SB22, y(left to left+len(x.SB22)-1)));
      left := left + len(x.SB22);
      assign(y(left to left+len(x.SB23)-1), vectorify(x.SB23, y(left to left+len(x.SB23)-1)));
      left := left + len(x.SB23);
      assign(y(left to left+len(x.SB24)-1), vectorify(x.SB24, y(left to left+len(x.SB24)-1)));
      left := left + len(x.SB24);
      assign(y(left to left+len(x.SB25)-1), vectorify(x.SB25, y(left to left+len(x.SB25)-1)));
      left := left + len(x.SB25);
      assign(y(left to left+len(x.SB26)-1), vectorify(x.SB26, y(left to left+len(x.SB26)-1)));
    else
      assign(y(left downto left-len(x.SB0)+1), vectorify(x.SB0, y(left downto left-len(x.SB0)+1)));
      left := left - len(x.SB0);
      assign(y(left downto left-len(x.SB1)+1), vectorify(x.SB1, y(left downto left-len(x.SB1)+1)));
      left := left - len(x.SB1);
      assign(y(left downto left-len(x.SB2)+1), vectorify(x.SB2, y(left downto left-len(x.SB2)+1)));
      left := left - len(x.SB2);
      assign(y(left downto left-len(x.SB3)+1), vectorify(x.SB3, y(left downto left-len(x.SB3)+1)));
      left := left - len(x.SB3);
      assign(y(left downto left-len(x.SB4)+1), vectorify(x.SB4, y(left downto left-len(x.SB4)+1)));
      left := left - len(x.SB4);
      assign(y(left downto left-len(x.SB5)+1), vectorify(x.SB5, y(left downto left-len(x.SB5)+1)));
      left := left - len(x.SB5);
      assign(y(left downto left-len(x.SB6)+1), vectorify(x.SB6, y(left downto left-len(x.SB6)+1)));
      left := left - len(x.SB6);
      assign(y(left downto left-len(x.SB7)+1), vectorify(x.SB7, y(left downto left-len(x.SB7)+1)));
      left := left - len(x.SB7);
      assign(y(left downto left-len(x.SB8)+1), vectorify(x.SB8, y(left downto left-len(x.SB8)+1)));
      left := left - len(x.SB8);
      assign(y(left downto left-len(x.SB9)+1), vectorify(x.SB9, y(left downto left-len(x.SB9)+1)));
      left := left - len(x.SB9);
      assign(y(left downto left-len(x.SB10)+1), vectorify(x.SB10, y(left downto left-len(x.SB10)+1)));
      left := left - len(x.SB10);
      assign(y(left downto left-len(x.SB11)+1), vectorify(x.SB11, y(left downto left-len(x.SB11)+1)));
      left := left - len(x.SB11);
      assign(y(left downto left-len(x.SB12)+1), vectorify(x.SB12, y(left downto left-len(x.SB12)+1)));
      left := left - len(x.SB12);
      assign(y(left downto left-len(x.SB13)+1), vectorify(x.SB13, y(left downto left-len(x.SB13)+1)));
      left := left - len(x.SB13);
      assign(y(left downto left-len(x.SB14)+1), vectorify(x.SB14, y(left downto left-len(x.SB14)+1)));
      left := left - len(x.SB14);
      assign(y(left downto left-len(x.SB15)+1), vectorify(x.SB15, y(left downto left-len(x.SB15)+1)));
      left := left - len(x.SB15);
      assign(y(left downto left-len(x.SB16)+1), vectorify(x.SB16, y(left downto left-len(x.SB16)+1)));
      left := left - len(x.SB16);
      assign(y(left downto left-len(x.SB17)+1), vectorify(x.SB17, y(left downto left-len(x.SB17)+1)));
      left := left - len(x.SB17);
      assign(y(left downto left-len(x.SB18)+1), vectorify(x.SB18, y(left downto left-len(x.SB18)+1)));
      left := left - len(x.SB18);
      assign(y(left downto left-len(x.SB19)+1), vectorify(x.SB19, y(left downto left-len(x.SB19)+1)));
      left := left - len(x.SB19);
      assign(y(left downto left-len(x.SB20)+1), vectorify(x.SB20, y(left downto left-len(x.SB20)+1)));
      left := left - len(x.SB20);
      assign(y(left downto left-len(x.SB21)+1), vectorify(x.SB21, y(left downto left-len(x.SB21)+1)));
      left := left - len(x.SB21);
      assign(y(left downto left-len(x.SB22)+1), vectorify(x.SB22, y(left downto left-len(x.SB22)+1)));
      left := left - len(x.SB22);
      assign(y(left downto left-len(x.SB23)+1), vectorify(x.SB23, y(left downto left-len(x.SB23)+1)));
      left := left - len(x.SB23);
      assign(y(left downto left-len(x.SB24)+1), vectorify(x.SB24, y(left downto left-len(x.SB24)+1)));
      left := left - len(x.SB24);
      assign(y(left downto left-len(x.SB25)+1), vectorify(x.SB25, y(left downto left-len(x.SB25)+1)));
      left := left - len(x.SB25);
      assign(y(left downto left-len(x.SB26)+1), vectorify(x.SB26, y(left downto left-len(x.SB26)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SB0)-1), convert(x.SB0, y(left to left+len(x.SB0)-1)));
      left := left + len(x.SB0);
      assign(y(left to left+len(x.SB1)-1), convert(x.SB1, y(left to left+len(x.SB1)-1)));
      left := left + len(x.SB1);
      assign(y(left to left+len(x.SB2)-1), convert(x.SB2, y(left to left+len(x.SB2)-1)));
      left := left + len(x.SB2);
      assign(y(left to left+len(x.SB3)-1), convert(x.SB3, y(left to left+len(x.SB3)-1)));
      left := left + len(x.SB3);
      assign(y(left to left+len(x.SB4)-1), convert(x.SB4, y(left to left+len(x.SB4)-1)));
      left := left + len(x.SB4);
      assign(y(left to left+len(x.SB5)-1), convert(x.SB5, y(left to left+len(x.SB5)-1)));
      left := left + len(x.SB5);
      assign(y(left to left+len(x.SB6)-1), convert(x.SB6, y(left to left+len(x.SB6)-1)));
      left := left + len(x.SB6);
      assign(y(left to left+len(x.SB7)-1), convert(x.SB7, y(left to left+len(x.SB7)-1)));
      left := left + len(x.SB7);
      assign(y(left to left+len(x.SB8)-1), convert(x.SB8, y(left to left+len(x.SB8)-1)));
      left := left + len(x.SB8);
      assign(y(left to left+len(x.SB9)-1), convert(x.SB9, y(left to left+len(x.SB9)-1)));
      left := left + len(x.SB9);
      assign(y(left to left+len(x.SB10)-1), convert(x.SB10, y(left to left+len(x.SB10)-1)));
      left := left + len(x.SB10);
      assign(y(left to left+len(x.SB11)-1), convert(x.SB11, y(left to left+len(x.SB11)-1)));
      left := left + len(x.SB11);
      assign(y(left to left+len(x.SB12)-1), convert(x.SB12, y(left to left+len(x.SB12)-1)));
      left := left + len(x.SB12);
      assign(y(left to left+len(x.SB13)-1), convert(x.SB13, y(left to left+len(x.SB13)-1)));
      left := left + len(x.SB13);
      assign(y(left to left+len(x.SB14)-1), convert(x.SB14, y(left to left+len(x.SB14)-1)));
      left := left + len(x.SB14);
      assign(y(left to left+len(x.SB15)-1), convert(x.SB15, y(left to left+len(x.SB15)-1)));
      left := left + len(x.SB15);
      assign(y(left to left+len(x.SB16)-1), convert(x.SB16, y(left to left+len(x.SB16)-1)));
      left := left + len(x.SB16);
      assign(y(left to left+len(x.SB17)-1), convert(x.SB17, y(left to left+len(x.SB17)-1)));
      left := left + len(x.SB17);
      assign(y(left to left+len(x.SB18)-1), convert(x.SB18, y(left to left+len(x.SB18)-1)));
      left := left + len(x.SB18);
      assign(y(left to left+len(x.SB19)-1), convert(x.SB19, y(left to left+len(x.SB19)-1)));
      left := left + len(x.SB19);
      assign(y(left to left+len(x.SB20)-1), convert(x.SB20, y(left to left+len(x.SB20)-1)));
      left := left + len(x.SB20);
      assign(y(left to left+len(x.SB21)-1), convert(x.SB21, y(left to left+len(x.SB21)-1)));
      left := left + len(x.SB21);
      assign(y(left to left+len(x.SB22)-1), convert(x.SB22, y(left to left+len(x.SB22)-1)));
      left := left + len(x.SB22);
      assign(y(left to left+len(x.SB23)-1), convert(x.SB23, y(left to left+len(x.SB23)-1)));
      left := left + len(x.SB23);
      assign(y(left to left+len(x.SB24)-1), convert(x.SB24, y(left to left+len(x.SB24)-1)));
      left := left + len(x.SB24);
      assign(y(left to left+len(x.SB25)-1), convert(x.SB25, y(left to left+len(x.SB25)-1)));
      left := left + len(x.SB25);
      assign(y(left to left+len(x.SB26)-1), convert(x.SB26, y(left to left+len(x.SB26)-1)));
    else
      assign(y(left downto left-len(x.SB0)+1), convert(x.SB0, y(left downto left-len(x.SB0)+1)));
      left := left - len(x.SB0);
      assign(y(left downto left-len(x.SB1)+1), convert(x.SB1, y(left downto left-len(x.SB1)+1)));
      left := left - len(x.SB1);
      assign(y(left downto left-len(x.SB2)+1), convert(x.SB2, y(left downto left-len(x.SB2)+1)));
      left := left - len(x.SB2);
      assign(y(left downto left-len(x.SB3)+1), convert(x.SB3, y(left downto left-len(x.SB3)+1)));
      left := left - len(x.SB3);
      assign(y(left downto left-len(x.SB4)+1), convert(x.SB4, y(left downto left-len(x.SB4)+1)));
      left := left - len(x.SB4);
      assign(y(left downto left-len(x.SB5)+1), convert(x.SB5, y(left downto left-len(x.SB5)+1)));
      left := left - len(x.SB5);
      assign(y(left downto left-len(x.SB6)+1), convert(x.SB6, y(left downto left-len(x.SB6)+1)));
      left := left - len(x.SB6);
      assign(y(left downto left-len(x.SB7)+1), convert(x.SB7, y(left downto left-len(x.SB7)+1)));
      left := left - len(x.SB7);
      assign(y(left downto left-len(x.SB8)+1), convert(x.SB8, y(left downto left-len(x.SB8)+1)));
      left := left - len(x.SB8);
      assign(y(left downto left-len(x.SB9)+1), convert(x.SB9, y(left downto left-len(x.SB9)+1)));
      left := left - len(x.SB9);
      assign(y(left downto left-len(x.SB10)+1), convert(x.SB10, y(left downto left-len(x.SB10)+1)));
      left := left - len(x.SB10);
      assign(y(left downto left-len(x.SB11)+1), convert(x.SB11, y(left downto left-len(x.SB11)+1)));
      left := left - len(x.SB11);
      assign(y(left downto left-len(x.SB12)+1), convert(x.SB12, y(left downto left-len(x.SB12)+1)));
      left := left - len(x.SB12);
      assign(y(left downto left-len(x.SB13)+1), convert(x.SB13, y(left downto left-len(x.SB13)+1)));
      left := left - len(x.SB13);
      assign(y(left downto left-len(x.SB14)+1), convert(x.SB14, y(left downto left-len(x.SB14)+1)));
      left := left - len(x.SB14);
      assign(y(left downto left-len(x.SB15)+1), convert(x.SB15, y(left downto left-len(x.SB15)+1)));
      left := left - len(x.SB15);
      assign(y(left downto left-len(x.SB16)+1), convert(x.SB16, y(left downto left-len(x.SB16)+1)));
      left := left - len(x.SB16);
      assign(y(left downto left-len(x.SB17)+1), convert(x.SB17, y(left downto left-len(x.SB17)+1)));
      left := left - len(x.SB17);
      assign(y(left downto left-len(x.SB18)+1), convert(x.SB18, y(left downto left-len(x.SB18)+1)));
      left := left - len(x.SB18);
      assign(y(left downto left-len(x.SB19)+1), convert(x.SB19, y(left downto left-len(x.SB19)+1)));
      left := left - len(x.SB19);
      assign(y(left downto left-len(x.SB20)+1), convert(x.SB20, y(left downto left-len(x.SB20)+1)));
      left := left - len(x.SB20);
      assign(y(left downto left-len(x.SB21)+1), convert(x.SB21, y(left downto left-len(x.SB21)+1)));
      left := left - len(x.SB21);
      assign(y(left downto left-len(x.SB22)+1), convert(x.SB22, y(left downto left-len(x.SB22)+1)));
      left := left - len(x.SB22);
      assign(y(left downto left-len(x.SB23)+1), convert(x.SB23, y(left downto left-len(x.SB23)+1)));
      left := left - len(x.SB23);
      assign(y(left downto left-len(x.SB24)+1), convert(x.SB24, y(left downto left-len(x.SB24)+1)));
      left := left - len(x.SB24);
      assign(y(left downto left-len(x.SB25)+1), convert(x.SB25, y(left downto left-len(x.SB25)+1)));
      left := left - len(x.SB25);
      assign(y(left downto left-len(x.SB26)+1), convert(x.SB26, y(left downto left-len(x.SB26)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_MON_t) return FM_MON_t is
    variable y: FM_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB0 := structify(x(left to left+len(y.SB0)-1), y.SB0);
      left := left + len(y.SB0);
      y.SB1 := structify(x(left to left+len(y.SB1)-1), y.SB1);
      left := left + len(y.SB1);
      y.SB2 := structify(x(left to left+len(y.SB2)-1), y.SB2);
      left := left + len(y.SB2);
      y.SB3 := structify(x(left to left+len(y.SB3)-1), y.SB3);
      left := left + len(y.SB3);
      y.SB4 := structify(x(left to left+len(y.SB4)-1), y.SB4);
      left := left + len(y.SB4);
      y.SB5 := structify(x(left to left+len(y.SB5)-1), y.SB5);
      left := left + len(y.SB5);
      y.SB6 := structify(x(left to left+len(y.SB6)-1), y.SB6);
      left := left + len(y.SB6);
      y.SB7 := structify(x(left to left+len(y.SB7)-1), y.SB7);
      left := left + len(y.SB7);
      y.SB8 := structify(x(left to left+len(y.SB8)-1), y.SB8);
      left := left + len(y.SB8);
      y.SB9 := structify(x(left to left+len(y.SB9)-1), y.SB9);
      left := left + len(y.SB9);
      y.SB10 := structify(x(left to left+len(y.SB10)-1), y.SB10);
      left := left + len(y.SB10);
      y.SB11 := structify(x(left to left+len(y.SB11)-1), y.SB11);
      left := left + len(y.SB11);
      y.SB12 := structify(x(left to left+len(y.SB12)-1), y.SB12);
      left := left + len(y.SB12);
      y.SB13 := structify(x(left to left+len(y.SB13)-1), y.SB13);
      left := left + len(y.SB13);
      y.SB14 := structify(x(left to left+len(y.SB14)-1), y.SB14);
      left := left + len(y.SB14);
      y.SB15 := structify(x(left to left+len(y.SB15)-1), y.SB15);
      left := left + len(y.SB15);
      y.SB16 := structify(x(left to left+len(y.SB16)-1), y.SB16);
      left := left + len(y.SB16);
      y.SB17 := structify(x(left to left+len(y.SB17)-1), y.SB17);
      left := left + len(y.SB17);
      y.SB18 := structify(x(left to left+len(y.SB18)-1), y.SB18);
      left := left + len(y.SB18);
      y.SB19 := structify(x(left to left+len(y.SB19)-1), y.SB19);
      left := left + len(y.SB19);
      y.SB20 := structify(x(left to left+len(y.SB20)-1), y.SB20);
      left := left + len(y.SB20);
      y.SB21 := structify(x(left to left+len(y.SB21)-1), y.SB21);
      left := left + len(y.SB21);
      y.SB22 := structify(x(left to left+len(y.SB22)-1), y.SB22);
      left := left + len(y.SB22);
      y.SB23 := structify(x(left to left+len(y.SB23)-1), y.SB23);
      left := left + len(y.SB23);
      y.SB24 := structify(x(left to left+len(y.SB24)-1), y.SB24);
      left := left + len(y.SB24);
      y.SB25 := structify(x(left to left+len(y.SB25)-1), y.SB25);
      left := left + len(y.SB25);
      y.SB26 := structify(x(left to left+len(y.SB26)-1), y.SB26);
    else
      y.SB0 := structify(x(left downto left-len(y.SB0)+1), y.SB0);
      left := left - len(y.SB0);
      y.SB1 := structify(x(left downto left-len(y.SB1)+1), y.SB1);
      left := left - len(y.SB1);
      y.SB2 := structify(x(left downto left-len(y.SB2)+1), y.SB2);
      left := left - len(y.SB2);
      y.SB3 := structify(x(left downto left-len(y.SB3)+1), y.SB3);
      left := left - len(y.SB3);
      y.SB4 := structify(x(left downto left-len(y.SB4)+1), y.SB4);
      left := left - len(y.SB4);
      y.SB5 := structify(x(left downto left-len(y.SB5)+1), y.SB5);
      left := left - len(y.SB5);
      y.SB6 := structify(x(left downto left-len(y.SB6)+1), y.SB6);
      left := left - len(y.SB6);
      y.SB7 := structify(x(left downto left-len(y.SB7)+1), y.SB7);
      left := left - len(y.SB7);
      y.SB8 := structify(x(left downto left-len(y.SB8)+1), y.SB8);
      left := left - len(y.SB8);
      y.SB9 := structify(x(left downto left-len(y.SB9)+1), y.SB9);
      left := left - len(y.SB9);
      y.SB10 := structify(x(left downto left-len(y.SB10)+1), y.SB10);
      left := left - len(y.SB10);
      y.SB11 := structify(x(left downto left-len(y.SB11)+1), y.SB11);
      left := left - len(y.SB11);
      y.SB12 := structify(x(left downto left-len(y.SB12)+1), y.SB12);
      left := left - len(y.SB12);
      y.SB13 := structify(x(left downto left-len(y.SB13)+1), y.SB13);
      left := left - len(y.SB13);
      y.SB14 := structify(x(left downto left-len(y.SB14)+1), y.SB14);
      left := left - len(y.SB14);
      y.SB15 := structify(x(left downto left-len(y.SB15)+1), y.SB15);
      left := left - len(y.SB15);
      y.SB16 := structify(x(left downto left-len(y.SB16)+1), y.SB16);
      left := left - len(y.SB16);
      y.SB17 := structify(x(left downto left-len(y.SB17)+1), y.SB17);
      left := left - len(y.SB17);
      y.SB18 := structify(x(left downto left-len(y.SB18)+1), y.SB18);
      left := left - len(y.SB18);
      y.SB19 := structify(x(left downto left-len(y.SB19)+1), y.SB19);
      left := left - len(y.SB19);
      y.SB20 := structify(x(left downto left-len(y.SB20)+1), y.SB20);
      left := left - len(y.SB20);
      y.SB21 := structify(x(left downto left-len(y.SB21)+1), y.SB21);
      left := left - len(y.SB21);
      y.SB22 := structify(x(left downto left-len(y.SB22)+1), y.SB22);
      left := left - len(y.SB22);
      y.SB23 := structify(x(left downto left-len(y.SB23)+1), y.SB23);
      left := left - len(y.SB23);
      y.SB24 := structify(x(left downto left-len(y.SB24)+1), y.SB24);
      left := left - len(y.SB24);
      y.SB25 := structify(x(left downto left-len(y.SB25)+1), y.SB25);
      left := left - len(y.SB25);
      y.SB26 := structify(x(left downto left-len(y.SB26)+1), y.SB26);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_MON_t) return FM_MON_t is
    variable y: FM_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SB0 := convert(x(left to left+len(y.SB0)-1), y.SB0);
      left := left + len(y.SB0);
      y.SB1 := convert(x(left to left+len(y.SB1)-1), y.SB1);
      left := left + len(y.SB1);
      y.SB2 := convert(x(left to left+len(y.SB2)-1), y.SB2);
      left := left + len(y.SB2);
      y.SB3 := convert(x(left to left+len(y.SB3)-1), y.SB3);
      left := left + len(y.SB3);
      y.SB4 := convert(x(left to left+len(y.SB4)-1), y.SB4);
      left := left + len(y.SB4);
      y.SB5 := convert(x(left to left+len(y.SB5)-1), y.SB5);
      left := left + len(y.SB5);
      y.SB6 := convert(x(left to left+len(y.SB6)-1), y.SB6);
      left := left + len(y.SB6);
      y.SB7 := convert(x(left to left+len(y.SB7)-1), y.SB7);
      left := left + len(y.SB7);
      y.SB8 := convert(x(left to left+len(y.SB8)-1), y.SB8);
      left := left + len(y.SB8);
      y.SB9 := convert(x(left to left+len(y.SB9)-1), y.SB9);
      left := left + len(y.SB9);
      y.SB10 := convert(x(left to left+len(y.SB10)-1), y.SB10);
      left := left + len(y.SB10);
      y.SB11 := convert(x(left to left+len(y.SB11)-1), y.SB11);
      left := left + len(y.SB11);
      y.SB12 := convert(x(left to left+len(y.SB12)-1), y.SB12);
      left := left + len(y.SB12);
      y.SB13 := convert(x(left to left+len(y.SB13)-1), y.SB13);
      left := left + len(y.SB13);
      y.SB14 := convert(x(left to left+len(y.SB14)-1), y.SB14);
      left := left + len(y.SB14);
      y.SB15 := convert(x(left to left+len(y.SB15)-1), y.SB15);
      left := left + len(y.SB15);
      y.SB16 := convert(x(left to left+len(y.SB16)-1), y.SB16);
      left := left + len(y.SB16);
      y.SB17 := convert(x(left to left+len(y.SB17)-1), y.SB17);
      left := left + len(y.SB17);
      y.SB18 := convert(x(left to left+len(y.SB18)-1), y.SB18);
      left := left + len(y.SB18);
      y.SB19 := convert(x(left to left+len(y.SB19)-1), y.SB19);
      left := left + len(y.SB19);
      y.SB20 := convert(x(left to left+len(y.SB20)-1), y.SB20);
      left := left + len(y.SB20);
      y.SB21 := convert(x(left to left+len(y.SB21)-1), y.SB21);
      left := left + len(y.SB21);
      y.SB22 := convert(x(left to left+len(y.SB22)-1), y.SB22);
      left := left + len(y.SB22);
      y.SB23 := convert(x(left to left+len(y.SB23)-1), y.SB23);
      left := left + len(y.SB23);
      y.SB24 := convert(x(left to left+len(y.SB24)-1), y.SB24);
      left := left + len(y.SB24);
      y.SB25 := convert(x(left to left+len(y.SB25)-1), y.SB25);
      left := left + len(y.SB25);
      y.SB26 := convert(x(left to left+len(y.SB26)-1), y.SB26);
    else
      y.SB0 := convert(x(left downto left-len(y.SB0)+1), y.SB0);
      left := left - len(y.SB0);
      y.SB1 := convert(x(left downto left-len(y.SB1)+1), y.SB1);
      left := left - len(y.SB1);
      y.SB2 := convert(x(left downto left-len(y.SB2)+1), y.SB2);
      left := left - len(y.SB2);
      y.SB3 := convert(x(left downto left-len(y.SB3)+1), y.SB3);
      left := left - len(y.SB3);
      y.SB4 := convert(x(left downto left-len(y.SB4)+1), y.SB4);
      left := left - len(y.SB4);
      y.SB5 := convert(x(left downto left-len(y.SB5)+1), y.SB5);
      left := left - len(y.SB5);
      y.SB6 := convert(x(left downto left-len(y.SB6)+1), y.SB6);
      left := left - len(y.SB6);
      y.SB7 := convert(x(left downto left-len(y.SB7)+1), y.SB7);
      left := left - len(y.SB7);
      y.SB8 := convert(x(left downto left-len(y.SB8)+1), y.SB8);
      left := left - len(y.SB8);
      y.SB9 := convert(x(left downto left-len(y.SB9)+1), y.SB9);
      left := left - len(y.SB9);
      y.SB10 := convert(x(left downto left-len(y.SB10)+1), y.SB10);
      left := left - len(y.SB10);
      y.SB11 := convert(x(left downto left-len(y.SB11)+1), y.SB11);
      left := left - len(y.SB11);
      y.SB12 := convert(x(left downto left-len(y.SB12)+1), y.SB12);
      left := left - len(y.SB12);
      y.SB13 := convert(x(left downto left-len(y.SB13)+1), y.SB13);
      left := left - len(y.SB13);
      y.SB14 := convert(x(left downto left-len(y.SB14)+1), y.SB14);
      left := left - len(y.SB14);
      y.SB15 := convert(x(left downto left-len(y.SB15)+1), y.SB15);
      left := left - len(y.SB15);
      y.SB16 := convert(x(left downto left-len(y.SB16)+1), y.SB16);
      left := left - len(y.SB16);
      y.SB17 := convert(x(left downto left-len(y.SB17)+1), y.SB17);
      left := left - len(y.SB17);
      y.SB18 := convert(x(left downto left-len(y.SB18)+1), y.SB18);
      left := left - len(y.SB18);
      y.SB19 := convert(x(left downto left-len(y.SB19)+1), y.SB19);
      left := left - len(y.SB19);
      y.SB20 := convert(x(left downto left-len(y.SB20)+1), y.SB20);
      left := left - len(y.SB20);
      y.SB21 := convert(x(left downto left-len(y.SB21)+1), y.SB21);
      left := left - len(y.SB21);
      y.SB22 := convert(x(left downto left-len(y.SB22)+1), y.SB22);
      left := left - len(y.SB22);
      y.SB23 := convert(x(left downto left-len(y.SB23)+1), y.SB23);
      left := left - len(y.SB23);
      y.SB24 := convert(x(left downto left-len(y.SB24)+1), y.SB24);
      left := left - len(y.SB24);
      y.SB25 := convert(x(left downto left-len(y.SB25)+1), y.SB25);
      left := left - len(y.SB25);
      y.SB26 := convert(x(left downto left-len(y.SB26)+1), y.SB26);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_MON_t) return FM_MON_t is
  variable y: FM_MON_t;
  begin
    y.SB0 := nullify(t.SB0);
    y.SB1 := nullify(t.SB1);
    y.SB2 := nullify(t.SB2);
    y.SB3 := nullify(t.SB3);
    y.SB4 := nullify(t.SB4);
    y.SB5 := nullify(t.SB5);
    y.SB6 := nullify(t.SB6);
    y.SB7 := nullify(t.SB7);
    y.SB8 := nullify(t.SB8);
    y.SB9 := nullify(t.SB9);
    y.SB10 := nullify(t.SB10);
    y.SB11 := nullify(t.SB11);
    y.SB12 := nullify(t.SB12);
    y.SB13 := nullify(t.SB13);
    y.SB14 := nullify(t.SB14);
    y.SB15 := nullify(t.SB15);
    y.SB16 := nullify(t.SB16);
    y.SB17 := nullify(t.SB17);
    y.SB18 := nullify(t.SB18);
    y.SB19 := nullify(t.SB19);
    y.SB20 := nullify(t.SB20);
    y.SB21 := nullify(t.SB21);
    y.SB22 := nullify(t.SB22);
    y.SB23 := nullify(t.SB23);
    y.SB24 := nullify(t.SB24);
    y.SB25 := nullify(t.SB25);
    y.SB26 := nullify(t.SB26);
    return y;
  end function nullify;
  function zeroed(t: FM_MON_t) return FM_MON_t is
  variable y: FM_MON_t;
  begin
    y.SB0 := zeroed(t.SB0);
    y.SB1 := zeroed(t.SB1);
    y.SB2 := zeroed(t.SB2);
    y.SB3 := zeroed(t.SB3);
    y.SB4 := zeroed(t.SB4);
    y.SB5 := zeroed(t.SB5);
    y.SB6 := zeroed(t.SB6);
    y.SB7 := zeroed(t.SB7);
    y.SB8 := zeroed(t.SB8);
    y.SB9 := zeroed(t.SB9);
    y.SB10 := zeroed(t.SB10);
    y.SB11 := zeroed(t.SB11);
    y.SB12 := zeroed(t.SB12);
    y.SB13 := zeroed(t.SB13);
    y.SB14 := zeroed(t.SB14);
    y.SB15 := zeroed(t.SB15);
    y.SB16 := zeroed(t.SB16);
    y.SB17 := zeroed(t.SB17);
    y.SB18 := zeroed(t.SB18);
    y.SB19 := zeroed(t.SB19);
    y.SB20 := zeroed(t.SB20);
    y.SB21 := zeroed(t.SB21);
    y.SB22 := zeroed(t.SB22);
    y.SB23 := zeroed(t.SB23);
    y.SB24 := zeroed(t.SB24);
    y.SB25 := zeroed(t.SB25);
    y.SB26 := zeroed(t.SB26);
    return y;
  end function zeroed;

  function len(x: FM_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SPY_CTRL);
    l := l + len(x.FREEZE_MASK_0);
    l := l + len(x.FREEZE_MASK_1);
    l := l + len(x.PLAYBACK_MASK_0);
    l := l + len(x.PLAYBACK_MASK_1);
    l := l + len(x.SB0);
    l := l + len(x.SB1);
    l := l + len(x.SB2);
    l := l + len(x.SB3);
    l := l + len(x.SB4);
    l := l + len(x.SB5);
    l := l + len(x.SB6);
    l := l + len(x.SB7);
    l := l + len(x.SB8);
    l := l + len(x.SB9);
    l := l + len(x.SB10);
    l := l + len(x.SB11);
    l := l + len(x.SB12);
    l := l + len(x.SB13);
    l := l + len(x.SB14);
    l := l + len(x.SB15);
    l := l + len(x.SB16);
    l := l + len(x.SB17);
    l := l + len(x.SB18);
    l := l + len(x.SB19);
    l := l + len(x.SB20);
    l := l + len(x.SB21);
    l := l + len(x.SB22);
    l := l + len(x.SB23);
    l := l + len(x.SB24);
    l := l + len(x.SB25);
    l := l + len(x.SB26);
    return l;
  end function len;
  function width(x: FM_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SPY_CTRL);
    l := l + width(x.FREEZE_MASK_0);
    l := l + width(x.FREEZE_MASK_1);
    l := l + width(x.PLAYBACK_MASK_0);
    l := l + width(x.PLAYBACK_MASK_1);
    l := l + width(x.SB0);
    l := l + width(x.SB1);
    l := l + width(x.SB2);
    l := l + width(x.SB3);
    l := l + width(x.SB4);
    l := l + width(x.SB5);
    l := l + width(x.SB6);
    l := l + width(x.SB7);
    l := l + width(x.SB8);
    l := l + width(x.SB9);
    l := l + width(x.SB10);
    l := l + width(x.SB11);
    l := l + width(x.SB12);
    l := l + width(x.SB13);
    l := l + width(x.SB14);
    l := l + width(x.SB15);
    l := l + width(x.SB16);
    l := l + width(x.SB17);
    l := l + width(x.SB18);
    l := l + width(x.SB19);
    l := l + width(x.SB20);
    l := l + width(x.SB21);
    l := l + width(x.SB22);
    l := l + width(x.SB23);
    l := l + width(x.SB24);
    l := l + width(x.SB25);
    l := l + width(x.SB26);
    return l;
  end function width;
  function vectorify(x: FM_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SPY_CTRL)-1), vectorify(x.SPY_CTRL, y(left to left+len(x.SPY_CTRL)-1)));
      left := left + len(x.SPY_CTRL);
      assign(y(left to left+len(x.FREEZE_MASK_0)-1), vectorify(x.FREEZE_MASK_0, y(left to left+len(x.FREEZE_MASK_0)-1)));
      left := left + len(x.FREEZE_MASK_0);
      assign(y(left to left+len(x.FREEZE_MASK_1)-1), vectorify(x.FREEZE_MASK_1, y(left to left+len(x.FREEZE_MASK_1)-1)));
      left := left + len(x.FREEZE_MASK_1);
      assign(y(left to left+len(x.PLAYBACK_MASK_0)-1), vectorify(x.PLAYBACK_MASK_0, y(left to left+len(x.PLAYBACK_MASK_0)-1)));
      left := left + len(x.PLAYBACK_MASK_0);
      assign(y(left to left+len(x.PLAYBACK_MASK_1)-1), vectorify(x.PLAYBACK_MASK_1, y(left to left+len(x.PLAYBACK_MASK_1)-1)));
      left := left + len(x.PLAYBACK_MASK_1);
      assign(y(left to left+len(x.SB0)-1), vectorify(x.SB0, y(left to left+len(x.SB0)-1)));
      left := left + len(x.SB0);
      assign(y(left to left+len(x.SB1)-1), vectorify(x.SB1, y(left to left+len(x.SB1)-1)));
      left := left + len(x.SB1);
      assign(y(left to left+len(x.SB2)-1), vectorify(x.SB2, y(left to left+len(x.SB2)-1)));
      left := left + len(x.SB2);
      assign(y(left to left+len(x.SB3)-1), vectorify(x.SB3, y(left to left+len(x.SB3)-1)));
      left := left + len(x.SB3);
      assign(y(left to left+len(x.SB4)-1), vectorify(x.SB4, y(left to left+len(x.SB4)-1)));
      left := left + len(x.SB4);
      assign(y(left to left+len(x.SB5)-1), vectorify(x.SB5, y(left to left+len(x.SB5)-1)));
      left := left + len(x.SB5);
      assign(y(left to left+len(x.SB6)-1), vectorify(x.SB6, y(left to left+len(x.SB6)-1)));
      left := left + len(x.SB6);
      assign(y(left to left+len(x.SB7)-1), vectorify(x.SB7, y(left to left+len(x.SB7)-1)));
      left := left + len(x.SB7);
      assign(y(left to left+len(x.SB8)-1), vectorify(x.SB8, y(left to left+len(x.SB8)-1)));
      left := left + len(x.SB8);
      assign(y(left to left+len(x.SB9)-1), vectorify(x.SB9, y(left to left+len(x.SB9)-1)));
      left := left + len(x.SB9);
      assign(y(left to left+len(x.SB10)-1), vectorify(x.SB10, y(left to left+len(x.SB10)-1)));
      left := left + len(x.SB10);
      assign(y(left to left+len(x.SB11)-1), vectorify(x.SB11, y(left to left+len(x.SB11)-1)));
      left := left + len(x.SB11);
      assign(y(left to left+len(x.SB12)-1), vectorify(x.SB12, y(left to left+len(x.SB12)-1)));
      left := left + len(x.SB12);
      assign(y(left to left+len(x.SB13)-1), vectorify(x.SB13, y(left to left+len(x.SB13)-1)));
      left := left + len(x.SB13);
      assign(y(left to left+len(x.SB14)-1), vectorify(x.SB14, y(left to left+len(x.SB14)-1)));
      left := left + len(x.SB14);
      assign(y(left to left+len(x.SB15)-1), vectorify(x.SB15, y(left to left+len(x.SB15)-1)));
      left := left + len(x.SB15);
      assign(y(left to left+len(x.SB16)-1), vectorify(x.SB16, y(left to left+len(x.SB16)-1)));
      left := left + len(x.SB16);
      assign(y(left to left+len(x.SB17)-1), vectorify(x.SB17, y(left to left+len(x.SB17)-1)));
      left := left + len(x.SB17);
      assign(y(left to left+len(x.SB18)-1), vectorify(x.SB18, y(left to left+len(x.SB18)-1)));
      left := left + len(x.SB18);
      assign(y(left to left+len(x.SB19)-1), vectorify(x.SB19, y(left to left+len(x.SB19)-1)));
      left := left + len(x.SB19);
      assign(y(left to left+len(x.SB20)-1), vectorify(x.SB20, y(left to left+len(x.SB20)-1)));
      left := left + len(x.SB20);
      assign(y(left to left+len(x.SB21)-1), vectorify(x.SB21, y(left to left+len(x.SB21)-1)));
      left := left + len(x.SB21);
      assign(y(left to left+len(x.SB22)-1), vectorify(x.SB22, y(left to left+len(x.SB22)-1)));
      left := left + len(x.SB22);
      assign(y(left to left+len(x.SB23)-1), vectorify(x.SB23, y(left to left+len(x.SB23)-1)));
      left := left + len(x.SB23);
      assign(y(left to left+len(x.SB24)-1), vectorify(x.SB24, y(left to left+len(x.SB24)-1)));
      left := left + len(x.SB24);
      assign(y(left to left+len(x.SB25)-1), vectorify(x.SB25, y(left to left+len(x.SB25)-1)));
      left := left + len(x.SB25);
      assign(y(left to left+len(x.SB26)-1), vectorify(x.SB26, y(left to left+len(x.SB26)-1)));
    else
      assign(y(left downto left-len(x.SPY_CTRL)+1), vectorify(x.SPY_CTRL, y(left downto left-len(x.SPY_CTRL)+1)));
      left := left - len(x.SPY_CTRL);
      assign(y(left downto left-len(x.FREEZE_MASK_0)+1), vectorify(x.FREEZE_MASK_0, y(left downto left-len(x.FREEZE_MASK_0)+1)));
      left := left - len(x.FREEZE_MASK_0);
      assign(y(left downto left-len(x.FREEZE_MASK_1)+1), vectorify(x.FREEZE_MASK_1, y(left downto left-len(x.FREEZE_MASK_1)+1)));
      left := left - len(x.FREEZE_MASK_1);
      assign(y(left downto left-len(x.PLAYBACK_MASK_0)+1), vectorify(x.PLAYBACK_MASK_0, y(left downto left-len(x.PLAYBACK_MASK_0)+1)));
      left := left - len(x.PLAYBACK_MASK_0);
      assign(y(left downto left-len(x.PLAYBACK_MASK_1)+1), vectorify(x.PLAYBACK_MASK_1, y(left downto left-len(x.PLAYBACK_MASK_1)+1)));
      left := left - len(x.PLAYBACK_MASK_1);
      assign(y(left downto left-len(x.SB0)+1), vectorify(x.SB0, y(left downto left-len(x.SB0)+1)));
      left := left - len(x.SB0);
      assign(y(left downto left-len(x.SB1)+1), vectorify(x.SB1, y(left downto left-len(x.SB1)+1)));
      left := left - len(x.SB1);
      assign(y(left downto left-len(x.SB2)+1), vectorify(x.SB2, y(left downto left-len(x.SB2)+1)));
      left := left - len(x.SB2);
      assign(y(left downto left-len(x.SB3)+1), vectorify(x.SB3, y(left downto left-len(x.SB3)+1)));
      left := left - len(x.SB3);
      assign(y(left downto left-len(x.SB4)+1), vectorify(x.SB4, y(left downto left-len(x.SB4)+1)));
      left := left - len(x.SB4);
      assign(y(left downto left-len(x.SB5)+1), vectorify(x.SB5, y(left downto left-len(x.SB5)+1)));
      left := left - len(x.SB5);
      assign(y(left downto left-len(x.SB6)+1), vectorify(x.SB6, y(left downto left-len(x.SB6)+1)));
      left := left - len(x.SB6);
      assign(y(left downto left-len(x.SB7)+1), vectorify(x.SB7, y(left downto left-len(x.SB7)+1)));
      left := left - len(x.SB7);
      assign(y(left downto left-len(x.SB8)+1), vectorify(x.SB8, y(left downto left-len(x.SB8)+1)));
      left := left - len(x.SB8);
      assign(y(left downto left-len(x.SB9)+1), vectorify(x.SB9, y(left downto left-len(x.SB9)+1)));
      left := left - len(x.SB9);
      assign(y(left downto left-len(x.SB10)+1), vectorify(x.SB10, y(left downto left-len(x.SB10)+1)));
      left := left - len(x.SB10);
      assign(y(left downto left-len(x.SB11)+1), vectorify(x.SB11, y(left downto left-len(x.SB11)+1)));
      left := left - len(x.SB11);
      assign(y(left downto left-len(x.SB12)+1), vectorify(x.SB12, y(left downto left-len(x.SB12)+1)));
      left := left - len(x.SB12);
      assign(y(left downto left-len(x.SB13)+1), vectorify(x.SB13, y(left downto left-len(x.SB13)+1)));
      left := left - len(x.SB13);
      assign(y(left downto left-len(x.SB14)+1), vectorify(x.SB14, y(left downto left-len(x.SB14)+1)));
      left := left - len(x.SB14);
      assign(y(left downto left-len(x.SB15)+1), vectorify(x.SB15, y(left downto left-len(x.SB15)+1)));
      left := left - len(x.SB15);
      assign(y(left downto left-len(x.SB16)+1), vectorify(x.SB16, y(left downto left-len(x.SB16)+1)));
      left := left - len(x.SB16);
      assign(y(left downto left-len(x.SB17)+1), vectorify(x.SB17, y(left downto left-len(x.SB17)+1)));
      left := left - len(x.SB17);
      assign(y(left downto left-len(x.SB18)+1), vectorify(x.SB18, y(left downto left-len(x.SB18)+1)));
      left := left - len(x.SB18);
      assign(y(left downto left-len(x.SB19)+1), vectorify(x.SB19, y(left downto left-len(x.SB19)+1)));
      left := left - len(x.SB19);
      assign(y(left downto left-len(x.SB20)+1), vectorify(x.SB20, y(left downto left-len(x.SB20)+1)));
      left := left - len(x.SB20);
      assign(y(left downto left-len(x.SB21)+1), vectorify(x.SB21, y(left downto left-len(x.SB21)+1)));
      left := left - len(x.SB21);
      assign(y(left downto left-len(x.SB22)+1), vectorify(x.SB22, y(left downto left-len(x.SB22)+1)));
      left := left - len(x.SB22);
      assign(y(left downto left-len(x.SB23)+1), vectorify(x.SB23, y(left downto left-len(x.SB23)+1)));
      left := left - len(x.SB23);
      assign(y(left downto left-len(x.SB24)+1), vectorify(x.SB24, y(left downto left-len(x.SB24)+1)));
      left := left - len(x.SB24);
      assign(y(left downto left-len(x.SB25)+1), vectorify(x.SB25, y(left downto left-len(x.SB25)+1)));
      left := left - len(x.SB25);
      assign(y(left downto left-len(x.SB26)+1), vectorify(x.SB26, y(left downto left-len(x.SB26)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: FM_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SPY_CTRL)-1), convert(x.SPY_CTRL, y(left to left+len(x.SPY_CTRL)-1)));
      left := left + len(x.SPY_CTRL);
      assign(y(left to left+len(x.FREEZE_MASK_0)-1), convert(x.FREEZE_MASK_0, y(left to left+len(x.FREEZE_MASK_0)-1)));
      left := left + len(x.FREEZE_MASK_0);
      assign(y(left to left+len(x.FREEZE_MASK_1)-1), convert(x.FREEZE_MASK_1, y(left to left+len(x.FREEZE_MASK_1)-1)));
      left := left + len(x.FREEZE_MASK_1);
      assign(y(left to left+len(x.PLAYBACK_MASK_0)-1), convert(x.PLAYBACK_MASK_0, y(left to left+len(x.PLAYBACK_MASK_0)-1)));
      left := left + len(x.PLAYBACK_MASK_0);
      assign(y(left to left+len(x.PLAYBACK_MASK_1)-1), convert(x.PLAYBACK_MASK_1, y(left to left+len(x.PLAYBACK_MASK_1)-1)));
      left := left + len(x.PLAYBACK_MASK_1);
      assign(y(left to left+len(x.SB0)-1), convert(x.SB0, y(left to left+len(x.SB0)-1)));
      left := left + len(x.SB0);
      assign(y(left to left+len(x.SB1)-1), convert(x.SB1, y(left to left+len(x.SB1)-1)));
      left := left + len(x.SB1);
      assign(y(left to left+len(x.SB2)-1), convert(x.SB2, y(left to left+len(x.SB2)-1)));
      left := left + len(x.SB2);
      assign(y(left to left+len(x.SB3)-1), convert(x.SB3, y(left to left+len(x.SB3)-1)));
      left := left + len(x.SB3);
      assign(y(left to left+len(x.SB4)-1), convert(x.SB4, y(left to left+len(x.SB4)-1)));
      left := left + len(x.SB4);
      assign(y(left to left+len(x.SB5)-1), convert(x.SB5, y(left to left+len(x.SB5)-1)));
      left := left + len(x.SB5);
      assign(y(left to left+len(x.SB6)-1), convert(x.SB6, y(left to left+len(x.SB6)-1)));
      left := left + len(x.SB6);
      assign(y(left to left+len(x.SB7)-1), convert(x.SB7, y(left to left+len(x.SB7)-1)));
      left := left + len(x.SB7);
      assign(y(left to left+len(x.SB8)-1), convert(x.SB8, y(left to left+len(x.SB8)-1)));
      left := left + len(x.SB8);
      assign(y(left to left+len(x.SB9)-1), convert(x.SB9, y(left to left+len(x.SB9)-1)));
      left := left + len(x.SB9);
      assign(y(left to left+len(x.SB10)-1), convert(x.SB10, y(left to left+len(x.SB10)-1)));
      left := left + len(x.SB10);
      assign(y(left to left+len(x.SB11)-1), convert(x.SB11, y(left to left+len(x.SB11)-1)));
      left := left + len(x.SB11);
      assign(y(left to left+len(x.SB12)-1), convert(x.SB12, y(left to left+len(x.SB12)-1)));
      left := left + len(x.SB12);
      assign(y(left to left+len(x.SB13)-1), convert(x.SB13, y(left to left+len(x.SB13)-1)));
      left := left + len(x.SB13);
      assign(y(left to left+len(x.SB14)-1), convert(x.SB14, y(left to left+len(x.SB14)-1)));
      left := left + len(x.SB14);
      assign(y(left to left+len(x.SB15)-1), convert(x.SB15, y(left to left+len(x.SB15)-1)));
      left := left + len(x.SB15);
      assign(y(left to left+len(x.SB16)-1), convert(x.SB16, y(left to left+len(x.SB16)-1)));
      left := left + len(x.SB16);
      assign(y(left to left+len(x.SB17)-1), convert(x.SB17, y(left to left+len(x.SB17)-1)));
      left := left + len(x.SB17);
      assign(y(left to left+len(x.SB18)-1), convert(x.SB18, y(left to left+len(x.SB18)-1)));
      left := left + len(x.SB18);
      assign(y(left to left+len(x.SB19)-1), convert(x.SB19, y(left to left+len(x.SB19)-1)));
      left := left + len(x.SB19);
      assign(y(left to left+len(x.SB20)-1), convert(x.SB20, y(left to left+len(x.SB20)-1)));
      left := left + len(x.SB20);
      assign(y(left to left+len(x.SB21)-1), convert(x.SB21, y(left to left+len(x.SB21)-1)));
      left := left + len(x.SB21);
      assign(y(left to left+len(x.SB22)-1), convert(x.SB22, y(left to left+len(x.SB22)-1)));
      left := left + len(x.SB22);
      assign(y(left to left+len(x.SB23)-1), convert(x.SB23, y(left to left+len(x.SB23)-1)));
      left := left + len(x.SB23);
      assign(y(left to left+len(x.SB24)-1), convert(x.SB24, y(left to left+len(x.SB24)-1)));
      left := left + len(x.SB24);
      assign(y(left to left+len(x.SB25)-1), convert(x.SB25, y(left to left+len(x.SB25)-1)));
      left := left + len(x.SB25);
      assign(y(left to left+len(x.SB26)-1), convert(x.SB26, y(left to left+len(x.SB26)-1)));
    else
      assign(y(left downto left-len(x.SPY_CTRL)+1), convert(x.SPY_CTRL, y(left downto left-len(x.SPY_CTRL)+1)));
      left := left - len(x.SPY_CTRL);
      assign(y(left downto left-len(x.FREEZE_MASK_0)+1), convert(x.FREEZE_MASK_0, y(left downto left-len(x.FREEZE_MASK_0)+1)));
      left := left - len(x.FREEZE_MASK_0);
      assign(y(left downto left-len(x.FREEZE_MASK_1)+1), convert(x.FREEZE_MASK_1, y(left downto left-len(x.FREEZE_MASK_1)+1)));
      left := left - len(x.FREEZE_MASK_1);
      assign(y(left downto left-len(x.PLAYBACK_MASK_0)+1), convert(x.PLAYBACK_MASK_0, y(left downto left-len(x.PLAYBACK_MASK_0)+1)));
      left := left - len(x.PLAYBACK_MASK_0);
      assign(y(left downto left-len(x.PLAYBACK_MASK_1)+1), convert(x.PLAYBACK_MASK_1, y(left downto left-len(x.PLAYBACK_MASK_1)+1)));
      left := left - len(x.PLAYBACK_MASK_1);
      assign(y(left downto left-len(x.SB0)+1), convert(x.SB0, y(left downto left-len(x.SB0)+1)));
      left := left - len(x.SB0);
      assign(y(left downto left-len(x.SB1)+1), convert(x.SB1, y(left downto left-len(x.SB1)+1)));
      left := left - len(x.SB1);
      assign(y(left downto left-len(x.SB2)+1), convert(x.SB2, y(left downto left-len(x.SB2)+1)));
      left := left - len(x.SB2);
      assign(y(left downto left-len(x.SB3)+1), convert(x.SB3, y(left downto left-len(x.SB3)+1)));
      left := left - len(x.SB3);
      assign(y(left downto left-len(x.SB4)+1), convert(x.SB4, y(left downto left-len(x.SB4)+1)));
      left := left - len(x.SB4);
      assign(y(left downto left-len(x.SB5)+1), convert(x.SB5, y(left downto left-len(x.SB5)+1)));
      left := left - len(x.SB5);
      assign(y(left downto left-len(x.SB6)+1), convert(x.SB6, y(left downto left-len(x.SB6)+1)));
      left := left - len(x.SB6);
      assign(y(left downto left-len(x.SB7)+1), convert(x.SB7, y(left downto left-len(x.SB7)+1)));
      left := left - len(x.SB7);
      assign(y(left downto left-len(x.SB8)+1), convert(x.SB8, y(left downto left-len(x.SB8)+1)));
      left := left - len(x.SB8);
      assign(y(left downto left-len(x.SB9)+1), convert(x.SB9, y(left downto left-len(x.SB9)+1)));
      left := left - len(x.SB9);
      assign(y(left downto left-len(x.SB10)+1), convert(x.SB10, y(left downto left-len(x.SB10)+1)));
      left := left - len(x.SB10);
      assign(y(left downto left-len(x.SB11)+1), convert(x.SB11, y(left downto left-len(x.SB11)+1)));
      left := left - len(x.SB11);
      assign(y(left downto left-len(x.SB12)+1), convert(x.SB12, y(left downto left-len(x.SB12)+1)));
      left := left - len(x.SB12);
      assign(y(left downto left-len(x.SB13)+1), convert(x.SB13, y(left downto left-len(x.SB13)+1)));
      left := left - len(x.SB13);
      assign(y(left downto left-len(x.SB14)+1), convert(x.SB14, y(left downto left-len(x.SB14)+1)));
      left := left - len(x.SB14);
      assign(y(left downto left-len(x.SB15)+1), convert(x.SB15, y(left downto left-len(x.SB15)+1)));
      left := left - len(x.SB15);
      assign(y(left downto left-len(x.SB16)+1), convert(x.SB16, y(left downto left-len(x.SB16)+1)));
      left := left - len(x.SB16);
      assign(y(left downto left-len(x.SB17)+1), convert(x.SB17, y(left downto left-len(x.SB17)+1)));
      left := left - len(x.SB17);
      assign(y(left downto left-len(x.SB18)+1), convert(x.SB18, y(left downto left-len(x.SB18)+1)));
      left := left - len(x.SB18);
      assign(y(left downto left-len(x.SB19)+1), convert(x.SB19, y(left downto left-len(x.SB19)+1)));
      left := left - len(x.SB19);
      assign(y(left downto left-len(x.SB20)+1), convert(x.SB20, y(left downto left-len(x.SB20)+1)));
      left := left - len(x.SB20);
      assign(y(left downto left-len(x.SB21)+1), convert(x.SB21, y(left downto left-len(x.SB21)+1)));
      left := left - len(x.SB21);
      assign(y(left downto left-len(x.SB22)+1), convert(x.SB22, y(left downto left-len(x.SB22)+1)));
      left := left - len(x.SB22);
      assign(y(left downto left-len(x.SB23)+1), convert(x.SB23, y(left downto left-len(x.SB23)+1)));
      left := left - len(x.SB23);
      assign(y(left downto left-len(x.SB24)+1), convert(x.SB24, y(left downto left-len(x.SB24)+1)));
      left := left - len(x.SB24);
      assign(y(left downto left-len(x.SB25)+1), convert(x.SB25, y(left downto left-len(x.SB25)+1)));
      left := left - len(x.SB25);
      assign(y(left downto left-len(x.SB26)+1), convert(x.SB26, y(left downto left-len(x.SB26)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: FM_CTRL_t) return FM_CTRL_t is
    variable y: FM_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SPY_CTRL := structify(x(left to left+len(y.SPY_CTRL)-1), y.SPY_CTRL);
      left := left + len(y.SPY_CTRL);
      y.FREEZE_MASK_0 := structify(x(left to left+len(y.FREEZE_MASK_0)-1), y.FREEZE_MASK_0);
      left := left + len(y.FREEZE_MASK_0);
      y.FREEZE_MASK_1 := structify(x(left to left+len(y.FREEZE_MASK_1)-1), y.FREEZE_MASK_1);
      left := left + len(y.FREEZE_MASK_1);
      y.PLAYBACK_MASK_0 := structify(x(left to left+len(y.PLAYBACK_MASK_0)-1), y.PLAYBACK_MASK_0);
      left := left + len(y.PLAYBACK_MASK_0);
      y.PLAYBACK_MASK_1 := structify(x(left to left+len(y.PLAYBACK_MASK_1)-1), y.PLAYBACK_MASK_1);
      left := left + len(y.PLAYBACK_MASK_1);
      y.SB0 := structify(x(left to left+len(y.SB0)-1), y.SB0);
      left := left + len(y.SB0);
      y.SB1 := structify(x(left to left+len(y.SB1)-1), y.SB1);
      left := left + len(y.SB1);
      y.SB2 := structify(x(left to left+len(y.SB2)-1), y.SB2);
      left := left + len(y.SB2);
      y.SB3 := structify(x(left to left+len(y.SB3)-1), y.SB3);
      left := left + len(y.SB3);
      y.SB4 := structify(x(left to left+len(y.SB4)-1), y.SB4);
      left := left + len(y.SB4);
      y.SB5 := structify(x(left to left+len(y.SB5)-1), y.SB5);
      left := left + len(y.SB5);
      y.SB6 := structify(x(left to left+len(y.SB6)-1), y.SB6);
      left := left + len(y.SB6);
      y.SB7 := structify(x(left to left+len(y.SB7)-1), y.SB7);
      left := left + len(y.SB7);
      y.SB8 := structify(x(left to left+len(y.SB8)-1), y.SB8);
      left := left + len(y.SB8);
      y.SB9 := structify(x(left to left+len(y.SB9)-1), y.SB9);
      left := left + len(y.SB9);
      y.SB10 := structify(x(left to left+len(y.SB10)-1), y.SB10);
      left := left + len(y.SB10);
      y.SB11 := structify(x(left to left+len(y.SB11)-1), y.SB11);
      left := left + len(y.SB11);
      y.SB12 := structify(x(left to left+len(y.SB12)-1), y.SB12);
      left := left + len(y.SB12);
      y.SB13 := structify(x(left to left+len(y.SB13)-1), y.SB13);
      left := left + len(y.SB13);
      y.SB14 := structify(x(left to left+len(y.SB14)-1), y.SB14);
      left := left + len(y.SB14);
      y.SB15 := structify(x(left to left+len(y.SB15)-1), y.SB15);
      left := left + len(y.SB15);
      y.SB16 := structify(x(left to left+len(y.SB16)-1), y.SB16);
      left := left + len(y.SB16);
      y.SB17 := structify(x(left to left+len(y.SB17)-1), y.SB17);
      left := left + len(y.SB17);
      y.SB18 := structify(x(left to left+len(y.SB18)-1), y.SB18);
      left := left + len(y.SB18);
      y.SB19 := structify(x(left to left+len(y.SB19)-1), y.SB19);
      left := left + len(y.SB19);
      y.SB20 := structify(x(left to left+len(y.SB20)-1), y.SB20);
      left := left + len(y.SB20);
      y.SB21 := structify(x(left to left+len(y.SB21)-1), y.SB21);
      left := left + len(y.SB21);
      y.SB22 := structify(x(left to left+len(y.SB22)-1), y.SB22);
      left := left + len(y.SB22);
      y.SB23 := structify(x(left to left+len(y.SB23)-1), y.SB23);
      left := left + len(y.SB23);
      y.SB24 := structify(x(left to left+len(y.SB24)-1), y.SB24);
      left := left + len(y.SB24);
      y.SB25 := structify(x(left to left+len(y.SB25)-1), y.SB25);
      left := left + len(y.SB25);
      y.SB26 := structify(x(left to left+len(y.SB26)-1), y.SB26);
    else
      y.SPY_CTRL := structify(x(left downto left-len(y.SPY_CTRL)+1), y.SPY_CTRL);
      left := left - len(y.SPY_CTRL);
      y.FREEZE_MASK_0 := structify(x(left downto left-len(y.FREEZE_MASK_0)+1), y.FREEZE_MASK_0);
      left := left - len(y.FREEZE_MASK_0);
      y.FREEZE_MASK_1 := structify(x(left downto left-len(y.FREEZE_MASK_1)+1), y.FREEZE_MASK_1);
      left := left - len(y.FREEZE_MASK_1);
      y.PLAYBACK_MASK_0 := structify(x(left downto left-len(y.PLAYBACK_MASK_0)+1), y.PLAYBACK_MASK_0);
      left := left - len(y.PLAYBACK_MASK_0);
      y.PLAYBACK_MASK_1 := structify(x(left downto left-len(y.PLAYBACK_MASK_1)+1), y.PLAYBACK_MASK_1);
      left := left - len(y.PLAYBACK_MASK_1);
      y.SB0 := structify(x(left downto left-len(y.SB0)+1), y.SB0);
      left := left - len(y.SB0);
      y.SB1 := structify(x(left downto left-len(y.SB1)+1), y.SB1);
      left := left - len(y.SB1);
      y.SB2 := structify(x(left downto left-len(y.SB2)+1), y.SB2);
      left := left - len(y.SB2);
      y.SB3 := structify(x(left downto left-len(y.SB3)+1), y.SB3);
      left := left - len(y.SB3);
      y.SB4 := structify(x(left downto left-len(y.SB4)+1), y.SB4);
      left := left - len(y.SB4);
      y.SB5 := structify(x(left downto left-len(y.SB5)+1), y.SB5);
      left := left - len(y.SB5);
      y.SB6 := structify(x(left downto left-len(y.SB6)+1), y.SB6);
      left := left - len(y.SB6);
      y.SB7 := structify(x(left downto left-len(y.SB7)+1), y.SB7);
      left := left - len(y.SB7);
      y.SB8 := structify(x(left downto left-len(y.SB8)+1), y.SB8);
      left := left - len(y.SB8);
      y.SB9 := structify(x(left downto left-len(y.SB9)+1), y.SB9);
      left := left - len(y.SB9);
      y.SB10 := structify(x(left downto left-len(y.SB10)+1), y.SB10);
      left := left - len(y.SB10);
      y.SB11 := structify(x(left downto left-len(y.SB11)+1), y.SB11);
      left := left - len(y.SB11);
      y.SB12 := structify(x(left downto left-len(y.SB12)+1), y.SB12);
      left := left - len(y.SB12);
      y.SB13 := structify(x(left downto left-len(y.SB13)+1), y.SB13);
      left := left - len(y.SB13);
      y.SB14 := structify(x(left downto left-len(y.SB14)+1), y.SB14);
      left := left - len(y.SB14);
      y.SB15 := structify(x(left downto left-len(y.SB15)+1), y.SB15);
      left := left - len(y.SB15);
      y.SB16 := structify(x(left downto left-len(y.SB16)+1), y.SB16);
      left := left - len(y.SB16);
      y.SB17 := structify(x(left downto left-len(y.SB17)+1), y.SB17);
      left := left - len(y.SB17);
      y.SB18 := structify(x(left downto left-len(y.SB18)+1), y.SB18);
      left := left - len(y.SB18);
      y.SB19 := structify(x(left downto left-len(y.SB19)+1), y.SB19);
      left := left - len(y.SB19);
      y.SB20 := structify(x(left downto left-len(y.SB20)+1), y.SB20);
      left := left - len(y.SB20);
      y.SB21 := structify(x(left downto left-len(y.SB21)+1), y.SB21);
      left := left - len(y.SB21);
      y.SB22 := structify(x(left downto left-len(y.SB22)+1), y.SB22);
      left := left - len(y.SB22);
      y.SB23 := structify(x(left downto left-len(y.SB23)+1), y.SB23);
      left := left - len(y.SB23);
      y.SB24 := structify(x(left downto left-len(y.SB24)+1), y.SB24);
      left := left - len(y.SB24);
      y.SB25 := structify(x(left downto left-len(y.SB25)+1), y.SB25);
      left := left - len(y.SB25);
      y.SB26 := structify(x(left downto left-len(y.SB26)+1), y.SB26);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: FM_CTRL_t) return FM_CTRL_t is
    variable y: FM_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SPY_CTRL := convert(x(left to left+len(y.SPY_CTRL)-1), y.SPY_CTRL);
      left := left + len(y.SPY_CTRL);
      y.FREEZE_MASK_0 := convert(x(left to left+len(y.FREEZE_MASK_0)-1), y.FREEZE_MASK_0);
      left := left + len(y.FREEZE_MASK_0);
      y.FREEZE_MASK_1 := convert(x(left to left+len(y.FREEZE_MASK_1)-1), y.FREEZE_MASK_1);
      left := left + len(y.FREEZE_MASK_1);
      y.PLAYBACK_MASK_0 := convert(x(left to left+len(y.PLAYBACK_MASK_0)-1), y.PLAYBACK_MASK_0);
      left := left + len(y.PLAYBACK_MASK_0);
      y.PLAYBACK_MASK_1 := convert(x(left to left+len(y.PLAYBACK_MASK_1)-1), y.PLAYBACK_MASK_1);
      left := left + len(y.PLAYBACK_MASK_1);
      y.SB0 := convert(x(left to left+len(y.SB0)-1), y.SB0);
      left := left + len(y.SB0);
      y.SB1 := convert(x(left to left+len(y.SB1)-1), y.SB1);
      left := left + len(y.SB1);
      y.SB2 := convert(x(left to left+len(y.SB2)-1), y.SB2);
      left := left + len(y.SB2);
      y.SB3 := convert(x(left to left+len(y.SB3)-1), y.SB3);
      left := left + len(y.SB3);
      y.SB4 := convert(x(left to left+len(y.SB4)-1), y.SB4);
      left := left + len(y.SB4);
      y.SB5 := convert(x(left to left+len(y.SB5)-1), y.SB5);
      left := left + len(y.SB5);
      y.SB6 := convert(x(left to left+len(y.SB6)-1), y.SB6);
      left := left + len(y.SB6);
      y.SB7 := convert(x(left to left+len(y.SB7)-1), y.SB7);
      left := left + len(y.SB7);
      y.SB8 := convert(x(left to left+len(y.SB8)-1), y.SB8);
      left := left + len(y.SB8);
      y.SB9 := convert(x(left to left+len(y.SB9)-1), y.SB9);
      left := left + len(y.SB9);
      y.SB10 := convert(x(left to left+len(y.SB10)-1), y.SB10);
      left := left + len(y.SB10);
      y.SB11 := convert(x(left to left+len(y.SB11)-1), y.SB11);
      left := left + len(y.SB11);
      y.SB12 := convert(x(left to left+len(y.SB12)-1), y.SB12);
      left := left + len(y.SB12);
      y.SB13 := convert(x(left to left+len(y.SB13)-1), y.SB13);
      left := left + len(y.SB13);
      y.SB14 := convert(x(left to left+len(y.SB14)-1), y.SB14);
      left := left + len(y.SB14);
      y.SB15 := convert(x(left to left+len(y.SB15)-1), y.SB15);
      left := left + len(y.SB15);
      y.SB16 := convert(x(left to left+len(y.SB16)-1), y.SB16);
      left := left + len(y.SB16);
      y.SB17 := convert(x(left to left+len(y.SB17)-1), y.SB17);
      left := left + len(y.SB17);
      y.SB18 := convert(x(left to left+len(y.SB18)-1), y.SB18);
      left := left + len(y.SB18);
      y.SB19 := convert(x(left to left+len(y.SB19)-1), y.SB19);
      left := left + len(y.SB19);
      y.SB20 := convert(x(left to left+len(y.SB20)-1), y.SB20);
      left := left + len(y.SB20);
      y.SB21 := convert(x(left to left+len(y.SB21)-1), y.SB21);
      left := left + len(y.SB21);
      y.SB22 := convert(x(left to left+len(y.SB22)-1), y.SB22);
      left := left + len(y.SB22);
      y.SB23 := convert(x(left to left+len(y.SB23)-1), y.SB23);
      left := left + len(y.SB23);
      y.SB24 := convert(x(left to left+len(y.SB24)-1), y.SB24);
      left := left + len(y.SB24);
      y.SB25 := convert(x(left to left+len(y.SB25)-1), y.SB25);
      left := left + len(y.SB25);
      y.SB26 := convert(x(left to left+len(y.SB26)-1), y.SB26);
    else
      y.SPY_CTRL := convert(x(left downto left-len(y.SPY_CTRL)+1), y.SPY_CTRL);
      left := left - len(y.SPY_CTRL);
      y.FREEZE_MASK_0 := convert(x(left downto left-len(y.FREEZE_MASK_0)+1), y.FREEZE_MASK_0);
      left := left - len(y.FREEZE_MASK_0);
      y.FREEZE_MASK_1 := convert(x(left downto left-len(y.FREEZE_MASK_1)+1), y.FREEZE_MASK_1);
      left := left - len(y.FREEZE_MASK_1);
      y.PLAYBACK_MASK_0 := convert(x(left downto left-len(y.PLAYBACK_MASK_0)+1), y.PLAYBACK_MASK_0);
      left := left - len(y.PLAYBACK_MASK_0);
      y.PLAYBACK_MASK_1 := convert(x(left downto left-len(y.PLAYBACK_MASK_1)+1), y.PLAYBACK_MASK_1);
      left := left - len(y.PLAYBACK_MASK_1);
      y.SB0 := convert(x(left downto left-len(y.SB0)+1), y.SB0);
      left := left - len(y.SB0);
      y.SB1 := convert(x(left downto left-len(y.SB1)+1), y.SB1);
      left := left - len(y.SB1);
      y.SB2 := convert(x(left downto left-len(y.SB2)+1), y.SB2);
      left := left - len(y.SB2);
      y.SB3 := convert(x(left downto left-len(y.SB3)+1), y.SB3);
      left := left - len(y.SB3);
      y.SB4 := convert(x(left downto left-len(y.SB4)+1), y.SB4);
      left := left - len(y.SB4);
      y.SB5 := convert(x(left downto left-len(y.SB5)+1), y.SB5);
      left := left - len(y.SB5);
      y.SB6 := convert(x(left downto left-len(y.SB6)+1), y.SB6);
      left := left - len(y.SB6);
      y.SB7 := convert(x(left downto left-len(y.SB7)+1), y.SB7);
      left := left - len(y.SB7);
      y.SB8 := convert(x(left downto left-len(y.SB8)+1), y.SB8);
      left := left - len(y.SB8);
      y.SB9 := convert(x(left downto left-len(y.SB9)+1), y.SB9);
      left := left - len(y.SB9);
      y.SB10 := convert(x(left downto left-len(y.SB10)+1), y.SB10);
      left := left - len(y.SB10);
      y.SB11 := convert(x(left downto left-len(y.SB11)+1), y.SB11);
      left := left - len(y.SB11);
      y.SB12 := convert(x(left downto left-len(y.SB12)+1), y.SB12);
      left := left - len(y.SB12);
      y.SB13 := convert(x(left downto left-len(y.SB13)+1), y.SB13);
      left := left - len(y.SB13);
      y.SB14 := convert(x(left downto left-len(y.SB14)+1), y.SB14);
      left := left - len(y.SB14);
      y.SB15 := convert(x(left downto left-len(y.SB15)+1), y.SB15);
      left := left - len(y.SB15);
      y.SB16 := convert(x(left downto left-len(y.SB16)+1), y.SB16);
      left := left - len(y.SB16);
      y.SB17 := convert(x(left downto left-len(y.SB17)+1), y.SB17);
      left := left - len(y.SB17);
      y.SB18 := convert(x(left downto left-len(y.SB18)+1), y.SB18);
      left := left - len(y.SB18);
      y.SB19 := convert(x(left downto left-len(y.SB19)+1), y.SB19);
      left := left - len(y.SB19);
      y.SB20 := convert(x(left downto left-len(y.SB20)+1), y.SB20);
      left := left - len(y.SB20);
      y.SB21 := convert(x(left downto left-len(y.SB21)+1), y.SB21);
      left := left - len(y.SB21);
      y.SB22 := convert(x(left downto left-len(y.SB22)+1), y.SB22);
      left := left - len(y.SB22);
      y.SB23 := convert(x(left downto left-len(y.SB23)+1), y.SB23);
      left := left - len(y.SB23);
      y.SB24 := convert(x(left downto left-len(y.SB24)+1), y.SB24);
      left := left - len(y.SB24);
      y.SB25 := convert(x(left downto left-len(y.SB25)+1), y.SB25);
      left := left - len(y.SB25);
      y.SB26 := convert(x(left downto left-len(y.SB26)+1), y.SB26);
    end if;
    return y;
  end function convert;
  function nullify(t: FM_CTRL_t) return FM_CTRL_t is
  variable y: FM_CTRL_t;
  begin
    y.SPY_CTRL := nullify(t.SPY_CTRL);
    y.FREEZE_MASK_0 := nullify(t.FREEZE_MASK_0);
    y.FREEZE_MASK_1 := nullify(t.FREEZE_MASK_1);
    y.PLAYBACK_MASK_0 := nullify(t.PLAYBACK_MASK_0);
    y.PLAYBACK_MASK_1 := nullify(t.PLAYBACK_MASK_1);
    y.SB0 := nullify(t.SB0);
    y.SB1 := nullify(t.SB1);
    y.SB2 := nullify(t.SB2);
    y.SB3 := nullify(t.SB3);
    y.SB4 := nullify(t.SB4);
    y.SB5 := nullify(t.SB5);
    y.SB6 := nullify(t.SB6);
    y.SB7 := nullify(t.SB7);
    y.SB8 := nullify(t.SB8);
    y.SB9 := nullify(t.SB9);
    y.SB10 := nullify(t.SB10);
    y.SB11 := nullify(t.SB11);
    y.SB12 := nullify(t.SB12);
    y.SB13 := nullify(t.SB13);
    y.SB14 := nullify(t.SB14);
    y.SB15 := nullify(t.SB15);
    y.SB16 := nullify(t.SB16);
    y.SB17 := nullify(t.SB17);
    y.SB18 := nullify(t.SB18);
    y.SB19 := nullify(t.SB19);
    y.SB20 := nullify(t.SB20);
    y.SB21 := nullify(t.SB21);
    y.SB22 := nullify(t.SB22);
    y.SB23 := nullify(t.SB23);
    y.SB24 := nullify(t.SB24);
    y.SB25 := nullify(t.SB25);
    y.SB26 := nullify(t.SB26);
    return y;
  end function nullify;
  function zeroed(t: FM_CTRL_t) return FM_CTRL_t is
  variable y: FM_CTRL_t;
  begin
    y.SPY_CTRL := zeroed(t.SPY_CTRL);
    y.FREEZE_MASK_0 := zeroed(t.FREEZE_MASK_0);
    y.FREEZE_MASK_1 := zeroed(t.FREEZE_MASK_1);
    y.PLAYBACK_MASK_0 := zeroed(t.PLAYBACK_MASK_0);
    y.PLAYBACK_MASK_1 := zeroed(t.PLAYBACK_MASK_1);
    y.SB0 := zeroed(t.SB0);
    y.SB1 := zeroed(t.SB1);
    y.SB2 := zeroed(t.SB2);
    y.SB3 := zeroed(t.SB3);
    y.SB4 := zeroed(t.SB4);
    y.SB5 := zeroed(t.SB5);
    y.SB6 := zeroed(t.SB6);
    y.SB7 := zeroed(t.SB7);
    y.SB8 := zeroed(t.SB8);
    y.SB9 := zeroed(t.SB9);
    y.SB10 := zeroed(t.SB10);
    y.SB11 := zeroed(t.SB11);
    y.SB12 := zeroed(t.SB12);
    y.SB13 := zeroed(t.SB13);
    y.SB14 := zeroed(t.SB14);
    y.SB15 := zeroed(t.SB15);
    y.SB16 := zeroed(t.SB16);
    y.SB17 := zeroed(t.SB17);
    y.SB18 := zeroed(t.SB18);
    y.SB19 := zeroed(t.SB19);
    y.SB20 := zeroed(t.SB20);
    y.SB21 := zeroed(t.SB21);
    y.SB22 := zeroed(t.SB22);
    y.SB23 := zeroed(t.SB23);
    y.SB24 := zeroed(t.SB24);
    y.SB25 := zeroed(t.SB25);
    y.SB26 := zeroed(t.SB26);
    return y;
  end function zeroed;

end package body FM_CTRL;
