-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl
-- 2022-03-15 21:00:38

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.common_ieee_pkg.all;

package HAL_CORE_CTRL is

   -- Custom types and functions --

   type HAL_CORE_CLOCKING_MON_t is record
      MMCM_LOCKED : std_logic;
   end record HAL_CORE_CLOCKING_MON_t;
   function width(x: HAL_CORE_CLOCKING_MON_t) return natural;
   function convert(x: HAL_CORE_CLOCKING_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CORE_CLOCKING_MON_t) return HAL_CORE_CLOCKING_MON_t;

   type HAL_CORE_CLOCKING_CTRL_t is record
      RESET_MMCM : std_logic;
   end record HAL_CORE_CLOCKING_CTRL_t;
   function width(x: HAL_CORE_CLOCKING_CTRL_t) return natural;
   function convert(x: HAL_CORE_CLOCKING_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CORE_CLOCKING_CTRL_t) return HAL_CORE_CLOCKING_CTRL_t;

   type HAL_CORE_MGT_MGT_STATUS_MON_t is record
      rxcdr_stable : std_logic;
      powergood : std_logic;
      txready : std_logic;
      rxready : std_logic;
      rx_pma_reset_done : std_logic;
      tx_pma_reset_done : std_logic;
      tx_reset_done : std_logic;
      rx_reset_done : std_logic;
      buffbypass_tx_done_out : std_logic;
      buffbypass_tx_error_out : std_logic;
      buffbypass_rx_done_out : std_logic;
      buffbypass_rx_error_out : std_logic;
   end record HAL_CORE_MGT_MGT_STATUS_MON_t;
   function width(x: HAL_CORE_MGT_MGT_STATUS_MON_t) return natural;
   function convert(x: HAL_CORE_MGT_MGT_STATUS_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_STATUS_MON_t) return HAL_CORE_MGT_MGT_STATUS_MON_t;

   type HAL_CORE_MGT_MGT_DRP_MON_t is record
      rd_rdy : std_logic;
      rd_data : std_logic_vector(16 downto 0);
   end record HAL_CORE_MGT_MGT_DRP_MON_t;
   function width(x: HAL_CORE_MGT_MGT_DRP_MON_t) return natural;
   function convert(x: HAL_CORE_MGT_MGT_DRP_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_DRP_MON_t) return HAL_CORE_MGT_MGT_DRP_MON_t;

   type HAL_CORE_MGT_MGT_DRP_CTRL_t is record
      wr_en : std_logic;
      wr_addr : std_logic_vector(10 downto 0);
      en : std_logic;
      wr_data : std_logic_vector(16 downto 0);
   end record HAL_CORE_MGT_MGT_DRP_CTRL_t;
   function width(x: HAL_CORE_MGT_MGT_DRP_CTRL_t) return natural;
   function convert(x: HAL_CORE_MGT_MGT_DRP_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_DRP_CTRL_t) return HAL_CORE_MGT_MGT_DRP_CTRL_t;

   type HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t is record
      reset : std_logic;
      reset_pll_and_datapath : std_logic;
      reset_datapath : std_logic;
      reset_bufbypass : std_logic;
   end record HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t;
   function width(x: HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t) return natural;
   function convert(x: HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t) return HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t;

   type HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t is record
      reset : std_logic;
      reset_pll_and_datapath : std_logic;
      reset_datapath : std_logic;
      reset_bufbypass : std_logic;
   end record HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t;
   function width(x: HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t) return natural;
   function convert(x: HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t) return HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t;

   type HAL_CORE_MGT_MGT_MON_t is record
      STATUS : HAL_CORE_MGT_MGT_STATUS_MON_t;
      DRP : HAL_CORE_MGT_MGT_DRP_MON_t;
   end record HAL_CORE_MGT_MGT_MON_t;
   function width(x: HAL_CORE_MGT_MGT_MON_t) return natural;
   function convert(x: HAL_CORE_MGT_MGT_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_MON_t) return HAL_CORE_MGT_MGT_MON_t;

   type HAL_CORE_MGT_MGT_MON_t_ARRAY is array(128 downto 0) of HAL_CORE_MGT_MGT_MON_t;
   function width(x: HAL_CORE_MGT_MGT_MON_t_ARRAY) return integer;
   function convert(x: HAL_CORE_MGT_MGT_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_MON_t_ARRAY) return HAL_CORE_MGT_MGT_MON_t_ARRAY;
   function convert(x: HAL_CORE_MGT_MGT_MON_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: HAL_CORE_MGT_MGT_MON_t_ARRAY) return HAL_CORE_MGT_MGT_MON_t_ARRAY;

   type HAL_CORE_MGT_MGT_CTRL_t is record
      DRP : HAL_CORE_MGT_MGT_DRP_CTRL_t;
      TX_RESETS : HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t;
      RX_RESETS : HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t;
   end record HAL_CORE_MGT_MGT_CTRL_t;
   function width(x: HAL_CORE_MGT_MGT_CTRL_t) return natural;
   function convert(x: HAL_CORE_MGT_MGT_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_CTRL_t) return HAL_CORE_MGT_MGT_CTRL_t;

   type HAL_CORE_MGT_MGT_CTRL_t_ARRAY is array(128 downto 0) of HAL_CORE_MGT_MGT_CTRL_t;
   function width(x: HAL_CORE_MGT_MGT_CTRL_t_ARRAY) return integer;
   function convert(x: HAL_CORE_MGT_MGT_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_CTRL_t_ARRAY) return HAL_CORE_MGT_MGT_CTRL_t_ARRAY;
   function convert(x: HAL_CORE_MGT_MGT_CTRL_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: HAL_CORE_MGT_MGT_CTRL_t_ARRAY) return HAL_CORE_MGT_MGT_CTRL_t_ARRAY;

   type HAL_CORE_MGT_MON_t is record
      MGT : HAL_CORE_MGT_MGT_MON_t_ARRAY;
   end record HAL_CORE_MGT_MON_t;
   function width(x: HAL_CORE_MGT_MON_t) return natural;
   function convert(x: HAL_CORE_MGT_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MON_t) return HAL_CORE_MGT_MON_t;

   type HAL_CORE_MGT_CTRL_t is record
      MGT : HAL_CORE_MGT_MGT_CTRL_t_ARRAY;
   end record HAL_CORE_MGT_CTRL_t;
   function width(x: HAL_CORE_MGT_CTRL_t) return natural;
   function convert(x: HAL_CORE_MGT_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_CTRL_t) return HAL_CORE_MGT_CTRL_t;

   type HAL_CORE_MON_t is record
      CLOCKING : HAL_CORE_CLOCKING_MON_t;
      MGT : HAL_CORE_MGT_MON_t;
   end record HAL_CORE_MON_t;
   function width(x: HAL_CORE_MON_t) return natural;
   function convert(x: HAL_CORE_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CORE_MON_t) return HAL_CORE_MON_t;

   type HAL_CORE_CTRL_t is record
      CLOCKING : HAL_CORE_CLOCKING_CTRL_t;
      MGT : HAL_CORE_MGT_CTRL_t;
   end record HAL_CORE_CTRL_t;
   function width(x: HAL_CORE_CTRL_t) return natural;
   function convert(x: HAL_CORE_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CORE_CTRL_t) return HAL_CORE_CTRL_t;

end package HAL_CORE_CTRL;

------------------------------------------------------------

package body HAL_CORE_CTRL is

   -- Custom types and functions --

   function width(x: HAL_CORE_CLOCKING_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.MMCM_LOCKED);
      return w;
   end function width;
   function convert(x: HAL_CORE_CLOCKING_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.MMCM_LOCKED);
         y(u to u+w-1) := convert(x.MMCM_LOCKED, y(u to u+w-1));
      else
         w := width(x.MMCM_LOCKED);
         y(u downto u-w+1) := convert(x.MMCM_LOCKED, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CORE_CLOCKING_MON_t) return HAL_CORE_CLOCKING_MON_t is
      variable y : HAL_CORE_CLOCKING_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.MMCM_LOCKED);
         y.MMCM_LOCKED := convert(x(u to u+w-1), t.MMCM_LOCKED);
      else
         w := width(t.MMCM_LOCKED);
         y.MMCM_LOCKED := convert(x(u downto u-w+1), t.MMCM_LOCKED);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CORE_CLOCKING_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.RESET_MMCM);
      return w;
   end function width;
   function convert(x: HAL_CORE_CLOCKING_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.RESET_MMCM);
         y(u to u+w-1) := convert(x.RESET_MMCM, y(u to u+w-1));
      else
         w := width(x.RESET_MMCM);
         y(u downto u-w+1) := convert(x.RESET_MMCM, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CORE_CLOCKING_CTRL_t) return HAL_CORE_CLOCKING_CTRL_t is
      variable y : HAL_CORE_CLOCKING_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.RESET_MMCM);
         y.RESET_MMCM := convert(x(u to u+w-1), t.RESET_MMCM);
      else
         w := width(t.RESET_MMCM);
         y.RESET_MMCM := convert(x(u downto u-w+1), t.RESET_MMCM);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CORE_MGT_MGT_STATUS_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.rxcdr_stable);
      w := w + width(x.powergood);
      w := w + width(x.txready);
      w := w + width(x.rxready);
      w := w + width(x.rx_pma_reset_done);
      w := w + width(x.tx_pma_reset_done);
      w := w + width(x.tx_reset_done);
      w := w + width(x.rx_reset_done);
      w := w + width(x.buffbypass_tx_done_out);
      w := w + width(x.buffbypass_tx_error_out);
      w := w + width(x.buffbypass_rx_done_out);
      w := w + width(x.buffbypass_rx_error_out);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_STATUS_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.rxcdr_stable);
         y(u to u+w-1) := convert(x.rxcdr_stable, y(u to u+w-1));
         u := u + w;
         w := width(x.powergood);
         y(u to u+w-1) := convert(x.powergood, y(u to u+w-1));
         u := u + w;
         w := width(x.txready);
         y(u to u+w-1) := convert(x.txready, y(u to u+w-1));
         u := u + w;
         w := width(x.rxready);
         y(u to u+w-1) := convert(x.rxready, y(u to u+w-1));
         u := u + w;
         w := width(x.rx_pma_reset_done);
         y(u to u+w-1) := convert(x.rx_pma_reset_done, y(u to u+w-1));
         u := u + w;
         w := width(x.tx_pma_reset_done);
         y(u to u+w-1) := convert(x.tx_pma_reset_done, y(u to u+w-1));
         u := u + w;
         w := width(x.tx_reset_done);
         y(u to u+w-1) := convert(x.tx_reset_done, y(u to u+w-1));
         u := u + w;
         w := width(x.rx_reset_done);
         y(u to u+w-1) := convert(x.rx_reset_done, y(u to u+w-1));
         u := u + w;
         w := width(x.buffbypass_tx_done_out);
         y(u to u+w-1) := convert(x.buffbypass_tx_done_out, y(u to u+w-1));
         u := u + w;
         w := width(x.buffbypass_tx_error_out);
         y(u to u+w-1) := convert(x.buffbypass_tx_error_out, y(u to u+w-1));
         u := u + w;
         w := width(x.buffbypass_rx_done_out);
         y(u to u+w-1) := convert(x.buffbypass_rx_done_out, y(u to u+w-1));
         u := u + w;
         w := width(x.buffbypass_rx_error_out);
         y(u to u+w-1) := convert(x.buffbypass_rx_error_out, y(u to u+w-1));
      else
         w := width(x.rxcdr_stable);
         y(u downto u-w+1) := convert(x.rxcdr_stable, y(u downto u-w+1));
         u := u - w;
         w := width(x.powergood);
         y(u downto u-w+1) := convert(x.powergood, y(u downto u-w+1));
         u := u - w;
         w := width(x.txready);
         y(u downto u-w+1) := convert(x.txready, y(u downto u-w+1));
         u := u - w;
         w := width(x.rxready);
         y(u downto u-w+1) := convert(x.rxready, y(u downto u-w+1));
         u := u - w;
         w := width(x.rx_pma_reset_done);
         y(u downto u-w+1) := convert(x.rx_pma_reset_done, y(u downto u-w+1));
         u := u - w;
         w := width(x.tx_pma_reset_done);
         y(u downto u-w+1) := convert(x.tx_pma_reset_done, y(u downto u-w+1));
         u := u - w;
         w := width(x.tx_reset_done);
         y(u downto u-w+1) := convert(x.tx_reset_done, y(u downto u-w+1));
         u := u - w;
         w := width(x.rx_reset_done);
         y(u downto u-w+1) := convert(x.rx_reset_done, y(u downto u-w+1));
         u := u - w;
         w := width(x.buffbypass_tx_done_out);
         y(u downto u-w+1) := convert(x.buffbypass_tx_done_out, y(u downto u-w+1));
         u := u - w;
         w := width(x.buffbypass_tx_error_out);
         y(u downto u-w+1) := convert(x.buffbypass_tx_error_out, y(u downto u-w+1));
         u := u - w;
         w := width(x.buffbypass_rx_done_out);
         y(u downto u-w+1) := convert(x.buffbypass_rx_done_out, y(u downto u-w+1));
         u := u - w;
         w := width(x.buffbypass_rx_error_out);
         y(u downto u-w+1) := convert(x.buffbypass_rx_error_out, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_STATUS_MON_t) return HAL_CORE_MGT_MGT_STATUS_MON_t is
      variable y : HAL_CORE_MGT_MGT_STATUS_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.rxcdr_stable);
         y.rxcdr_stable := convert(x(u to u+w-1), t.rxcdr_stable);
         u := u + w;
         w := width(t.powergood);
         y.powergood := convert(x(u to u+w-1), t.powergood);
         u := u + w;
         w := width(t.txready);
         y.txready := convert(x(u to u+w-1), t.txready);
         u := u + w;
         w := width(t.rxready);
         y.rxready := convert(x(u to u+w-1), t.rxready);
         u := u + w;
         w := width(t.rx_pma_reset_done);
         y.rx_pma_reset_done := convert(x(u to u+w-1), t.rx_pma_reset_done);
         u := u + w;
         w := width(t.tx_pma_reset_done);
         y.tx_pma_reset_done := convert(x(u to u+w-1), t.tx_pma_reset_done);
         u := u + w;
         w := width(t.tx_reset_done);
         y.tx_reset_done := convert(x(u to u+w-1), t.tx_reset_done);
         u := u + w;
         w := width(t.rx_reset_done);
         y.rx_reset_done := convert(x(u to u+w-1), t.rx_reset_done);
         u := u + w;
         w := width(t.buffbypass_tx_done_out);
         y.buffbypass_tx_done_out := convert(x(u to u+w-1), t.buffbypass_tx_done_out);
         u := u + w;
         w := width(t.buffbypass_tx_error_out);
         y.buffbypass_tx_error_out := convert(x(u to u+w-1), t.buffbypass_tx_error_out);
         u := u + w;
         w := width(t.buffbypass_rx_done_out);
         y.buffbypass_rx_done_out := convert(x(u to u+w-1), t.buffbypass_rx_done_out);
         u := u + w;
         w := width(t.buffbypass_rx_error_out);
         y.buffbypass_rx_error_out := convert(x(u to u+w-1), t.buffbypass_rx_error_out);
      else
         w := width(t.rxcdr_stable);
         y.rxcdr_stable := convert(x(u downto u-w+1), t.rxcdr_stable);
         u := u - w;
         w := width(t.powergood);
         y.powergood := convert(x(u downto u-w+1), t.powergood);
         u := u - w;
         w := width(t.txready);
         y.txready := convert(x(u downto u-w+1), t.txready);
         u := u - w;
         w := width(t.rxready);
         y.rxready := convert(x(u downto u-w+1), t.rxready);
         u := u - w;
         w := width(t.rx_pma_reset_done);
         y.rx_pma_reset_done := convert(x(u downto u-w+1), t.rx_pma_reset_done);
         u := u - w;
         w := width(t.tx_pma_reset_done);
         y.tx_pma_reset_done := convert(x(u downto u-w+1), t.tx_pma_reset_done);
         u := u - w;
         w := width(t.tx_reset_done);
         y.tx_reset_done := convert(x(u downto u-w+1), t.tx_reset_done);
         u := u - w;
         w := width(t.rx_reset_done);
         y.rx_reset_done := convert(x(u downto u-w+1), t.rx_reset_done);
         u := u - w;
         w := width(t.buffbypass_tx_done_out);
         y.buffbypass_tx_done_out := convert(x(u downto u-w+1), t.buffbypass_tx_done_out);
         u := u - w;
         w := width(t.buffbypass_tx_error_out);
         y.buffbypass_tx_error_out := convert(x(u downto u-w+1), t.buffbypass_tx_error_out);
         u := u - w;
         w := width(t.buffbypass_rx_done_out);
         y.buffbypass_rx_done_out := convert(x(u downto u-w+1), t.buffbypass_rx_done_out);
         u := u - w;
         w := width(t.buffbypass_rx_error_out);
         y.buffbypass_rx_error_out := convert(x(u downto u-w+1), t.buffbypass_rx_error_out);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CORE_MGT_MGT_DRP_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.rd_rdy);
      w := w + width(x.rd_data);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_DRP_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.rd_rdy);
         y(u to u+w-1) := convert(x.rd_rdy, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_data);
         y(u to u+w-1) := convert(x.rd_data, y(u to u+w-1));
      else
         w := width(x.rd_rdy);
         y(u downto u-w+1) := convert(x.rd_rdy, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_data);
         y(u downto u-w+1) := convert(x.rd_data, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_DRP_MON_t) return HAL_CORE_MGT_MGT_DRP_MON_t is
      variable y : HAL_CORE_MGT_MGT_DRP_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.rd_rdy);
         y.rd_rdy := convert(x(u to u+w-1), t.rd_rdy);
         u := u + w;
         w := width(t.rd_data);
         y.rd_data := convert(x(u to u+w-1), t.rd_data);
      else
         w := width(t.rd_rdy);
         y.rd_rdy := convert(x(u downto u-w+1), t.rd_rdy);
         u := u - w;
         w := width(t.rd_data);
         y.rd_data := convert(x(u downto u-w+1), t.rd_data);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CORE_MGT_MGT_DRP_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.wr_en);
      w := w + width(x.wr_addr);
      w := w + width(x.en);
      w := w + width(x.wr_data);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_DRP_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.wr_en);
         y(u to u+w-1) := convert(x.wr_en, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_addr);
         y(u to u+w-1) := convert(x.wr_addr, y(u to u+w-1));
         u := u + w;
         w := width(x.en);
         y(u to u+w-1) := convert(x.en, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_data);
         y(u to u+w-1) := convert(x.wr_data, y(u to u+w-1));
      else
         w := width(x.wr_en);
         y(u downto u-w+1) := convert(x.wr_en, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_addr);
         y(u downto u-w+1) := convert(x.wr_addr, y(u downto u-w+1));
         u := u - w;
         w := width(x.en);
         y(u downto u-w+1) := convert(x.en, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_data);
         y(u downto u-w+1) := convert(x.wr_data, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_DRP_CTRL_t) return HAL_CORE_MGT_MGT_DRP_CTRL_t is
      variable y : HAL_CORE_MGT_MGT_DRP_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.wr_en);
         y.wr_en := convert(x(u to u+w-1), t.wr_en);
         u := u + w;
         w := width(t.wr_addr);
         y.wr_addr := convert(x(u to u+w-1), t.wr_addr);
         u := u + w;
         w := width(t.en);
         y.en := convert(x(u to u+w-1), t.en);
         u := u + w;
         w := width(t.wr_data);
         y.wr_data := convert(x(u to u+w-1), t.wr_data);
      else
         w := width(t.wr_en);
         y.wr_en := convert(x(u downto u-w+1), t.wr_en);
         u := u - w;
         w := width(t.wr_addr);
         y.wr_addr := convert(x(u downto u-w+1), t.wr_addr);
         u := u - w;
         w := width(t.en);
         y.en := convert(x(u downto u-w+1), t.en);
         u := u - w;
         w := width(t.wr_data);
         y.wr_data := convert(x(u downto u-w+1), t.wr_data);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.reset);
      w := w + width(x.reset_pll_and_datapath);
      w := w + width(x.reset_datapath);
      w := w + width(x.reset_bufbypass);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.reset);
         y(u to u+w-1) := convert(x.reset, y(u to u+w-1));
         u := u + w;
         w := width(x.reset_pll_and_datapath);
         y(u to u+w-1) := convert(x.reset_pll_and_datapath, y(u to u+w-1));
         u := u + w;
         w := width(x.reset_datapath);
         y(u to u+w-1) := convert(x.reset_datapath, y(u to u+w-1));
         u := u + w;
         w := width(x.reset_bufbypass);
         y(u to u+w-1) := convert(x.reset_bufbypass, y(u to u+w-1));
      else
         w := width(x.reset);
         y(u downto u-w+1) := convert(x.reset, y(u downto u-w+1));
         u := u - w;
         w := width(x.reset_pll_and_datapath);
         y(u downto u-w+1) := convert(x.reset_pll_and_datapath, y(u downto u-w+1));
         u := u - w;
         w := width(x.reset_datapath);
         y(u downto u-w+1) := convert(x.reset_datapath, y(u downto u-w+1));
         u := u - w;
         w := width(x.reset_bufbypass);
         y(u downto u-w+1) := convert(x.reset_bufbypass, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t) return HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t is
      variable y : HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.reset);
         y.reset := convert(x(u to u+w-1), t.reset);
         u := u + w;
         w := width(t.reset_pll_and_datapath);
         y.reset_pll_and_datapath := convert(x(u to u+w-1), t.reset_pll_and_datapath);
         u := u + w;
         w := width(t.reset_datapath);
         y.reset_datapath := convert(x(u to u+w-1), t.reset_datapath);
         u := u + w;
         w := width(t.reset_bufbypass);
         y.reset_bufbypass := convert(x(u to u+w-1), t.reset_bufbypass);
      else
         w := width(t.reset);
         y.reset := convert(x(u downto u-w+1), t.reset);
         u := u - w;
         w := width(t.reset_pll_and_datapath);
         y.reset_pll_and_datapath := convert(x(u downto u-w+1), t.reset_pll_and_datapath);
         u := u - w;
         w := width(t.reset_datapath);
         y.reset_datapath := convert(x(u downto u-w+1), t.reset_datapath);
         u := u - w;
         w := width(t.reset_bufbypass);
         y.reset_bufbypass := convert(x(u downto u-w+1), t.reset_bufbypass);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.reset);
      w := w + width(x.reset_pll_and_datapath);
      w := w + width(x.reset_datapath);
      w := w + width(x.reset_bufbypass);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.reset);
         y(u to u+w-1) := convert(x.reset, y(u to u+w-1));
         u := u + w;
         w := width(x.reset_pll_and_datapath);
         y(u to u+w-1) := convert(x.reset_pll_and_datapath, y(u to u+w-1));
         u := u + w;
         w := width(x.reset_datapath);
         y(u to u+w-1) := convert(x.reset_datapath, y(u to u+w-1));
         u := u + w;
         w := width(x.reset_bufbypass);
         y(u to u+w-1) := convert(x.reset_bufbypass, y(u to u+w-1));
      else
         w := width(x.reset);
         y(u downto u-w+1) := convert(x.reset, y(u downto u-w+1));
         u := u - w;
         w := width(x.reset_pll_and_datapath);
         y(u downto u-w+1) := convert(x.reset_pll_and_datapath, y(u downto u-w+1));
         u := u - w;
         w := width(x.reset_datapath);
         y(u downto u-w+1) := convert(x.reset_datapath, y(u downto u-w+1));
         u := u - w;
         w := width(x.reset_bufbypass);
         y(u downto u-w+1) := convert(x.reset_bufbypass, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t) return HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t is
      variable y : HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.reset);
         y.reset := convert(x(u to u+w-1), t.reset);
         u := u + w;
         w := width(t.reset_pll_and_datapath);
         y.reset_pll_and_datapath := convert(x(u to u+w-1), t.reset_pll_and_datapath);
         u := u + w;
         w := width(t.reset_datapath);
         y.reset_datapath := convert(x(u to u+w-1), t.reset_datapath);
         u := u + w;
         w := width(t.reset_bufbypass);
         y.reset_bufbypass := convert(x(u to u+w-1), t.reset_bufbypass);
      else
         w := width(t.reset);
         y.reset := convert(x(u downto u-w+1), t.reset);
         u := u - w;
         w := width(t.reset_pll_and_datapath);
         y.reset_pll_and_datapath := convert(x(u downto u-w+1), t.reset_pll_and_datapath);
         u := u - w;
         w := width(t.reset_datapath);
         y.reset_datapath := convert(x(u downto u-w+1), t.reset_datapath);
         u := u - w;
         w := width(t.reset_bufbypass);
         y.reset_bufbypass := convert(x(u downto u-w+1), t.reset_bufbypass);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CORE_MGT_MGT_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.STATUS);
      w := w + width(x.DRP);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.STATUS);
         y(u to u+w-1) := convert(x.STATUS, y(u to u+w-1));
         u := u + w;
         w := width(x.DRP);
         y(u to u+w-1) := convert(x.DRP, y(u to u+w-1));
      else
         w := width(x.STATUS);
         y(u downto u-w+1) := convert(x.STATUS, y(u downto u-w+1));
         u := u - w;
         w := width(x.DRP);
         y(u downto u-w+1) := convert(x.DRP, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_MON_t) return HAL_CORE_MGT_MGT_MON_t is
      variable y : HAL_CORE_MGT_MGT_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.STATUS);
         y.STATUS := convert(x(u to u+w-1), t.STATUS);
         u := u + w;
         w := width(t.DRP);
         y.DRP := convert(x(u to u+w-1), t.DRP);
      else
         w := width(t.STATUS);
         y.STATUS := convert(x(u downto u-w+1), t.STATUS);
         u := u - w;
         w := width(t.DRP);
         y.DRP := convert(x(u downto u-w+1), t.DRP);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CORE_MGT_MGT_MON_t_ARRAY) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_MON_t_ARRAY) return HAL_CORE_MGT_MGT_MON_t_ARRAY is
      variable y : HAL_CORE_MGT_MGT_MON_t_ARRAY;
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: HAL_CORE_MGT_MGT_MON_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: HAL_CORE_MGT_MGT_MON_t_ARRAY) return HAL_CORE_MGT_MGT_MON_t_ARRAY is
      variable y : HAL_CORE_MGT_MGT_MON_t_ARRAY;
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: HAL_CORE_MGT_MGT_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.DRP);
      w := w + width(x.TX_RESETS);
      w := w + width(x.RX_RESETS);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.DRP);
         y(u to u+w-1) := convert(x.DRP, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_RESETS);
         y(u to u+w-1) := convert(x.TX_RESETS, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_RESETS);
         y(u to u+w-1) := convert(x.RX_RESETS, y(u to u+w-1));
      else
         w := width(x.DRP);
         y(u downto u-w+1) := convert(x.DRP, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_RESETS);
         y(u downto u-w+1) := convert(x.TX_RESETS, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_RESETS);
         y(u downto u-w+1) := convert(x.RX_RESETS, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_CTRL_t) return HAL_CORE_MGT_MGT_CTRL_t is
      variable y : HAL_CORE_MGT_MGT_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.DRP);
         y.DRP := convert(x(u to u+w-1), t.DRP);
         u := u + w;
         w := width(t.TX_RESETS);
         y.TX_RESETS := convert(x(u to u+w-1), t.TX_RESETS);
         u := u + w;
         w := width(t.RX_RESETS);
         y.RX_RESETS := convert(x(u to u+w-1), t.RX_RESETS);
      else
         w := width(t.DRP);
         y.DRP := convert(x(u downto u-w+1), t.DRP);
         u := u - w;
         w := width(t.TX_RESETS);
         y.TX_RESETS := convert(x(u downto u-w+1), t.TX_RESETS);
         u := u - w;
         w := width(t.RX_RESETS);
         y.RX_RESETS := convert(x(u downto u-w+1), t.RX_RESETS);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CORE_MGT_MGT_CTRL_t_ARRAY) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MGT_CTRL_t_ARRAY) return HAL_CORE_MGT_MGT_CTRL_t_ARRAY is
      variable y : HAL_CORE_MGT_MGT_CTRL_t_ARRAY;
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: HAL_CORE_MGT_MGT_CTRL_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: HAL_CORE_MGT_MGT_CTRL_t_ARRAY) return HAL_CORE_MGT_MGT_CTRL_t_ARRAY is
      variable y : HAL_CORE_MGT_MGT_CTRL_t_ARRAY;
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: HAL_CORE_MGT_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.MGT);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.MGT);
         y(u to u+w-1) := convert(x.MGT, y(u to u+w-1));
      else
         w := width(x.MGT);
         y(u downto u-w+1) := convert(x.MGT, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_MON_t) return HAL_CORE_MGT_MON_t is
      variable y : HAL_CORE_MGT_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.MGT);
         y.MGT := convert(x(u to u+w-1), t.MGT);
      else
         w := width(t.MGT);
         y.MGT := convert(x(u downto u-w+1), t.MGT);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CORE_MGT_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.MGT);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.MGT);
         y(u to u+w-1) := convert(x.MGT, y(u to u+w-1));
      else
         w := width(x.MGT);
         y(u downto u-w+1) := convert(x.MGT, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CORE_MGT_CTRL_t) return HAL_CORE_MGT_CTRL_t is
      variable y : HAL_CORE_MGT_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.MGT);
         y.MGT := convert(x(u to u+w-1), t.MGT);
      else
         w := width(t.MGT);
         y.MGT := convert(x(u downto u-w+1), t.MGT);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CORE_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.CLOCKING);
      w := w + width(x.MGT);
      return w;
   end function width;
   function convert(x: HAL_CORE_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.CLOCKING);
         y(u to u+w-1) := convert(x.CLOCKING, y(u to u+w-1));
         u := u + w;
         w := width(x.MGT);
         y(u to u+w-1) := convert(x.MGT, y(u to u+w-1));
      else
         w := width(x.CLOCKING);
         y(u downto u-w+1) := convert(x.CLOCKING, y(u downto u-w+1));
         u := u - w;
         w := width(x.MGT);
         y(u downto u-w+1) := convert(x.MGT, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CORE_MON_t) return HAL_CORE_MON_t is
      variable y : HAL_CORE_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.CLOCKING);
         y.CLOCKING := convert(x(u to u+w-1), t.CLOCKING);
         u := u + w;
         w := width(t.MGT);
         y.MGT := convert(x(u to u+w-1), t.MGT);
      else
         w := width(t.CLOCKING);
         y.CLOCKING := convert(x(u downto u-w+1), t.CLOCKING);
         u := u - w;
         w := width(t.MGT);
         y.MGT := convert(x(u downto u-w+1), t.MGT);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CORE_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.CLOCKING);
      w := w + width(x.MGT);
      return w;
   end function width;
   function convert(x: HAL_CORE_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.CLOCKING);
         y(u to u+w-1) := convert(x.CLOCKING, y(u to u+w-1));
         u := u + w;
         w := width(x.MGT);
         y(u to u+w-1) := convert(x.MGT, y(u to u+w-1));
      else
         w := width(x.CLOCKING);
         y(u downto u-w+1) := convert(x.CLOCKING, y(u downto u-w+1));
         u := u - w;
         w := width(x.MGT);
         y(u downto u-w+1) := convert(x.MGT, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CORE_CTRL_t) return HAL_CORE_CTRL_t is
      variable y : HAL_CORE_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.CLOCKING);
         y.CLOCKING := convert(x(u to u+w-1), t.CLOCKING);
         u := u + w;
         w := width(t.MGT);
         y.MGT := convert(x(u to u+w-1), t.MGT);
      else
         w := width(t.CLOCKING);
         y.CLOCKING := convert(x(u downto u-w+1), t.CLOCKING);
         u := u - w;
         w := width(t.MGT);
         y.MGT := convert(x(u downto u-w+1), t.MGT);
      end if;
      return y;
   end function convert;

end package body HAL_CORE_CTRL;
