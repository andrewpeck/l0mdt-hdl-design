-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.common_ieee_pkg.all;

package HAL_CORE_CTRL is

   -- Custom types and functions --

   type HAL_CORE_CLOCKING_MON_t is record
      MMCM_LOCKED : std_logic;
   end record HAL_CORE_CLOCKING_MON_t;
   attribute w of HAL_CORE_CLOCKING_MON_t : type is 1;
   function width(x: HAL_CORE_CLOCKING_MON_t) return natural;
   function convert(x: HAL_CORE_CLOCKING_MON_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: HAL_CORE_CLOCKING_MON_t) return HAL_CORE_CLOCKING_MON_t;
   function zero(tpl: HAL_CORE_CLOCKING_MON_t) return HAL_CORE_CLOCKING_MON_t;

   type HAL_CORE_CLOCKING_CTRL_t is record
      RESET_MMCM : std_logic;
   end record HAL_CORE_CLOCKING_CTRL_t;
   attribute w of HAL_CORE_CLOCKING_CTRL_t : type is 1;
   function width(x: HAL_CORE_CLOCKING_CTRL_t) return natural;
   function convert(x: HAL_CORE_CLOCKING_CTRL_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: HAL_CORE_CLOCKING_CTRL_t) return HAL_CORE_CLOCKING_CTRL_t;
   function zero(tpl: HAL_CORE_CLOCKING_CTRL_t) return HAL_CORE_CLOCKING_CTRL_t;

   type HAL_CORE_MGT_MGT_STATUS_MON_t is record
      rxcdr_stable : std_logic;
      powergood : std_logic;
      txready : std_logic;
      rxready : std_logic;
      rx_pma_reset_done : std_logic;
      tx_pma_reset_done : std_logic;
      tx_reset_done : std_logic;
      rx_reset_done : std_logic;
      buffbypass_tx_done_out : std_logic;
      buffbypass_tx_error_out : std_logic;
      buffbypass_rx_done_out : std_logic;
      buffbypass_rx_error_out : std_logic;
   end record HAL_CORE_MGT_MGT_STATUS_MON_t;
   attribute w of HAL_CORE_MGT_MGT_STATUS_MON_t : type is 12;
   function width(x: HAL_CORE_MGT_MGT_STATUS_MON_t) return natural;
   function convert(x: HAL_CORE_MGT_MGT_STATUS_MON_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_STATUS_MON_t) return HAL_CORE_MGT_MGT_STATUS_MON_t;
   function zero(tpl: HAL_CORE_MGT_MGT_STATUS_MON_t) return HAL_CORE_MGT_MGT_STATUS_MON_t;

   type HAL_CORE_MGT_MGT_DRP_MON_t is record
      rd_rdy : std_logic;
      rd_data : std_logic_vector(16 - 1 downto 0);
   end record HAL_CORE_MGT_MGT_DRP_MON_t;
   attribute w of HAL_CORE_MGT_MGT_DRP_MON_t : type is 17;
   function width(x: HAL_CORE_MGT_MGT_DRP_MON_t) return natural;
   function convert(x: HAL_CORE_MGT_MGT_DRP_MON_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_DRP_MON_t) return HAL_CORE_MGT_MGT_DRP_MON_t;
   function zero(tpl: HAL_CORE_MGT_MGT_DRP_MON_t) return HAL_CORE_MGT_MGT_DRP_MON_t;

   type HAL_CORE_MGT_MGT_DRP_CTRL_t is record
      wr_en : std_logic;
      wr_addr : std_logic_vector(10 - 1 downto 0);
      en : std_logic;
      wr_data : std_logic_vector(16 - 1 downto 0);
   end record HAL_CORE_MGT_MGT_DRP_CTRL_t;
   attribute w of HAL_CORE_MGT_MGT_DRP_CTRL_t : type is 28;
   function width(x: HAL_CORE_MGT_MGT_DRP_CTRL_t) return natural;
   function convert(x: HAL_CORE_MGT_MGT_DRP_CTRL_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_DRP_CTRL_t) return HAL_CORE_MGT_MGT_DRP_CTRL_t;
   function zero(tpl: HAL_CORE_MGT_MGT_DRP_CTRL_t) return HAL_CORE_MGT_MGT_DRP_CTRL_t;

   type HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t is record
      reset : std_logic;
      reset_pll_and_datapath : std_logic;
      reset_datapath : std_logic;
      reset_bufbypass : std_logic;
   end record HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t;
   attribute w of HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t : type is 4;
   function width(x: HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t) return natural;
   function convert(x: HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t) return HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t;
   function zero(tpl: HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t) return HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t;

   type HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t is record
      reset : std_logic;
      reset_pll_and_datapath : std_logic;
      reset_datapath : std_logic;
      reset_bufbypass : std_logic;
   end record HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t;
   attribute w of HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t : type is 4;
   function width(x: HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t) return natural;
   function convert(x: HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t) return HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t;
   function zero(tpl: HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t) return HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t;

   type HAL_CORE_MGT_MGT_MON_t is record
      STATUS : HAL_CORE_MGT_MGT_STATUS_MON_t;
      DRP : HAL_CORE_MGT_MGT_DRP_MON_t;
   end record HAL_CORE_MGT_MGT_MON_t;
   attribute w of HAL_CORE_MGT_MGT_MON_t : type is 29;
   function width(x: HAL_CORE_MGT_MGT_MON_t) return natural;
   function convert(x: HAL_CORE_MGT_MGT_MON_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_MON_t) return HAL_CORE_MGT_MGT_MON_t;
   function zero(tpl: HAL_CORE_MGT_MGT_MON_t) return HAL_CORE_MGT_MGT_MON_t;

   type HAL_CORE_MGT_MGT_MON_t_ARRAY is array(128 -1 downto 0) of HAL_CORE_MGT_MGT_MON_t;
   attribute w of HAL_CORE_MGT_MGT_MON_t_ARRAY : type is 3712;
   function width(x: HAL_CORE_MGT_MGT_MON_t_ARRAY) return integer;
   function convert(x: HAL_CORE_MGT_MGT_MON_t_ARRAY; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_MON_t_ARRAY) return HAL_CORE_MGT_MGT_MON_t_ARRAY;
   function zero(tpl: HAL_CORE_MGT_MGT_MON_t_ARRAY) return HAL_CORE_MGT_MGT_MON_t_ARRAY;
   function convert(x: HAL_CORE_MGT_MGT_MON_t_ARRAY; tpl: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; tpl: HAL_CORE_MGT_MGT_MON_t_ARRAY) return HAL_CORE_MGT_MGT_MON_t_ARRAY;

   type HAL_CORE_MGT_MGT_CTRL_t is record
      DRP : HAL_CORE_MGT_MGT_DRP_CTRL_t;
      TX_RESETS : HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t;
      RX_RESETS : HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t;
   end record HAL_CORE_MGT_MGT_CTRL_t;
   attribute w of HAL_CORE_MGT_MGT_CTRL_t : type is 36;
   function width(x: HAL_CORE_MGT_MGT_CTRL_t) return natural;
   function convert(x: HAL_CORE_MGT_MGT_CTRL_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_CTRL_t) return HAL_CORE_MGT_MGT_CTRL_t;
   function zero(tpl: HAL_CORE_MGT_MGT_CTRL_t) return HAL_CORE_MGT_MGT_CTRL_t;

   type HAL_CORE_MGT_MGT_CTRL_t_ARRAY is array(128 -1 downto 0) of HAL_CORE_MGT_MGT_CTRL_t;
   attribute w of HAL_CORE_MGT_MGT_CTRL_t_ARRAY : type is 4608;
   function width(x: HAL_CORE_MGT_MGT_CTRL_t_ARRAY) return integer;
   function convert(x: HAL_CORE_MGT_MGT_CTRL_t_ARRAY; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_CTRL_t_ARRAY) return HAL_CORE_MGT_MGT_CTRL_t_ARRAY;
   function zero(tpl: HAL_CORE_MGT_MGT_CTRL_t_ARRAY) return HAL_CORE_MGT_MGT_CTRL_t_ARRAY;
   function convert(x: HAL_CORE_MGT_MGT_CTRL_t_ARRAY; tpl: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; tpl: HAL_CORE_MGT_MGT_CTRL_t_ARRAY) return HAL_CORE_MGT_MGT_CTRL_t_ARRAY;

   type HAL_CORE_MGT_MON_t is record
      MGT : HAL_CORE_MGT_MGT_MON_t_ARRAY;
      REFCLK_FREQ_0 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_1 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_2 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_3 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_4 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_5 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_6 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_7 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_8 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_9 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_10 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_11 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_12 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_13 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_14 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_15 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_16 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_17 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_18 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_19 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_20 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_21 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_22 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_23 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_24 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_25 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_26 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_27 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_28 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_29 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_30 : std_logic_vector(32 - 1 downto 0);
      REFCLK_FREQ_31 : std_logic_vector(32 - 1 downto 0);
   end record HAL_CORE_MGT_MON_t;
   attribute w of HAL_CORE_MGT_MON_t : type is 4736;
   function width(x: HAL_CORE_MGT_MON_t) return natural;
   function convert(x: HAL_CORE_MGT_MON_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MON_t) return HAL_CORE_MGT_MON_t;
   function zero(tpl: HAL_CORE_MGT_MON_t) return HAL_CORE_MGT_MON_t;

   type HAL_CORE_MGT_CTRL_t is record
      MGT : HAL_CORE_MGT_MGT_CTRL_t_ARRAY;
   end record HAL_CORE_MGT_CTRL_t;
   attribute w of HAL_CORE_MGT_CTRL_t : type is 4608;
   function width(x: HAL_CORE_MGT_CTRL_t) return natural;
   function convert(x: HAL_CORE_MGT_CTRL_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_CTRL_t) return HAL_CORE_MGT_CTRL_t;
   function zero(tpl: HAL_CORE_MGT_CTRL_t) return HAL_CORE_MGT_CTRL_t;

   type HAL_CORE_MON_t is record
      CLOCKING : HAL_CORE_CLOCKING_MON_t;
      MGT : HAL_CORE_MGT_MON_t;
   end record HAL_CORE_MON_t;
   attribute w of HAL_CORE_MON_t : type is 4737;
   function width(x: HAL_CORE_MON_t) return natural;
   function convert(x: HAL_CORE_MON_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MON_t) return HAL_CORE_MON_t;
   function zero(tpl: HAL_CORE_MON_t) return HAL_CORE_MON_t;

   type HAL_CORE_CTRL_t is record
      CLOCKING : HAL_CORE_CLOCKING_CTRL_t;
      MGT : HAL_CORE_MGT_CTRL_t;
   end record HAL_CORE_CTRL_t;
   attribute w of HAL_CORE_CTRL_t : type is 4609;
   function width(x: HAL_CORE_CTRL_t) return natural;
   function convert(x: HAL_CORE_CTRL_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: HAL_CORE_CTRL_t) return HAL_CORE_CTRL_t;
   function zero(tpl: HAL_CORE_CTRL_t) return HAL_CORE_CTRL_t;

end package HAL_CORE_CTRL;

------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.common_ieee_pkg.all;

package body HAL_CORE_CTRL is

   -- Custom types and functions --

   function width(x: HAL_CORE_CLOCKING_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.MMCM_LOCKED);
      return w;
   end function width;
   function convert(x: HAL_CORE_CLOCKING_MON_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.MMCM_LOCKED);
         y(u to u+w-1) := convert(x.MMCM_LOCKED, y(u to u+w-1));
      else
         w := width(x.MMCM_LOCKED);
         y(u downto u-w+1) := convert(x.MMCM_LOCKED, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: HAL_CORE_CLOCKING_MON_t) return HAL_CORE_CLOCKING_MON_t is
      variable y : HAL_CORE_CLOCKING_MON_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.MMCM_LOCKED);
         y.MMCM_LOCKED := convert(x(u to u+w-1), tpl.MMCM_LOCKED);
      else
         w := width(tpl.MMCM_LOCKED);
         y.MMCM_LOCKED := convert(x(u downto u-w+1), tpl.MMCM_LOCKED);
      end if;
      return y;
   end function convert;
   function zero(tpl: HAL_CORE_CLOCKING_MON_t) return HAL_CORE_CLOCKING_MON_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: HAL_CORE_CLOCKING_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.RESET_MMCM);
      return w;
   end function width;
   function convert(x: HAL_CORE_CLOCKING_CTRL_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.RESET_MMCM);
         y(u to u+w-1) := convert(x.RESET_MMCM, y(u to u+w-1));
      else
         w := width(x.RESET_MMCM);
         y(u downto u-w+1) := convert(x.RESET_MMCM, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: HAL_CORE_CLOCKING_CTRL_t) return HAL_CORE_CLOCKING_CTRL_t is
      variable y : HAL_CORE_CLOCKING_CTRL_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.RESET_MMCM);
         y.RESET_MMCM := convert(x(u to u+w-1), tpl.RESET_MMCM);
      else
         w := width(tpl.RESET_MMCM);
         y.RESET_MMCM := convert(x(u downto u-w+1), tpl.RESET_MMCM);
      end if;
      return y;
   end function convert;
   function zero(tpl: HAL_CORE_CLOCKING_CTRL_t) return HAL_CORE_CLOCKING_CTRL_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: HAL_CORE_MGT_MGT_STATUS_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.rxcdr_stable);
      w := w + width(x.powergood);
      w := w + width(x.txready);
      w := w + width(x.rxready);
      w := w + width(x.rx_pma_reset_done);
      w := w + width(x.tx_pma_reset_done);
      w := w + width(x.tx_reset_done);
      w := w + width(x.rx_reset_done);
      w := w + width(x.buffbypass_tx_done_out);
      w := w + width(x.buffbypass_tx_error_out);
      w := w + width(x.buffbypass_rx_done_out);
      w := w + width(x.buffbypass_rx_error_out);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_STATUS_MON_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.rxcdr_stable);
         y(u to u+w-1) := convert(x.rxcdr_stable, y(u to u+w-1));
         u := u + w;
         w := width(x.powergood);
         y(u to u+w-1) := convert(x.powergood, y(u to u+w-1));
         u := u + w;
         w := width(x.txready);
         y(u to u+w-1) := convert(x.txready, y(u to u+w-1));
         u := u + w;
         w := width(x.rxready);
         y(u to u+w-1) := convert(x.rxready, y(u to u+w-1));
         u := u + w;
         w := width(x.rx_pma_reset_done);
         y(u to u+w-1) := convert(x.rx_pma_reset_done, y(u to u+w-1));
         u := u + w;
         w := width(x.tx_pma_reset_done);
         y(u to u+w-1) := convert(x.tx_pma_reset_done, y(u to u+w-1));
         u := u + w;
         w := width(x.tx_reset_done);
         y(u to u+w-1) := convert(x.tx_reset_done, y(u to u+w-1));
         u := u + w;
         w := width(x.rx_reset_done);
         y(u to u+w-1) := convert(x.rx_reset_done, y(u to u+w-1));
         u := u + w;
         w := width(x.buffbypass_tx_done_out);
         y(u to u+w-1) := convert(x.buffbypass_tx_done_out, y(u to u+w-1));
         u := u + w;
         w := width(x.buffbypass_tx_error_out);
         y(u to u+w-1) := convert(x.buffbypass_tx_error_out, y(u to u+w-1));
         u := u + w;
         w := width(x.buffbypass_rx_done_out);
         y(u to u+w-1) := convert(x.buffbypass_rx_done_out, y(u to u+w-1));
         u := u + w;
         w := width(x.buffbypass_rx_error_out);
         y(u to u+w-1) := convert(x.buffbypass_rx_error_out, y(u to u+w-1));
      else
         w := width(x.rxcdr_stable);
         y(u downto u-w+1) := convert(x.rxcdr_stable, y(u downto u-w+1));
         u := u - w;
         w := width(x.powergood);
         y(u downto u-w+1) := convert(x.powergood, y(u downto u-w+1));
         u := u - w;
         w := width(x.txready);
         y(u downto u-w+1) := convert(x.txready, y(u downto u-w+1));
         u := u - w;
         w := width(x.rxready);
         y(u downto u-w+1) := convert(x.rxready, y(u downto u-w+1));
         u := u - w;
         w := width(x.rx_pma_reset_done);
         y(u downto u-w+1) := convert(x.rx_pma_reset_done, y(u downto u-w+1));
         u := u - w;
         w := width(x.tx_pma_reset_done);
         y(u downto u-w+1) := convert(x.tx_pma_reset_done, y(u downto u-w+1));
         u := u - w;
         w := width(x.tx_reset_done);
         y(u downto u-w+1) := convert(x.tx_reset_done, y(u downto u-w+1));
         u := u - w;
         w := width(x.rx_reset_done);
         y(u downto u-w+1) := convert(x.rx_reset_done, y(u downto u-w+1));
         u := u - w;
         w := width(x.buffbypass_tx_done_out);
         y(u downto u-w+1) := convert(x.buffbypass_tx_done_out, y(u downto u-w+1));
         u := u - w;
         w := width(x.buffbypass_tx_error_out);
         y(u downto u-w+1) := convert(x.buffbypass_tx_error_out, y(u downto u-w+1));
         u := u - w;
         w := width(x.buffbypass_rx_done_out);
         y(u downto u-w+1) := convert(x.buffbypass_rx_done_out, y(u downto u-w+1));
         u := u - w;
         w := width(x.buffbypass_rx_error_out);
         y(u downto u-w+1) := convert(x.buffbypass_rx_error_out, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_STATUS_MON_t) return HAL_CORE_MGT_MGT_STATUS_MON_t is
      variable y : HAL_CORE_MGT_MGT_STATUS_MON_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.rxcdr_stable);
         y.rxcdr_stable := convert(x(u to u+w-1), tpl.rxcdr_stable);
         u := u + w;
         w := width(tpl.powergood);
         y.powergood := convert(x(u to u+w-1), tpl.powergood);
         u := u + w;
         w := width(tpl.txready);
         y.txready := convert(x(u to u+w-1), tpl.txready);
         u := u + w;
         w := width(tpl.rxready);
         y.rxready := convert(x(u to u+w-1), tpl.rxready);
         u := u + w;
         w := width(tpl.rx_pma_reset_done);
         y.rx_pma_reset_done := convert(x(u to u+w-1), tpl.rx_pma_reset_done);
         u := u + w;
         w := width(tpl.tx_pma_reset_done);
         y.tx_pma_reset_done := convert(x(u to u+w-1), tpl.tx_pma_reset_done);
         u := u + w;
         w := width(tpl.tx_reset_done);
         y.tx_reset_done := convert(x(u to u+w-1), tpl.tx_reset_done);
         u := u + w;
         w := width(tpl.rx_reset_done);
         y.rx_reset_done := convert(x(u to u+w-1), tpl.rx_reset_done);
         u := u + w;
         w := width(tpl.buffbypass_tx_done_out);
         y.buffbypass_tx_done_out := convert(x(u to u+w-1), tpl.buffbypass_tx_done_out);
         u := u + w;
         w := width(tpl.buffbypass_tx_error_out);
         y.buffbypass_tx_error_out := convert(x(u to u+w-1), tpl.buffbypass_tx_error_out);
         u := u + w;
         w := width(tpl.buffbypass_rx_done_out);
         y.buffbypass_rx_done_out := convert(x(u to u+w-1), tpl.buffbypass_rx_done_out);
         u := u + w;
         w := width(tpl.buffbypass_rx_error_out);
         y.buffbypass_rx_error_out := convert(x(u to u+w-1), tpl.buffbypass_rx_error_out);
      else
         w := width(tpl.rxcdr_stable);
         y.rxcdr_stable := convert(x(u downto u-w+1), tpl.rxcdr_stable);
         u := u - w;
         w := width(tpl.powergood);
         y.powergood := convert(x(u downto u-w+1), tpl.powergood);
         u := u - w;
         w := width(tpl.txready);
         y.txready := convert(x(u downto u-w+1), tpl.txready);
         u := u - w;
         w := width(tpl.rxready);
         y.rxready := convert(x(u downto u-w+1), tpl.rxready);
         u := u - w;
         w := width(tpl.rx_pma_reset_done);
         y.rx_pma_reset_done := convert(x(u downto u-w+1), tpl.rx_pma_reset_done);
         u := u - w;
         w := width(tpl.tx_pma_reset_done);
         y.tx_pma_reset_done := convert(x(u downto u-w+1), tpl.tx_pma_reset_done);
         u := u - w;
         w := width(tpl.tx_reset_done);
         y.tx_reset_done := convert(x(u downto u-w+1), tpl.tx_reset_done);
         u := u - w;
         w := width(tpl.rx_reset_done);
         y.rx_reset_done := convert(x(u downto u-w+1), tpl.rx_reset_done);
         u := u - w;
         w := width(tpl.buffbypass_tx_done_out);
         y.buffbypass_tx_done_out := convert(x(u downto u-w+1), tpl.buffbypass_tx_done_out);
         u := u - w;
         w := width(tpl.buffbypass_tx_error_out);
         y.buffbypass_tx_error_out := convert(x(u downto u-w+1), tpl.buffbypass_tx_error_out);
         u := u - w;
         w := width(tpl.buffbypass_rx_done_out);
         y.buffbypass_rx_done_out := convert(x(u downto u-w+1), tpl.buffbypass_rx_done_out);
         u := u - w;
         w := width(tpl.buffbypass_rx_error_out);
         y.buffbypass_rx_error_out := convert(x(u downto u-w+1), tpl.buffbypass_rx_error_out);
      end if;
      return y;
   end function convert;
   function zero(tpl: HAL_CORE_MGT_MGT_STATUS_MON_t) return HAL_CORE_MGT_MGT_STATUS_MON_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: HAL_CORE_MGT_MGT_DRP_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.rd_rdy);
      w := w + width(x.rd_data);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_DRP_MON_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.rd_rdy);
         y(u to u+w-1) := convert(x.rd_rdy, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_data);
         y(u to u+w-1) := convert(x.rd_data, y(u to u+w-1));
      else
         w := width(x.rd_rdy);
         y(u downto u-w+1) := convert(x.rd_rdy, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_data);
         y(u downto u-w+1) := convert(x.rd_data, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_DRP_MON_t) return HAL_CORE_MGT_MGT_DRP_MON_t is
      variable y : HAL_CORE_MGT_MGT_DRP_MON_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.rd_rdy);
         y.rd_rdy := convert(x(u to u+w-1), tpl.rd_rdy);
         u := u + w;
         w := width(tpl.rd_data);
         y.rd_data := convert(x(u to u+w-1), tpl.rd_data);
      else
         w := width(tpl.rd_rdy);
         y.rd_rdy := convert(x(u downto u-w+1), tpl.rd_rdy);
         u := u - w;
         w := width(tpl.rd_data);
         y.rd_data := convert(x(u downto u-w+1), tpl.rd_data);
      end if;
      return y;
   end function convert;
   function zero(tpl: HAL_CORE_MGT_MGT_DRP_MON_t) return HAL_CORE_MGT_MGT_DRP_MON_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: HAL_CORE_MGT_MGT_DRP_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.wr_en);
      w := w + width(x.wr_addr);
      w := w + width(x.en);
      w := w + width(x.wr_data);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_DRP_CTRL_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.wr_en);
         y(u to u+w-1) := convert(x.wr_en, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_addr);
         y(u to u+w-1) := convert(x.wr_addr, y(u to u+w-1));
         u := u + w;
         w := width(x.en);
         y(u to u+w-1) := convert(x.en, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_data);
         y(u to u+w-1) := convert(x.wr_data, y(u to u+w-1));
      else
         w := width(x.wr_en);
         y(u downto u-w+1) := convert(x.wr_en, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_addr);
         y(u downto u-w+1) := convert(x.wr_addr, y(u downto u-w+1));
         u := u - w;
         w := width(x.en);
         y(u downto u-w+1) := convert(x.en, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_data);
         y(u downto u-w+1) := convert(x.wr_data, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_DRP_CTRL_t) return HAL_CORE_MGT_MGT_DRP_CTRL_t is
      variable y : HAL_CORE_MGT_MGT_DRP_CTRL_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.wr_en);
         y.wr_en := convert(x(u to u+w-1), tpl.wr_en);
         u := u + w;
         w := width(tpl.wr_addr);
         y.wr_addr := convert(x(u to u+w-1), tpl.wr_addr);
         u := u + w;
         w := width(tpl.en);
         y.en := convert(x(u to u+w-1), tpl.en);
         u := u + w;
         w := width(tpl.wr_data);
         y.wr_data := convert(x(u to u+w-1), tpl.wr_data);
      else
         w := width(tpl.wr_en);
         y.wr_en := convert(x(u downto u-w+1), tpl.wr_en);
         u := u - w;
         w := width(tpl.wr_addr);
         y.wr_addr := convert(x(u downto u-w+1), tpl.wr_addr);
         u := u - w;
         w := width(tpl.en);
         y.en := convert(x(u downto u-w+1), tpl.en);
         u := u - w;
         w := width(tpl.wr_data);
         y.wr_data := convert(x(u downto u-w+1), tpl.wr_data);
      end if;
      return y;
   end function convert;
   function zero(tpl: HAL_CORE_MGT_MGT_DRP_CTRL_t) return HAL_CORE_MGT_MGT_DRP_CTRL_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.reset);
      w := w + width(x.reset_pll_and_datapath);
      w := w + width(x.reset_datapath);
      w := w + width(x.reset_bufbypass);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.reset);
         y(u to u+w-1) := convert(x.reset, y(u to u+w-1));
         u := u + w;
         w := width(x.reset_pll_and_datapath);
         y(u to u+w-1) := convert(x.reset_pll_and_datapath, y(u to u+w-1));
         u := u + w;
         w := width(x.reset_datapath);
         y(u to u+w-1) := convert(x.reset_datapath, y(u to u+w-1));
         u := u + w;
         w := width(x.reset_bufbypass);
         y(u to u+w-1) := convert(x.reset_bufbypass, y(u to u+w-1));
      else
         w := width(x.reset);
         y(u downto u-w+1) := convert(x.reset, y(u downto u-w+1));
         u := u - w;
         w := width(x.reset_pll_and_datapath);
         y(u downto u-w+1) := convert(x.reset_pll_and_datapath, y(u downto u-w+1));
         u := u - w;
         w := width(x.reset_datapath);
         y(u downto u-w+1) := convert(x.reset_datapath, y(u downto u-w+1));
         u := u - w;
         w := width(x.reset_bufbypass);
         y(u downto u-w+1) := convert(x.reset_bufbypass, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t) return HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t is
      variable y : HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.reset);
         y.reset := convert(x(u to u+w-1), tpl.reset);
         u := u + w;
         w := width(tpl.reset_pll_and_datapath);
         y.reset_pll_and_datapath := convert(x(u to u+w-1), tpl.reset_pll_and_datapath);
         u := u + w;
         w := width(tpl.reset_datapath);
         y.reset_datapath := convert(x(u to u+w-1), tpl.reset_datapath);
         u := u + w;
         w := width(tpl.reset_bufbypass);
         y.reset_bufbypass := convert(x(u to u+w-1), tpl.reset_bufbypass);
      else
         w := width(tpl.reset);
         y.reset := convert(x(u downto u-w+1), tpl.reset);
         u := u - w;
         w := width(tpl.reset_pll_and_datapath);
         y.reset_pll_and_datapath := convert(x(u downto u-w+1), tpl.reset_pll_and_datapath);
         u := u - w;
         w := width(tpl.reset_datapath);
         y.reset_datapath := convert(x(u downto u-w+1), tpl.reset_datapath);
         u := u - w;
         w := width(tpl.reset_bufbypass);
         y.reset_bufbypass := convert(x(u downto u-w+1), tpl.reset_bufbypass);
      end if;
      return y;
   end function convert;
   function zero(tpl: HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t) return HAL_CORE_MGT_MGT_TX_RESETS_CTRL_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.reset);
      w := w + width(x.reset_pll_and_datapath);
      w := w + width(x.reset_datapath);
      w := w + width(x.reset_bufbypass);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.reset);
         y(u to u+w-1) := convert(x.reset, y(u to u+w-1));
         u := u + w;
         w := width(x.reset_pll_and_datapath);
         y(u to u+w-1) := convert(x.reset_pll_and_datapath, y(u to u+w-1));
         u := u + w;
         w := width(x.reset_datapath);
         y(u to u+w-1) := convert(x.reset_datapath, y(u to u+w-1));
         u := u + w;
         w := width(x.reset_bufbypass);
         y(u to u+w-1) := convert(x.reset_bufbypass, y(u to u+w-1));
      else
         w := width(x.reset);
         y(u downto u-w+1) := convert(x.reset, y(u downto u-w+1));
         u := u - w;
         w := width(x.reset_pll_and_datapath);
         y(u downto u-w+1) := convert(x.reset_pll_and_datapath, y(u downto u-w+1));
         u := u - w;
         w := width(x.reset_datapath);
         y(u downto u-w+1) := convert(x.reset_datapath, y(u downto u-w+1));
         u := u - w;
         w := width(x.reset_bufbypass);
         y(u downto u-w+1) := convert(x.reset_bufbypass, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t) return HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t is
      variable y : HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.reset);
         y.reset := convert(x(u to u+w-1), tpl.reset);
         u := u + w;
         w := width(tpl.reset_pll_and_datapath);
         y.reset_pll_and_datapath := convert(x(u to u+w-1), tpl.reset_pll_and_datapath);
         u := u + w;
         w := width(tpl.reset_datapath);
         y.reset_datapath := convert(x(u to u+w-1), tpl.reset_datapath);
         u := u + w;
         w := width(tpl.reset_bufbypass);
         y.reset_bufbypass := convert(x(u to u+w-1), tpl.reset_bufbypass);
      else
         w := width(tpl.reset);
         y.reset := convert(x(u downto u-w+1), tpl.reset);
         u := u - w;
         w := width(tpl.reset_pll_and_datapath);
         y.reset_pll_and_datapath := convert(x(u downto u-w+1), tpl.reset_pll_and_datapath);
         u := u - w;
         w := width(tpl.reset_datapath);
         y.reset_datapath := convert(x(u downto u-w+1), tpl.reset_datapath);
         u := u - w;
         w := width(tpl.reset_bufbypass);
         y.reset_bufbypass := convert(x(u downto u-w+1), tpl.reset_bufbypass);
      end if;
      return y;
   end function convert;
   function zero(tpl: HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t) return HAL_CORE_MGT_MGT_RX_RESETS_CTRL_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: HAL_CORE_MGT_MGT_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.STATUS);
      w := w + width(x.DRP);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_MON_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.STATUS);
         y(u to u+w-1) := convert(x.STATUS, y(u to u+w-1));
         u := u + w;
         w := width(x.DRP);
         y(u to u+w-1) := convert(x.DRP, y(u to u+w-1));
      else
         w := width(x.STATUS);
         y(u downto u-w+1) := convert(x.STATUS, y(u downto u-w+1));
         u := u - w;
         w := width(x.DRP);
         y(u downto u-w+1) := convert(x.DRP, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_MON_t) return HAL_CORE_MGT_MGT_MON_t is
      variable y : HAL_CORE_MGT_MGT_MON_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.STATUS);
         y.STATUS := convert(x(u to u+w-1), tpl.STATUS);
         u := u + w;
         w := width(tpl.DRP);
         y.DRP := convert(x(u to u+w-1), tpl.DRP);
      else
         w := width(tpl.STATUS);
         y.STATUS := convert(x(u downto u-w+1), tpl.STATUS);
         u := u - w;
         w := width(tpl.DRP);
         y.DRP := convert(x(u downto u-w+1), tpl.DRP);
      end if;
      return y;
   end function convert;
   function zero(tpl: HAL_CORE_MGT_MGT_MON_t) return HAL_CORE_MGT_MGT_MON_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: HAL_CORE_MGT_MGT_MON_t_ARRAY) return integer is
      variable w : integer;
   begin
      if x'length < 1 then
        w := 0;
      else
        w := x'length * width(x(x'low));
      end if;
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_MON_t_ARRAY; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_MON_t_ARRAY) return HAL_CORE_MGT_MGT_MON_t_ARRAY is
      variable y : HAL_CORE_MGT_MGT_MON_t_ARRAY;
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function zero(tpl: HAL_CORE_MGT_MGT_MON_t_ARRAY) return HAL_CORE_MGT_MGT_MON_t_ARRAY is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;
   function convert(x: HAL_CORE_MGT_MGT_MON_t_ARRAY; tpl: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(tpl'range)(tpl(tpl'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; tpl: HAL_CORE_MGT_MGT_MON_t_ARRAY) return HAL_CORE_MGT_MGT_MON_t_ARRAY is
      variable y : HAL_CORE_MGT_MGT_MON_t_ARRAY;
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: HAL_CORE_MGT_MGT_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.DRP);
      w := w + width(x.TX_RESETS);
      w := w + width(x.RX_RESETS);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_CTRL_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.DRP);
         y(u to u+w-1) := convert(x.DRP, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_RESETS);
         y(u to u+w-1) := convert(x.TX_RESETS, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_RESETS);
         y(u to u+w-1) := convert(x.RX_RESETS, y(u to u+w-1));
      else
         w := width(x.DRP);
         y(u downto u-w+1) := convert(x.DRP, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_RESETS);
         y(u downto u-w+1) := convert(x.TX_RESETS, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_RESETS);
         y(u downto u-w+1) := convert(x.RX_RESETS, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_CTRL_t) return HAL_CORE_MGT_MGT_CTRL_t is
      variable y : HAL_CORE_MGT_MGT_CTRL_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.DRP);
         y.DRP := convert(x(u to u+w-1), tpl.DRP);
         u := u + w;
         w := width(tpl.TX_RESETS);
         y.TX_RESETS := convert(x(u to u+w-1), tpl.TX_RESETS);
         u := u + w;
         w := width(tpl.RX_RESETS);
         y.RX_RESETS := convert(x(u to u+w-1), tpl.RX_RESETS);
      else
         w := width(tpl.DRP);
         y.DRP := convert(x(u downto u-w+1), tpl.DRP);
         u := u - w;
         w := width(tpl.TX_RESETS);
         y.TX_RESETS := convert(x(u downto u-w+1), tpl.TX_RESETS);
         u := u - w;
         w := width(tpl.RX_RESETS);
         y.RX_RESETS := convert(x(u downto u-w+1), tpl.RX_RESETS);
      end if;
      return y;
   end function convert;
   function zero(tpl: HAL_CORE_MGT_MGT_CTRL_t) return HAL_CORE_MGT_MGT_CTRL_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: HAL_CORE_MGT_MGT_CTRL_t_ARRAY) return integer is
      variable w : integer;
   begin
      if x'length < 1 then
        w := 0;
      else
        w := x'length * width(x(x'low));
      end if;
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MGT_CTRL_t_ARRAY; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MGT_CTRL_t_ARRAY) return HAL_CORE_MGT_MGT_CTRL_t_ARRAY is
      variable y : HAL_CORE_MGT_MGT_CTRL_t_ARRAY;
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function zero(tpl: HAL_CORE_MGT_MGT_CTRL_t_ARRAY) return HAL_CORE_MGT_MGT_CTRL_t_ARRAY is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;
   function convert(x: HAL_CORE_MGT_MGT_CTRL_t_ARRAY; tpl: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(tpl'range)(tpl(tpl'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; tpl: HAL_CORE_MGT_MGT_CTRL_t_ARRAY) return HAL_CORE_MGT_MGT_CTRL_t_ARRAY is
      variable y : HAL_CORE_MGT_MGT_CTRL_t_ARRAY;
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: HAL_CORE_MGT_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.MGT);
      w := w + width(x.REFCLK_FREQ_0);
      w := w + width(x.REFCLK_FREQ_1);
      w := w + width(x.REFCLK_FREQ_2);
      w := w + width(x.REFCLK_FREQ_3);
      w := w + width(x.REFCLK_FREQ_4);
      w := w + width(x.REFCLK_FREQ_5);
      w := w + width(x.REFCLK_FREQ_6);
      w := w + width(x.REFCLK_FREQ_7);
      w := w + width(x.REFCLK_FREQ_8);
      w := w + width(x.REFCLK_FREQ_9);
      w := w + width(x.REFCLK_FREQ_10);
      w := w + width(x.REFCLK_FREQ_11);
      w := w + width(x.REFCLK_FREQ_12);
      w := w + width(x.REFCLK_FREQ_13);
      w := w + width(x.REFCLK_FREQ_14);
      w := w + width(x.REFCLK_FREQ_15);
      w := w + width(x.REFCLK_FREQ_16);
      w := w + width(x.REFCLK_FREQ_17);
      w := w + width(x.REFCLK_FREQ_18);
      w := w + width(x.REFCLK_FREQ_19);
      w := w + width(x.REFCLK_FREQ_20);
      w := w + width(x.REFCLK_FREQ_21);
      w := w + width(x.REFCLK_FREQ_22);
      w := w + width(x.REFCLK_FREQ_23);
      w := w + width(x.REFCLK_FREQ_24);
      w := w + width(x.REFCLK_FREQ_25);
      w := w + width(x.REFCLK_FREQ_26);
      w := w + width(x.REFCLK_FREQ_27);
      w := w + width(x.REFCLK_FREQ_28);
      w := w + width(x.REFCLK_FREQ_29);
      w := w + width(x.REFCLK_FREQ_30);
      w := w + width(x.REFCLK_FREQ_31);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_MON_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.MGT);
         y(u to u+w-1) := convert(x.MGT, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_0);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_0, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_1);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_1, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_2);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_2, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_3);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_3, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_4);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_4, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_5);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_5, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_6);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_6, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_7);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_7, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_8);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_8, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_9);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_9, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_10);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_10, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_11);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_11, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_12);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_12, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_13);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_13, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_14);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_14, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_15);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_15, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_16);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_16, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_17);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_17, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_18);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_18, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_19);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_19, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_20);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_20, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_21);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_21, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_22);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_22, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_23);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_23, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_24);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_24, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_25);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_25, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_26);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_26, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_27);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_27, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_28);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_28, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_29);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_29, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_30);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_30, y(u to u+w-1));
         u := u + w;
         w := width(x.REFCLK_FREQ_31);
         y(u to u+w-1) := convert(x.REFCLK_FREQ_31, y(u to u+w-1));
      else
         w := width(x.MGT);
         y(u downto u-w+1) := convert(x.MGT, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_0);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_0, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_1);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_1, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_2);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_2, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_3);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_3, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_4);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_4, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_5);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_5, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_6);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_6, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_7);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_7, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_8);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_8, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_9);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_9, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_10);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_10, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_11);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_11, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_12);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_12, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_13);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_13, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_14);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_14, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_15);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_15, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_16);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_16, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_17);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_17, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_18);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_18, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_19);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_19, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_20);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_20, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_21);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_21, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_22);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_22, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_23);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_23, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_24);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_24, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_25);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_25, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_26);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_26, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_27);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_27, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_28);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_28, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_29);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_29, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_30);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_30, y(u downto u-w+1));
         u := u - w;
         w := width(x.REFCLK_FREQ_31);
         y(u downto u-w+1) := convert(x.REFCLK_FREQ_31, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_MON_t) return HAL_CORE_MGT_MON_t is
      variable y : HAL_CORE_MGT_MON_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.MGT);
         y.MGT := convert(x(u to u+w-1), tpl.MGT);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_0);
         y.REFCLK_FREQ_0 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_0);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_1);
         y.REFCLK_FREQ_1 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_1);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_2);
         y.REFCLK_FREQ_2 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_2);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_3);
         y.REFCLK_FREQ_3 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_3);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_4);
         y.REFCLK_FREQ_4 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_4);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_5);
         y.REFCLK_FREQ_5 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_5);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_6);
         y.REFCLK_FREQ_6 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_6);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_7);
         y.REFCLK_FREQ_7 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_7);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_8);
         y.REFCLK_FREQ_8 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_8);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_9);
         y.REFCLK_FREQ_9 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_9);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_10);
         y.REFCLK_FREQ_10 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_10);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_11);
         y.REFCLK_FREQ_11 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_11);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_12);
         y.REFCLK_FREQ_12 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_12);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_13);
         y.REFCLK_FREQ_13 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_13);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_14);
         y.REFCLK_FREQ_14 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_14);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_15);
         y.REFCLK_FREQ_15 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_15);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_16);
         y.REFCLK_FREQ_16 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_16);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_17);
         y.REFCLK_FREQ_17 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_17);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_18);
         y.REFCLK_FREQ_18 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_18);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_19);
         y.REFCLK_FREQ_19 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_19);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_20);
         y.REFCLK_FREQ_20 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_20);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_21);
         y.REFCLK_FREQ_21 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_21);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_22);
         y.REFCLK_FREQ_22 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_22);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_23);
         y.REFCLK_FREQ_23 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_23);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_24);
         y.REFCLK_FREQ_24 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_24);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_25);
         y.REFCLK_FREQ_25 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_25);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_26);
         y.REFCLK_FREQ_26 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_26);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_27);
         y.REFCLK_FREQ_27 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_27);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_28);
         y.REFCLK_FREQ_28 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_28);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_29);
         y.REFCLK_FREQ_29 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_29);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_30);
         y.REFCLK_FREQ_30 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_30);
         u := u + w;
         w := width(tpl.REFCLK_FREQ_31);
         y.REFCLK_FREQ_31 := convert(x(u to u+w-1), tpl.REFCLK_FREQ_31);
      else
         w := width(tpl.MGT);
         y.MGT := convert(x(u downto u-w+1), tpl.MGT);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_0);
         y.REFCLK_FREQ_0 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_0);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_1);
         y.REFCLK_FREQ_1 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_1);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_2);
         y.REFCLK_FREQ_2 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_2);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_3);
         y.REFCLK_FREQ_3 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_3);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_4);
         y.REFCLK_FREQ_4 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_4);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_5);
         y.REFCLK_FREQ_5 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_5);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_6);
         y.REFCLK_FREQ_6 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_6);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_7);
         y.REFCLK_FREQ_7 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_7);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_8);
         y.REFCLK_FREQ_8 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_8);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_9);
         y.REFCLK_FREQ_9 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_9);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_10);
         y.REFCLK_FREQ_10 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_10);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_11);
         y.REFCLK_FREQ_11 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_11);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_12);
         y.REFCLK_FREQ_12 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_12);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_13);
         y.REFCLK_FREQ_13 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_13);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_14);
         y.REFCLK_FREQ_14 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_14);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_15);
         y.REFCLK_FREQ_15 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_15);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_16);
         y.REFCLK_FREQ_16 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_16);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_17);
         y.REFCLK_FREQ_17 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_17);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_18);
         y.REFCLK_FREQ_18 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_18);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_19);
         y.REFCLK_FREQ_19 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_19);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_20);
         y.REFCLK_FREQ_20 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_20);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_21);
         y.REFCLK_FREQ_21 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_21);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_22);
         y.REFCLK_FREQ_22 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_22);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_23);
         y.REFCLK_FREQ_23 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_23);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_24);
         y.REFCLK_FREQ_24 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_24);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_25);
         y.REFCLK_FREQ_25 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_25);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_26);
         y.REFCLK_FREQ_26 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_26);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_27);
         y.REFCLK_FREQ_27 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_27);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_28);
         y.REFCLK_FREQ_28 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_28);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_29);
         y.REFCLK_FREQ_29 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_29);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_30);
         y.REFCLK_FREQ_30 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_30);
         u := u - w;
         w := width(tpl.REFCLK_FREQ_31);
         y.REFCLK_FREQ_31 := convert(x(u downto u-w+1), tpl.REFCLK_FREQ_31);
      end if;
      return y;
   end function convert;
   function zero(tpl: HAL_CORE_MGT_MON_t) return HAL_CORE_MGT_MON_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: HAL_CORE_MGT_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.MGT);
      return w;
   end function width;
   function convert(x: HAL_CORE_MGT_CTRL_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.MGT);
         y(u to u+w-1) := convert(x.MGT, y(u to u+w-1));
      else
         w := width(x.MGT);
         y(u downto u-w+1) := convert(x.MGT, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MGT_CTRL_t) return HAL_CORE_MGT_CTRL_t is
      variable y : HAL_CORE_MGT_CTRL_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.MGT);
         y.MGT := convert(x(u to u+w-1), tpl.MGT);
      else
         w := width(tpl.MGT);
         y.MGT := convert(x(u downto u-w+1), tpl.MGT);
      end if;
      return y;
   end function convert;
   function zero(tpl: HAL_CORE_MGT_CTRL_t) return HAL_CORE_MGT_CTRL_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: HAL_CORE_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.CLOCKING);
      w := w + width(x.MGT);
      return w;
   end function width;
   function convert(x: HAL_CORE_MON_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.CLOCKING);
         y(u to u+w-1) := convert(x.CLOCKING, y(u to u+w-1));
         u := u + w;
         w := width(x.MGT);
         y(u to u+w-1) := convert(x.MGT, y(u to u+w-1));
      else
         w := width(x.CLOCKING);
         y(u downto u-w+1) := convert(x.CLOCKING, y(u downto u-w+1));
         u := u - w;
         w := width(x.MGT);
         y(u downto u-w+1) := convert(x.MGT, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: HAL_CORE_MON_t) return HAL_CORE_MON_t is
      variable y : HAL_CORE_MON_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.CLOCKING);
         y.CLOCKING := convert(x(u to u+w-1), tpl.CLOCKING);
         u := u + w;
         w := width(tpl.MGT);
         y.MGT := convert(x(u to u+w-1), tpl.MGT);
      else
         w := width(tpl.CLOCKING);
         y.CLOCKING := convert(x(u downto u-w+1), tpl.CLOCKING);
         u := u - w;
         w := width(tpl.MGT);
         y.MGT := convert(x(u downto u-w+1), tpl.MGT);
      end if;
      return y;
   end function convert;
   function zero(tpl: HAL_CORE_MON_t) return HAL_CORE_MON_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: HAL_CORE_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.CLOCKING);
      w := w + width(x.MGT);
      return w;
   end function width;
   function convert(x: HAL_CORE_CTRL_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.CLOCKING);
         y(u to u+w-1) := convert(x.CLOCKING, y(u to u+w-1));
         u := u + w;
         w := width(x.MGT);
         y(u to u+w-1) := convert(x.MGT, y(u to u+w-1));
      else
         w := width(x.CLOCKING);
         y(u downto u-w+1) := convert(x.CLOCKING, y(u downto u-w+1));
         u := u - w;
         w := width(x.MGT);
         y(u downto u-w+1) := convert(x.MGT, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: HAL_CORE_CTRL_t) return HAL_CORE_CTRL_t is
      variable y : HAL_CORE_CTRL_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.CLOCKING);
         y.CLOCKING := convert(x(u to u+w-1), tpl.CLOCKING);
         u := u + w;
         w := width(tpl.MGT);
         y.MGT := convert(x(u to u+w-1), tpl.MGT);
      else
         w := width(tpl.CLOCKING);
         y.CLOCKING := convert(x(u downto u-w+1), tpl.CLOCKING);
         u := u - w;
         w := width(tpl.MGT);
         y.MGT := convert(x(u downto u-w+1), tpl.MGT);
      end if;
      return y;
   end function convert;
   function zero(tpl: HAL_CORE_CTRL_t) return HAL_CORE_CTRL_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

end package body HAL_CORE_CTRL;
