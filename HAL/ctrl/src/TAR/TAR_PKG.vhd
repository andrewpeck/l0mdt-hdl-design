-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl

library ieee;

use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;

use shared_lib.common_ieee.all;

package TAR_CTRL is

  type TAR_ACTIONS_CTRL_t is record
    RESET : std_logic;
    ENABLE : std_logic;
    DISABLE : std_logic;
    FREEZE : std_logic;
  end record TAR_ACTIONS_CTRL_t;
  function len(x: TAR_ACTIONS_CTRL_t) return natural;
  function width(x: TAR_ACTIONS_CTRL_t) return natural;
  function vectorify(x: TAR_ACTIONS_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_ACTIONS_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_ACTIONS_CTRL_t) return TAR_ACTIONS_CTRL_t;
  function convert(x: in std_logic_vector; t: TAR_ACTIONS_CTRL_t) return TAR_ACTIONS_CTRL_t;
  function nullify(t: TAR_ACTIONS_CTRL_t) return TAR_ACTIONS_CTRL_t;
  function zeroed(t: TAR_ACTIONS_CTRL_t) return TAR_ACTIONS_CTRL_t;

  type TAR_CONFIGS_CTRL_t is record
    INPUT_EN : std_logic;
    OUTPUT_EN : std_logic;
    FLUSH_MEM_RESET : std_logic;
  end record TAR_CONFIGS_CTRL_t;
  function len(x: TAR_CONFIGS_CTRL_t) return natural;
  function width(x: TAR_CONFIGS_CTRL_t) return natural;
  function vectorify(x: TAR_CONFIGS_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_CONFIGS_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_CONFIGS_CTRL_t) return TAR_CONFIGS_CTRL_t;
  function convert(x: in std_logic_vector; t: TAR_CONFIGS_CTRL_t) return TAR_CONFIGS_CTRL_t;
  function nullify(t: TAR_CONFIGS_CTRL_t) return TAR_CONFIGS_CTRL_t;
  function zeroed(t: TAR_CONFIGS_CTRL_t) return TAR_CONFIGS_CTRL_t;

  type TAR_STATUS_MON_t is record
    ENABLED : std_logic;
    READY : std_logic;
    ERROR : std_logic_vector(8-1 downto 0);
  end record TAR_STATUS_MON_t;
  function len(x: TAR_STATUS_MON_t) return natural;
  function width(x: TAR_STATUS_MON_t) return natural;
  function vectorify(x: TAR_STATUS_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_STATUS_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_STATUS_MON_t) return TAR_STATUS_MON_t;
  function convert(x: in std_logic_vector; t: TAR_STATUS_MON_t) return TAR_STATUS_MON_t;
  function nullify(t: TAR_STATUS_MON_t) return TAR_STATUS_MON_t;
  function zeroed(t: TAR_STATUS_MON_t) return TAR_STATUS_MON_t;

  type TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t is record
    rd_rdy : std_logic;
    freeze_ena : std_logic;
  end record TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t;
  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t) return natural;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t) return natural;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t;
  function nullify(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t;
  function zeroed(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t;

  type TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t is record
    wr_req : std_logic;
    wr_ack : std_logic;
    rd_req : std_logic;
    rd_ack : std_logic;
    flush_req : std_logic;
    freeze_req : std_logic;
    mem_sel : std_logic_vector(3-1 downto 0);
  end record TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t;
  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t) return natural;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t) return natural;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t;
  function nullify(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t;
  function zeroed(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t;

  type TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t is record
    wr_data_0 : std_logic_vector(32-1 downto 0);
    wr_data_1 : std_logic_vector(10-1 downto 0);
  end record TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t;
  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t) return natural;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t) return natural;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t;
  function nullify(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t;
  function zeroed(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t;

  type TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t is record
    rd_data_0 : std_logic_vector(32-1 downto 0);
    rd_data_1 : std_logic_vector(10-1 downto 0);
  end record TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t;
  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t) return natural;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t) return natural;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t;
  function nullify(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t;
  function zeroed(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t;

  type TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t is record
    SIGNALS : TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t;
    rd_data : TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t;
  end record TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t;
  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t) return natural;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t) return natural;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t;
  function nullify(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t;
  function zeroed(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t;

  type TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY is array(6-1 downto 0) of TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t;
  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY) return natural;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY) return natural;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY;
  function convert(x: std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY;
  function nullify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY;
  function zeroed(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY;

  type TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t is record
    SIGNALS : TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t;
    wr_addr : std_logic_vector(12-1 downto 0);
    rd_addr : std_logic_vector(12-1 downto 0);
    wr_data : TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t;
  end record TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t;
  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t) return natural;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t) return natural;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t;
  function nullify(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t;
  function zeroed(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t;

  type TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY is array(6-1 downto 0) of TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t;
  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY) return natural;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY) return natural;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY;
  function convert(x: std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY;
  function nullify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY;
  function zeroed(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY;

  type TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t is record
    PL_MEM : TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY;
  end record TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t;
  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t) return natural;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t) return natural;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t;
  function nullify(t: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t;
  function zeroed(t: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t;

  type TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t is record
    PL_MEM : TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY;
  end record TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t;
  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t) return natural;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t) return natural;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t;
  function nullify(t: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t;
  function zeroed(t: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t;

  type TAR_PL_ST_PL_ST_MON_t is record
    PL_CHAMBER : TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t;
  end record TAR_PL_ST_PL_ST_MON_t;
  function len(x: TAR_PL_ST_PL_ST_MON_t) return natural;
  function width(x: TAR_PL_ST_PL_ST_MON_t) return natural;
  function vectorify(x: TAR_PL_ST_PL_ST_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_PL_ST_PL_ST_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_MON_t) return TAR_PL_ST_PL_ST_MON_t;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_MON_t) return TAR_PL_ST_PL_ST_MON_t;
  function nullify(t: TAR_PL_ST_PL_ST_MON_t) return TAR_PL_ST_PL_ST_MON_t;
  function zeroed(t: TAR_PL_ST_PL_ST_MON_t) return TAR_PL_ST_PL_ST_MON_t;

  type TAR_PL_ST_PL_ST_MON_t_ARRAY is array(4-1 downto 0) of TAR_PL_ST_PL_ST_MON_t;
  function len(x: TAR_PL_ST_PL_ST_MON_t_ARRAY) return natural;
  function width(x: TAR_PL_ST_PL_ST_MON_t_ARRAY) return natural;
  function vectorify(x: TAR_PL_ST_PL_ST_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_PL_ST_PL_ST_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: TAR_PL_ST_PL_ST_MON_t_ARRAY) return TAR_PL_ST_PL_ST_MON_t_ARRAY;
  function convert(x: std_logic_vector; t: TAR_PL_ST_PL_ST_MON_t_ARRAY) return TAR_PL_ST_PL_ST_MON_t_ARRAY;
  function nullify(x: TAR_PL_ST_PL_ST_MON_t_ARRAY) return TAR_PL_ST_PL_ST_MON_t_ARRAY;
  function zeroed(x: TAR_PL_ST_PL_ST_MON_t_ARRAY) return TAR_PL_ST_PL_ST_MON_t_ARRAY;

  type TAR_PL_ST_PL_ST_CTRL_t is record
    PL_CHAMBER : TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t;
  end record TAR_PL_ST_PL_ST_CTRL_t;
  function len(x: TAR_PL_ST_PL_ST_CTRL_t) return natural;
  function width(x: TAR_PL_ST_PL_ST_CTRL_t) return natural;
  function vectorify(x: TAR_PL_ST_PL_ST_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_PL_ST_PL_ST_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_CTRL_t) return TAR_PL_ST_PL_ST_CTRL_t;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_CTRL_t) return TAR_PL_ST_PL_ST_CTRL_t;
  function nullify(t: TAR_PL_ST_PL_ST_CTRL_t) return TAR_PL_ST_PL_ST_CTRL_t;
  function zeroed(t: TAR_PL_ST_PL_ST_CTRL_t) return TAR_PL_ST_PL_ST_CTRL_t;

  type TAR_PL_ST_PL_ST_CTRL_t_ARRAY is array(4-1 downto 0) of TAR_PL_ST_PL_ST_CTRL_t;
  function len(x: TAR_PL_ST_PL_ST_CTRL_t_ARRAY) return natural;
  function width(x: TAR_PL_ST_PL_ST_CTRL_t_ARRAY) return natural;
  function vectorify(x: TAR_PL_ST_PL_ST_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_PL_ST_PL_ST_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: TAR_PL_ST_PL_ST_CTRL_t_ARRAY) return TAR_PL_ST_PL_ST_CTRL_t_ARRAY;
  function convert(x: std_logic_vector; t: TAR_PL_ST_PL_ST_CTRL_t_ARRAY) return TAR_PL_ST_PL_ST_CTRL_t_ARRAY;
  function nullify(x: TAR_PL_ST_PL_ST_CTRL_t_ARRAY) return TAR_PL_ST_PL_ST_CTRL_t_ARRAY;
  function zeroed(x: TAR_PL_ST_PL_ST_CTRL_t_ARRAY) return TAR_PL_ST_PL_ST_CTRL_t_ARRAY;

  type TAR_PL_ST_MON_t is record
    PL_ST : TAR_PL_ST_PL_ST_MON_t_ARRAY;
  end record TAR_PL_ST_MON_t;
  function len(x: TAR_PL_ST_MON_t) return natural;
  function width(x: TAR_PL_ST_MON_t) return natural;
  function vectorify(x: TAR_PL_ST_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_PL_ST_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_MON_t) return TAR_PL_ST_MON_t;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_MON_t) return TAR_PL_ST_MON_t;
  function nullify(t: TAR_PL_ST_MON_t) return TAR_PL_ST_MON_t;
  function zeroed(t: TAR_PL_ST_MON_t) return TAR_PL_ST_MON_t;

  type TAR_PL_ST_CTRL_t is record
    PL_ST : TAR_PL_ST_PL_ST_CTRL_t_ARRAY;
  end record TAR_PL_ST_CTRL_t;
  function len(x: TAR_PL_ST_CTRL_t) return natural;
  function width(x: TAR_PL_ST_CTRL_t) return natural;
  function vectorify(x: TAR_PL_ST_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_PL_ST_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_CTRL_t) return TAR_PL_ST_CTRL_t;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_CTRL_t) return TAR_PL_ST_CTRL_t;
  function nullify(t: TAR_PL_ST_CTRL_t) return TAR_PL_ST_CTRL_t;
  function zeroed(t: TAR_PL_ST_CTRL_t) return TAR_PL_ST_CTRL_t;

  type TAR_MON_t is record
    STATUS : TAR_STATUS_MON_t;
    PL_ST : TAR_PL_ST_MON_t;
  end record TAR_MON_t;
  function len(x: TAR_MON_t) return natural;
  function width(x: TAR_MON_t) return natural;
  function vectorify(x: TAR_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_MON_t) return TAR_MON_t;
  function convert(x: in std_logic_vector; t: TAR_MON_t) return TAR_MON_t;
  function nullify(t: TAR_MON_t) return TAR_MON_t;
  function zeroed(t: TAR_MON_t) return TAR_MON_t;

  type TAR_CTRL_t is record
    ACTIONS : TAR_ACTIONS_CTRL_t;
    CONFIGS : TAR_CONFIGS_CTRL_t;
    PL_ST : TAR_PL_ST_CTRL_t;
  end record TAR_CTRL_t;
  function len(x: TAR_CTRL_t) return natural;
  function width(x: TAR_CTRL_t) return natural;
  function vectorify(x: TAR_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: TAR_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: TAR_CTRL_t) return TAR_CTRL_t;
  function convert(x: in std_logic_vector; t: TAR_CTRL_t) return TAR_CTRL_t;
  function nullify(t: TAR_CTRL_t) return TAR_CTRL_t;
  function zeroed(t: TAR_CTRL_t) return TAR_CTRL_t;

end package TAR_CTRL;

------------------------------------------------------------

package body TAR_CTRL is

  function len(x: TAR_ACTIONS_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.RESET);
    l := l + len(x.ENABLE);
    l := l + len(x.DISABLE);
    l := l + len(x.FREEZE);
    return l;
  end function len;
  function width(x: TAR_ACTIONS_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.RESET);
    l := l + width(x.ENABLE);
    l := l + width(x.DISABLE);
    l := l + width(x.FREEZE);
    return l;
  end function width;
  function vectorify(x: TAR_ACTIONS_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.RESET)-1), vectorify(x.RESET, y(left to left+len(x.RESET)-1)));
      left := left + len(x.RESET);
      assign(y(left to left+len(x.ENABLE)-1), vectorify(x.ENABLE, y(left to left+len(x.ENABLE)-1)));
      left := left + len(x.ENABLE);
      assign(y(left to left+len(x.DISABLE)-1), vectorify(x.DISABLE, y(left to left+len(x.DISABLE)-1)));
      left := left + len(x.DISABLE);
      assign(y(left to left+len(x.FREEZE)-1), vectorify(x.FREEZE, y(left to left+len(x.FREEZE)-1)));
    else
      assign(y(left downto left-len(x.RESET)+1), vectorify(x.RESET, y(left downto left-len(x.RESET)+1)));
      left := left - len(x.RESET);
      assign(y(left downto left-len(x.ENABLE)+1), vectorify(x.ENABLE, y(left downto left-len(x.ENABLE)+1)));
      left := left - len(x.ENABLE);
      assign(y(left downto left-len(x.DISABLE)+1), vectorify(x.DISABLE, y(left downto left-len(x.DISABLE)+1)));
      left := left - len(x.DISABLE);
      assign(y(left downto left-len(x.FREEZE)+1), vectorify(x.FREEZE, y(left downto left-len(x.FREEZE)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_ACTIONS_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.RESET)-1), convert(x.RESET, y(left to left+len(x.RESET)-1)));
      left := left + len(x.RESET);
      assign(y(left to left+len(x.ENABLE)-1), convert(x.ENABLE, y(left to left+len(x.ENABLE)-1)));
      left := left + len(x.ENABLE);
      assign(y(left to left+len(x.DISABLE)-1), convert(x.DISABLE, y(left to left+len(x.DISABLE)-1)));
      left := left + len(x.DISABLE);
      assign(y(left to left+len(x.FREEZE)-1), convert(x.FREEZE, y(left to left+len(x.FREEZE)-1)));
    else
      assign(y(left downto left-len(x.RESET)+1), convert(x.RESET, y(left downto left-len(x.RESET)+1)));
      left := left - len(x.RESET);
      assign(y(left downto left-len(x.ENABLE)+1), convert(x.ENABLE, y(left downto left-len(x.ENABLE)+1)));
      left := left - len(x.ENABLE);
      assign(y(left downto left-len(x.DISABLE)+1), convert(x.DISABLE, y(left downto left-len(x.DISABLE)+1)));
      left := left - len(x.DISABLE);
      assign(y(left downto left-len(x.FREEZE)+1), convert(x.FREEZE, y(left downto left-len(x.FREEZE)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_ACTIONS_CTRL_t) return TAR_ACTIONS_CTRL_t is
    variable y: TAR_ACTIONS_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.RESET := structify(x(left to left+len(y.RESET)-1), y.RESET);
      left := left + len(y.RESET);
      y.ENABLE := structify(x(left to left+len(y.ENABLE)-1), y.ENABLE);
      left := left + len(y.ENABLE);
      y.DISABLE := structify(x(left to left+len(y.DISABLE)-1), y.DISABLE);
      left := left + len(y.DISABLE);
      y.FREEZE := structify(x(left to left+len(y.FREEZE)-1), y.FREEZE);
    else
      y.RESET := structify(x(left downto left-len(y.RESET)+1), y.RESET);
      left := left - len(y.RESET);
      y.ENABLE := structify(x(left downto left-len(y.ENABLE)+1), y.ENABLE);
      left := left - len(y.ENABLE);
      y.DISABLE := structify(x(left downto left-len(y.DISABLE)+1), y.DISABLE);
      left := left - len(y.DISABLE);
      y.FREEZE := structify(x(left downto left-len(y.FREEZE)+1), y.FREEZE);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_ACTIONS_CTRL_t) return TAR_ACTIONS_CTRL_t is
    variable y: TAR_ACTIONS_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.RESET := convert(x(left to left+len(y.RESET)-1), y.RESET);
      left := left + len(y.RESET);
      y.ENABLE := convert(x(left to left+len(y.ENABLE)-1), y.ENABLE);
      left := left + len(y.ENABLE);
      y.DISABLE := convert(x(left to left+len(y.DISABLE)-1), y.DISABLE);
      left := left + len(y.DISABLE);
      y.FREEZE := convert(x(left to left+len(y.FREEZE)-1), y.FREEZE);
    else
      y.RESET := convert(x(left downto left-len(y.RESET)+1), y.RESET);
      left := left - len(y.RESET);
      y.ENABLE := convert(x(left downto left-len(y.ENABLE)+1), y.ENABLE);
      left := left - len(y.ENABLE);
      y.DISABLE := convert(x(left downto left-len(y.DISABLE)+1), y.DISABLE);
      left := left - len(y.DISABLE);
      y.FREEZE := convert(x(left downto left-len(y.FREEZE)+1), y.FREEZE);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_ACTIONS_CTRL_t) return TAR_ACTIONS_CTRL_t is
  variable y: TAR_ACTIONS_CTRL_t;
  begin
    y.RESET := nullify(t.RESET);
    y.ENABLE := nullify(t.ENABLE);
    y.DISABLE := nullify(t.DISABLE);
    y.FREEZE := nullify(t.FREEZE);
    return y;
  end function nullify;
  function zeroed(t: TAR_ACTIONS_CTRL_t) return TAR_ACTIONS_CTRL_t is
  variable y: TAR_ACTIONS_CTRL_t;
  begin
    y.RESET := zeroed(t.RESET);
    y.ENABLE := zeroed(t.ENABLE);
    y.DISABLE := zeroed(t.DISABLE);
    y.FREEZE := zeroed(t.FREEZE);
    return y;
  end function zeroed;

  function len(x: TAR_CONFIGS_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.INPUT_EN);
    l := l + len(x.OUTPUT_EN);
    l := l + len(x.FLUSH_MEM_RESET);
    return l;
  end function len;
  function width(x: TAR_CONFIGS_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.INPUT_EN);
    l := l + width(x.OUTPUT_EN);
    l := l + width(x.FLUSH_MEM_RESET);
    return l;
  end function width;
  function vectorify(x: TAR_CONFIGS_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.INPUT_EN)-1), vectorify(x.INPUT_EN, y(left to left+len(x.INPUT_EN)-1)));
      left := left + len(x.INPUT_EN);
      assign(y(left to left+len(x.OUTPUT_EN)-1), vectorify(x.OUTPUT_EN, y(left to left+len(x.OUTPUT_EN)-1)));
      left := left + len(x.OUTPUT_EN);
      assign(y(left to left+len(x.FLUSH_MEM_RESET)-1), vectorify(x.FLUSH_MEM_RESET, y(left to left+len(x.FLUSH_MEM_RESET)-1)));
    else
      assign(y(left downto left-len(x.INPUT_EN)+1), vectorify(x.INPUT_EN, y(left downto left-len(x.INPUT_EN)+1)));
      left := left - len(x.INPUT_EN);
      assign(y(left downto left-len(x.OUTPUT_EN)+1), vectorify(x.OUTPUT_EN, y(left downto left-len(x.OUTPUT_EN)+1)));
      left := left - len(x.OUTPUT_EN);
      assign(y(left downto left-len(x.FLUSH_MEM_RESET)+1), vectorify(x.FLUSH_MEM_RESET, y(left downto left-len(x.FLUSH_MEM_RESET)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_CONFIGS_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.INPUT_EN)-1), convert(x.INPUT_EN, y(left to left+len(x.INPUT_EN)-1)));
      left := left + len(x.INPUT_EN);
      assign(y(left to left+len(x.OUTPUT_EN)-1), convert(x.OUTPUT_EN, y(left to left+len(x.OUTPUT_EN)-1)));
      left := left + len(x.OUTPUT_EN);
      assign(y(left to left+len(x.FLUSH_MEM_RESET)-1), convert(x.FLUSH_MEM_RESET, y(left to left+len(x.FLUSH_MEM_RESET)-1)));
    else
      assign(y(left downto left-len(x.INPUT_EN)+1), convert(x.INPUT_EN, y(left downto left-len(x.INPUT_EN)+1)));
      left := left - len(x.INPUT_EN);
      assign(y(left downto left-len(x.OUTPUT_EN)+1), convert(x.OUTPUT_EN, y(left downto left-len(x.OUTPUT_EN)+1)));
      left := left - len(x.OUTPUT_EN);
      assign(y(left downto left-len(x.FLUSH_MEM_RESET)+1), convert(x.FLUSH_MEM_RESET, y(left downto left-len(x.FLUSH_MEM_RESET)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_CONFIGS_CTRL_t) return TAR_CONFIGS_CTRL_t is
    variable y: TAR_CONFIGS_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.INPUT_EN := structify(x(left to left+len(y.INPUT_EN)-1), y.INPUT_EN);
      left := left + len(y.INPUT_EN);
      y.OUTPUT_EN := structify(x(left to left+len(y.OUTPUT_EN)-1), y.OUTPUT_EN);
      left := left + len(y.OUTPUT_EN);
      y.FLUSH_MEM_RESET := structify(x(left to left+len(y.FLUSH_MEM_RESET)-1), y.FLUSH_MEM_RESET);
    else
      y.INPUT_EN := structify(x(left downto left-len(y.INPUT_EN)+1), y.INPUT_EN);
      left := left - len(y.INPUT_EN);
      y.OUTPUT_EN := structify(x(left downto left-len(y.OUTPUT_EN)+1), y.OUTPUT_EN);
      left := left - len(y.OUTPUT_EN);
      y.FLUSH_MEM_RESET := structify(x(left downto left-len(y.FLUSH_MEM_RESET)+1), y.FLUSH_MEM_RESET);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_CONFIGS_CTRL_t) return TAR_CONFIGS_CTRL_t is
    variable y: TAR_CONFIGS_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.INPUT_EN := convert(x(left to left+len(y.INPUT_EN)-1), y.INPUT_EN);
      left := left + len(y.INPUT_EN);
      y.OUTPUT_EN := convert(x(left to left+len(y.OUTPUT_EN)-1), y.OUTPUT_EN);
      left := left + len(y.OUTPUT_EN);
      y.FLUSH_MEM_RESET := convert(x(left to left+len(y.FLUSH_MEM_RESET)-1), y.FLUSH_MEM_RESET);
    else
      y.INPUT_EN := convert(x(left downto left-len(y.INPUT_EN)+1), y.INPUT_EN);
      left := left - len(y.INPUT_EN);
      y.OUTPUT_EN := convert(x(left downto left-len(y.OUTPUT_EN)+1), y.OUTPUT_EN);
      left := left - len(y.OUTPUT_EN);
      y.FLUSH_MEM_RESET := convert(x(left downto left-len(y.FLUSH_MEM_RESET)+1), y.FLUSH_MEM_RESET);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_CONFIGS_CTRL_t) return TAR_CONFIGS_CTRL_t is
  variable y: TAR_CONFIGS_CTRL_t;
  begin
    y.INPUT_EN := nullify(t.INPUT_EN);
    y.OUTPUT_EN := nullify(t.OUTPUT_EN);
    y.FLUSH_MEM_RESET := nullify(t.FLUSH_MEM_RESET);
    return y;
  end function nullify;
  function zeroed(t: TAR_CONFIGS_CTRL_t) return TAR_CONFIGS_CTRL_t is
  variable y: TAR_CONFIGS_CTRL_t;
  begin
    y.INPUT_EN := zeroed(t.INPUT_EN);
    y.OUTPUT_EN := zeroed(t.OUTPUT_EN);
    y.FLUSH_MEM_RESET := zeroed(t.FLUSH_MEM_RESET);
    return y;
  end function zeroed;

  function len(x: TAR_STATUS_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.ENABLED);
    l := l + len(x.READY);
    l := l + len(x.ERROR);
    return l;
  end function len;
  function width(x: TAR_STATUS_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.ENABLED);
    l := l + width(x.READY);
    l := l + width(x.ERROR);
    return l;
  end function width;
  function vectorify(x: TAR_STATUS_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.ENABLED)-1), vectorify(x.ENABLED, y(left to left+len(x.ENABLED)-1)));
      left := left + len(x.ENABLED);
      assign(y(left to left+len(x.READY)-1), vectorify(x.READY, y(left to left+len(x.READY)-1)));
      left := left + len(x.READY);
      assign(y(left to left+len(x.ERROR)-1), vectorify(x.ERROR, y(left to left+len(x.ERROR)-1)));
    else
      assign(y(left downto left-len(x.ENABLED)+1), vectorify(x.ENABLED, y(left downto left-len(x.ENABLED)+1)));
      left := left - len(x.ENABLED);
      assign(y(left downto left-len(x.READY)+1), vectorify(x.READY, y(left downto left-len(x.READY)+1)));
      left := left - len(x.READY);
      assign(y(left downto left-len(x.ERROR)+1), vectorify(x.ERROR, y(left downto left-len(x.ERROR)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_STATUS_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.ENABLED)-1), convert(x.ENABLED, y(left to left+len(x.ENABLED)-1)));
      left := left + len(x.ENABLED);
      assign(y(left to left+len(x.READY)-1), convert(x.READY, y(left to left+len(x.READY)-1)));
      left := left + len(x.READY);
      assign(y(left to left+len(x.ERROR)-1), convert(x.ERROR, y(left to left+len(x.ERROR)-1)));
    else
      assign(y(left downto left-len(x.ENABLED)+1), convert(x.ENABLED, y(left downto left-len(x.ENABLED)+1)));
      left := left - len(x.ENABLED);
      assign(y(left downto left-len(x.READY)+1), convert(x.READY, y(left downto left-len(x.READY)+1)));
      left := left - len(x.READY);
      assign(y(left downto left-len(x.ERROR)+1), convert(x.ERROR, y(left downto left-len(x.ERROR)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_STATUS_MON_t) return TAR_STATUS_MON_t is
    variable y: TAR_STATUS_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.ENABLED := structify(x(left to left+len(y.ENABLED)-1), y.ENABLED);
      left := left + len(y.ENABLED);
      y.READY := structify(x(left to left+len(y.READY)-1), y.READY);
      left := left + len(y.READY);
      y.ERROR := structify(x(left to left+len(y.ERROR)-1), y.ERROR);
    else
      y.ENABLED := structify(x(left downto left-len(y.ENABLED)+1), y.ENABLED);
      left := left - len(y.ENABLED);
      y.READY := structify(x(left downto left-len(y.READY)+1), y.READY);
      left := left - len(y.READY);
      y.ERROR := structify(x(left downto left-len(y.ERROR)+1), y.ERROR);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_STATUS_MON_t) return TAR_STATUS_MON_t is
    variable y: TAR_STATUS_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.ENABLED := convert(x(left to left+len(y.ENABLED)-1), y.ENABLED);
      left := left + len(y.ENABLED);
      y.READY := convert(x(left to left+len(y.READY)-1), y.READY);
      left := left + len(y.READY);
      y.ERROR := convert(x(left to left+len(y.ERROR)-1), y.ERROR);
    else
      y.ENABLED := convert(x(left downto left-len(y.ENABLED)+1), y.ENABLED);
      left := left - len(y.ENABLED);
      y.READY := convert(x(left downto left-len(y.READY)+1), y.READY);
      left := left - len(y.READY);
      y.ERROR := convert(x(left downto left-len(y.ERROR)+1), y.ERROR);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_STATUS_MON_t) return TAR_STATUS_MON_t is
  variable y: TAR_STATUS_MON_t;
  begin
    y.ENABLED := nullify(t.ENABLED);
    y.READY := nullify(t.READY);
    y.ERROR := nullify(t.ERROR);
    return y;
  end function nullify;
  function zeroed(t: TAR_STATUS_MON_t) return TAR_STATUS_MON_t is
  variable y: TAR_STATUS_MON_t;
  begin
    y.ENABLED := zeroed(t.ENABLED);
    y.READY := zeroed(t.READY);
    y.ERROR := zeroed(t.ERROR);
    return y;
  end function zeroed;

  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.rd_rdy);
    l := l + len(x.freeze_ena);
    return l;
  end function len;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.rd_rdy);
    l := l + width(x.freeze_ena);
    return l;
  end function width;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.rd_rdy)-1), vectorify(x.rd_rdy, y(left to left+len(x.rd_rdy)-1)));
      left := left + len(x.rd_rdy);
      assign(y(left to left+len(x.freeze_ena)-1), vectorify(x.freeze_ena, y(left to left+len(x.freeze_ena)-1)));
    else
      assign(y(left downto left-len(x.rd_rdy)+1), vectorify(x.rd_rdy, y(left downto left-len(x.rd_rdy)+1)));
      left := left - len(x.rd_rdy);
      assign(y(left downto left-len(x.freeze_ena)+1), vectorify(x.freeze_ena, y(left downto left-len(x.freeze_ena)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.rd_rdy)-1), convert(x.rd_rdy, y(left to left+len(x.rd_rdy)-1)));
      left := left + len(x.rd_rdy);
      assign(y(left to left+len(x.freeze_ena)-1), convert(x.freeze_ena, y(left to left+len(x.freeze_ena)-1)));
    else
      assign(y(left downto left-len(x.rd_rdy)+1), convert(x.rd_rdy, y(left downto left-len(x.rd_rdy)+1)));
      left := left - len(x.rd_rdy);
      assign(y(left downto left-len(x.freeze_ena)+1), convert(x.freeze_ena, y(left downto left-len(x.freeze_ena)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t is
    variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.rd_rdy := structify(x(left to left+len(y.rd_rdy)-1), y.rd_rdy);
      left := left + len(y.rd_rdy);
      y.freeze_ena := structify(x(left to left+len(y.freeze_ena)-1), y.freeze_ena);
    else
      y.rd_rdy := structify(x(left downto left-len(y.rd_rdy)+1), y.rd_rdy);
      left := left - len(y.rd_rdy);
      y.freeze_ena := structify(x(left downto left-len(y.freeze_ena)+1), y.freeze_ena);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t is
    variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.rd_rdy := convert(x(left to left+len(y.rd_rdy)-1), y.rd_rdy);
      left := left + len(y.rd_rdy);
      y.freeze_ena := convert(x(left to left+len(y.freeze_ena)-1), y.freeze_ena);
    else
      y.rd_rdy := convert(x(left downto left-len(y.rd_rdy)+1), y.rd_rdy);
      left := left - len(y.rd_rdy);
      y.freeze_ena := convert(x(left downto left-len(y.freeze_ena)+1), y.freeze_ena);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t is
  variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t;
  begin
    y.rd_rdy := nullify(t.rd_rdy);
    y.freeze_ena := nullify(t.freeze_ena);
    return y;
  end function nullify;
  function zeroed(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t is
  variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_MON_t;
  begin
    y.rd_rdy := zeroed(t.rd_rdy);
    y.freeze_ena := zeroed(t.freeze_ena);
    return y;
  end function zeroed;

  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.wr_req);
    l := l + len(x.wr_ack);
    l := l + len(x.rd_req);
    l := l + len(x.rd_ack);
    l := l + len(x.flush_req);
    l := l + len(x.freeze_req);
    l := l + len(x.mem_sel);
    return l;
  end function len;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.wr_req);
    l := l + width(x.wr_ack);
    l := l + width(x.rd_req);
    l := l + width(x.rd_ack);
    l := l + width(x.flush_req);
    l := l + width(x.freeze_req);
    l := l + width(x.mem_sel);
    return l;
  end function width;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.wr_req)-1), vectorify(x.wr_req, y(left to left+len(x.wr_req)-1)));
      left := left + len(x.wr_req);
      assign(y(left to left+len(x.wr_ack)-1), vectorify(x.wr_ack, y(left to left+len(x.wr_ack)-1)));
      left := left + len(x.wr_ack);
      assign(y(left to left+len(x.rd_req)-1), vectorify(x.rd_req, y(left to left+len(x.rd_req)-1)));
      left := left + len(x.rd_req);
      assign(y(left to left+len(x.rd_ack)-1), vectorify(x.rd_ack, y(left to left+len(x.rd_ack)-1)));
      left := left + len(x.rd_ack);
      assign(y(left to left+len(x.flush_req)-1), vectorify(x.flush_req, y(left to left+len(x.flush_req)-1)));
      left := left + len(x.flush_req);
      assign(y(left to left+len(x.freeze_req)-1), vectorify(x.freeze_req, y(left to left+len(x.freeze_req)-1)));
      left := left + len(x.freeze_req);
      assign(y(left to left+len(x.mem_sel)-1), vectorify(x.mem_sel, y(left to left+len(x.mem_sel)-1)));
    else
      assign(y(left downto left-len(x.wr_req)+1), vectorify(x.wr_req, y(left downto left-len(x.wr_req)+1)));
      left := left - len(x.wr_req);
      assign(y(left downto left-len(x.wr_ack)+1), vectorify(x.wr_ack, y(left downto left-len(x.wr_ack)+1)));
      left := left - len(x.wr_ack);
      assign(y(left downto left-len(x.rd_req)+1), vectorify(x.rd_req, y(left downto left-len(x.rd_req)+1)));
      left := left - len(x.rd_req);
      assign(y(left downto left-len(x.rd_ack)+1), vectorify(x.rd_ack, y(left downto left-len(x.rd_ack)+1)));
      left := left - len(x.rd_ack);
      assign(y(left downto left-len(x.flush_req)+1), vectorify(x.flush_req, y(left downto left-len(x.flush_req)+1)));
      left := left - len(x.flush_req);
      assign(y(left downto left-len(x.freeze_req)+1), vectorify(x.freeze_req, y(left downto left-len(x.freeze_req)+1)));
      left := left - len(x.freeze_req);
      assign(y(left downto left-len(x.mem_sel)+1), vectorify(x.mem_sel, y(left downto left-len(x.mem_sel)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.wr_req)-1), convert(x.wr_req, y(left to left+len(x.wr_req)-1)));
      left := left + len(x.wr_req);
      assign(y(left to left+len(x.wr_ack)-1), convert(x.wr_ack, y(left to left+len(x.wr_ack)-1)));
      left := left + len(x.wr_ack);
      assign(y(left to left+len(x.rd_req)-1), convert(x.rd_req, y(left to left+len(x.rd_req)-1)));
      left := left + len(x.rd_req);
      assign(y(left to left+len(x.rd_ack)-1), convert(x.rd_ack, y(left to left+len(x.rd_ack)-1)));
      left := left + len(x.rd_ack);
      assign(y(left to left+len(x.flush_req)-1), convert(x.flush_req, y(left to left+len(x.flush_req)-1)));
      left := left + len(x.flush_req);
      assign(y(left to left+len(x.freeze_req)-1), convert(x.freeze_req, y(left to left+len(x.freeze_req)-1)));
      left := left + len(x.freeze_req);
      assign(y(left to left+len(x.mem_sel)-1), convert(x.mem_sel, y(left to left+len(x.mem_sel)-1)));
    else
      assign(y(left downto left-len(x.wr_req)+1), convert(x.wr_req, y(left downto left-len(x.wr_req)+1)));
      left := left - len(x.wr_req);
      assign(y(left downto left-len(x.wr_ack)+1), convert(x.wr_ack, y(left downto left-len(x.wr_ack)+1)));
      left := left - len(x.wr_ack);
      assign(y(left downto left-len(x.rd_req)+1), convert(x.rd_req, y(left downto left-len(x.rd_req)+1)));
      left := left - len(x.rd_req);
      assign(y(left downto left-len(x.rd_ack)+1), convert(x.rd_ack, y(left downto left-len(x.rd_ack)+1)));
      left := left - len(x.rd_ack);
      assign(y(left downto left-len(x.flush_req)+1), convert(x.flush_req, y(left downto left-len(x.flush_req)+1)));
      left := left - len(x.flush_req);
      assign(y(left downto left-len(x.freeze_req)+1), convert(x.freeze_req, y(left downto left-len(x.freeze_req)+1)));
      left := left - len(x.freeze_req);
      assign(y(left downto left-len(x.mem_sel)+1), convert(x.mem_sel, y(left downto left-len(x.mem_sel)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t is
    variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.wr_req := structify(x(left to left+len(y.wr_req)-1), y.wr_req);
      left := left + len(y.wr_req);
      y.wr_ack := structify(x(left to left+len(y.wr_ack)-1), y.wr_ack);
      left := left + len(y.wr_ack);
      y.rd_req := structify(x(left to left+len(y.rd_req)-1), y.rd_req);
      left := left + len(y.rd_req);
      y.rd_ack := structify(x(left to left+len(y.rd_ack)-1), y.rd_ack);
      left := left + len(y.rd_ack);
      y.flush_req := structify(x(left to left+len(y.flush_req)-1), y.flush_req);
      left := left + len(y.flush_req);
      y.freeze_req := structify(x(left to left+len(y.freeze_req)-1), y.freeze_req);
      left := left + len(y.freeze_req);
      y.mem_sel := structify(x(left to left+len(y.mem_sel)-1), y.mem_sel);
    else
      y.wr_req := structify(x(left downto left-len(y.wr_req)+1), y.wr_req);
      left := left - len(y.wr_req);
      y.wr_ack := structify(x(left downto left-len(y.wr_ack)+1), y.wr_ack);
      left := left - len(y.wr_ack);
      y.rd_req := structify(x(left downto left-len(y.rd_req)+1), y.rd_req);
      left := left - len(y.rd_req);
      y.rd_ack := structify(x(left downto left-len(y.rd_ack)+1), y.rd_ack);
      left := left - len(y.rd_ack);
      y.flush_req := structify(x(left downto left-len(y.flush_req)+1), y.flush_req);
      left := left - len(y.flush_req);
      y.freeze_req := structify(x(left downto left-len(y.freeze_req)+1), y.freeze_req);
      left := left - len(y.freeze_req);
      y.mem_sel := structify(x(left downto left-len(y.mem_sel)+1), y.mem_sel);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t is
    variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.wr_req := convert(x(left to left+len(y.wr_req)-1), y.wr_req);
      left := left + len(y.wr_req);
      y.wr_ack := convert(x(left to left+len(y.wr_ack)-1), y.wr_ack);
      left := left + len(y.wr_ack);
      y.rd_req := convert(x(left to left+len(y.rd_req)-1), y.rd_req);
      left := left + len(y.rd_req);
      y.rd_ack := convert(x(left to left+len(y.rd_ack)-1), y.rd_ack);
      left := left + len(y.rd_ack);
      y.flush_req := convert(x(left to left+len(y.flush_req)-1), y.flush_req);
      left := left + len(y.flush_req);
      y.freeze_req := convert(x(left to left+len(y.freeze_req)-1), y.freeze_req);
      left := left + len(y.freeze_req);
      y.mem_sel := convert(x(left to left+len(y.mem_sel)-1), y.mem_sel);
    else
      y.wr_req := convert(x(left downto left-len(y.wr_req)+1), y.wr_req);
      left := left - len(y.wr_req);
      y.wr_ack := convert(x(left downto left-len(y.wr_ack)+1), y.wr_ack);
      left := left - len(y.wr_ack);
      y.rd_req := convert(x(left downto left-len(y.rd_req)+1), y.rd_req);
      left := left - len(y.rd_req);
      y.rd_ack := convert(x(left downto left-len(y.rd_ack)+1), y.rd_ack);
      left := left - len(y.rd_ack);
      y.flush_req := convert(x(left downto left-len(y.flush_req)+1), y.flush_req);
      left := left - len(y.flush_req);
      y.freeze_req := convert(x(left downto left-len(y.freeze_req)+1), y.freeze_req);
      left := left - len(y.freeze_req);
      y.mem_sel := convert(x(left downto left-len(y.mem_sel)+1), y.mem_sel);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t is
  variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t;
  begin
    y.wr_req := nullify(t.wr_req);
    y.wr_ack := nullify(t.wr_ack);
    y.rd_req := nullify(t.rd_req);
    y.rd_ack := nullify(t.rd_ack);
    y.flush_req := nullify(t.flush_req);
    y.freeze_req := nullify(t.freeze_req);
    y.mem_sel := nullify(t.mem_sel);
    return y;
  end function nullify;
  function zeroed(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t is
  variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_SIGNALS_CTRL_t;
  begin
    y.wr_req := zeroed(t.wr_req);
    y.wr_ack := zeroed(t.wr_ack);
    y.rd_req := zeroed(t.rd_req);
    y.rd_ack := zeroed(t.rd_ack);
    y.flush_req := zeroed(t.flush_req);
    y.freeze_req := zeroed(t.freeze_req);
    y.mem_sel := zeroed(t.mem_sel);
    return y;
  end function zeroed;

  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.wr_data_0);
    l := l + len(x.wr_data_1);
    return l;
  end function len;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.wr_data_0);
    l := l + width(x.wr_data_1);
    return l;
  end function width;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.wr_data_0)-1), vectorify(x.wr_data_0, y(left to left+len(x.wr_data_0)-1)));
      left := left + len(x.wr_data_0);
      assign(y(left to left+len(x.wr_data_1)-1), vectorify(x.wr_data_1, y(left to left+len(x.wr_data_1)-1)));
    else
      assign(y(left downto left-len(x.wr_data_0)+1), vectorify(x.wr_data_0, y(left downto left-len(x.wr_data_0)+1)));
      left := left - len(x.wr_data_0);
      assign(y(left downto left-len(x.wr_data_1)+1), vectorify(x.wr_data_1, y(left downto left-len(x.wr_data_1)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.wr_data_0)-1), convert(x.wr_data_0, y(left to left+len(x.wr_data_0)-1)));
      left := left + len(x.wr_data_0);
      assign(y(left to left+len(x.wr_data_1)-1), convert(x.wr_data_1, y(left to left+len(x.wr_data_1)-1)));
    else
      assign(y(left downto left-len(x.wr_data_0)+1), convert(x.wr_data_0, y(left downto left-len(x.wr_data_0)+1)));
      left := left - len(x.wr_data_0);
      assign(y(left downto left-len(x.wr_data_1)+1), convert(x.wr_data_1, y(left downto left-len(x.wr_data_1)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t is
    variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.wr_data_0 := structify(x(left to left+len(y.wr_data_0)-1), y.wr_data_0);
      left := left + len(y.wr_data_0);
      y.wr_data_1 := structify(x(left to left+len(y.wr_data_1)-1), y.wr_data_1);
    else
      y.wr_data_0 := structify(x(left downto left-len(y.wr_data_0)+1), y.wr_data_0);
      left := left - len(y.wr_data_0);
      y.wr_data_1 := structify(x(left downto left-len(y.wr_data_1)+1), y.wr_data_1);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t is
    variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.wr_data_0 := convert(x(left to left+len(y.wr_data_0)-1), y.wr_data_0);
      left := left + len(y.wr_data_0);
      y.wr_data_1 := convert(x(left to left+len(y.wr_data_1)-1), y.wr_data_1);
    else
      y.wr_data_0 := convert(x(left downto left-len(y.wr_data_0)+1), y.wr_data_0);
      left := left - len(y.wr_data_0);
      y.wr_data_1 := convert(x(left downto left-len(y.wr_data_1)+1), y.wr_data_1);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t is
  variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t;
  begin
    y.wr_data_0 := nullify(t.wr_data_0);
    y.wr_data_1 := nullify(t.wr_data_1);
    return y;
  end function nullify;
  function zeroed(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t is
  variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_wr_data_CTRL_t;
  begin
    y.wr_data_0 := zeroed(t.wr_data_0);
    y.wr_data_1 := zeroed(t.wr_data_1);
    return y;
  end function zeroed;

  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.rd_data_0);
    l := l + len(x.rd_data_1);
    return l;
  end function len;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.rd_data_0);
    l := l + width(x.rd_data_1);
    return l;
  end function width;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.rd_data_0)-1), vectorify(x.rd_data_0, y(left to left+len(x.rd_data_0)-1)));
      left := left + len(x.rd_data_0);
      assign(y(left to left+len(x.rd_data_1)-1), vectorify(x.rd_data_1, y(left to left+len(x.rd_data_1)-1)));
    else
      assign(y(left downto left-len(x.rd_data_0)+1), vectorify(x.rd_data_0, y(left downto left-len(x.rd_data_0)+1)));
      left := left - len(x.rd_data_0);
      assign(y(left downto left-len(x.rd_data_1)+1), vectorify(x.rd_data_1, y(left downto left-len(x.rd_data_1)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.rd_data_0)-1), convert(x.rd_data_0, y(left to left+len(x.rd_data_0)-1)));
      left := left + len(x.rd_data_0);
      assign(y(left to left+len(x.rd_data_1)-1), convert(x.rd_data_1, y(left to left+len(x.rd_data_1)-1)));
    else
      assign(y(left downto left-len(x.rd_data_0)+1), convert(x.rd_data_0, y(left downto left-len(x.rd_data_0)+1)));
      left := left - len(x.rd_data_0);
      assign(y(left downto left-len(x.rd_data_1)+1), convert(x.rd_data_1, y(left downto left-len(x.rd_data_1)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t is
    variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.rd_data_0 := structify(x(left to left+len(y.rd_data_0)-1), y.rd_data_0);
      left := left + len(y.rd_data_0);
      y.rd_data_1 := structify(x(left to left+len(y.rd_data_1)-1), y.rd_data_1);
    else
      y.rd_data_0 := structify(x(left downto left-len(y.rd_data_0)+1), y.rd_data_0);
      left := left - len(y.rd_data_0);
      y.rd_data_1 := structify(x(left downto left-len(y.rd_data_1)+1), y.rd_data_1);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t is
    variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.rd_data_0 := convert(x(left to left+len(y.rd_data_0)-1), y.rd_data_0);
      left := left + len(y.rd_data_0);
      y.rd_data_1 := convert(x(left to left+len(y.rd_data_1)-1), y.rd_data_1);
    else
      y.rd_data_0 := convert(x(left downto left-len(y.rd_data_0)+1), y.rd_data_0);
      left := left - len(y.rd_data_0);
      y.rd_data_1 := convert(x(left downto left-len(y.rd_data_1)+1), y.rd_data_1);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t is
  variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t;
  begin
    y.rd_data_0 := nullify(t.rd_data_0);
    y.rd_data_1 := nullify(t.rd_data_1);
    return y;
  end function nullify;
  function zeroed(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t is
  variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_rd_data_MON_t;
  begin
    y.rd_data_0 := zeroed(t.rd_data_0);
    y.rd_data_1 := zeroed(t.rd_data_1);
    return y;
  end function zeroed;

  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SIGNALS);
    l := l + len(x.rd_data);
    return l;
  end function len;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SIGNALS);
    l := l + width(x.rd_data);
    return l;
  end function width;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SIGNALS)-1), vectorify(x.SIGNALS, y(left to left+len(x.SIGNALS)-1)));
      left := left + len(x.SIGNALS);
      assign(y(left to left+len(x.rd_data)-1), vectorify(x.rd_data, y(left to left+len(x.rd_data)-1)));
    else
      assign(y(left downto left-len(x.SIGNALS)+1), vectorify(x.SIGNALS, y(left downto left-len(x.SIGNALS)+1)));
      left := left - len(x.SIGNALS);
      assign(y(left downto left-len(x.rd_data)+1), vectorify(x.rd_data, y(left downto left-len(x.rd_data)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SIGNALS)-1), convert(x.SIGNALS, y(left to left+len(x.SIGNALS)-1)));
      left := left + len(x.SIGNALS);
      assign(y(left to left+len(x.rd_data)-1), convert(x.rd_data, y(left to left+len(x.rd_data)-1)));
    else
      assign(y(left downto left-len(x.SIGNALS)+1), convert(x.SIGNALS, y(left downto left-len(x.SIGNALS)+1)));
      left := left - len(x.SIGNALS);
      assign(y(left downto left-len(x.rd_data)+1), convert(x.rd_data, y(left downto left-len(x.rd_data)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t is
    variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SIGNALS := structify(x(left to left+len(y.SIGNALS)-1), y.SIGNALS);
      left := left + len(y.SIGNALS);
      y.rd_data := structify(x(left to left+len(y.rd_data)-1), y.rd_data);
    else
      y.SIGNALS := structify(x(left downto left-len(y.SIGNALS)+1), y.SIGNALS);
      left := left - len(y.SIGNALS);
      y.rd_data := structify(x(left downto left-len(y.rd_data)+1), y.rd_data);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t is
    variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SIGNALS := convert(x(left to left+len(y.SIGNALS)-1), y.SIGNALS);
      left := left + len(y.SIGNALS);
      y.rd_data := convert(x(left to left+len(y.rd_data)-1), y.rd_data);
    else
      y.SIGNALS := convert(x(left downto left-len(y.SIGNALS)+1), y.SIGNALS);
      left := left - len(y.SIGNALS);
      y.rd_data := convert(x(left downto left-len(y.rd_data)+1), y.rd_data);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t is
  variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t;
  begin
    y.SIGNALS := nullify(t.SIGNALS);
    y.rd_data := nullify(t.rd_data);
    return y;
  end function nullify;
  function zeroed(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t is
  variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t;
  begin
    y.SIGNALS := zeroed(t.SIGNALS);
    y.rd_data := zeroed(t.rd_data);
    return y;
  end function zeroed;

  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * len(x(x'left));
    return l;
  end function len;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * width(x(x'left));
    return l;
  end function width;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), vectorify(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), vectorify(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), convert(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), convert(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function convert;
  function structify(x: std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY is
    variable y : TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function convert(x: std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY is
    variable y : TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := convert(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := convert(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function convert;
  function nullify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY is
    variable y : TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;
  function zeroed(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY is
    variable y : TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_MON_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := zeroed(y(i));
    end loop l;
    return y;
  end function zeroed;

  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.SIGNALS);
    l := l + len(x.wr_addr);
    l := l + len(x.rd_addr);
    l := l + len(x.wr_data);
    return l;
  end function len;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.SIGNALS);
    l := l + width(x.wr_addr);
    l := l + width(x.rd_addr);
    l := l + width(x.wr_data);
    return l;
  end function width;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SIGNALS)-1), vectorify(x.SIGNALS, y(left to left+len(x.SIGNALS)-1)));
      left := left + len(x.SIGNALS);
      assign(y(left to left+len(x.wr_addr)-1), vectorify(x.wr_addr, y(left to left+len(x.wr_addr)-1)));
      left := left + len(x.wr_addr);
      assign(y(left to left+len(x.rd_addr)-1), vectorify(x.rd_addr, y(left to left+len(x.rd_addr)-1)));
      left := left + len(x.rd_addr);
      assign(y(left to left+len(x.wr_data)-1), vectorify(x.wr_data, y(left to left+len(x.wr_data)-1)));
    else
      assign(y(left downto left-len(x.SIGNALS)+1), vectorify(x.SIGNALS, y(left downto left-len(x.SIGNALS)+1)));
      left := left - len(x.SIGNALS);
      assign(y(left downto left-len(x.wr_addr)+1), vectorify(x.wr_addr, y(left downto left-len(x.wr_addr)+1)));
      left := left - len(x.wr_addr);
      assign(y(left downto left-len(x.rd_addr)+1), vectorify(x.rd_addr, y(left downto left-len(x.rd_addr)+1)));
      left := left - len(x.rd_addr);
      assign(y(left downto left-len(x.wr_data)+1), vectorify(x.wr_data, y(left downto left-len(x.wr_data)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.SIGNALS)-1), convert(x.SIGNALS, y(left to left+len(x.SIGNALS)-1)));
      left := left + len(x.SIGNALS);
      assign(y(left to left+len(x.wr_addr)-1), convert(x.wr_addr, y(left to left+len(x.wr_addr)-1)));
      left := left + len(x.wr_addr);
      assign(y(left to left+len(x.rd_addr)-1), convert(x.rd_addr, y(left to left+len(x.rd_addr)-1)));
      left := left + len(x.rd_addr);
      assign(y(left to left+len(x.wr_data)-1), convert(x.wr_data, y(left to left+len(x.wr_data)-1)));
    else
      assign(y(left downto left-len(x.SIGNALS)+1), convert(x.SIGNALS, y(left downto left-len(x.SIGNALS)+1)));
      left := left - len(x.SIGNALS);
      assign(y(left downto left-len(x.wr_addr)+1), convert(x.wr_addr, y(left downto left-len(x.wr_addr)+1)));
      left := left - len(x.wr_addr);
      assign(y(left downto left-len(x.rd_addr)+1), convert(x.rd_addr, y(left downto left-len(x.rd_addr)+1)));
      left := left - len(x.rd_addr);
      assign(y(left downto left-len(x.wr_data)+1), convert(x.wr_data, y(left downto left-len(x.wr_data)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t is
    variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SIGNALS := structify(x(left to left+len(y.SIGNALS)-1), y.SIGNALS);
      left := left + len(y.SIGNALS);
      y.wr_addr := structify(x(left to left+len(y.wr_addr)-1), y.wr_addr);
      left := left + len(y.wr_addr);
      y.rd_addr := structify(x(left to left+len(y.rd_addr)-1), y.rd_addr);
      left := left + len(y.rd_addr);
      y.wr_data := structify(x(left to left+len(y.wr_data)-1), y.wr_data);
    else
      y.SIGNALS := structify(x(left downto left-len(y.SIGNALS)+1), y.SIGNALS);
      left := left - len(y.SIGNALS);
      y.wr_addr := structify(x(left downto left-len(y.wr_addr)+1), y.wr_addr);
      left := left - len(y.wr_addr);
      y.rd_addr := structify(x(left downto left-len(y.rd_addr)+1), y.rd_addr);
      left := left - len(y.rd_addr);
      y.wr_data := structify(x(left downto left-len(y.wr_data)+1), y.wr_data);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t is
    variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.SIGNALS := convert(x(left to left+len(y.SIGNALS)-1), y.SIGNALS);
      left := left + len(y.SIGNALS);
      y.wr_addr := convert(x(left to left+len(y.wr_addr)-1), y.wr_addr);
      left := left + len(y.wr_addr);
      y.rd_addr := convert(x(left to left+len(y.rd_addr)-1), y.rd_addr);
      left := left + len(y.rd_addr);
      y.wr_data := convert(x(left to left+len(y.wr_data)-1), y.wr_data);
    else
      y.SIGNALS := convert(x(left downto left-len(y.SIGNALS)+1), y.SIGNALS);
      left := left - len(y.SIGNALS);
      y.wr_addr := convert(x(left downto left-len(y.wr_addr)+1), y.wr_addr);
      left := left - len(y.wr_addr);
      y.rd_addr := convert(x(left downto left-len(y.rd_addr)+1), y.rd_addr);
      left := left - len(y.rd_addr);
      y.wr_data := convert(x(left downto left-len(y.wr_data)+1), y.wr_data);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t is
  variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t;
  begin
    y.SIGNALS := nullify(t.SIGNALS);
    y.wr_addr := nullify(t.wr_addr);
    y.rd_addr := nullify(t.rd_addr);
    y.wr_data := nullify(t.wr_data);
    return y;
  end function nullify;
  function zeroed(t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t is
  variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t;
  begin
    y.SIGNALS := zeroed(t.SIGNALS);
    y.wr_addr := zeroed(t.wr_addr);
    y.rd_addr := zeroed(t.rd_addr);
    y.wr_data := zeroed(t.wr_data);
    return y;
  end function zeroed;

  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * len(x(x'left));
    return l;
  end function len;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * width(x(x'left));
    return l;
  end function width;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), vectorify(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), vectorify(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), convert(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), convert(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function convert;
  function structify(x: std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY is
    variable y : TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function convert(x: std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY is
    variable y : TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := convert(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := convert(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function convert;
  function nullify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY is
    variable y : TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;
  function zeroed(x: TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY) return TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY is
    variable y : TAR_PL_ST_PL_ST_PL_CHAMBER_PL_MEM_CTRL_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := zeroed(y(i));
    end loop l;
    return y;
  end function zeroed;

  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.PL_MEM);
    return l;
  end function len;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.PL_MEM);
    return l;
  end function width;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.PL_MEM)-1), vectorify(x.PL_MEM, y(left to left+len(x.PL_MEM)-1)));
    else
      assign(y(left downto left-len(x.PL_MEM)+1), vectorify(x.PL_MEM, y(left downto left-len(x.PL_MEM)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.PL_MEM)-1), convert(x.PL_MEM, y(left to left+len(x.PL_MEM)-1)));
    else
      assign(y(left downto left-len(x.PL_MEM)+1), convert(x.PL_MEM, y(left downto left-len(x.PL_MEM)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t is
    variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.PL_MEM := structify(x(left to left+len(y.PL_MEM)-1), y.PL_MEM);
    else
      y.PL_MEM := structify(x(left downto left-len(y.PL_MEM)+1), y.PL_MEM);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t is
    variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.PL_MEM := convert(x(left to left+len(y.PL_MEM)-1), y.PL_MEM);
    else
      y.PL_MEM := convert(x(left downto left-len(y.PL_MEM)+1), y.PL_MEM);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t is
  variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t;
  begin
    y.PL_MEM := nullify(t.PL_MEM);
    return y;
  end function nullify;
  function zeroed(t: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t is
  variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_MON_t;
  begin
    y.PL_MEM := zeroed(t.PL_MEM);
    return y;
  end function zeroed;

  function len(x: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.PL_MEM);
    return l;
  end function len;
  function width(x: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.PL_MEM);
    return l;
  end function width;
  function vectorify(x: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.PL_MEM)-1), vectorify(x.PL_MEM, y(left to left+len(x.PL_MEM)-1)));
    else
      assign(y(left downto left-len(x.PL_MEM)+1), vectorify(x.PL_MEM, y(left downto left-len(x.PL_MEM)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.PL_MEM)-1), convert(x.PL_MEM, y(left to left+len(x.PL_MEM)-1)));
    else
      assign(y(left downto left-len(x.PL_MEM)+1), convert(x.PL_MEM, y(left downto left-len(x.PL_MEM)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t is
    variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.PL_MEM := structify(x(left to left+len(y.PL_MEM)-1), y.PL_MEM);
    else
      y.PL_MEM := structify(x(left downto left-len(y.PL_MEM)+1), y.PL_MEM);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t is
    variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.PL_MEM := convert(x(left to left+len(y.PL_MEM)-1), y.PL_MEM);
    else
      y.PL_MEM := convert(x(left downto left-len(y.PL_MEM)+1), y.PL_MEM);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t is
  variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t;
  begin
    y.PL_MEM := nullify(t.PL_MEM);
    return y;
  end function nullify;
  function zeroed(t: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t) return TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t is
  variable y: TAR_PL_ST_PL_ST_PL_CHAMBER_CTRL_t;
  begin
    y.PL_MEM := zeroed(t.PL_MEM);
    return y;
  end function zeroed;

  function len(x: TAR_PL_ST_PL_ST_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.PL_CHAMBER);
    return l;
  end function len;
  function width(x: TAR_PL_ST_PL_ST_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.PL_CHAMBER);
    return l;
  end function width;
  function vectorify(x: TAR_PL_ST_PL_ST_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.PL_CHAMBER)-1), vectorify(x.PL_CHAMBER, y(left to left+len(x.PL_CHAMBER)-1)));
    else
      assign(y(left downto left-len(x.PL_CHAMBER)+1), vectorify(x.PL_CHAMBER, y(left downto left-len(x.PL_CHAMBER)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_PL_ST_PL_ST_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.PL_CHAMBER)-1), convert(x.PL_CHAMBER, y(left to left+len(x.PL_CHAMBER)-1)));
    else
      assign(y(left downto left-len(x.PL_CHAMBER)+1), convert(x.PL_CHAMBER, y(left downto left-len(x.PL_CHAMBER)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_MON_t) return TAR_PL_ST_PL_ST_MON_t is
    variable y: TAR_PL_ST_PL_ST_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.PL_CHAMBER := structify(x(left to left+len(y.PL_CHAMBER)-1), y.PL_CHAMBER);
    else
      y.PL_CHAMBER := structify(x(left downto left-len(y.PL_CHAMBER)+1), y.PL_CHAMBER);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_MON_t) return TAR_PL_ST_PL_ST_MON_t is
    variable y: TAR_PL_ST_PL_ST_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.PL_CHAMBER := convert(x(left to left+len(y.PL_CHAMBER)-1), y.PL_CHAMBER);
    else
      y.PL_CHAMBER := convert(x(left downto left-len(y.PL_CHAMBER)+1), y.PL_CHAMBER);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_PL_ST_PL_ST_MON_t) return TAR_PL_ST_PL_ST_MON_t is
  variable y: TAR_PL_ST_PL_ST_MON_t;
  begin
    y.PL_CHAMBER := nullify(t.PL_CHAMBER);
    return y;
  end function nullify;
  function zeroed(t: TAR_PL_ST_PL_ST_MON_t) return TAR_PL_ST_PL_ST_MON_t is
  variable y: TAR_PL_ST_PL_ST_MON_t;
  begin
    y.PL_CHAMBER := zeroed(t.PL_CHAMBER);
    return y;
  end function zeroed;

  function len(x: TAR_PL_ST_PL_ST_MON_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * len(x(x'left));
    return l;
  end function len;
  function width(x: TAR_PL_ST_PL_ST_MON_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * width(x(x'left));
    return l;
  end function width;
  function vectorify(x: TAR_PL_ST_PL_ST_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), vectorify(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), vectorify(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_PL_ST_PL_ST_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), convert(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), convert(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function convert;
  function structify(x: std_logic_vector; t: TAR_PL_ST_PL_ST_MON_t_ARRAY) return TAR_PL_ST_PL_ST_MON_t_ARRAY is
    variable y : TAR_PL_ST_PL_ST_MON_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function convert(x: std_logic_vector; t: TAR_PL_ST_PL_ST_MON_t_ARRAY) return TAR_PL_ST_PL_ST_MON_t_ARRAY is
    variable y : TAR_PL_ST_PL_ST_MON_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := convert(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := convert(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function convert;
  function nullify(x: TAR_PL_ST_PL_ST_MON_t_ARRAY) return TAR_PL_ST_PL_ST_MON_t_ARRAY is
    variable y : TAR_PL_ST_PL_ST_MON_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;
  function zeroed(x: TAR_PL_ST_PL_ST_MON_t_ARRAY) return TAR_PL_ST_PL_ST_MON_t_ARRAY is
    variable y : TAR_PL_ST_PL_ST_MON_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := zeroed(y(i));
    end loop l;
    return y;
  end function zeroed;

  function len(x: TAR_PL_ST_PL_ST_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.PL_CHAMBER);
    return l;
  end function len;
  function width(x: TAR_PL_ST_PL_ST_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.PL_CHAMBER);
    return l;
  end function width;
  function vectorify(x: TAR_PL_ST_PL_ST_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.PL_CHAMBER)-1), vectorify(x.PL_CHAMBER, y(left to left+len(x.PL_CHAMBER)-1)));
    else
      assign(y(left downto left-len(x.PL_CHAMBER)+1), vectorify(x.PL_CHAMBER, y(left downto left-len(x.PL_CHAMBER)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_PL_ST_PL_ST_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.PL_CHAMBER)-1), convert(x.PL_CHAMBER, y(left to left+len(x.PL_CHAMBER)-1)));
    else
      assign(y(left downto left-len(x.PL_CHAMBER)+1), convert(x.PL_CHAMBER, y(left downto left-len(x.PL_CHAMBER)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_CTRL_t) return TAR_PL_ST_PL_ST_CTRL_t is
    variable y: TAR_PL_ST_PL_ST_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.PL_CHAMBER := structify(x(left to left+len(y.PL_CHAMBER)-1), y.PL_CHAMBER);
    else
      y.PL_CHAMBER := structify(x(left downto left-len(y.PL_CHAMBER)+1), y.PL_CHAMBER);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_PL_ST_CTRL_t) return TAR_PL_ST_PL_ST_CTRL_t is
    variable y: TAR_PL_ST_PL_ST_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.PL_CHAMBER := convert(x(left to left+len(y.PL_CHAMBER)-1), y.PL_CHAMBER);
    else
      y.PL_CHAMBER := convert(x(left downto left-len(y.PL_CHAMBER)+1), y.PL_CHAMBER);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_PL_ST_PL_ST_CTRL_t) return TAR_PL_ST_PL_ST_CTRL_t is
  variable y: TAR_PL_ST_PL_ST_CTRL_t;
  begin
    y.PL_CHAMBER := nullify(t.PL_CHAMBER);
    return y;
  end function nullify;
  function zeroed(t: TAR_PL_ST_PL_ST_CTRL_t) return TAR_PL_ST_PL_ST_CTRL_t is
  variable y: TAR_PL_ST_PL_ST_CTRL_t;
  begin
    y.PL_CHAMBER := zeroed(t.PL_CHAMBER);
    return y;
  end function zeroed;

  function len(x: TAR_PL_ST_PL_ST_CTRL_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * len(x(x'left));
    return l;
  end function len;
  function width(x: TAR_PL_ST_PL_ST_CTRL_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * width(x(x'left));
    return l;
  end function width;
  function vectorify(x: TAR_PL_ST_PL_ST_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), vectorify(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), vectorify(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_PL_ST_PL_ST_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), convert(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), convert(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function convert;
  function structify(x: std_logic_vector; t: TAR_PL_ST_PL_ST_CTRL_t_ARRAY) return TAR_PL_ST_PL_ST_CTRL_t_ARRAY is
    variable y : TAR_PL_ST_PL_ST_CTRL_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function convert(x: std_logic_vector; t: TAR_PL_ST_PL_ST_CTRL_t_ARRAY) return TAR_PL_ST_PL_ST_CTRL_t_ARRAY is
    variable y : TAR_PL_ST_PL_ST_CTRL_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := convert(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := convert(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function convert;
  function nullify(x: TAR_PL_ST_PL_ST_CTRL_t_ARRAY) return TAR_PL_ST_PL_ST_CTRL_t_ARRAY is
    variable y : TAR_PL_ST_PL_ST_CTRL_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;
  function zeroed(x: TAR_PL_ST_PL_ST_CTRL_t_ARRAY) return TAR_PL_ST_PL_ST_CTRL_t_ARRAY is
    variable y : TAR_PL_ST_PL_ST_CTRL_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := zeroed(y(i));
    end loop l;
    return y;
  end function zeroed;

  function len(x: TAR_PL_ST_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.PL_ST);
    return l;
  end function len;
  function width(x: TAR_PL_ST_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.PL_ST);
    return l;
  end function width;
  function vectorify(x: TAR_PL_ST_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.PL_ST)-1), vectorify(x.PL_ST, y(left to left+len(x.PL_ST)-1)));
    else
      assign(y(left downto left-len(x.PL_ST)+1), vectorify(x.PL_ST, y(left downto left-len(x.PL_ST)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_PL_ST_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.PL_ST)-1), convert(x.PL_ST, y(left to left+len(x.PL_ST)-1)));
    else
      assign(y(left downto left-len(x.PL_ST)+1), convert(x.PL_ST, y(left downto left-len(x.PL_ST)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_MON_t) return TAR_PL_ST_MON_t is
    variable y: TAR_PL_ST_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.PL_ST := structify(x(left to left+len(y.PL_ST)-1), y.PL_ST);
    else
      y.PL_ST := structify(x(left downto left-len(y.PL_ST)+1), y.PL_ST);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_MON_t) return TAR_PL_ST_MON_t is
    variable y: TAR_PL_ST_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.PL_ST := convert(x(left to left+len(y.PL_ST)-1), y.PL_ST);
    else
      y.PL_ST := convert(x(left downto left-len(y.PL_ST)+1), y.PL_ST);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_PL_ST_MON_t) return TAR_PL_ST_MON_t is
  variable y: TAR_PL_ST_MON_t;
  begin
    y.PL_ST := nullify(t.PL_ST);
    return y;
  end function nullify;
  function zeroed(t: TAR_PL_ST_MON_t) return TAR_PL_ST_MON_t is
  variable y: TAR_PL_ST_MON_t;
  begin
    y.PL_ST := zeroed(t.PL_ST);
    return y;
  end function zeroed;

  function len(x: TAR_PL_ST_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.PL_ST);
    return l;
  end function len;
  function width(x: TAR_PL_ST_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.PL_ST);
    return l;
  end function width;
  function vectorify(x: TAR_PL_ST_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.PL_ST)-1), vectorify(x.PL_ST, y(left to left+len(x.PL_ST)-1)));
    else
      assign(y(left downto left-len(x.PL_ST)+1), vectorify(x.PL_ST, y(left downto left-len(x.PL_ST)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_PL_ST_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.PL_ST)-1), convert(x.PL_ST, y(left to left+len(x.PL_ST)-1)));
    else
      assign(y(left downto left-len(x.PL_ST)+1), convert(x.PL_ST, y(left downto left-len(x.PL_ST)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_PL_ST_CTRL_t) return TAR_PL_ST_CTRL_t is
    variable y: TAR_PL_ST_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.PL_ST := structify(x(left to left+len(y.PL_ST)-1), y.PL_ST);
    else
      y.PL_ST := structify(x(left downto left-len(y.PL_ST)+1), y.PL_ST);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_PL_ST_CTRL_t) return TAR_PL_ST_CTRL_t is
    variable y: TAR_PL_ST_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.PL_ST := convert(x(left to left+len(y.PL_ST)-1), y.PL_ST);
    else
      y.PL_ST := convert(x(left downto left-len(y.PL_ST)+1), y.PL_ST);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_PL_ST_CTRL_t) return TAR_PL_ST_CTRL_t is
  variable y: TAR_PL_ST_CTRL_t;
  begin
    y.PL_ST := nullify(t.PL_ST);
    return y;
  end function nullify;
  function zeroed(t: TAR_PL_ST_CTRL_t) return TAR_PL_ST_CTRL_t is
  variable y: TAR_PL_ST_CTRL_t;
  begin
    y.PL_ST := zeroed(t.PL_ST);
    return y;
  end function zeroed;

  function len(x: TAR_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.STATUS);
    l := l + len(x.PL_ST);
    return l;
  end function len;
  function width(x: TAR_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.STATUS);
    l := l + width(x.PL_ST);
    return l;
  end function width;
  function vectorify(x: TAR_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.STATUS)-1), vectorify(x.STATUS, y(left to left+len(x.STATUS)-1)));
      left := left + len(x.STATUS);
      assign(y(left to left+len(x.PL_ST)-1), vectorify(x.PL_ST, y(left to left+len(x.PL_ST)-1)));
    else
      assign(y(left downto left-len(x.STATUS)+1), vectorify(x.STATUS, y(left downto left-len(x.STATUS)+1)));
      left := left - len(x.STATUS);
      assign(y(left downto left-len(x.PL_ST)+1), vectorify(x.PL_ST, y(left downto left-len(x.PL_ST)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.STATUS)-1), convert(x.STATUS, y(left to left+len(x.STATUS)-1)));
      left := left + len(x.STATUS);
      assign(y(left to left+len(x.PL_ST)-1), convert(x.PL_ST, y(left to left+len(x.PL_ST)-1)));
    else
      assign(y(left downto left-len(x.STATUS)+1), convert(x.STATUS, y(left downto left-len(x.STATUS)+1)));
      left := left - len(x.STATUS);
      assign(y(left downto left-len(x.PL_ST)+1), convert(x.PL_ST, y(left downto left-len(x.PL_ST)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_MON_t) return TAR_MON_t is
    variable y: TAR_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.STATUS := structify(x(left to left+len(y.STATUS)-1), y.STATUS);
      left := left + len(y.STATUS);
      y.PL_ST := structify(x(left to left+len(y.PL_ST)-1), y.PL_ST);
    else
      y.STATUS := structify(x(left downto left-len(y.STATUS)+1), y.STATUS);
      left := left - len(y.STATUS);
      y.PL_ST := structify(x(left downto left-len(y.PL_ST)+1), y.PL_ST);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_MON_t) return TAR_MON_t is
    variable y: TAR_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.STATUS := convert(x(left to left+len(y.STATUS)-1), y.STATUS);
      left := left + len(y.STATUS);
      y.PL_ST := convert(x(left to left+len(y.PL_ST)-1), y.PL_ST);
    else
      y.STATUS := convert(x(left downto left-len(y.STATUS)+1), y.STATUS);
      left := left - len(y.STATUS);
      y.PL_ST := convert(x(left downto left-len(y.PL_ST)+1), y.PL_ST);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_MON_t) return TAR_MON_t is
  variable y: TAR_MON_t;
  begin
    y.STATUS := nullify(t.STATUS);
    y.PL_ST := nullify(t.PL_ST);
    return y;
  end function nullify;
  function zeroed(t: TAR_MON_t) return TAR_MON_t is
  variable y: TAR_MON_t;
  begin
    y.STATUS := zeroed(t.STATUS);
    y.PL_ST := zeroed(t.PL_ST);
    return y;
  end function zeroed;

  function len(x: TAR_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.ACTIONS);
    l := l + len(x.CONFIGS);
    l := l + len(x.PL_ST);
    return l;
  end function len;
  function width(x: TAR_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.ACTIONS);
    l := l + width(x.CONFIGS);
    l := l + width(x.PL_ST);
    return l;
  end function width;
  function vectorify(x: TAR_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.ACTIONS)-1), vectorify(x.ACTIONS, y(left to left+len(x.ACTIONS)-1)));
      left := left + len(x.ACTIONS);
      assign(y(left to left+len(x.CONFIGS)-1), vectorify(x.CONFIGS, y(left to left+len(x.CONFIGS)-1)));
      left := left + len(x.CONFIGS);
      assign(y(left to left+len(x.PL_ST)-1), vectorify(x.PL_ST, y(left to left+len(x.PL_ST)-1)));
    else
      assign(y(left downto left-len(x.ACTIONS)+1), vectorify(x.ACTIONS, y(left downto left-len(x.ACTIONS)+1)));
      left := left - len(x.ACTIONS);
      assign(y(left downto left-len(x.CONFIGS)+1), vectorify(x.CONFIGS, y(left downto left-len(x.CONFIGS)+1)));
      left := left - len(x.CONFIGS);
      assign(y(left downto left-len(x.PL_ST)+1), vectorify(x.PL_ST, y(left downto left-len(x.PL_ST)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: TAR_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.ACTIONS)-1), convert(x.ACTIONS, y(left to left+len(x.ACTIONS)-1)));
      left := left + len(x.ACTIONS);
      assign(y(left to left+len(x.CONFIGS)-1), convert(x.CONFIGS, y(left to left+len(x.CONFIGS)-1)));
      left := left + len(x.CONFIGS);
      assign(y(left to left+len(x.PL_ST)-1), convert(x.PL_ST, y(left to left+len(x.PL_ST)-1)));
    else
      assign(y(left downto left-len(x.ACTIONS)+1), convert(x.ACTIONS, y(left downto left-len(x.ACTIONS)+1)));
      left := left - len(x.ACTIONS);
      assign(y(left downto left-len(x.CONFIGS)+1), convert(x.CONFIGS, y(left downto left-len(x.CONFIGS)+1)));
      left := left - len(x.CONFIGS);
      assign(y(left downto left-len(x.PL_ST)+1), convert(x.PL_ST, y(left downto left-len(x.PL_ST)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: TAR_CTRL_t) return TAR_CTRL_t is
    variable y: TAR_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.ACTIONS := structify(x(left to left+len(y.ACTIONS)-1), y.ACTIONS);
      left := left + len(y.ACTIONS);
      y.CONFIGS := structify(x(left to left+len(y.CONFIGS)-1), y.CONFIGS);
      left := left + len(y.CONFIGS);
      y.PL_ST := structify(x(left to left+len(y.PL_ST)-1), y.PL_ST);
    else
      y.ACTIONS := structify(x(left downto left-len(y.ACTIONS)+1), y.ACTIONS);
      left := left - len(y.ACTIONS);
      y.CONFIGS := structify(x(left downto left-len(y.CONFIGS)+1), y.CONFIGS);
      left := left - len(y.CONFIGS);
      y.PL_ST := structify(x(left downto left-len(y.PL_ST)+1), y.PL_ST);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: TAR_CTRL_t) return TAR_CTRL_t is
    variable y: TAR_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.ACTIONS := convert(x(left to left+len(y.ACTIONS)-1), y.ACTIONS);
      left := left + len(y.ACTIONS);
      y.CONFIGS := convert(x(left to left+len(y.CONFIGS)-1), y.CONFIGS);
      left := left + len(y.CONFIGS);
      y.PL_ST := convert(x(left to left+len(y.PL_ST)-1), y.PL_ST);
    else
      y.ACTIONS := convert(x(left downto left-len(y.ACTIONS)+1), y.ACTIONS);
      left := left - len(y.ACTIONS);
      y.CONFIGS := convert(x(left downto left-len(y.CONFIGS)+1), y.CONFIGS);
      left := left - len(y.CONFIGS);
      y.PL_ST := convert(x(left downto left-len(y.PL_ST)+1), y.PL_ST);
    end if;
    return y;
  end function convert;
  function nullify(t: TAR_CTRL_t) return TAR_CTRL_t is
  variable y: TAR_CTRL_t;
  begin
    y.ACTIONS := nullify(t.ACTIONS);
    y.CONFIGS := nullify(t.CONFIGS);
    y.PL_ST := nullify(t.PL_ST);
    return y;
  end function nullify;
  function zeroed(t: TAR_CTRL_t) return TAR_CTRL_t is
  variable y: TAR_CTRL_t;
  begin
    y.ACTIONS := zeroed(t.ACTIONS);
    y.CONFIGS := zeroed(t.CONFIGS);
    y.PL_ST := zeroed(t.PL_ST);
    return y;
  end function zeroed;

end package body TAR_CTRL;
