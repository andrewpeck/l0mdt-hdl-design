-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl

library ieee;

use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;

use shared_lib.common_ieee.all;

package HAL_CTRL is

  type HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t is record
    READY : std_logic;
    FEC_ERR_CNT : std_logic_vector(16-1 downto 0);
  end record HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t;
  function len(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t) return natural;
  function width(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t) return natural;
  function vectorify(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t;
  function nullify(t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t;
  function zeroed(t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t;

  type HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY is array(2-1 downto 0) of HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t;
  function len(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return natural;
  function width(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return natural;
  function vectorify(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY;
  function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY;
  function nullify(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY;
  function zeroed(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY;

  type HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t is record
    RESET : std_logic;
  end record HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t;
  function len(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t) return natural;
  function width(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t) return natural;
  function vectorify(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t;
  function nullify(t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t;
  function zeroed(t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t;

  type HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY is array(2-1 downto 0) of HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t;
  function len(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return natural;
  function width(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return natural;
  function vectorify(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY;
  function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY;
  function nullify(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY;
  function zeroed(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY;

  type HAL_CSM_CSM_LPGBT_UPLINK_MON_t is record
    UPLINK : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY;
  end record HAL_CSM_CSM_LPGBT_UPLINK_MON_t;
  function len(x: HAL_CSM_CSM_LPGBT_UPLINK_MON_t) return natural;
  function width(x: HAL_CSM_CSM_LPGBT_UPLINK_MON_t) return natural;
  function vectorify(x: HAL_CSM_CSM_LPGBT_UPLINK_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_MON_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_MON_t;
  function nullify(t: HAL_CSM_CSM_LPGBT_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_MON_t;
  function zeroed(t: HAL_CSM_CSM_LPGBT_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_MON_t;

  type HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t is record
    UPLINK : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY;
  end record HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t;
  function len(x: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t) return natural;
  function width(x: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t) return natural;
  function vectorify(x: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t;
  function nullify(t: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t;
  function zeroed(t: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t;

  type HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t is record
    READY : std_logic;
  end record HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t;
  function len(x: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t) return natural;
  function width(x: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t) return natural;
  function vectorify(x: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t;
  function nullify(t: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t;
  function zeroed(t: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t;

  type HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t is record
    RESET : std_logic;
  end record HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t;
  function len(x: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t) return natural;
  function width(x: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t) return natural;
  function vectorify(x: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t;
  function nullify(t: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t;
  function zeroed(t: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t;

  type HAL_CSM_CSM_LPGBT_MON_t is record
    UPLINK : HAL_CSM_CSM_LPGBT_UPLINK_MON_t;
    DOWNLINK : HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t;
  end record HAL_CSM_CSM_LPGBT_MON_t;
  function len(x: HAL_CSM_CSM_LPGBT_MON_t) return natural;
  function width(x: HAL_CSM_CSM_LPGBT_MON_t) return natural;
  function vectorify(x: HAL_CSM_CSM_LPGBT_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_LPGBT_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_MON_t) return HAL_CSM_CSM_LPGBT_MON_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_MON_t) return HAL_CSM_CSM_LPGBT_MON_t;
  function nullify(t: HAL_CSM_CSM_LPGBT_MON_t) return HAL_CSM_CSM_LPGBT_MON_t;
  function zeroed(t: HAL_CSM_CSM_LPGBT_MON_t) return HAL_CSM_CSM_LPGBT_MON_t;

  type HAL_CSM_CSM_LPGBT_CTRL_t is record
    UPLINK : HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t;
    DOWNLINK : HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t;
  end record HAL_CSM_CSM_LPGBT_CTRL_t;
  function len(x: HAL_CSM_CSM_LPGBT_CTRL_t) return natural;
  function width(x: HAL_CSM_CSM_LPGBT_CTRL_t) return natural;
  function vectorify(x: HAL_CSM_CSM_LPGBT_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_LPGBT_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_CTRL_t) return HAL_CSM_CSM_LPGBT_CTRL_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_CTRL_t) return HAL_CSM_CSM_LPGBT_CTRL_t;
  function nullify(t: HAL_CSM_CSM_LPGBT_CTRL_t) return HAL_CSM_CSM_LPGBT_CTRL_t;
  function zeroed(t: HAL_CSM_CSM_LPGBT_CTRL_t) return HAL_CSM_CSM_LPGBT_CTRL_t;

  type HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t is record
    RX_LEN : std_logic_vector(8-1 downto 0);
    RX_ADDRESS : std_logic_vector(8-1 downto 0);
    RX_CONTROL : std_logic_vector(8-1 downto 0);
    RX_TRANSID : std_logic_vector(8-1 downto 0);
    RX_ERR : std_logic_vector(8-1 downto 0);
    RX_RECEIVED : std_logic;
    RX_CHANNEL : std_logic_vector(8-1 downto 0);
    RX_DATA : std_logic_vector(32-1 downto 0);
  end record HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t;
  function len(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t) return natural;
  function width(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t) return natural;
  function vectorify(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t;
  function nullify(t: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t;
  function zeroed(t: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t;

  type HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY is array(3-1 downto 0) of HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t;
  function len(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY) return natural;
  function width(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY) return natural;
  function vectorify(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY) return HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY;
  function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY) return HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY;
  function nullify(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY) return HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY;
  function zeroed(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY) return HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY;

  type HAL_CSM_CSM_SC_MASTER_RX_MON_t is record
    RX : HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY;
  end record HAL_CSM_CSM_SC_MASTER_RX_MON_t;
  function len(x: HAL_CSM_CSM_SC_MASTER_RX_MON_t) return natural;
  function width(x: HAL_CSM_CSM_SC_MASTER_RX_MON_t) return natural;
  function vectorify(x: HAL_CSM_CSM_SC_MASTER_RX_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_SC_MASTER_RX_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_RX_MON_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_RX_MON_t;
  function nullify(t: HAL_CSM_CSM_SC_MASTER_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_RX_MON_t;
  function zeroed(t: HAL_CSM_CSM_SC_MASTER_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_RX_MON_t;

  type HAL_CSM_CSM_SC_MASTER_MON_t is record
    RX_DATA_FROM_GBTX : std_logic_vector(8-1 downto 0);
    TX_READY : std_logic;
    RX_EMPTY : std_logic;
    RX : HAL_CSM_CSM_SC_MASTER_RX_MON_t;
  end record HAL_CSM_CSM_SC_MASTER_MON_t;
  function len(x: HAL_CSM_CSM_SC_MASTER_MON_t) return natural;
  function width(x: HAL_CSM_CSM_SC_MASTER_MON_t) return natural;
  function vectorify(x: HAL_CSM_CSM_SC_MASTER_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_SC_MASTER_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_MON_t) return HAL_CSM_CSM_SC_MASTER_MON_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_MON_t) return HAL_CSM_CSM_SC_MASTER_MON_t;
  function nullify(t: HAL_CSM_CSM_SC_MASTER_MON_t) return HAL_CSM_CSM_SC_MASTER_MON_t;
  function zeroed(t: HAL_CSM_CSM_SC_MASTER_MON_t) return HAL_CSM_CSM_SC_MASTER_MON_t;

  type HAL_CSM_CSM_SC_MASTER_CTRL_t is record
    TX_RESET : std_logic;
    RX_RESET : std_logic;
    TX_START_WRITE : std_logic;
    TX_START_READ : std_logic;
    TX_GBTX_ADDR : std_logic_vector(8-1 downto 0);
    TX_REGISTER_ADDR : std_logic_vector(16-1 downto 0);
    TX_NUM_BYTES_TO_READ : std_logic_vector(16-1 downto 0);
    TX_DATA_TO_GBTX : std_logic_vector(8-1 downto 0);
    TX_WR : std_logic;
    RX_RD : std_logic;
    TX_CMD : std_logic_vector(8-1 downto 0);
    TX_ADDRESS : std_logic_vector(8-1 downto 0);
    TX_TRANSID : std_logic_vector(8-1 downto 0);
    TX_CHANNEL : std_logic_vector(8-1 downto 0);
    TX_DATA : std_logic_vector(32-1 downto 0);
    SCA_ENABLE : std_logic_vector(3-1 downto 0);
    START_RESET : std_logic;
    START_CONNECT : std_logic;
    START_COMMAND : std_logic;
    INJ_CRC_ERR : std_logic;
  end record HAL_CSM_CSM_SC_MASTER_CTRL_t;
  function len(x: HAL_CSM_CSM_SC_MASTER_CTRL_t) return natural;
  function width(x: HAL_CSM_CSM_SC_MASTER_CTRL_t) return natural;
  function vectorify(x: HAL_CSM_CSM_SC_MASTER_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_SC_MASTER_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_CTRL_t) return HAL_CSM_CSM_SC_MASTER_CTRL_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_CTRL_t) return HAL_CSM_CSM_SC_MASTER_CTRL_t;
  function nullify(t: HAL_CSM_CSM_SC_MASTER_CTRL_t) return HAL_CSM_CSM_SC_MASTER_CTRL_t;
  function zeroed(t: HAL_CSM_CSM_SC_MASTER_CTRL_t) return HAL_CSM_CSM_SC_MASTER_CTRL_t;

  type HAL_CSM_CSM_SC_SLAVE_MON_t is record
    RX_DATA_FROM_GBTX : std_logic_vector(8-1 downto 0);
    TX_READY : std_logic;
    RX_EMPTY : std_logic;
  end record HAL_CSM_CSM_SC_SLAVE_MON_t;
  function len(x: HAL_CSM_CSM_SC_SLAVE_MON_t) return natural;
  function width(x: HAL_CSM_CSM_SC_SLAVE_MON_t) return natural;
  function vectorify(x: HAL_CSM_CSM_SC_SLAVE_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_SC_SLAVE_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_SC_SLAVE_MON_t) return HAL_CSM_CSM_SC_SLAVE_MON_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_SC_SLAVE_MON_t) return HAL_CSM_CSM_SC_SLAVE_MON_t;
  function nullify(t: HAL_CSM_CSM_SC_SLAVE_MON_t) return HAL_CSM_CSM_SC_SLAVE_MON_t;
  function zeroed(t: HAL_CSM_CSM_SC_SLAVE_MON_t) return HAL_CSM_CSM_SC_SLAVE_MON_t;

  type HAL_CSM_CSM_SC_SLAVE_CTRL_t is record
    TX_RESET : std_logic;
    RX_RESET : std_logic;
    TX_START_WRITE : std_logic;
    TX_START_READ : std_logic;
    TX_GBTX_ADDR : std_logic_vector(8-1 downto 0);
    TX_REGISTER_ADDR : std_logic_vector(16-1 downto 0);
    TX_NUM_BYTES_TO_READ : std_logic_vector(16-1 downto 0);
    TX_DATA_TO_GBTX : std_logic_vector(8-1 downto 0);
    TX_WR : std_logic;
    RX_RD : std_logic;
  end record HAL_CSM_CSM_SC_SLAVE_CTRL_t;
  function len(x: HAL_CSM_CSM_SC_SLAVE_CTRL_t) return natural;
  function width(x: HAL_CSM_CSM_SC_SLAVE_CTRL_t) return natural;
  function vectorify(x: HAL_CSM_CSM_SC_SLAVE_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_SC_SLAVE_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_SC_SLAVE_CTRL_t) return HAL_CSM_CSM_SC_SLAVE_CTRL_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_SC_SLAVE_CTRL_t) return HAL_CSM_CSM_SC_SLAVE_CTRL_t;
  function nullify(t: HAL_CSM_CSM_SC_SLAVE_CTRL_t) return HAL_CSM_CSM_SC_SLAVE_CTRL_t;
  function zeroed(t: HAL_CSM_CSM_SC_SLAVE_CTRL_t) return HAL_CSM_CSM_SC_SLAVE_CTRL_t;

  type HAL_CSM_CSM_SC_MON_t is record
    MASTER : HAL_CSM_CSM_SC_MASTER_MON_t;
    SLAVE : HAL_CSM_CSM_SC_SLAVE_MON_t;
  end record HAL_CSM_CSM_SC_MON_t;
  function len(x: HAL_CSM_CSM_SC_MON_t) return natural;
  function width(x: HAL_CSM_CSM_SC_MON_t) return natural;
  function vectorify(x: HAL_CSM_CSM_SC_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_SC_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MON_t) return HAL_CSM_CSM_SC_MON_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MON_t) return HAL_CSM_CSM_SC_MON_t;
  function nullify(t: HAL_CSM_CSM_SC_MON_t) return HAL_CSM_CSM_SC_MON_t;
  function zeroed(t: HAL_CSM_CSM_SC_MON_t) return HAL_CSM_CSM_SC_MON_t;

  type HAL_CSM_CSM_SC_CTRL_t is record
    MASTER : HAL_CSM_CSM_SC_MASTER_CTRL_t;
    SLAVE : HAL_CSM_CSM_SC_SLAVE_CTRL_t;
  end record HAL_CSM_CSM_SC_CTRL_t;
  function len(x: HAL_CSM_CSM_SC_CTRL_t) return natural;
  function width(x: HAL_CSM_CSM_SC_CTRL_t) return natural;
  function vectorify(x: HAL_CSM_CSM_SC_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_SC_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_SC_CTRL_t) return HAL_CSM_CSM_SC_CTRL_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_SC_CTRL_t) return HAL_CSM_CSM_SC_CTRL_t;
  function nullify(t: HAL_CSM_CSM_SC_CTRL_t) return HAL_CSM_CSM_SC_CTRL_t;
  function zeroed(t: HAL_CSM_CSM_SC_CTRL_t) return HAL_CSM_CSM_SC_CTRL_t;

  type HAL_CSM_CSM_MON_t is record
    LPGBT : HAL_CSM_CSM_LPGBT_MON_t;
    SC : HAL_CSM_CSM_SC_MON_t;
  end record HAL_CSM_CSM_MON_t;
  function len(x: HAL_CSM_CSM_MON_t) return natural;
  function width(x: HAL_CSM_CSM_MON_t) return natural;
  function vectorify(x: HAL_CSM_CSM_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_MON_t) return HAL_CSM_CSM_MON_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_MON_t) return HAL_CSM_CSM_MON_t;
  function nullify(t: HAL_CSM_CSM_MON_t) return HAL_CSM_CSM_MON_t;
  function zeroed(t: HAL_CSM_CSM_MON_t) return HAL_CSM_CSM_MON_t;

  type HAL_CSM_CSM_MON_t_ARRAY is array(18-1 downto 0) of HAL_CSM_CSM_MON_t;
  function len(x: HAL_CSM_CSM_MON_t_ARRAY) return natural;
  function width(x: HAL_CSM_CSM_MON_t_ARRAY) return natural;
  function vectorify(x: HAL_CSM_CSM_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: HAL_CSM_CSM_MON_t_ARRAY) return HAL_CSM_CSM_MON_t_ARRAY;
  function convert(x: std_logic_vector; t: HAL_CSM_CSM_MON_t_ARRAY) return HAL_CSM_CSM_MON_t_ARRAY;
  function nullify(x: HAL_CSM_CSM_MON_t_ARRAY) return HAL_CSM_CSM_MON_t_ARRAY;
  function zeroed(x: HAL_CSM_CSM_MON_t_ARRAY) return HAL_CSM_CSM_MON_t_ARRAY;

  type HAL_CSM_CSM_CTRL_t is record
    LPGBT : HAL_CSM_CSM_LPGBT_CTRL_t;
    SC : HAL_CSM_CSM_SC_CTRL_t;
  end record HAL_CSM_CSM_CTRL_t;
  function len(x: HAL_CSM_CSM_CTRL_t) return natural;
  function width(x: HAL_CSM_CSM_CTRL_t) return natural;
  function vectorify(x: HAL_CSM_CSM_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_CTRL_t) return HAL_CSM_CSM_CTRL_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_CTRL_t) return HAL_CSM_CSM_CTRL_t;
  function nullify(t: HAL_CSM_CSM_CTRL_t) return HAL_CSM_CSM_CTRL_t;
  function zeroed(t: HAL_CSM_CSM_CTRL_t) return HAL_CSM_CSM_CTRL_t;

  type HAL_CSM_CSM_CTRL_t_ARRAY is array(18-1 downto 0) of HAL_CSM_CSM_CTRL_t;
  function len(x: HAL_CSM_CSM_CTRL_t_ARRAY) return natural;
  function width(x: HAL_CSM_CSM_CTRL_t_ARRAY) return natural;
  function vectorify(x: HAL_CSM_CSM_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CSM_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector;
  function structify(x: std_logic_vector; t: HAL_CSM_CSM_CTRL_t_ARRAY) return HAL_CSM_CSM_CTRL_t_ARRAY;
  function convert(x: std_logic_vector; t: HAL_CSM_CSM_CTRL_t_ARRAY) return HAL_CSM_CSM_CTRL_t_ARRAY;
  function nullify(x: HAL_CSM_CSM_CTRL_t_ARRAY) return HAL_CSM_CSM_CTRL_t_ARRAY;
  function zeroed(x: HAL_CSM_CSM_CTRL_t_ARRAY) return HAL_CSM_CSM_CTRL_t_ARRAY;

  type HAL_CSM_MON_t is record
    CSM : HAL_CSM_CSM_MON_t_ARRAY;
  end record HAL_CSM_MON_t;
  function len(x: HAL_CSM_MON_t) return natural;
  function width(x: HAL_CSM_MON_t) return natural;
  function vectorify(x: HAL_CSM_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_MON_t) return HAL_CSM_MON_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_MON_t) return HAL_CSM_MON_t;
  function nullify(t: HAL_CSM_MON_t) return HAL_CSM_MON_t;
  function zeroed(t: HAL_CSM_MON_t) return HAL_CSM_MON_t;

  type HAL_CSM_CTRL_t is record
    CSM : HAL_CSM_CSM_CTRL_t_ARRAY;
  end record HAL_CSM_CTRL_t;
  function len(x: HAL_CSM_CTRL_t) return natural;
  function width(x: HAL_CSM_CTRL_t) return natural;
  function vectorify(x: HAL_CSM_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CSM_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CSM_CTRL_t) return HAL_CSM_CTRL_t;
  function convert(x: in std_logic_vector; t: HAL_CSM_CTRL_t) return HAL_CSM_CTRL_t;
  function nullify(t: HAL_CSM_CTRL_t) return HAL_CSM_CTRL_t;
  function zeroed(t: HAL_CSM_CTRL_t) return HAL_CSM_CTRL_t;

  type HAL_MON_t is record
    CSM : HAL_CSM_MON_t;
  end record HAL_MON_t;
  function len(x: HAL_MON_t) return natural;
  function width(x: HAL_MON_t) return natural;
  function vectorify(x: HAL_MON_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_MON_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_MON_t) return HAL_MON_t;
  function convert(x: in std_logic_vector; t: HAL_MON_t) return HAL_MON_t;
  function nullify(t: HAL_MON_t) return HAL_MON_t;
  function zeroed(t: HAL_MON_t) return HAL_MON_t;

  type HAL_CTRL_t is record
    RESET_DOWNLINKS : std_logic;
    RESET_UPLINKS : std_logic;
    RESET_COUNTERS : std_logic;
    CSM : HAL_CSM_CTRL_t;
  end record HAL_CTRL_t;
  function len(x: HAL_CTRL_t) return natural;
  function width(x: HAL_CTRL_t) return natural;
  function vectorify(x: HAL_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function convert(x: HAL_CTRL_t; t: std_logic_vector) return std_logic_vector;
  function structify(x: in std_logic_vector; t: HAL_CTRL_t) return HAL_CTRL_t;
  function convert(x: in std_logic_vector; t: HAL_CTRL_t) return HAL_CTRL_t;
  function nullify(t: HAL_CTRL_t) return HAL_CTRL_t;
  function zeroed(t: HAL_CTRL_t) return HAL_CTRL_t;

end package HAL_CTRL;

------------------------------------------------------------

package body HAL_CTRL is

  function len(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.READY);
    l := l + len(x.FEC_ERR_CNT);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.READY);
    l := l + width(x.FEC_ERR_CNT);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.READY)-1), vectorify(x.READY, y(left to left+len(x.READY)-1)));
      left := left + len(x.READY);
      assign(y(left to left+len(x.FEC_ERR_CNT)-1), vectorify(x.FEC_ERR_CNT, y(left to left+len(x.FEC_ERR_CNT)-1)));
    else
      assign(y(left downto left-len(x.READY)+1), vectorify(x.READY, y(left downto left-len(x.READY)+1)));
      left := left - len(x.READY);
      assign(y(left downto left-len(x.FEC_ERR_CNT)+1), vectorify(x.FEC_ERR_CNT, y(left downto left-len(x.FEC_ERR_CNT)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.READY)-1), convert(x.READY, y(left to left+len(x.READY)-1)));
      left := left + len(x.READY);
      assign(y(left to left+len(x.FEC_ERR_CNT)-1), convert(x.FEC_ERR_CNT, y(left to left+len(x.FEC_ERR_CNT)-1)));
    else
      assign(y(left downto left-len(x.READY)+1), convert(x.READY, y(left downto left-len(x.READY)+1)));
      left := left - len(x.READY);
      assign(y(left downto left-len(x.FEC_ERR_CNT)+1), convert(x.FEC_ERR_CNT, y(left downto left-len(x.FEC_ERR_CNT)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t is
    variable y: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.READY := structify(x(left to left+len(y.READY)-1), y.READY);
      left := left + len(y.READY);
      y.FEC_ERR_CNT := structify(x(left to left+len(y.FEC_ERR_CNT)-1), y.FEC_ERR_CNT);
    else
      y.READY := structify(x(left downto left-len(y.READY)+1), y.READY);
      left := left - len(y.READY);
      y.FEC_ERR_CNT := structify(x(left downto left-len(y.FEC_ERR_CNT)+1), y.FEC_ERR_CNT);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t is
    variable y: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.READY := convert(x(left to left+len(y.READY)-1), y.READY);
      left := left + len(y.READY);
      y.FEC_ERR_CNT := convert(x(left to left+len(y.FEC_ERR_CNT)-1), y.FEC_ERR_CNT);
    else
      y.READY := convert(x(left downto left-len(y.READY)+1), y.READY);
      left := left - len(y.READY);
      y.FEC_ERR_CNT := convert(x(left downto left-len(y.FEC_ERR_CNT)+1), y.FEC_ERR_CNT);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t is
  variable y: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t;
  begin
    y.READY := nullify(t.READY);
    y.FEC_ERR_CNT := nullify(t.FEC_ERR_CNT);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t is
  variable y: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t;
  begin
    y.READY := zeroed(t.READY);
    y.FEC_ERR_CNT := zeroed(t.FEC_ERR_CNT);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * len(x(x'left));
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * width(x(x'left));
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), vectorify(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), vectorify(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), convert(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), convert(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function convert;
  function structify(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY is
    variable y : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY is
    variable y : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := convert(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := convert(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function convert;
  function nullify(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY is
    variable y : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;
  function zeroed(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY is
    variable y : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := zeroed(y(i));
    end loop l;
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.RESET);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.RESET);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.RESET)-1), vectorify(x.RESET, y(left to left+len(x.RESET)-1)));
    else
      assign(y(left downto left-len(x.RESET)+1), vectorify(x.RESET, y(left downto left-len(x.RESET)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.RESET)-1), convert(x.RESET, y(left to left+len(x.RESET)-1)));
    else
      assign(y(left downto left-len(x.RESET)+1), convert(x.RESET, y(left downto left-len(x.RESET)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t is
    variable y: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.RESET := structify(x(left to left+len(y.RESET)-1), y.RESET);
    else
      y.RESET := structify(x(left downto left-len(y.RESET)+1), y.RESET);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t is
    variable y: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.RESET := convert(x(left to left+len(y.RESET)-1), y.RESET);
    else
      y.RESET := convert(x(left downto left-len(y.RESET)+1), y.RESET);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t is
  variable y: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t;
  begin
    y.RESET := nullify(t.RESET);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t is
  variable y: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t;
  begin
    y.RESET := zeroed(t.RESET);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * len(x(x'left));
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * width(x(x'left));
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), vectorify(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), vectorify(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), convert(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), convert(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function convert;
  function structify(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY is
    variable y : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY is
    variable y : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := convert(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := convert(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function convert;
  function nullify(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY is
    variable y : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;
  function zeroed(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY is
    variable y : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := zeroed(y(i));
    end loop l;
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_LPGBT_UPLINK_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.UPLINK);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_LPGBT_UPLINK_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.UPLINK);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_LPGBT_UPLINK_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.UPLINK)-1), vectorify(x.UPLINK, y(left to left+len(x.UPLINK)-1)));
    else
      assign(y(left downto left-len(x.UPLINK)+1), vectorify(x.UPLINK, y(left downto left-len(x.UPLINK)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.UPLINK)-1), convert(x.UPLINK, y(left to left+len(x.UPLINK)-1)));
    else
      assign(y(left downto left-len(x.UPLINK)+1), convert(x.UPLINK, y(left downto left-len(x.UPLINK)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_MON_t is
    variable y: HAL_CSM_CSM_LPGBT_UPLINK_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.UPLINK := structify(x(left to left+len(y.UPLINK)-1), y.UPLINK);
    else
      y.UPLINK := structify(x(left downto left-len(y.UPLINK)+1), y.UPLINK);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_MON_t is
    variable y: HAL_CSM_CSM_LPGBT_UPLINK_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.UPLINK := convert(x(left to left+len(y.UPLINK)-1), y.UPLINK);
    else
      y.UPLINK := convert(x(left downto left-len(y.UPLINK)+1), y.UPLINK);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_LPGBT_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_MON_t is
  variable y: HAL_CSM_CSM_LPGBT_UPLINK_MON_t;
  begin
    y.UPLINK := nullify(t.UPLINK);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_LPGBT_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_MON_t is
  variable y: HAL_CSM_CSM_LPGBT_UPLINK_MON_t;
  begin
    y.UPLINK := zeroed(t.UPLINK);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.UPLINK);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.UPLINK);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.UPLINK)-1), vectorify(x.UPLINK, y(left to left+len(x.UPLINK)-1)));
    else
      assign(y(left downto left-len(x.UPLINK)+1), vectorify(x.UPLINK, y(left downto left-len(x.UPLINK)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.UPLINK)-1), convert(x.UPLINK, y(left to left+len(x.UPLINK)-1)));
    else
      assign(y(left downto left-len(x.UPLINK)+1), convert(x.UPLINK, y(left downto left-len(x.UPLINK)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t is
    variable y: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.UPLINK := structify(x(left to left+len(y.UPLINK)-1), y.UPLINK);
    else
      y.UPLINK := structify(x(left downto left-len(y.UPLINK)+1), y.UPLINK);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t is
    variable y: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.UPLINK := convert(x(left to left+len(y.UPLINK)-1), y.UPLINK);
    else
      y.UPLINK := convert(x(left downto left-len(y.UPLINK)+1), y.UPLINK);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t is
  variable y: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t;
  begin
    y.UPLINK := nullify(t.UPLINK);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t is
  variable y: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t;
  begin
    y.UPLINK := zeroed(t.UPLINK);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.READY);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.READY);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.READY)-1), vectorify(x.READY, y(left to left+len(x.READY)-1)));
    else
      assign(y(left downto left-len(x.READY)+1), vectorify(x.READY, y(left downto left-len(x.READY)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.READY)-1), convert(x.READY, y(left to left+len(x.READY)-1)));
    else
      assign(y(left downto left-len(x.READY)+1), convert(x.READY, y(left downto left-len(x.READY)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t is
    variable y: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.READY := structify(x(left to left+len(y.READY)-1), y.READY);
    else
      y.READY := structify(x(left downto left-len(y.READY)+1), y.READY);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t is
    variable y: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.READY := convert(x(left to left+len(y.READY)-1), y.READY);
    else
      y.READY := convert(x(left downto left-len(y.READY)+1), y.READY);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t is
  variable y: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t;
  begin
    y.READY := nullify(t.READY);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t is
  variable y: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t;
  begin
    y.READY := zeroed(t.READY);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.RESET);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.RESET);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.RESET)-1), vectorify(x.RESET, y(left to left+len(x.RESET)-1)));
    else
      assign(y(left downto left-len(x.RESET)+1), vectorify(x.RESET, y(left downto left-len(x.RESET)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.RESET)-1), convert(x.RESET, y(left to left+len(x.RESET)-1)));
    else
      assign(y(left downto left-len(x.RESET)+1), convert(x.RESET, y(left downto left-len(x.RESET)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t is
    variable y: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.RESET := structify(x(left to left+len(y.RESET)-1), y.RESET);
    else
      y.RESET := structify(x(left downto left-len(y.RESET)+1), y.RESET);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t is
    variable y: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.RESET := convert(x(left to left+len(y.RESET)-1), y.RESET);
    else
      y.RESET := convert(x(left downto left-len(y.RESET)+1), y.RESET);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t is
  variable y: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t;
  begin
    y.RESET := nullify(t.RESET);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t is
  variable y: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t;
  begin
    y.RESET := zeroed(t.RESET);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_LPGBT_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.UPLINK);
    l := l + len(x.DOWNLINK);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_LPGBT_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.UPLINK);
    l := l + width(x.DOWNLINK);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_LPGBT_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.UPLINK)-1), vectorify(x.UPLINK, y(left to left+len(x.UPLINK)-1)));
      left := left + len(x.UPLINK);
      assign(y(left to left+len(x.DOWNLINK)-1), vectorify(x.DOWNLINK, y(left to left+len(x.DOWNLINK)-1)));
    else
      assign(y(left downto left-len(x.UPLINK)+1), vectorify(x.UPLINK, y(left downto left-len(x.UPLINK)+1)));
      left := left - len(x.UPLINK);
      assign(y(left downto left-len(x.DOWNLINK)+1), vectorify(x.DOWNLINK, y(left downto left-len(x.DOWNLINK)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_LPGBT_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.UPLINK)-1), convert(x.UPLINK, y(left to left+len(x.UPLINK)-1)));
      left := left + len(x.UPLINK);
      assign(y(left to left+len(x.DOWNLINK)-1), convert(x.DOWNLINK, y(left to left+len(x.DOWNLINK)-1)));
    else
      assign(y(left downto left-len(x.UPLINK)+1), convert(x.UPLINK, y(left downto left-len(x.UPLINK)+1)));
      left := left - len(x.UPLINK);
      assign(y(left downto left-len(x.DOWNLINK)+1), convert(x.DOWNLINK, y(left downto left-len(x.DOWNLINK)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_MON_t) return HAL_CSM_CSM_LPGBT_MON_t is
    variable y: HAL_CSM_CSM_LPGBT_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.UPLINK := structify(x(left to left+len(y.UPLINK)-1), y.UPLINK);
      left := left + len(y.UPLINK);
      y.DOWNLINK := structify(x(left to left+len(y.DOWNLINK)-1), y.DOWNLINK);
    else
      y.UPLINK := structify(x(left downto left-len(y.UPLINK)+1), y.UPLINK);
      left := left - len(y.UPLINK);
      y.DOWNLINK := structify(x(left downto left-len(y.DOWNLINK)+1), y.DOWNLINK);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_MON_t) return HAL_CSM_CSM_LPGBT_MON_t is
    variable y: HAL_CSM_CSM_LPGBT_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.UPLINK := convert(x(left to left+len(y.UPLINK)-1), y.UPLINK);
      left := left + len(y.UPLINK);
      y.DOWNLINK := convert(x(left to left+len(y.DOWNLINK)-1), y.DOWNLINK);
    else
      y.UPLINK := convert(x(left downto left-len(y.UPLINK)+1), y.UPLINK);
      left := left - len(y.UPLINK);
      y.DOWNLINK := convert(x(left downto left-len(y.DOWNLINK)+1), y.DOWNLINK);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_LPGBT_MON_t) return HAL_CSM_CSM_LPGBT_MON_t is
  variable y: HAL_CSM_CSM_LPGBT_MON_t;
  begin
    y.UPLINK := nullify(t.UPLINK);
    y.DOWNLINK := nullify(t.DOWNLINK);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_LPGBT_MON_t) return HAL_CSM_CSM_LPGBT_MON_t is
  variable y: HAL_CSM_CSM_LPGBT_MON_t;
  begin
    y.UPLINK := zeroed(t.UPLINK);
    y.DOWNLINK := zeroed(t.DOWNLINK);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_LPGBT_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.UPLINK);
    l := l + len(x.DOWNLINK);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_LPGBT_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.UPLINK);
    l := l + width(x.DOWNLINK);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_LPGBT_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.UPLINK)-1), vectorify(x.UPLINK, y(left to left+len(x.UPLINK)-1)));
      left := left + len(x.UPLINK);
      assign(y(left to left+len(x.DOWNLINK)-1), vectorify(x.DOWNLINK, y(left to left+len(x.DOWNLINK)-1)));
    else
      assign(y(left downto left-len(x.UPLINK)+1), vectorify(x.UPLINK, y(left downto left-len(x.UPLINK)+1)));
      left := left - len(x.UPLINK);
      assign(y(left downto left-len(x.DOWNLINK)+1), vectorify(x.DOWNLINK, y(left downto left-len(x.DOWNLINK)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_LPGBT_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.UPLINK)-1), convert(x.UPLINK, y(left to left+len(x.UPLINK)-1)));
      left := left + len(x.UPLINK);
      assign(y(left to left+len(x.DOWNLINK)-1), convert(x.DOWNLINK, y(left to left+len(x.DOWNLINK)-1)));
    else
      assign(y(left downto left-len(x.UPLINK)+1), convert(x.UPLINK, y(left downto left-len(x.UPLINK)+1)));
      left := left - len(x.UPLINK);
      assign(y(left downto left-len(x.DOWNLINK)+1), convert(x.DOWNLINK, y(left downto left-len(x.DOWNLINK)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_CTRL_t) return HAL_CSM_CSM_LPGBT_CTRL_t is
    variable y: HAL_CSM_CSM_LPGBT_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.UPLINK := structify(x(left to left+len(y.UPLINK)-1), y.UPLINK);
      left := left + len(y.UPLINK);
      y.DOWNLINK := structify(x(left to left+len(y.DOWNLINK)-1), y.DOWNLINK);
    else
      y.UPLINK := structify(x(left downto left-len(y.UPLINK)+1), y.UPLINK);
      left := left - len(y.UPLINK);
      y.DOWNLINK := structify(x(left downto left-len(y.DOWNLINK)+1), y.DOWNLINK);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_LPGBT_CTRL_t) return HAL_CSM_CSM_LPGBT_CTRL_t is
    variable y: HAL_CSM_CSM_LPGBT_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.UPLINK := convert(x(left to left+len(y.UPLINK)-1), y.UPLINK);
      left := left + len(y.UPLINK);
      y.DOWNLINK := convert(x(left to left+len(y.DOWNLINK)-1), y.DOWNLINK);
    else
      y.UPLINK := convert(x(left downto left-len(y.UPLINK)+1), y.UPLINK);
      left := left - len(y.UPLINK);
      y.DOWNLINK := convert(x(left downto left-len(y.DOWNLINK)+1), y.DOWNLINK);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_LPGBT_CTRL_t) return HAL_CSM_CSM_LPGBT_CTRL_t is
  variable y: HAL_CSM_CSM_LPGBT_CTRL_t;
  begin
    y.UPLINK := nullify(t.UPLINK);
    y.DOWNLINK := nullify(t.DOWNLINK);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_LPGBT_CTRL_t) return HAL_CSM_CSM_LPGBT_CTRL_t is
  variable y: HAL_CSM_CSM_LPGBT_CTRL_t;
  begin
    y.UPLINK := zeroed(t.UPLINK);
    y.DOWNLINK := zeroed(t.DOWNLINK);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.RX_LEN);
    l := l + len(x.RX_ADDRESS);
    l := l + len(x.RX_CONTROL);
    l := l + len(x.RX_TRANSID);
    l := l + len(x.RX_ERR);
    l := l + len(x.RX_RECEIVED);
    l := l + len(x.RX_CHANNEL);
    l := l + len(x.RX_DATA);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.RX_LEN);
    l := l + width(x.RX_ADDRESS);
    l := l + width(x.RX_CONTROL);
    l := l + width(x.RX_TRANSID);
    l := l + width(x.RX_ERR);
    l := l + width(x.RX_RECEIVED);
    l := l + width(x.RX_CHANNEL);
    l := l + width(x.RX_DATA);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.RX_LEN)-1), vectorify(x.RX_LEN, y(left to left+len(x.RX_LEN)-1)));
      left := left + len(x.RX_LEN);
      assign(y(left to left+len(x.RX_ADDRESS)-1), vectorify(x.RX_ADDRESS, y(left to left+len(x.RX_ADDRESS)-1)));
      left := left + len(x.RX_ADDRESS);
      assign(y(left to left+len(x.RX_CONTROL)-1), vectorify(x.RX_CONTROL, y(left to left+len(x.RX_CONTROL)-1)));
      left := left + len(x.RX_CONTROL);
      assign(y(left to left+len(x.RX_TRANSID)-1), vectorify(x.RX_TRANSID, y(left to left+len(x.RX_TRANSID)-1)));
      left := left + len(x.RX_TRANSID);
      assign(y(left to left+len(x.RX_ERR)-1), vectorify(x.RX_ERR, y(left to left+len(x.RX_ERR)-1)));
      left := left + len(x.RX_ERR);
      assign(y(left to left+len(x.RX_RECEIVED)-1), vectorify(x.RX_RECEIVED, y(left to left+len(x.RX_RECEIVED)-1)));
      left := left + len(x.RX_RECEIVED);
      assign(y(left to left+len(x.RX_CHANNEL)-1), vectorify(x.RX_CHANNEL, y(left to left+len(x.RX_CHANNEL)-1)));
      left := left + len(x.RX_CHANNEL);
      assign(y(left to left+len(x.RX_DATA)-1), vectorify(x.RX_DATA, y(left to left+len(x.RX_DATA)-1)));
    else
      assign(y(left downto left-len(x.RX_LEN)+1), vectorify(x.RX_LEN, y(left downto left-len(x.RX_LEN)+1)));
      left := left - len(x.RX_LEN);
      assign(y(left downto left-len(x.RX_ADDRESS)+1), vectorify(x.RX_ADDRESS, y(left downto left-len(x.RX_ADDRESS)+1)));
      left := left - len(x.RX_ADDRESS);
      assign(y(left downto left-len(x.RX_CONTROL)+1), vectorify(x.RX_CONTROL, y(left downto left-len(x.RX_CONTROL)+1)));
      left := left - len(x.RX_CONTROL);
      assign(y(left downto left-len(x.RX_TRANSID)+1), vectorify(x.RX_TRANSID, y(left downto left-len(x.RX_TRANSID)+1)));
      left := left - len(x.RX_TRANSID);
      assign(y(left downto left-len(x.RX_ERR)+1), vectorify(x.RX_ERR, y(left downto left-len(x.RX_ERR)+1)));
      left := left - len(x.RX_ERR);
      assign(y(left downto left-len(x.RX_RECEIVED)+1), vectorify(x.RX_RECEIVED, y(left downto left-len(x.RX_RECEIVED)+1)));
      left := left - len(x.RX_RECEIVED);
      assign(y(left downto left-len(x.RX_CHANNEL)+1), vectorify(x.RX_CHANNEL, y(left downto left-len(x.RX_CHANNEL)+1)));
      left := left - len(x.RX_CHANNEL);
      assign(y(left downto left-len(x.RX_DATA)+1), vectorify(x.RX_DATA, y(left downto left-len(x.RX_DATA)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.RX_LEN)-1), convert(x.RX_LEN, y(left to left+len(x.RX_LEN)-1)));
      left := left + len(x.RX_LEN);
      assign(y(left to left+len(x.RX_ADDRESS)-1), convert(x.RX_ADDRESS, y(left to left+len(x.RX_ADDRESS)-1)));
      left := left + len(x.RX_ADDRESS);
      assign(y(left to left+len(x.RX_CONTROL)-1), convert(x.RX_CONTROL, y(left to left+len(x.RX_CONTROL)-1)));
      left := left + len(x.RX_CONTROL);
      assign(y(left to left+len(x.RX_TRANSID)-1), convert(x.RX_TRANSID, y(left to left+len(x.RX_TRANSID)-1)));
      left := left + len(x.RX_TRANSID);
      assign(y(left to left+len(x.RX_ERR)-1), convert(x.RX_ERR, y(left to left+len(x.RX_ERR)-1)));
      left := left + len(x.RX_ERR);
      assign(y(left to left+len(x.RX_RECEIVED)-1), convert(x.RX_RECEIVED, y(left to left+len(x.RX_RECEIVED)-1)));
      left := left + len(x.RX_RECEIVED);
      assign(y(left to left+len(x.RX_CHANNEL)-1), convert(x.RX_CHANNEL, y(left to left+len(x.RX_CHANNEL)-1)));
      left := left + len(x.RX_CHANNEL);
      assign(y(left to left+len(x.RX_DATA)-1), convert(x.RX_DATA, y(left to left+len(x.RX_DATA)-1)));
    else
      assign(y(left downto left-len(x.RX_LEN)+1), convert(x.RX_LEN, y(left downto left-len(x.RX_LEN)+1)));
      left := left - len(x.RX_LEN);
      assign(y(left downto left-len(x.RX_ADDRESS)+1), convert(x.RX_ADDRESS, y(left downto left-len(x.RX_ADDRESS)+1)));
      left := left - len(x.RX_ADDRESS);
      assign(y(left downto left-len(x.RX_CONTROL)+1), convert(x.RX_CONTROL, y(left downto left-len(x.RX_CONTROL)+1)));
      left := left - len(x.RX_CONTROL);
      assign(y(left downto left-len(x.RX_TRANSID)+1), convert(x.RX_TRANSID, y(left downto left-len(x.RX_TRANSID)+1)));
      left := left - len(x.RX_TRANSID);
      assign(y(left downto left-len(x.RX_ERR)+1), convert(x.RX_ERR, y(left downto left-len(x.RX_ERR)+1)));
      left := left - len(x.RX_ERR);
      assign(y(left downto left-len(x.RX_RECEIVED)+1), convert(x.RX_RECEIVED, y(left downto left-len(x.RX_RECEIVED)+1)));
      left := left - len(x.RX_RECEIVED);
      assign(y(left downto left-len(x.RX_CHANNEL)+1), convert(x.RX_CHANNEL, y(left downto left-len(x.RX_CHANNEL)+1)));
      left := left - len(x.RX_CHANNEL);
      assign(y(left downto left-len(x.RX_DATA)+1), convert(x.RX_DATA, y(left downto left-len(x.RX_DATA)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t is
    variable y: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.RX_LEN := structify(x(left to left+len(y.RX_LEN)-1), y.RX_LEN);
      left := left + len(y.RX_LEN);
      y.RX_ADDRESS := structify(x(left to left+len(y.RX_ADDRESS)-1), y.RX_ADDRESS);
      left := left + len(y.RX_ADDRESS);
      y.RX_CONTROL := structify(x(left to left+len(y.RX_CONTROL)-1), y.RX_CONTROL);
      left := left + len(y.RX_CONTROL);
      y.RX_TRANSID := structify(x(left to left+len(y.RX_TRANSID)-1), y.RX_TRANSID);
      left := left + len(y.RX_TRANSID);
      y.RX_ERR := structify(x(left to left+len(y.RX_ERR)-1), y.RX_ERR);
      left := left + len(y.RX_ERR);
      y.RX_RECEIVED := structify(x(left to left+len(y.RX_RECEIVED)-1), y.RX_RECEIVED);
      left := left + len(y.RX_RECEIVED);
      y.RX_CHANNEL := structify(x(left to left+len(y.RX_CHANNEL)-1), y.RX_CHANNEL);
      left := left + len(y.RX_CHANNEL);
      y.RX_DATA := structify(x(left to left+len(y.RX_DATA)-1), y.RX_DATA);
    else
      y.RX_LEN := structify(x(left downto left-len(y.RX_LEN)+1), y.RX_LEN);
      left := left - len(y.RX_LEN);
      y.RX_ADDRESS := structify(x(left downto left-len(y.RX_ADDRESS)+1), y.RX_ADDRESS);
      left := left - len(y.RX_ADDRESS);
      y.RX_CONTROL := structify(x(left downto left-len(y.RX_CONTROL)+1), y.RX_CONTROL);
      left := left - len(y.RX_CONTROL);
      y.RX_TRANSID := structify(x(left downto left-len(y.RX_TRANSID)+1), y.RX_TRANSID);
      left := left - len(y.RX_TRANSID);
      y.RX_ERR := structify(x(left downto left-len(y.RX_ERR)+1), y.RX_ERR);
      left := left - len(y.RX_ERR);
      y.RX_RECEIVED := structify(x(left downto left-len(y.RX_RECEIVED)+1), y.RX_RECEIVED);
      left := left - len(y.RX_RECEIVED);
      y.RX_CHANNEL := structify(x(left downto left-len(y.RX_CHANNEL)+1), y.RX_CHANNEL);
      left := left - len(y.RX_CHANNEL);
      y.RX_DATA := structify(x(left downto left-len(y.RX_DATA)+1), y.RX_DATA);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t is
    variable y: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.RX_LEN := convert(x(left to left+len(y.RX_LEN)-1), y.RX_LEN);
      left := left + len(y.RX_LEN);
      y.RX_ADDRESS := convert(x(left to left+len(y.RX_ADDRESS)-1), y.RX_ADDRESS);
      left := left + len(y.RX_ADDRESS);
      y.RX_CONTROL := convert(x(left to left+len(y.RX_CONTROL)-1), y.RX_CONTROL);
      left := left + len(y.RX_CONTROL);
      y.RX_TRANSID := convert(x(left to left+len(y.RX_TRANSID)-1), y.RX_TRANSID);
      left := left + len(y.RX_TRANSID);
      y.RX_ERR := convert(x(left to left+len(y.RX_ERR)-1), y.RX_ERR);
      left := left + len(y.RX_ERR);
      y.RX_RECEIVED := convert(x(left to left+len(y.RX_RECEIVED)-1), y.RX_RECEIVED);
      left := left + len(y.RX_RECEIVED);
      y.RX_CHANNEL := convert(x(left to left+len(y.RX_CHANNEL)-1), y.RX_CHANNEL);
      left := left + len(y.RX_CHANNEL);
      y.RX_DATA := convert(x(left to left+len(y.RX_DATA)-1), y.RX_DATA);
    else
      y.RX_LEN := convert(x(left downto left-len(y.RX_LEN)+1), y.RX_LEN);
      left := left - len(y.RX_LEN);
      y.RX_ADDRESS := convert(x(left downto left-len(y.RX_ADDRESS)+1), y.RX_ADDRESS);
      left := left - len(y.RX_ADDRESS);
      y.RX_CONTROL := convert(x(left downto left-len(y.RX_CONTROL)+1), y.RX_CONTROL);
      left := left - len(y.RX_CONTROL);
      y.RX_TRANSID := convert(x(left downto left-len(y.RX_TRANSID)+1), y.RX_TRANSID);
      left := left - len(y.RX_TRANSID);
      y.RX_ERR := convert(x(left downto left-len(y.RX_ERR)+1), y.RX_ERR);
      left := left - len(y.RX_ERR);
      y.RX_RECEIVED := convert(x(left downto left-len(y.RX_RECEIVED)+1), y.RX_RECEIVED);
      left := left - len(y.RX_RECEIVED);
      y.RX_CHANNEL := convert(x(left downto left-len(y.RX_CHANNEL)+1), y.RX_CHANNEL);
      left := left - len(y.RX_CHANNEL);
      y.RX_DATA := convert(x(left downto left-len(y.RX_DATA)+1), y.RX_DATA);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t is
  variable y: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t;
  begin
    y.RX_LEN := nullify(t.RX_LEN);
    y.RX_ADDRESS := nullify(t.RX_ADDRESS);
    y.RX_CONTROL := nullify(t.RX_CONTROL);
    y.RX_TRANSID := nullify(t.RX_TRANSID);
    y.RX_ERR := nullify(t.RX_ERR);
    y.RX_RECEIVED := nullify(t.RX_RECEIVED);
    y.RX_CHANNEL := nullify(t.RX_CHANNEL);
    y.RX_DATA := nullify(t.RX_DATA);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t is
  variable y: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t;
  begin
    y.RX_LEN := zeroed(t.RX_LEN);
    y.RX_ADDRESS := zeroed(t.RX_ADDRESS);
    y.RX_CONTROL := zeroed(t.RX_CONTROL);
    y.RX_TRANSID := zeroed(t.RX_TRANSID);
    y.RX_ERR := zeroed(t.RX_ERR);
    y.RX_RECEIVED := zeroed(t.RX_RECEIVED);
    y.RX_CHANNEL := zeroed(t.RX_CHANNEL);
    y.RX_DATA := zeroed(t.RX_DATA);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * len(x(x'left));
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * width(x(x'left));
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), vectorify(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), vectorify(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), convert(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), convert(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function convert;
  function structify(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY) return HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY is
    variable y : HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY) return HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY is
    variable y : HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := convert(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := convert(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function convert;
  function nullify(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY) return HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY is
    variable y : HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;
  function zeroed(x: HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY) return HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY is
    variable y : HAL_CSM_CSM_SC_MASTER_RX_RX_MON_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := zeroed(y(i));
    end loop l;
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_SC_MASTER_RX_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.RX);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_SC_MASTER_RX_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.RX);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_SC_MASTER_RX_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.RX)-1), vectorify(x.RX, y(left to left+len(x.RX)-1)));
    else
      assign(y(left downto left-len(x.RX)+1), vectorify(x.RX, y(left downto left-len(x.RX)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_SC_MASTER_RX_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.RX)-1), convert(x.RX, y(left to left+len(x.RX)-1)));
    else
      assign(y(left downto left-len(x.RX)+1), convert(x.RX, y(left downto left-len(x.RX)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_RX_MON_t is
    variable y: HAL_CSM_CSM_SC_MASTER_RX_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.RX := structify(x(left to left+len(y.RX)-1), y.RX);
    else
      y.RX := structify(x(left downto left-len(y.RX)+1), y.RX);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_RX_MON_t is
    variable y: HAL_CSM_CSM_SC_MASTER_RX_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.RX := convert(x(left to left+len(y.RX)-1), y.RX);
    else
      y.RX := convert(x(left downto left-len(y.RX)+1), y.RX);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_SC_MASTER_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_RX_MON_t is
  variable y: HAL_CSM_CSM_SC_MASTER_RX_MON_t;
  begin
    y.RX := nullify(t.RX);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_SC_MASTER_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_RX_MON_t is
  variable y: HAL_CSM_CSM_SC_MASTER_RX_MON_t;
  begin
    y.RX := zeroed(t.RX);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_SC_MASTER_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.RX_DATA_FROM_GBTX);
    l := l + len(x.TX_READY);
    l := l + len(x.RX_EMPTY);
    l := l + len(x.RX);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_SC_MASTER_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.RX_DATA_FROM_GBTX);
    l := l + width(x.TX_READY);
    l := l + width(x.RX_EMPTY);
    l := l + width(x.RX);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_SC_MASTER_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.RX_DATA_FROM_GBTX)-1), vectorify(x.RX_DATA_FROM_GBTX, y(left to left+len(x.RX_DATA_FROM_GBTX)-1)));
      left := left + len(x.RX_DATA_FROM_GBTX);
      assign(y(left to left+len(x.TX_READY)-1), vectorify(x.TX_READY, y(left to left+len(x.TX_READY)-1)));
      left := left + len(x.TX_READY);
      assign(y(left to left+len(x.RX_EMPTY)-1), vectorify(x.RX_EMPTY, y(left to left+len(x.RX_EMPTY)-1)));
      left := left + len(x.RX_EMPTY);
      assign(y(left to left+len(x.RX)-1), vectorify(x.RX, y(left to left+len(x.RX)-1)));
    else
      assign(y(left downto left-len(x.RX_DATA_FROM_GBTX)+1), vectorify(x.RX_DATA_FROM_GBTX, y(left downto left-len(x.RX_DATA_FROM_GBTX)+1)));
      left := left - len(x.RX_DATA_FROM_GBTX);
      assign(y(left downto left-len(x.TX_READY)+1), vectorify(x.TX_READY, y(left downto left-len(x.TX_READY)+1)));
      left := left - len(x.TX_READY);
      assign(y(left downto left-len(x.RX_EMPTY)+1), vectorify(x.RX_EMPTY, y(left downto left-len(x.RX_EMPTY)+1)));
      left := left - len(x.RX_EMPTY);
      assign(y(left downto left-len(x.RX)+1), vectorify(x.RX, y(left downto left-len(x.RX)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_SC_MASTER_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.RX_DATA_FROM_GBTX)-1), convert(x.RX_DATA_FROM_GBTX, y(left to left+len(x.RX_DATA_FROM_GBTX)-1)));
      left := left + len(x.RX_DATA_FROM_GBTX);
      assign(y(left to left+len(x.TX_READY)-1), convert(x.TX_READY, y(left to left+len(x.TX_READY)-1)));
      left := left + len(x.TX_READY);
      assign(y(left to left+len(x.RX_EMPTY)-1), convert(x.RX_EMPTY, y(left to left+len(x.RX_EMPTY)-1)));
      left := left + len(x.RX_EMPTY);
      assign(y(left to left+len(x.RX)-1), convert(x.RX, y(left to left+len(x.RX)-1)));
    else
      assign(y(left downto left-len(x.RX_DATA_FROM_GBTX)+1), convert(x.RX_DATA_FROM_GBTX, y(left downto left-len(x.RX_DATA_FROM_GBTX)+1)));
      left := left - len(x.RX_DATA_FROM_GBTX);
      assign(y(left downto left-len(x.TX_READY)+1), convert(x.TX_READY, y(left downto left-len(x.TX_READY)+1)));
      left := left - len(x.TX_READY);
      assign(y(left downto left-len(x.RX_EMPTY)+1), convert(x.RX_EMPTY, y(left downto left-len(x.RX_EMPTY)+1)));
      left := left - len(x.RX_EMPTY);
      assign(y(left downto left-len(x.RX)+1), convert(x.RX, y(left downto left-len(x.RX)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_MON_t) return HAL_CSM_CSM_SC_MASTER_MON_t is
    variable y: HAL_CSM_CSM_SC_MASTER_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.RX_DATA_FROM_GBTX := structify(x(left to left+len(y.RX_DATA_FROM_GBTX)-1), y.RX_DATA_FROM_GBTX);
      left := left + len(y.RX_DATA_FROM_GBTX);
      y.TX_READY := structify(x(left to left+len(y.TX_READY)-1), y.TX_READY);
      left := left + len(y.TX_READY);
      y.RX_EMPTY := structify(x(left to left+len(y.RX_EMPTY)-1), y.RX_EMPTY);
      left := left + len(y.RX_EMPTY);
      y.RX := structify(x(left to left+len(y.RX)-1), y.RX);
    else
      y.RX_DATA_FROM_GBTX := structify(x(left downto left-len(y.RX_DATA_FROM_GBTX)+1), y.RX_DATA_FROM_GBTX);
      left := left - len(y.RX_DATA_FROM_GBTX);
      y.TX_READY := structify(x(left downto left-len(y.TX_READY)+1), y.TX_READY);
      left := left - len(y.TX_READY);
      y.RX_EMPTY := structify(x(left downto left-len(y.RX_EMPTY)+1), y.RX_EMPTY);
      left := left - len(y.RX_EMPTY);
      y.RX := structify(x(left downto left-len(y.RX)+1), y.RX);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_MON_t) return HAL_CSM_CSM_SC_MASTER_MON_t is
    variable y: HAL_CSM_CSM_SC_MASTER_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.RX_DATA_FROM_GBTX := convert(x(left to left+len(y.RX_DATA_FROM_GBTX)-1), y.RX_DATA_FROM_GBTX);
      left := left + len(y.RX_DATA_FROM_GBTX);
      y.TX_READY := convert(x(left to left+len(y.TX_READY)-1), y.TX_READY);
      left := left + len(y.TX_READY);
      y.RX_EMPTY := convert(x(left to left+len(y.RX_EMPTY)-1), y.RX_EMPTY);
      left := left + len(y.RX_EMPTY);
      y.RX := convert(x(left to left+len(y.RX)-1), y.RX);
    else
      y.RX_DATA_FROM_GBTX := convert(x(left downto left-len(y.RX_DATA_FROM_GBTX)+1), y.RX_DATA_FROM_GBTX);
      left := left - len(y.RX_DATA_FROM_GBTX);
      y.TX_READY := convert(x(left downto left-len(y.TX_READY)+1), y.TX_READY);
      left := left - len(y.TX_READY);
      y.RX_EMPTY := convert(x(left downto left-len(y.RX_EMPTY)+1), y.RX_EMPTY);
      left := left - len(y.RX_EMPTY);
      y.RX := convert(x(left downto left-len(y.RX)+1), y.RX);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_SC_MASTER_MON_t) return HAL_CSM_CSM_SC_MASTER_MON_t is
  variable y: HAL_CSM_CSM_SC_MASTER_MON_t;
  begin
    y.RX_DATA_FROM_GBTX := nullify(t.RX_DATA_FROM_GBTX);
    y.TX_READY := nullify(t.TX_READY);
    y.RX_EMPTY := nullify(t.RX_EMPTY);
    y.RX := nullify(t.RX);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_SC_MASTER_MON_t) return HAL_CSM_CSM_SC_MASTER_MON_t is
  variable y: HAL_CSM_CSM_SC_MASTER_MON_t;
  begin
    y.RX_DATA_FROM_GBTX := zeroed(t.RX_DATA_FROM_GBTX);
    y.TX_READY := zeroed(t.TX_READY);
    y.RX_EMPTY := zeroed(t.RX_EMPTY);
    y.RX := zeroed(t.RX);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_SC_MASTER_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.TX_RESET);
    l := l + len(x.RX_RESET);
    l := l + len(x.TX_START_WRITE);
    l := l + len(x.TX_START_READ);
    l := l + len(x.TX_GBTX_ADDR);
    l := l + len(x.TX_REGISTER_ADDR);
    l := l + len(x.TX_NUM_BYTES_TO_READ);
    l := l + len(x.TX_DATA_TO_GBTX);
    l := l + len(x.TX_WR);
    l := l + len(x.RX_RD);
    l := l + len(x.TX_CMD);
    l := l + len(x.TX_ADDRESS);
    l := l + len(x.TX_TRANSID);
    l := l + len(x.TX_CHANNEL);
    l := l + len(x.TX_DATA);
    l := l + len(x.SCA_ENABLE);
    l := l + len(x.START_RESET);
    l := l + len(x.START_CONNECT);
    l := l + len(x.START_COMMAND);
    l := l + len(x.INJ_CRC_ERR);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_SC_MASTER_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.TX_RESET);
    l := l + width(x.RX_RESET);
    l := l + width(x.TX_START_WRITE);
    l := l + width(x.TX_START_READ);
    l := l + width(x.TX_GBTX_ADDR);
    l := l + width(x.TX_REGISTER_ADDR);
    l := l + width(x.TX_NUM_BYTES_TO_READ);
    l := l + width(x.TX_DATA_TO_GBTX);
    l := l + width(x.TX_WR);
    l := l + width(x.RX_RD);
    l := l + width(x.TX_CMD);
    l := l + width(x.TX_ADDRESS);
    l := l + width(x.TX_TRANSID);
    l := l + width(x.TX_CHANNEL);
    l := l + width(x.TX_DATA);
    l := l + width(x.SCA_ENABLE);
    l := l + width(x.START_RESET);
    l := l + width(x.START_CONNECT);
    l := l + width(x.START_COMMAND);
    l := l + width(x.INJ_CRC_ERR);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_SC_MASTER_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.TX_RESET)-1), vectorify(x.TX_RESET, y(left to left+len(x.TX_RESET)-1)));
      left := left + len(x.TX_RESET);
      assign(y(left to left+len(x.RX_RESET)-1), vectorify(x.RX_RESET, y(left to left+len(x.RX_RESET)-1)));
      left := left + len(x.RX_RESET);
      assign(y(left to left+len(x.TX_START_WRITE)-1), vectorify(x.TX_START_WRITE, y(left to left+len(x.TX_START_WRITE)-1)));
      left := left + len(x.TX_START_WRITE);
      assign(y(left to left+len(x.TX_START_READ)-1), vectorify(x.TX_START_READ, y(left to left+len(x.TX_START_READ)-1)));
      left := left + len(x.TX_START_READ);
      assign(y(left to left+len(x.TX_GBTX_ADDR)-1), vectorify(x.TX_GBTX_ADDR, y(left to left+len(x.TX_GBTX_ADDR)-1)));
      left := left + len(x.TX_GBTX_ADDR);
      assign(y(left to left+len(x.TX_REGISTER_ADDR)-1), vectorify(x.TX_REGISTER_ADDR, y(left to left+len(x.TX_REGISTER_ADDR)-1)));
      left := left + len(x.TX_REGISTER_ADDR);
      assign(y(left to left+len(x.TX_NUM_BYTES_TO_READ)-1), vectorify(x.TX_NUM_BYTES_TO_READ, y(left to left+len(x.TX_NUM_BYTES_TO_READ)-1)));
      left := left + len(x.TX_NUM_BYTES_TO_READ);
      assign(y(left to left+len(x.TX_DATA_TO_GBTX)-1), vectorify(x.TX_DATA_TO_GBTX, y(left to left+len(x.TX_DATA_TO_GBTX)-1)));
      left := left + len(x.TX_DATA_TO_GBTX);
      assign(y(left to left+len(x.TX_WR)-1), vectorify(x.TX_WR, y(left to left+len(x.TX_WR)-1)));
      left := left + len(x.TX_WR);
      assign(y(left to left+len(x.RX_RD)-1), vectorify(x.RX_RD, y(left to left+len(x.RX_RD)-1)));
      left := left + len(x.RX_RD);
      assign(y(left to left+len(x.TX_CMD)-1), vectorify(x.TX_CMD, y(left to left+len(x.TX_CMD)-1)));
      left := left + len(x.TX_CMD);
      assign(y(left to left+len(x.TX_ADDRESS)-1), vectorify(x.TX_ADDRESS, y(left to left+len(x.TX_ADDRESS)-1)));
      left := left + len(x.TX_ADDRESS);
      assign(y(left to left+len(x.TX_TRANSID)-1), vectorify(x.TX_TRANSID, y(left to left+len(x.TX_TRANSID)-1)));
      left := left + len(x.TX_TRANSID);
      assign(y(left to left+len(x.TX_CHANNEL)-1), vectorify(x.TX_CHANNEL, y(left to left+len(x.TX_CHANNEL)-1)));
      left := left + len(x.TX_CHANNEL);
      assign(y(left to left+len(x.TX_DATA)-1), vectorify(x.TX_DATA, y(left to left+len(x.TX_DATA)-1)));
      left := left + len(x.TX_DATA);
      assign(y(left to left+len(x.SCA_ENABLE)-1), vectorify(x.SCA_ENABLE, y(left to left+len(x.SCA_ENABLE)-1)));
      left := left + len(x.SCA_ENABLE);
      assign(y(left to left+len(x.START_RESET)-1), vectorify(x.START_RESET, y(left to left+len(x.START_RESET)-1)));
      left := left + len(x.START_RESET);
      assign(y(left to left+len(x.START_CONNECT)-1), vectorify(x.START_CONNECT, y(left to left+len(x.START_CONNECT)-1)));
      left := left + len(x.START_CONNECT);
      assign(y(left to left+len(x.START_COMMAND)-1), vectorify(x.START_COMMAND, y(left to left+len(x.START_COMMAND)-1)));
      left := left + len(x.START_COMMAND);
      assign(y(left to left+len(x.INJ_CRC_ERR)-1), vectorify(x.INJ_CRC_ERR, y(left to left+len(x.INJ_CRC_ERR)-1)));
    else
      assign(y(left downto left-len(x.TX_RESET)+1), vectorify(x.TX_RESET, y(left downto left-len(x.TX_RESET)+1)));
      left := left - len(x.TX_RESET);
      assign(y(left downto left-len(x.RX_RESET)+1), vectorify(x.RX_RESET, y(left downto left-len(x.RX_RESET)+1)));
      left := left - len(x.RX_RESET);
      assign(y(left downto left-len(x.TX_START_WRITE)+1), vectorify(x.TX_START_WRITE, y(left downto left-len(x.TX_START_WRITE)+1)));
      left := left - len(x.TX_START_WRITE);
      assign(y(left downto left-len(x.TX_START_READ)+1), vectorify(x.TX_START_READ, y(left downto left-len(x.TX_START_READ)+1)));
      left := left - len(x.TX_START_READ);
      assign(y(left downto left-len(x.TX_GBTX_ADDR)+1), vectorify(x.TX_GBTX_ADDR, y(left downto left-len(x.TX_GBTX_ADDR)+1)));
      left := left - len(x.TX_GBTX_ADDR);
      assign(y(left downto left-len(x.TX_REGISTER_ADDR)+1), vectorify(x.TX_REGISTER_ADDR, y(left downto left-len(x.TX_REGISTER_ADDR)+1)));
      left := left - len(x.TX_REGISTER_ADDR);
      assign(y(left downto left-len(x.TX_NUM_BYTES_TO_READ)+1), vectorify(x.TX_NUM_BYTES_TO_READ, y(left downto left-len(x.TX_NUM_BYTES_TO_READ)+1)));
      left := left - len(x.TX_NUM_BYTES_TO_READ);
      assign(y(left downto left-len(x.TX_DATA_TO_GBTX)+1), vectorify(x.TX_DATA_TO_GBTX, y(left downto left-len(x.TX_DATA_TO_GBTX)+1)));
      left := left - len(x.TX_DATA_TO_GBTX);
      assign(y(left downto left-len(x.TX_WR)+1), vectorify(x.TX_WR, y(left downto left-len(x.TX_WR)+1)));
      left := left - len(x.TX_WR);
      assign(y(left downto left-len(x.RX_RD)+1), vectorify(x.RX_RD, y(left downto left-len(x.RX_RD)+1)));
      left := left - len(x.RX_RD);
      assign(y(left downto left-len(x.TX_CMD)+1), vectorify(x.TX_CMD, y(left downto left-len(x.TX_CMD)+1)));
      left := left - len(x.TX_CMD);
      assign(y(left downto left-len(x.TX_ADDRESS)+1), vectorify(x.TX_ADDRESS, y(left downto left-len(x.TX_ADDRESS)+1)));
      left := left - len(x.TX_ADDRESS);
      assign(y(left downto left-len(x.TX_TRANSID)+1), vectorify(x.TX_TRANSID, y(left downto left-len(x.TX_TRANSID)+1)));
      left := left - len(x.TX_TRANSID);
      assign(y(left downto left-len(x.TX_CHANNEL)+1), vectorify(x.TX_CHANNEL, y(left downto left-len(x.TX_CHANNEL)+1)));
      left := left - len(x.TX_CHANNEL);
      assign(y(left downto left-len(x.TX_DATA)+1), vectorify(x.TX_DATA, y(left downto left-len(x.TX_DATA)+1)));
      left := left - len(x.TX_DATA);
      assign(y(left downto left-len(x.SCA_ENABLE)+1), vectorify(x.SCA_ENABLE, y(left downto left-len(x.SCA_ENABLE)+1)));
      left := left - len(x.SCA_ENABLE);
      assign(y(left downto left-len(x.START_RESET)+1), vectorify(x.START_RESET, y(left downto left-len(x.START_RESET)+1)));
      left := left - len(x.START_RESET);
      assign(y(left downto left-len(x.START_CONNECT)+1), vectorify(x.START_CONNECT, y(left downto left-len(x.START_CONNECT)+1)));
      left := left - len(x.START_CONNECT);
      assign(y(left downto left-len(x.START_COMMAND)+1), vectorify(x.START_COMMAND, y(left downto left-len(x.START_COMMAND)+1)));
      left := left - len(x.START_COMMAND);
      assign(y(left downto left-len(x.INJ_CRC_ERR)+1), vectorify(x.INJ_CRC_ERR, y(left downto left-len(x.INJ_CRC_ERR)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_SC_MASTER_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.TX_RESET)-1), convert(x.TX_RESET, y(left to left+len(x.TX_RESET)-1)));
      left := left + len(x.TX_RESET);
      assign(y(left to left+len(x.RX_RESET)-1), convert(x.RX_RESET, y(left to left+len(x.RX_RESET)-1)));
      left := left + len(x.RX_RESET);
      assign(y(left to left+len(x.TX_START_WRITE)-1), convert(x.TX_START_WRITE, y(left to left+len(x.TX_START_WRITE)-1)));
      left := left + len(x.TX_START_WRITE);
      assign(y(left to left+len(x.TX_START_READ)-1), convert(x.TX_START_READ, y(left to left+len(x.TX_START_READ)-1)));
      left := left + len(x.TX_START_READ);
      assign(y(left to left+len(x.TX_GBTX_ADDR)-1), convert(x.TX_GBTX_ADDR, y(left to left+len(x.TX_GBTX_ADDR)-1)));
      left := left + len(x.TX_GBTX_ADDR);
      assign(y(left to left+len(x.TX_REGISTER_ADDR)-1), convert(x.TX_REGISTER_ADDR, y(left to left+len(x.TX_REGISTER_ADDR)-1)));
      left := left + len(x.TX_REGISTER_ADDR);
      assign(y(left to left+len(x.TX_NUM_BYTES_TO_READ)-1), convert(x.TX_NUM_BYTES_TO_READ, y(left to left+len(x.TX_NUM_BYTES_TO_READ)-1)));
      left := left + len(x.TX_NUM_BYTES_TO_READ);
      assign(y(left to left+len(x.TX_DATA_TO_GBTX)-1), convert(x.TX_DATA_TO_GBTX, y(left to left+len(x.TX_DATA_TO_GBTX)-1)));
      left := left + len(x.TX_DATA_TO_GBTX);
      assign(y(left to left+len(x.TX_WR)-1), convert(x.TX_WR, y(left to left+len(x.TX_WR)-1)));
      left := left + len(x.TX_WR);
      assign(y(left to left+len(x.RX_RD)-1), convert(x.RX_RD, y(left to left+len(x.RX_RD)-1)));
      left := left + len(x.RX_RD);
      assign(y(left to left+len(x.TX_CMD)-1), convert(x.TX_CMD, y(left to left+len(x.TX_CMD)-1)));
      left := left + len(x.TX_CMD);
      assign(y(left to left+len(x.TX_ADDRESS)-1), convert(x.TX_ADDRESS, y(left to left+len(x.TX_ADDRESS)-1)));
      left := left + len(x.TX_ADDRESS);
      assign(y(left to left+len(x.TX_TRANSID)-1), convert(x.TX_TRANSID, y(left to left+len(x.TX_TRANSID)-1)));
      left := left + len(x.TX_TRANSID);
      assign(y(left to left+len(x.TX_CHANNEL)-1), convert(x.TX_CHANNEL, y(left to left+len(x.TX_CHANNEL)-1)));
      left := left + len(x.TX_CHANNEL);
      assign(y(left to left+len(x.TX_DATA)-1), convert(x.TX_DATA, y(left to left+len(x.TX_DATA)-1)));
      left := left + len(x.TX_DATA);
      assign(y(left to left+len(x.SCA_ENABLE)-1), convert(x.SCA_ENABLE, y(left to left+len(x.SCA_ENABLE)-1)));
      left := left + len(x.SCA_ENABLE);
      assign(y(left to left+len(x.START_RESET)-1), convert(x.START_RESET, y(left to left+len(x.START_RESET)-1)));
      left := left + len(x.START_RESET);
      assign(y(left to left+len(x.START_CONNECT)-1), convert(x.START_CONNECT, y(left to left+len(x.START_CONNECT)-1)));
      left := left + len(x.START_CONNECT);
      assign(y(left to left+len(x.START_COMMAND)-1), convert(x.START_COMMAND, y(left to left+len(x.START_COMMAND)-1)));
      left := left + len(x.START_COMMAND);
      assign(y(left to left+len(x.INJ_CRC_ERR)-1), convert(x.INJ_CRC_ERR, y(left to left+len(x.INJ_CRC_ERR)-1)));
    else
      assign(y(left downto left-len(x.TX_RESET)+1), convert(x.TX_RESET, y(left downto left-len(x.TX_RESET)+1)));
      left := left - len(x.TX_RESET);
      assign(y(left downto left-len(x.RX_RESET)+1), convert(x.RX_RESET, y(left downto left-len(x.RX_RESET)+1)));
      left := left - len(x.RX_RESET);
      assign(y(left downto left-len(x.TX_START_WRITE)+1), convert(x.TX_START_WRITE, y(left downto left-len(x.TX_START_WRITE)+1)));
      left := left - len(x.TX_START_WRITE);
      assign(y(left downto left-len(x.TX_START_READ)+1), convert(x.TX_START_READ, y(left downto left-len(x.TX_START_READ)+1)));
      left := left - len(x.TX_START_READ);
      assign(y(left downto left-len(x.TX_GBTX_ADDR)+1), convert(x.TX_GBTX_ADDR, y(left downto left-len(x.TX_GBTX_ADDR)+1)));
      left := left - len(x.TX_GBTX_ADDR);
      assign(y(left downto left-len(x.TX_REGISTER_ADDR)+1), convert(x.TX_REGISTER_ADDR, y(left downto left-len(x.TX_REGISTER_ADDR)+1)));
      left := left - len(x.TX_REGISTER_ADDR);
      assign(y(left downto left-len(x.TX_NUM_BYTES_TO_READ)+1), convert(x.TX_NUM_BYTES_TO_READ, y(left downto left-len(x.TX_NUM_BYTES_TO_READ)+1)));
      left := left - len(x.TX_NUM_BYTES_TO_READ);
      assign(y(left downto left-len(x.TX_DATA_TO_GBTX)+1), convert(x.TX_DATA_TO_GBTX, y(left downto left-len(x.TX_DATA_TO_GBTX)+1)));
      left := left - len(x.TX_DATA_TO_GBTX);
      assign(y(left downto left-len(x.TX_WR)+1), convert(x.TX_WR, y(left downto left-len(x.TX_WR)+1)));
      left := left - len(x.TX_WR);
      assign(y(left downto left-len(x.RX_RD)+1), convert(x.RX_RD, y(left downto left-len(x.RX_RD)+1)));
      left := left - len(x.RX_RD);
      assign(y(left downto left-len(x.TX_CMD)+1), convert(x.TX_CMD, y(left downto left-len(x.TX_CMD)+1)));
      left := left - len(x.TX_CMD);
      assign(y(left downto left-len(x.TX_ADDRESS)+1), convert(x.TX_ADDRESS, y(left downto left-len(x.TX_ADDRESS)+1)));
      left := left - len(x.TX_ADDRESS);
      assign(y(left downto left-len(x.TX_TRANSID)+1), convert(x.TX_TRANSID, y(left downto left-len(x.TX_TRANSID)+1)));
      left := left - len(x.TX_TRANSID);
      assign(y(left downto left-len(x.TX_CHANNEL)+1), convert(x.TX_CHANNEL, y(left downto left-len(x.TX_CHANNEL)+1)));
      left := left - len(x.TX_CHANNEL);
      assign(y(left downto left-len(x.TX_DATA)+1), convert(x.TX_DATA, y(left downto left-len(x.TX_DATA)+1)));
      left := left - len(x.TX_DATA);
      assign(y(left downto left-len(x.SCA_ENABLE)+1), convert(x.SCA_ENABLE, y(left downto left-len(x.SCA_ENABLE)+1)));
      left := left - len(x.SCA_ENABLE);
      assign(y(left downto left-len(x.START_RESET)+1), convert(x.START_RESET, y(left downto left-len(x.START_RESET)+1)));
      left := left - len(x.START_RESET);
      assign(y(left downto left-len(x.START_CONNECT)+1), convert(x.START_CONNECT, y(left downto left-len(x.START_CONNECT)+1)));
      left := left - len(x.START_CONNECT);
      assign(y(left downto left-len(x.START_COMMAND)+1), convert(x.START_COMMAND, y(left downto left-len(x.START_COMMAND)+1)));
      left := left - len(x.START_COMMAND);
      assign(y(left downto left-len(x.INJ_CRC_ERR)+1), convert(x.INJ_CRC_ERR, y(left downto left-len(x.INJ_CRC_ERR)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_CTRL_t) return HAL_CSM_CSM_SC_MASTER_CTRL_t is
    variable y: HAL_CSM_CSM_SC_MASTER_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.TX_RESET := structify(x(left to left+len(y.TX_RESET)-1), y.TX_RESET);
      left := left + len(y.TX_RESET);
      y.RX_RESET := structify(x(left to left+len(y.RX_RESET)-1), y.RX_RESET);
      left := left + len(y.RX_RESET);
      y.TX_START_WRITE := structify(x(left to left+len(y.TX_START_WRITE)-1), y.TX_START_WRITE);
      left := left + len(y.TX_START_WRITE);
      y.TX_START_READ := structify(x(left to left+len(y.TX_START_READ)-1), y.TX_START_READ);
      left := left + len(y.TX_START_READ);
      y.TX_GBTX_ADDR := structify(x(left to left+len(y.TX_GBTX_ADDR)-1), y.TX_GBTX_ADDR);
      left := left + len(y.TX_GBTX_ADDR);
      y.TX_REGISTER_ADDR := structify(x(left to left+len(y.TX_REGISTER_ADDR)-1), y.TX_REGISTER_ADDR);
      left := left + len(y.TX_REGISTER_ADDR);
      y.TX_NUM_BYTES_TO_READ := structify(x(left to left+len(y.TX_NUM_BYTES_TO_READ)-1), y.TX_NUM_BYTES_TO_READ);
      left := left + len(y.TX_NUM_BYTES_TO_READ);
      y.TX_DATA_TO_GBTX := structify(x(left to left+len(y.TX_DATA_TO_GBTX)-1), y.TX_DATA_TO_GBTX);
      left := left + len(y.TX_DATA_TO_GBTX);
      y.TX_WR := structify(x(left to left+len(y.TX_WR)-1), y.TX_WR);
      left := left + len(y.TX_WR);
      y.RX_RD := structify(x(left to left+len(y.RX_RD)-1), y.RX_RD);
      left := left + len(y.RX_RD);
      y.TX_CMD := structify(x(left to left+len(y.TX_CMD)-1), y.TX_CMD);
      left := left + len(y.TX_CMD);
      y.TX_ADDRESS := structify(x(left to left+len(y.TX_ADDRESS)-1), y.TX_ADDRESS);
      left := left + len(y.TX_ADDRESS);
      y.TX_TRANSID := structify(x(left to left+len(y.TX_TRANSID)-1), y.TX_TRANSID);
      left := left + len(y.TX_TRANSID);
      y.TX_CHANNEL := structify(x(left to left+len(y.TX_CHANNEL)-1), y.TX_CHANNEL);
      left := left + len(y.TX_CHANNEL);
      y.TX_DATA := structify(x(left to left+len(y.TX_DATA)-1), y.TX_DATA);
      left := left + len(y.TX_DATA);
      y.SCA_ENABLE := structify(x(left to left+len(y.SCA_ENABLE)-1), y.SCA_ENABLE);
      left := left + len(y.SCA_ENABLE);
      y.START_RESET := structify(x(left to left+len(y.START_RESET)-1), y.START_RESET);
      left := left + len(y.START_RESET);
      y.START_CONNECT := structify(x(left to left+len(y.START_CONNECT)-1), y.START_CONNECT);
      left := left + len(y.START_CONNECT);
      y.START_COMMAND := structify(x(left to left+len(y.START_COMMAND)-1), y.START_COMMAND);
      left := left + len(y.START_COMMAND);
      y.INJ_CRC_ERR := structify(x(left to left+len(y.INJ_CRC_ERR)-1), y.INJ_CRC_ERR);
    else
      y.TX_RESET := structify(x(left downto left-len(y.TX_RESET)+1), y.TX_RESET);
      left := left - len(y.TX_RESET);
      y.RX_RESET := structify(x(left downto left-len(y.RX_RESET)+1), y.RX_RESET);
      left := left - len(y.RX_RESET);
      y.TX_START_WRITE := structify(x(left downto left-len(y.TX_START_WRITE)+1), y.TX_START_WRITE);
      left := left - len(y.TX_START_WRITE);
      y.TX_START_READ := structify(x(left downto left-len(y.TX_START_READ)+1), y.TX_START_READ);
      left := left - len(y.TX_START_READ);
      y.TX_GBTX_ADDR := structify(x(left downto left-len(y.TX_GBTX_ADDR)+1), y.TX_GBTX_ADDR);
      left := left - len(y.TX_GBTX_ADDR);
      y.TX_REGISTER_ADDR := structify(x(left downto left-len(y.TX_REGISTER_ADDR)+1), y.TX_REGISTER_ADDR);
      left := left - len(y.TX_REGISTER_ADDR);
      y.TX_NUM_BYTES_TO_READ := structify(x(left downto left-len(y.TX_NUM_BYTES_TO_READ)+1), y.TX_NUM_BYTES_TO_READ);
      left := left - len(y.TX_NUM_BYTES_TO_READ);
      y.TX_DATA_TO_GBTX := structify(x(left downto left-len(y.TX_DATA_TO_GBTX)+1), y.TX_DATA_TO_GBTX);
      left := left - len(y.TX_DATA_TO_GBTX);
      y.TX_WR := structify(x(left downto left-len(y.TX_WR)+1), y.TX_WR);
      left := left - len(y.TX_WR);
      y.RX_RD := structify(x(left downto left-len(y.RX_RD)+1), y.RX_RD);
      left := left - len(y.RX_RD);
      y.TX_CMD := structify(x(left downto left-len(y.TX_CMD)+1), y.TX_CMD);
      left := left - len(y.TX_CMD);
      y.TX_ADDRESS := structify(x(left downto left-len(y.TX_ADDRESS)+1), y.TX_ADDRESS);
      left := left - len(y.TX_ADDRESS);
      y.TX_TRANSID := structify(x(left downto left-len(y.TX_TRANSID)+1), y.TX_TRANSID);
      left := left - len(y.TX_TRANSID);
      y.TX_CHANNEL := structify(x(left downto left-len(y.TX_CHANNEL)+1), y.TX_CHANNEL);
      left := left - len(y.TX_CHANNEL);
      y.TX_DATA := structify(x(left downto left-len(y.TX_DATA)+1), y.TX_DATA);
      left := left - len(y.TX_DATA);
      y.SCA_ENABLE := structify(x(left downto left-len(y.SCA_ENABLE)+1), y.SCA_ENABLE);
      left := left - len(y.SCA_ENABLE);
      y.START_RESET := structify(x(left downto left-len(y.START_RESET)+1), y.START_RESET);
      left := left - len(y.START_RESET);
      y.START_CONNECT := structify(x(left downto left-len(y.START_CONNECT)+1), y.START_CONNECT);
      left := left - len(y.START_CONNECT);
      y.START_COMMAND := structify(x(left downto left-len(y.START_COMMAND)+1), y.START_COMMAND);
      left := left - len(y.START_COMMAND);
      y.INJ_CRC_ERR := structify(x(left downto left-len(y.INJ_CRC_ERR)+1), y.INJ_CRC_ERR);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_CTRL_t) return HAL_CSM_CSM_SC_MASTER_CTRL_t is
    variable y: HAL_CSM_CSM_SC_MASTER_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.TX_RESET := convert(x(left to left+len(y.TX_RESET)-1), y.TX_RESET);
      left := left + len(y.TX_RESET);
      y.RX_RESET := convert(x(left to left+len(y.RX_RESET)-1), y.RX_RESET);
      left := left + len(y.RX_RESET);
      y.TX_START_WRITE := convert(x(left to left+len(y.TX_START_WRITE)-1), y.TX_START_WRITE);
      left := left + len(y.TX_START_WRITE);
      y.TX_START_READ := convert(x(left to left+len(y.TX_START_READ)-1), y.TX_START_READ);
      left := left + len(y.TX_START_READ);
      y.TX_GBTX_ADDR := convert(x(left to left+len(y.TX_GBTX_ADDR)-1), y.TX_GBTX_ADDR);
      left := left + len(y.TX_GBTX_ADDR);
      y.TX_REGISTER_ADDR := convert(x(left to left+len(y.TX_REGISTER_ADDR)-1), y.TX_REGISTER_ADDR);
      left := left + len(y.TX_REGISTER_ADDR);
      y.TX_NUM_BYTES_TO_READ := convert(x(left to left+len(y.TX_NUM_BYTES_TO_READ)-1), y.TX_NUM_BYTES_TO_READ);
      left := left + len(y.TX_NUM_BYTES_TO_READ);
      y.TX_DATA_TO_GBTX := convert(x(left to left+len(y.TX_DATA_TO_GBTX)-1), y.TX_DATA_TO_GBTX);
      left := left + len(y.TX_DATA_TO_GBTX);
      y.TX_WR := convert(x(left to left+len(y.TX_WR)-1), y.TX_WR);
      left := left + len(y.TX_WR);
      y.RX_RD := convert(x(left to left+len(y.RX_RD)-1), y.RX_RD);
      left := left + len(y.RX_RD);
      y.TX_CMD := convert(x(left to left+len(y.TX_CMD)-1), y.TX_CMD);
      left := left + len(y.TX_CMD);
      y.TX_ADDRESS := convert(x(left to left+len(y.TX_ADDRESS)-1), y.TX_ADDRESS);
      left := left + len(y.TX_ADDRESS);
      y.TX_TRANSID := convert(x(left to left+len(y.TX_TRANSID)-1), y.TX_TRANSID);
      left := left + len(y.TX_TRANSID);
      y.TX_CHANNEL := convert(x(left to left+len(y.TX_CHANNEL)-1), y.TX_CHANNEL);
      left := left + len(y.TX_CHANNEL);
      y.TX_DATA := convert(x(left to left+len(y.TX_DATA)-1), y.TX_DATA);
      left := left + len(y.TX_DATA);
      y.SCA_ENABLE := convert(x(left to left+len(y.SCA_ENABLE)-1), y.SCA_ENABLE);
      left := left + len(y.SCA_ENABLE);
      y.START_RESET := convert(x(left to left+len(y.START_RESET)-1), y.START_RESET);
      left := left + len(y.START_RESET);
      y.START_CONNECT := convert(x(left to left+len(y.START_CONNECT)-1), y.START_CONNECT);
      left := left + len(y.START_CONNECT);
      y.START_COMMAND := convert(x(left to left+len(y.START_COMMAND)-1), y.START_COMMAND);
      left := left + len(y.START_COMMAND);
      y.INJ_CRC_ERR := convert(x(left to left+len(y.INJ_CRC_ERR)-1), y.INJ_CRC_ERR);
    else
      y.TX_RESET := convert(x(left downto left-len(y.TX_RESET)+1), y.TX_RESET);
      left := left - len(y.TX_RESET);
      y.RX_RESET := convert(x(left downto left-len(y.RX_RESET)+1), y.RX_RESET);
      left := left - len(y.RX_RESET);
      y.TX_START_WRITE := convert(x(left downto left-len(y.TX_START_WRITE)+1), y.TX_START_WRITE);
      left := left - len(y.TX_START_WRITE);
      y.TX_START_READ := convert(x(left downto left-len(y.TX_START_READ)+1), y.TX_START_READ);
      left := left - len(y.TX_START_READ);
      y.TX_GBTX_ADDR := convert(x(left downto left-len(y.TX_GBTX_ADDR)+1), y.TX_GBTX_ADDR);
      left := left - len(y.TX_GBTX_ADDR);
      y.TX_REGISTER_ADDR := convert(x(left downto left-len(y.TX_REGISTER_ADDR)+1), y.TX_REGISTER_ADDR);
      left := left - len(y.TX_REGISTER_ADDR);
      y.TX_NUM_BYTES_TO_READ := convert(x(left downto left-len(y.TX_NUM_BYTES_TO_READ)+1), y.TX_NUM_BYTES_TO_READ);
      left := left - len(y.TX_NUM_BYTES_TO_READ);
      y.TX_DATA_TO_GBTX := convert(x(left downto left-len(y.TX_DATA_TO_GBTX)+1), y.TX_DATA_TO_GBTX);
      left := left - len(y.TX_DATA_TO_GBTX);
      y.TX_WR := convert(x(left downto left-len(y.TX_WR)+1), y.TX_WR);
      left := left - len(y.TX_WR);
      y.RX_RD := convert(x(left downto left-len(y.RX_RD)+1), y.RX_RD);
      left := left - len(y.RX_RD);
      y.TX_CMD := convert(x(left downto left-len(y.TX_CMD)+1), y.TX_CMD);
      left := left - len(y.TX_CMD);
      y.TX_ADDRESS := convert(x(left downto left-len(y.TX_ADDRESS)+1), y.TX_ADDRESS);
      left := left - len(y.TX_ADDRESS);
      y.TX_TRANSID := convert(x(left downto left-len(y.TX_TRANSID)+1), y.TX_TRANSID);
      left := left - len(y.TX_TRANSID);
      y.TX_CHANNEL := convert(x(left downto left-len(y.TX_CHANNEL)+1), y.TX_CHANNEL);
      left := left - len(y.TX_CHANNEL);
      y.TX_DATA := convert(x(left downto left-len(y.TX_DATA)+1), y.TX_DATA);
      left := left - len(y.TX_DATA);
      y.SCA_ENABLE := convert(x(left downto left-len(y.SCA_ENABLE)+1), y.SCA_ENABLE);
      left := left - len(y.SCA_ENABLE);
      y.START_RESET := convert(x(left downto left-len(y.START_RESET)+1), y.START_RESET);
      left := left - len(y.START_RESET);
      y.START_CONNECT := convert(x(left downto left-len(y.START_CONNECT)+1), y.START_CONNECT);
      left := left - len(y.START_CONNECT);
      y.START_COMMAND := convert(x(left downto left-len(y.START_COMMAND)+1), y.START_COMMAND);
      left := left - len(y.START_COMMAND);
      y.INJ_CRC_ERR := convert(x(left downto left-len(y.INJ_CRC_ERR)+1), y.INJ_CRC_ERR);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_SC_MASTER_CTRL_t) return HAL_CSM_CSM_SC_MASTER_CTRL_t is
  variable y: HAL_CSM_CSM_SC_MASTER_CTRL_t;
  begin
    y.TX_RESET := nullify(t.TX_RESET);
    y.RX_RESET := nullify(t.RX_RESET);
    y.TX_START_WRITE := nullify(t.TX_START_WRITE);
    y.TX_START_READ := nullify(t.TX_START_READ);
    y.TX_GBTX_ADDR := nullify(t.TX_GBTX_ADDR);
    y.TX_REGISTER_ADDR := nullify(t.TX_REGISTER_ADDR);
    y.TX_NUM_BYTES_TO_READ := nullify(t.TX_NUM_BYTES_TO_READ);
    y.TX_DATA_TO_GBTX := nullify(t.TX_DATA_TO_GBTX);
    y.TX_WR := nullify(t.TX_WR);
    y.RX_RD := nullify(t.RX_RD);
    y.TX_CMD := nullify(t.TX_CMD);
    y.TX_ADDRESS := nullify(t.TX_ADDRESS);
    y.TX_TRANSID := nullify(t.TX_TRANSID);
    y.TX_CHANNEL := nullify(t.TX_CHANNEL);
    y.TX_DATA := nullify(t.TX_DATA);
    y.SCA_ENABLE := nullify(t.SCA_ENABLE);
    y.START_RESET := nullify(t.START_RESET);
    y.START_CONNECT := nullify(t.START_CONNECT);
    y.START_COMMAND := nullify(t.START_COMMAND);
    y.INJ_CRC_ERR := nullify(t.INJ_CRC_ERR);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_SC_MASTER_CTRL_t) return HAL_CSM_CSM_SC_MASTER_CTRL_t is
  variable y: HAL_CSM_CSM_SC_MASTER_CTRL_t;
  begin
    y.TX_RESET := zeroed(t.TX_RESET);
    y.RX_RESET := zeroed(t.RX_RESET);
    y.TX_START_WRITE := zeroed(t.TX_START_WRITE);
    y.TX_START_READ := zeroed(t.TX_START_READ);
    y.TX_GBTX_ADDR := zeroed(t.TX_GBTX_ADDR);
    y.TX_REGISTER_ADDR := zeroed(t.TX_REGISTER_ADDR);
    y.TX_NUM_BYTES_TO_READ := zeroed(t.TX_NUM_BYTES_TO_READ);
    y.TX_DATA_TO_GBTX := zeroed(t.TX_DATA_TO_GBTX);
    y.TX_WR := zeroed(t.TX_WR);
    y.RX_RD := zeroed(t.RX_RD);
    y.TX_CMD := zeroed(t.TX_CMD);
    y.TX_ADDRESS := zeroed(t.TX_ADDRESS);
    y.TX_TRANSID := zeroed(t.TX_TRANSID);
    y.TX_CHANNEL := zeroed(t.TX_CHANNEL);
    y.TX_DATA := zeroed(t.TX_DATA);
    y.SCA_ENABLE := zeroed(t.SCA_ENABLE);
    y.START_RESET := zeroed(t.START_RESET);
    y.START_CONNECT := zeroed(t.START_CONNECT);
    y.START_COMMAND := zeroed(t.START_COMMAND);
    y.INJ_CRC_ERR := zeroed(t.INJ_CRC_ERR);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_SC_SLAVE_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.RX_DATA_FROM_GBTX);
    l := l + len(x.TX_READY);
    l := l + len(x.RX_EMPTY);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_SC_SLAVE_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.RX_DATA_FROM_GBTX);
    l := l + width(x.TX_READY);
    l := l + width(x.RX_EMPTY);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_SC_SLAVE_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.RX_DATA_FROM_GBTX)-1), vectorify(x.RX_DATA_FROM_GBTX, y(left to left+len(x.RX_DATA_FROM_GBTX)-1)));
      left := left + len(x.RX_DATA_FROM_GBTX);
      assign(y(left to left+len(x.TX_READY)-1), vectorify(x.TX_READY, y(left to left+len(x.TX_READY)-1)));
      left := left + len(x.TX_READY);
      assign(y(left to left+len(x.RX_EMPTY)-1), vectorify(x.RX_EMPTY, y(left to left+len(x.RX_EMPTY)-1)));
    else
      assign(y(left downto left-len(x.RX_DATA_FROM_GBTX)+1), vectorify(x.RX_DATA_FROM_GBTX, y(left downto left-len(x.RX_DATA_FROM_GBTX)+1)));
      left := left - len(x.RX_DATA_FROM_GBTX);
      assign(y(left downto left-len(x.TX_READY)+1), vectorify(x.TX_READY, y(left downto left-len(x.TX_READY)+1)));
      left := left - len(x.TX_READY);
      assign(y(left downto left-len(x.RX_EMPTY)+1), vectorify(x.RX_EMPTY, y(left downto left-len(x.RX_EMPTY)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_SC_SLAVE_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.RX_DATA_FROM_GBTX)-1), convert(x.RX_DATA_FROM_GBTX, y(left to left+len(x.RX_DATA_FROM_GBTX)-1)));
      left := left + len(x.RX_DATA_FROM_GBTX);
      assign(y(left to left+len(x.TX_READY)-1), convert(x.TX_READY, y(left to left+len(x.TX_READY)-1)));
      left := left + len(x.TX_READY);
      assign(y(left to left+len(x.RX_EMPTY)-1), convert(x.RX_EMPTY, y(left to left+len(x.RX_EMPTY)-1)));
    else
      assign(y(left downto left-len(x.RX_DATA_FROM_GBTX)+1), convert(x.RX_DATA_FROM_GBTX, y(left downto left-len(x.RX_DATA_FROM_GBTX)+1)));
      left := left - len(x.RX_DATA_FROM_GBTX);
      assign(y(left downto left-len(x.TX_READY)+1), convert(x.TX_READY, y(left downto left-len(x.TX_READY)+1)));
      left := left - len(x.TX_READY);
      assign(y(left downto left-len(x.RX_EMPTY)+1), convert(x.RX_EMPTY, y(left downto left-len(x.RX_EMPTY)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_SC_SLAVE_MON_t) return HAL_CSM_CSM_SC_SLAVE_MON_t is
    variable y: HAL_CSM_CSM_SC_SLAVE_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.RX_DATA_FROM_GBTX := structify(x(left to left+len(y.RX_DATA_FROM_GBTX)-1), y.RX_DATA_FROM_GBTX);
      left := left + len(y.RX_DATA_FROM_GBTX);
      y.TX_READY := structify(x(left to left+len(y.TX_READY)-1), y.TX_READY);
      left := left + len(y.TX_READY);
      y.RX_EMPTY := structify(x(left to left+len(y.RX_EMPTY)-1), y.RX_EMPTY);
    else
      y.RX_DATA_FROM_GBTX := structify(x(left downto left-len(y.RX_DATA_FROM_GBTX)+1), y.RX_DATA_FROM_GBTX);
      left := left - len(y.RX_DATA_FROM_GBTX);
      y.TX_READY := structify(x(left downto left-len(y.TX_READY)+1), y.TX_READY);
      left := left - len(y.TX_READY);
      y.RX_EMPTY := structify(x(left downto left-len(y.RX_EMPTY)+1), y.RX_EMPTY);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_SC_SLAVE_MON_t) return HAL_CSM_CSM_SC_SLAVE_MON_t is
    variable y: HAL_CSM_CSM_SC_SLAVE_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.RX_DATA_FROM_GBTX := convert(x(left to left+len(y.RX_DATA_FROM_GBTX)-1), y.RX_DATA_FROM_GBTX);
      left := left + len(y.RX_DATA_FROM_GBTX);
      y.TX_READY := convert(x(left to left+len(y.TX_READY)-1), y.TX_READY);
      left := left + len(y.TX_READY);
      y.RX_EMPTY := convert(x(left to left+len(y.RX_EMPTY)-1), y.RX_EMPTY);
    else
      y.RX_DATA_FROM_GBTX := convert(x(left downto left-len(y.RX_DATA_FROM_GBTX)+1), y.RX_DATA_FROM_GBTX);
      left := left - len(y.RX_DATA_FROM_GBTX);
      y.TX_READY := convert(x(left downto left-len(y.TX_READY)+1), y.TX_READY);
      left := left - len(y.TX_READY);
      y.RX_EMPTY := convert(x(left downto left-len(y.RX_EMPTY)+1), y.RX_EMPTY);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_SC_SLAVE_MON_t) return HAL_CSM_CSM_SC_SLAVE_MON_t is
  variable y: HAL_CSM_CSM_SC_SLAVE_MON_t;
  begin
    y.RX_DATA_FROM_GBTX := nullify(t.RX_DATA_FROM_GBTX);
    y.TX_READY := nullify(t.TX_READY);
    y.RX_EMPTY := nullify(t.RX_EMPTY);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_SC_SLAVE_MON_t) return HAL_CSM_CSM_SC_SLAVE_MON_t is
  variable y: HAL_CSM_CSM_SC_SLAVE_MON_t;
  begin
    y.RX_DATA_FROM_GBTX := zeroed(t.RX_DATA_FROM_GBTX);
    y.TX_READY := zeroed(t.TX_READY);
    y.RX_EMPTY := zeroed(t.RX_EMPTY);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_SC_SLAVE_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.TX_RESET);
    l := l + len(x.RX_RESET);
    l := l + len(x.TX_START_WRITE);
    l := l + len(x.TX_START_READ);
    l := l + len(x.TX_GBTX_ADDR);
    l := l + len(x.TX_REGISTER_ADDR);
    l := l + len(x.TX_NUM_BYTES_TO_READ);
    l := l + len(x.TX_DATA_TO_GBTX);
    l := l + len(x.TX_WR);
    l := l + len(x.RX_RD);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_SC_SLAVE_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.TX_RESET);
    l := l + width(x.RX_RESET);
    l := l + width(x.TX_START_WRITE);
    l := l + width(x.TX_START_READ);
    l := l + width(x.TX_GBTX_ADDR);
    l := l + width(x.TX_REGISTER_ADDR);
    l := l + width(x.TX_NUM_BYTES_TO_READ);
    l := l + width(x.TX_DATA_TO_GBTX);
    l := l + width(x.TX_WR);
    l := l + width(x.RX_RD);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_SC_SLAVE_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.TX_RESET)-1), vectorify(x.TX_RESET, y(left to left+len(x.TX_RESET)-1)));
      left := left + len(x.TX_RESET);
      assign(y(left to left+len(x.RX_RESET)-1), vectorify(x.RX_RESET, y(left to left+len(x.RX_RESET)-1)));
      left := left + len(x.RX_RESET);
      assign(y(left to left+len(x.TX_START_WRITE)-1), vectorify(x.TX_START_WRITE, y(left to left+len(x.TX_START_WRITE)-1)));
      left := left + len(x.TX_START_WRITE);
      assign(y(left to left+len(x.TX_START_READ)-1), vectorify(x.TX_START_READ, y(left to left+len(x.TX_START_READ)-1)));
      left := left + len(x.TX_START_READ);
      assign(y(left to left+len(x.TX_GBTX_ADDR)-1), vectorify(x.TX_GBTX_ADDR, y(left to left+len(x.TX_GBTX_ADDR)-1)));
      left := left + len(x.TX_GBTX_ADDR);
      assign(y(left to left+len(x.TX_REGISTER_ADDR)-1), vectorify(x.TX_REGISTER_ADDR, y(left to left+len(x.TX_REGISTER_ADDR)-1)));
      left := left + len(x.TX_REGISTER_ADDR);
      assign(y(left to left+len(x.TX_NUM_BYTES_TO_READ)-1), vectorify(x.TX_NUM_BYTES_TO_READ, y(left to left+len(x.TX_NUM_BYTES_TO_READ)-1)));
      left := left + len(x.TX_NUM_BYTES_TO_READ);
      assign(y(left to left+len(x.TX_DATA_TO_GBTX)-1), vectorify(x.TX_DATA_TO_GBTX, y(left to left+len(x.TX_DATA_TO_GBTX)-1)));
      left := left + len(x.TX_DATA_TO_GBTX);
      assign(y(left to left+len(x.TX_WR)-1), vectorify(x.TX_WR, y(left to left+len(x.TX_WR)-1)));
      left := left + len(x.TX_WR);
      assign(y(left to left+len(x.RX_RD)-1), vectorify(x.RX_RD, y(left to left+len(x.RX_RD)-1)));
    else
      assign(y(left downto left-len(x.TX_RESET)+1), vectorify(x.TX_RESET, y(left downto left-len(x.TX_RESET)+1)));
      left := left - len(x.TX_RESET);
      assign(y(left downto left-len(x.RX_RESET)+1), vectorify(x.RX_RESET, y(left downto left-len(x.RX_RESET)+1)));
      left := left - len(x.RX_RESET);
      assign(y(left downto left-len(x.TX_START_WRITE)+1), vectorify(x.TX_START_WRITE, y(left downto left-len(x.TX_START_WRITE)+1)));
      left := left - len(x.TX_START_WRITE);
      assign(y(left downto left-len(x.TX_START_READ)+1), vectorify(x.TX_START_READ, y(left downto left-len(x.TX_START_READ)+1)));
      left := left - len(x.TX_START_READ);
      assign(y(left downto left-len(x.TX_GBTX_ADDR)+1), vectorify(x.TX_GBTX_ADDR, y(left downto left-len(x.TX_GBTX_ADDR)+1)));
      left := left - len(x.TX_GBTX_ADDR);
      assign(y(left downto left-len(x.TX_REGISTER_ADDR)+1), vectorify(x.TX_REGISTER_ADDR, y(left downto left-len(x.TX_REGISTER_ADDR)+1)));
      left := left - len(x.TX_REGISTER_ADDR);
      assign(y(left downto left-len(x.TX_NUM_BYTES_TO_READ)+1), vectorify(x.TX_NUM_BYTES_TO_READ, y(left downto left-len(x.TX_NUM_BYTES_TO_READ)+1)));
      left := left - len(x.TX_NUM_BYTES_TO_READ);
      assign(y(left downto left-len(x.TX_DATA_TO_GBTX)+1), vectorify(x.TX_DATA_TO_GBTX, y(left downto left-len(x.TX_DATA_TO_GBTX)+1)));
      left := left - len(x.TX_DATA_TO_GBTX);
      assign(y(left downto left-len(x.TX_WR)+1), vectorify(x.TX_WR, y(left downto left-len(x.TX_WR)+1)));
      left := left - len(x.TX_WR);
      assign(y(left downto left-len(x.RX_RD)+1), vectorify(x.RX_RD, y(left downto left-len(x.RX_RD)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_SC_SLAVE_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.TX_RESET)-1), convert(x.TX_RESET, y(left to left+len(x.TX_RESET)-1)));
      left := left + len(x.TX_RESET);
      assign(y(left to left+len(x.RX_RESET)-1), convert(x.RX_RESET, y(left to left+len(x.RX_RESET)-1)));
      left := left + len(x.RX_RESET);
      assign(y(left to left+len(x.TX_START_WRITE)-1), convert(x.TX_START_WRITE, y(left to left+len(x.TX_START_WRITE)-1)));
      left := left + len(x.TX_START_WRITE);
      assign(y(left to left+len(x.TX_START_READ)-1), convert(x.TX_START_READ, y(left to left+len(x.TX_START_READ)-1)));
      left := left + len(x.TX_START_READ);
      assign(y(left to left+len(x.TX_GBTX_ADDR)-1), convert(x.TX_GBTX_ADDR, y(left to left+len(x.TX_GBTX_ADDR)-1)));
      left := left + len(x.TX_GBTX_ADDR);
      assign(y(left to left+len(x.TX_REGISTER_ADDR)-1), convert(x.TX_REGISTER_ADDR, y(left to left+len(x.TX_REGISTER_ADDR)-1)));
      left := left + len(x.TX_REGISTER_ADDR);
      assign(y(left to left+len(x.TX_NUM_BYTES_TO_READ)-1), convert(x.TX_NUM_BYTES_TO_READ, y(left to left+len(x.TX_NUM_BYTES_TO_READ)-1)));
      left := left + len(x.TX_NUM_BYTES_TO_READ);
      assign(y(left to left+len(x.TX_DATA_TO_GBTX)-1), convert(x.TX_DATA_TO_GBTX, y(left to left+len(x.TX_DATA_TO_GBTX)-1)));
      left := left + len(x.TX_DATA_TO_GBTX);
      assign(y(left to left+len(x.TX_WR)-1), convert(x.TX_WR, y(left to left+len(x.TX_WR)-1)));
      left := left + len(x.TX_WR);
      assign(y(left to left+len(x.RX_RD)-1), convert(x.RX_RD, y(left to left+len(x.RX_RD)-1)));
    else
      assign(y(left downto left-len(x.TX_RESET)+1), convert(x.TX_RESET, y(left downto left-len(x.TX_RESET)+1)));
      left := left - len(x.TX_RESET);
      assign(y(left downto left-len(x.RX_RESET)+1), convert(x.RX_RESET, y(left downto left-len(x.RX_RESET)+1)));
      left := left - len(x.RX_RESET);
      assign(y(left downto left-len(x.TX_START_WRITE)+1), convert(x.TX_START_WRITE, y(left downto left-len(x.TX_START_WRITE)+1)));
      left := left - len(x.TX_START_WRITE);
      assign(y(left downto left-len(x.TX_START_READ)+1), convert(x.TX_START_READ, y(left downto left-len(x.TX_START_READ)+1)));
      left := left - len(x.TX_START_READ);
      assign(y(left downto left-len(x.TX_GBTX_ADDR)+1), convert(x.TX_GBTX_ADDR, y(left downto left-len(x.TX_GBTX_ADDR)+1)));
      left := left - len(x.TX_GBTX_ADDR);
      assign(y(left downto left-len(x.TX_REGISTER_ADDR)+1), convert(x.TX_REGISTER_ADDR, y(left downto left-len(x.TX_REGISTER_ADDR)+1)));
      left := left - len(x.TX_REGISTER_ADDR);
      assign(y(left downto left-len(x.TX_NUM_BYTES_TO_READ)+1), convert(x.TX_NUM_BYTES_TO_READ, y(left downto left-len(x.TX_NUM_BYTES_TO_READ)+1)));
      left := left - len(x.TX_NUM_BYTES_TO_READ);
      assign(y(left downto left-len(x.TX_DATA_TO_GBTX)+1), convert(x.TX_DATA_TO_GBTX, y(left downto left-len(x.TX_DATA_TO_GBTX)+1)));
      left := left - len(x.TX_DATA_TO_GBTX);
      assign(y(left downto left-len(x.TX_WR)+1), convert(x.TX_WR, y(left downto left-len(x.TX_WR)+1)));
      left := left - len(x.TX_WR);
      assign(y(left downto left-len(x.RX_RD)+1), convert(x.RX_RD, y(left downto left-len(x.RX_RD)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_SC_SLAVE_CTRL_t) return HAL_CSM_CSM_SC_SLAVE_CTRL_t is
    variable y: HAL_CSM_CSM_SC_SLAVE_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.TX_RESET := structify(x(left to left+len(y.TX_RESET)-1), y.TX_RESET);
      left := left + len(y.TX_RESET);
      y.RX_RESET := structify(x(left to left+len(y.RX_RESET)-1), y.RX_RESET);
      left := left + len(y.RX_RESET);
      y.TX_START_WRITE := structify(x(left to left+len(y.TX_START_WRITE)-1), y.TX_START_WRITE);
      left := left + len(y.TX_START_WRITE);
      y.TX_START_READ := structify(x(left to left+len(y.TX_START_READ)-1), y.TX_START_READ);
      left := left + len(y.TX_START_READ);
      y.TX_GBTX_ADDR := structify(x(left to left+len(y.TX_GBTX_ADDR)-1), y.TX_GBTX_ADDR);
      left := left + len(y.TX_GBTX_ADDR);
      y.TX_REGISTER_ADDR := structify(x(left to left+len(y.TX_REGISTER_ADDR)-1), y.TX_REGISTER_ADDR);
      left := left + len(y.TX_REGISTER_ADDR);
      y.TX_NUM_BYTES_TO_READ := structify(x(left to left+len(y.TX_NUM_BYTES_TO_READ)-1), y.TX_NUM_BYTES_TO_READ);
      left := left + len(y.TX_NUM_BYTES_TO_READ);
      y.TX_DATA_TO_GBTX := structify(x(left to left+len(y.TX_DATA_TO_GBTX)-1), y.TX_DATA_TO_GBTX);
      left := left + len(y.TX_DATA_TO_GBTX);
      y.TX_WR := structify(x(left to left+len(y.TX_WR)-1), y.TX_WR);
      left := left + len(y.TX_WR);
      y.RX_RD := structify(x(left to left+len(y.RX_RD)-1), y.RX_RD);
    else
      y.TX_RESET := structify(x(left downto left-len(y.TX_RESET)+1), y.TX_RESET);
      left := left - len(y.TX_RESET);
      y.RX_RESET := structify(x(left downto left-len(y.RX_RESET)+1), y.RX_RESET);
      left := left - len(y.RX_RESET);
      y.TX_START_WRITE := structify(x(left downto left-len(y.TX_START_WRITE)+1), y.TX_START_WRITE);
      left := left - len(y.TX_START_WRITE);
      y.TX_START_READ := structify(x(left downto left-len(y.TX_START_READ)+1), y.TX_START_READ);
      left := left - len(y.TX_START_READ);
      y.TX_GBTX_ADDR := structify(x(left downto left-len(y.TX_GBTX_ADDR)+1), y.TX_GBTX_ADDR);
      left := left - len(y.TX_GBTX_ADDR);
      y.TX_REGISTER_ADDR := structify(x(left downto left-len(y.TX_REGISTER_ADDR)+1), y.TX_REGISTER_ADDR);
      left := left - len(y.TX_REGISTER_ADDR);
      y.TX_NUM_BYTES_TO_READ := structify(x(left downto left-len(y.TX_NUM_BYTES_TO_READ)+1), y.TX_NUM_BYTES_TO_READ);
      left := left - len(y.TX_NUM_BYTES_TO_READ);
      y.TX_DATA_TO_GBTX := structify(x(left downto left-len(y.TX_DATA_TO_GBTX)+1), y.TX_DATA_TO_GBTX);
      left := left - len(y.TX_DATA_TO_GBTX);
      y.TX_WR := structify(x(left downto left-len(y.TX_WR)+1), y.TX_WR);
      left := left - len(y.TX_WR);
      y.RX_RD := structify(x(left downto left-len(y.RX_RD)+1), y.RX_RD);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_SC_SLAVE_CTRL_t) return HAL_CSM_CSM_SC_SLAVE_CTRL_t is
    variable y: HAL_CSM_CSM_SC_SLAVE_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.TX_RESET := convert(x(left to left+len(y.TX_RESET)-1), y.TX_RESET);
      left := left + len(y.TX_RESET);
      y.RX_RESET := convert(x(left to left+len(y.RX_RESET)-1), y.RX_RESET);
      left := left + len(y.RX_RESET);
      y.TX_START_WRITE := convert(x(left to left+len(y.TX_START_WRITE)-1), y.TX_START_WRITE);
      left := left + len(y.TX_START_WRITE);
      y.TX_START_READ := convert(x(left to left+len(y.TX_START_READ)-1), y.TX_START_READ);
      left := left + len(y.TX_START_READ);
      y.TX_GBTX_ADDR := convert(x(left to left+len(y.TX_GBTX_ADDR)-1), y.TX_GBTX_ADDR);
      left := left + len(y.TX_GBTX_ADDR);
      y.TX_REGISTER_ADDR := convert(x(left to left+len(y.TX_REGISTER_ADDR)-1), y.TX_REGISTER_ADDR);
      left := left + len(y.TX_REGISTER_ADDR);
      y.TX_NUM_BYTES_TO_READ := convert(x(left to left+len(y.TX_NUM_BYTES_TO_READ)-1), y.TX_NUM_BYTES_TO_READ);
      left := left + len(y.TX_NUM_BYTES_TO_READ);
      y.TX_DATA_TO_GBTX := convert(x(left to left+len(y.TX_DATA_TO_GBTX)-1), y.TX_DATA_TO_GBTX);
      left := left + len(y.TX_DATA_TO_GBTX);
      y.TX_WR := convert(x(left to left+len(y.TX_WR)-1), y.TX_WR);
      left := left + len(y.TX_WR);
      y.RX_RD := convert(x(left to left+len(y.RX_RD)-1), y.RX_RD);
    else
      y.TX_RESET := convert(x(left downto left-len(y.TX_RESET)+1), y.TX_RESET);
      left := left - len(y.TX_RESET);
      y.RX_RESET := convert(x(left downto left-len(y.RX_RESET)+1), y.RX_RESET);
      left := left - len(y.RX_RESET);
      y.TX_START_WRITE := convert(x(left downto left-len(y.TX_START_WRITE)+1), y.TX_START_WRITE);
      left := left - len(y.TX_START_WRITE);
      y.TX_START_READ := convert(x(left downto left-len(y.TX_START_READ)+1), y.TX_START_READ);
      left := left - len(y.TX_START_READ);
      y.TX_GBTX_ADDR := convert(x(left downto left-len(y.TX_GBTX_ADDR)+1), y.TX_GBTX_ADDR);
      left := left - len(y.TX_GBTX_ADDR);
      y.TX_REGISTER_ADDR := convert(x(left downto left-len(y.TX_REGISTER_ADDR)+1), y.TX_REGISTER_ADDR);
      left := left - len(y.TX_REGISTER_ADDR);
      y.TX_NUM_BYTES_TO_READ := convert(x(left downto left-len(y.TX_NUM_BYTES_TO_READ)+1), y.TX_NUM_BYTES_TO_READ);
      left := left - len(y.TX_NUM_BYTES_TO_READ);
      y.TX_DATA_TO_GBTX := convert(x(left downto left-len(y.TX_DATA_TO_GBTX)+1), y.TX_DATA_TO_GBTX);
      left := left - len(y.TX_DATA_TO_GBTX);
      y.TX_WR := convert(x(left downto left-len(y.TX_WR)+1), y.TX_WR);
      left := left - len(y.TX_WR);
      y.RX_RD := convert(x(left downto left-len(y.RX_RD)+1), y.RX_RD);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_SC_SLAVE_CTRL_t) return HAL_CSM_CSM_SC_SLAVE_CTRL_t is
  variable y: HAL_CSM_CSM_SC_SLAVE_CTRL_t;
  begin
    y.TX_RESET := nullify(t.TX_RESET);
    y.RX_RESET := nullify(t.RX_RESET);
    y.TX_START_WRITE := nullify(t.TX_START_WRITE);
    y.TX_START_READ := nullify(t.TX_START_READ);
    y.TX_GBTX_ADDR := nullify(t.TX_GBTX_ADDR);
    y.TX_REGISTER_ADDR := nullify(t.TX_REGISTER_ADDR);
    y.TX_NUM_BYTES_TO_READ := nullify(t.TX_NUM_BYTES_TO_READ);
    y.TX_DATA_TO_GBTX := nullify(t.TX_DATA_TO_GBTX);
    y.TX_WR := nullify(t.TX_WR);
    y.RX_RD := nullify(t.RX_RD);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_SC_SLAVE_CTRL_t) return HAL_CSM_CSM_SC_SLAVE_CTRL_t is
  variable y: HAL_CSM_CSM_SC_SLAVE_CTRL_t;
  begin
    y.TX_RESET := zeroed(t.TX_RESET);
    y.RX_RESET := zeroed(t.RX_RESET);
    y.TX_START_WRITE := zeroed(t.TX_START_WRITE);
    y.TX_START_READ := zeroed(t.TX_START_READ);
    y.TX_GBTX_ADDR := zeroed(t.TX_GBTX_ADDR);
    y.TX_REGISTER_ADDR := zeroed(t.TX_REGISTER_ADDR);
    y.TX_NUM_BYTES_TO_READ := zeroed(t.TX_NUM_BYTES_TO_READ);
    y.TX_DATA_TO_GBTX := zeroed(t.TX_DATA_TO_GBTX);
    y.TX_WR := zeroed(t.TX_WR);
    y.RX_RD := zeroed(t.RX_RD);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_SC_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.MASTER);
    l := l + len(x.SLAVE);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_SC_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.MASTER);
    l := l + width(x.SLAVE);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_SC_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.MASTER)-1), vectorify(x.MASTER, y(left to left+len(x.MASTER)-1)));
      left := left + len(x.MASTER);
      assign(y(left to left+len(x.SLAVE)-1), vectorify(x.SLAVE, y(left to left+len(x.SLAVE)-1)));
    else
      assign(y(left downto left-len(x.MASTER)+1), vectorify(x.MASTER, y(left downto left-len(x.MASTER)+1)));
      left := left - len(x.MASTER);
      assign(y(left downto left-len(x.SLAVE)+1), vectorify(x.SLAVE, y(left downto left-len(x.SLAVE)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_SC_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.MASTER)-1), convert(x.MASTER, y(left to left+len(x.MASTER)-1)));
      left := left + len(x.MASTER);
      assign(y(left to left+len(x.SLAVE)-1), convert(x.SLAVE, y(left to left+len(x.SLAVE)-1)));
    else
      assign(y(left downto left-len(x.MASTER)+1), convert(x.MASTER, y(left downto left-len(x.MASTER)+1)));
      left := left - len(x.MASTER);
      assign(y(left downto left-len(x.SLAVE)+1), convert(x.SLAVE, y(left downto left-len(x.SLAVE)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MON_t) return HAL_CSM_CSM_SC_MON_t is
    variable y: HAL_CSM_CSM_SC_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.MASTER := structify(x(left to left+len(y.MASTER)-1), y.MASTER);
      left := left + len(y.MASTER);
      y.SLAVE := structify(x(left to left+len(y.SLAVE)-1), y.SLAVE);
    else
      y.MASTER := structify(x(left downto left-len(y.MASTER)+1), y.MASTER);
      left := left - len(y.MASTER);
      y.SLAVE := structify(x(left downto left-len(y.SLAVE)+1), y.SLAVE);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_SC_MON_t) return HAL_CSM_CSM_SC_MON_t is
    variable y: HAL_CSM_CSM_SC_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.MASTER := convert(x(left to left+len(y.MASTER)-1), y.MASTER);
      left := left + len(y.MASTER);
      y.SLAVE := convert(x(left to left+len(y.SLAVE)-1), y.SLAVE);
    else
      y.MASTER := convert(x(left downto left-len(y.MASTER)+1), y.MASTER);
      left := left - len(y.MASTER);
      y.SLAVE := convert(x(left downto left-len(y.SLAVE)+1), y.SLAVE);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_SC_MON_t) return HAL_CSM_CSM_SC_MON_t is
  variable y: HAL_CSM_CSM_SC_MON_t;
  begin
    y.MASTER := nullify(t.MASTER);
    y.SLAVE := nullify(t.SLAVE);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_SC_MON_t) return HAL_CSM_CSM_SC_MON_t is
  variable y: HAL_CSM_CSM_SC_MON_t;
  begin
    y.MASTER := zeroed(t.MASTER);
    y.SLAVE := zeroed(t.SLAVE);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_SC_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.MASTER);
    l := l + len(x.SLAVE);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_SC_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.MASTER);
    l := l + width(x.SLAVE);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_SC_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.MASTER)-1), vectorify(x.MASTER, y(left to left+len(x.MASTER)-1)));
      left := left + len(x.MASTER);
      assign(y(left to left+len(x.SLAVE)-1), vectorify(x.SLAVE, y(left to left+len(x.SLAVE)-1)));
    else
      assign(y(left downto left-len(x.MASTER)+1), vectorify(x.MASTER, y(left downto left-len(x.MASTER)+1)));
      left := left - len(x.MASTER);
      assign(y(left downto left-len(x.SLAVE)+1), vectorify(x.SLAVE, y(left downto left-len(x.SLAVE)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_SC_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.MASTER)-1), convert(x.MASTER, y(left to left+len(x.MASTER)-1)));
      left := left + len(x.MASTER);
      assign(y(left to left+len(x.SLAVE)-1), convert(x.SLAVE, y(left to left+len(x.SLAVE)-1)));
    else
      assign(y(left downto left-len(x.MASTER)+1), convert(x.MASTER, y(left downto left-len(x.MASTER)+1)));
      left := left - len(x.MASTER);
      assign(y(left downto left-len(x.SLAVE)+1), convert(x.SLAVE, y(left downto left-len(x.SLAVE)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_SC_CTRL_t) return HAL_CSM_CSM_SC_CTRL_t is
    variable y: HAL_CSM_CSM_SC_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.MASTER := structify(x(left to left+len(y.MASTER)-1), y.MASTER);
      left := left + len(y.MASTER);
      y.SLAVE := structify(x(left to left+len(y.SLAVE)-1), y.SLAVE);
    else
      y.MASTER := structify(x(left downto left-len(y.MASTER)+1), y.MASTER);
      left := left - len(y.MASTER);
      y.SLAVE := structify(x(left downto left-len(y.SLAVE)+1), y.SLAVE);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_SC_CTRL_t) return HAL_CSM_CSM_SC_CTRL_t is
    variable y: HAL_CSM_CSM_SC_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.MASTER := convert(x(left to left+len(y.MASTER)-1), y.MASTER);
      left := left + len(y.MASTER);
      y.SLAVE := convert(x(left to left+len(y.SLAVE)-1), y.SLAVE);
    else
      y.MASTER := convert(x(left downto left-len(y.MASTER)+1), y.MASTER);
      left := left - len(y.MASTER);
      y.SLAVE := convert(x(left downto left-len(y.SLAVE)+1), y.SLAVE);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_SC_CTRL_t) return HAL_CSM_CSM_SC_CTRL_t is
  variable y: HAL_CSM_CSM_SC_CTRL_t;
  begin
    y.MASTER := nullify(t.MASTER);
    y.SLAVE := nullify(t.SLAVE);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_SC_CTRL_t) return HAL_CSM_CSM_SC_CTRL_t is
  variable y: HAL_CSM_CSM_SC_CTRL_t;
  begin
    y.MASTER := zeroed(t.MASTER);
    y.SLAVE := zeroed(t.SLAVE);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.LPGBT);
    l := l + len(x.SC);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.LPGBT);
    l := l + width(x.SC);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.LPGBT)-1), vectorify(x.LPGBT, y(left to left+len(x.LPGBT)-1)));
      left := left + len(x.LPGBT);
      assign(y(left to left+len(x.SC)-1), vectorify(x.SC, y(left to left+len(x.SC)-1)));
    else
      assign(y(left downto left-len(x.LPGBT)+1), vectorify(x.LPGBT, y(left downto left-len(x.LPGBT)+1)));
      left := left - len(x.LPGBT);
      assign(y(left downto left-len(x.SC)+1), vectorify(x.SC, y(left downto left-len(x.SC)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.LPGBT)-1), convert(x.LPGBT, y(left to left+len(x.LPGBT)-1)));
      left := left + len(x.LPGBT);
      assign(y(left to left+len(x.SC)-1), convert(x.SC, y(left to left+len(x.SC)-1)));
    else
      assign(y(left downto left-len(x.LPGBT)+1), convert(x.LPGBT, y(left downto left-len(x.LPGBT)+1)));
      left := left - len(x.LPGBT);
      assign(y(left downto left-len(x.SC)+1), convert(x.SC, y(left downto left-len(x.SC)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_MON_t) return HAL_CSM_CSM_MON_t is
    variable y: HAL_CSM_CSM_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.LPGBT := structify(x(left to left+len(y.LPGBT)-1), y.LPGBT);
      left := left + len(y.LPGBT);
      y.SC := structify(x(left to left+len(y.SC)-1), y.SC);
    else
      y.LPGBT := structify(x(left downto left-len(y.LPGBT)+1), y.LPGBT);
      left := left - len(y.LPGBT);
      y.SC := structify(x(left downto left-len(y.SC)+1), y.SC);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_MON_t) return HAL_CSM_CSM_MON_t is
    variable y: HAL_CSM_CSM_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.LPGBT := convert(x(left to left+len(y.LPGBT)-1), y.LPGBT);
      left := left + len(y.LPGBT);
      y.SC := convert(x(left to left+len(y.SC)-1), y.SC);
    else
      y.LPGBT := convert(x(left downto left-len(y.LPGBT)+1), y.LPGBT);
      left := left - len(y.LPGBT);
      y.SC := convert(x(left downto left-len(y.SC)+1), y.SC);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_MON_t) return HAL_CSM_CSM_MON_t is
  variable y: HAL_CSM_CSM_MON_t;
  begin
    y.LPGBT := nullify(t.LPGBT);
    y.SC := nullify(t.SC);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_MON_t) return HAL_CSM_CSM_MON_t is
  variable y: HAL_CSM_CSM_MON_t;
  begin
    y.LPGBT := zeroed(t.LPGBT);
    y.SC := zeroed(t.SC);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_MON_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * len(x(x'left));
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_MON_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * width(x(x'left));
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), vectorify(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), vectorify(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), convert(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), convert(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function convert;
  function structify(x: std_logic_vector; t: HAL_CSM_CSM_MON_t_ARRAY) return HAL_CSM_CSM_MON_t_ARRAY is
    variable y : HAL_CSM_CSM_MON_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function convert(x: std_logic_vector; t: HAL_CSM_CSM_MON_t_ARRAY) return HAL_CSM_CSM_MON_t_ARRAY is
    variable y : HAL_CSM_CSM_MON_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := convert(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := convert(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function convert;
  function nullify(x: HAL_CSM_CSM_MON_t_ARRAY) return HAL_CSM_CSM_MON_t_ARRAY is
    variable y : HAL_CSM_CSM_MON_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;
  function zeroed(x: HAL_CSM_CSM_MON_t_ARRAY) return HAL_CSM_CSM_MON_t_ARRAY is
    variable y : HAL_CSM_CSM_MON_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := zeroed(y(i));
    end loop l;
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.LPGBT);
    l := l + len(x.SC);
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.LPGBT);
    l := l + width(x.SC);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.LPGBT)-1), vectorify(x.LPGBT, y(left to left+len(x.LPGBT)-1)));
      left := left + len(x.LPGBT);
      assign(y(left to left+len(x.SC)-1), vectorify(x.SC, y(left to left+len(x.SC)-1)));
    else
      assign(y(left downto left-len(x.LPGBT)+1), vectorify(x.LPGBT, y(left downto left-len(x.LPGBT)+1)));
      left := left - len(x.LPGBT);
      assign(y(left downto left-len(x.SC)+1), vectorify(x.SC, y(left downto left-len(x.SC)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.LPGBT)-1), convert(x.LPGBT, y(left to left+len(x.LPGBT)-1)));
      left := left + len(x.LPGBT);
      assign(y(left to left+len(x.SC)-1), convert(x.SC, y(left to left+len(x.SC)-1)));
    else
      assign(y(left downto left-len(x.LPGBT)+1), convert(x.LPGBT, y(left downto left-len(x.LPGBT)+1)));
      left := left - len(x.LPGBT);
      assign(y(left downto left-len(x.SC)+1), convert(x.SC, y(left downto left-len(x.SC)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CSM_CTRL_t) return HAL_CSM_CSM_CTRL_t is
    variable y: HAL_CSM_CSM_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.LPGBT := structify(x(left to left+len(y.LPGBT)-1), y.LPGBT);
      left := left + len(y.LPGBT);
      y.SC := structify(x(left to left+len(y.SC)-1), y.SC);
    else
      y.LPGBT := structify(x(left downto left-len(y.LPGBT)+1), y.LPGBT);
      left := left - len(y.LPGBT);
      y.SC := structify(x(left downto left-len(y.SC)+1), y.SC);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CSM_CTRL_t) return HAL_CSM_CSM_CTRL_t is
    variable y: HAL_CSM_CSM_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.LPGBT := convert(x(left to left+len(y.LPGBT)-1), y.LPGBT);
      left := left + len(y.LPGBT);
      y.SC := convert(x(left to left+len(y.SC)-1), y.SC);
    else
      y.LPGBT := convert(x(left downto left-len(y.LPGBT)+1), y.LPGBT);
      left := left - len(y.LPGBT);
      y.SC := convert(x(left downto left-len(y.SC)+1), y.SC);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CSM_CTRL_t) return HAL_CSM_CSM_CTRL_t is
  variable y: HAL_CSM_CSM_CTRL_t;
  begin
    y.LPGBT := nullify(t.LPGBT);
    y.SC := nullify(t.SC);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CSM_CTRL_t) return HAL_CSM_CSM_CTRL_t is
  variable y: HAL_CSM_CSM_CTRL_t;
  begin
    y.LPGBT := zeroed(t.LPGBT);
    y.SC := zeroed(t.SC);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CSM_CTRL_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * len(x(x'left));
    return l;
  end function len;
  function width(x: HAL_CSM_CSM_CTRL_t_ARRAY) return natural is
    variable l : natural := 0;
  begin
    l := x'length * width(x(x'left));
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CSM_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), vectorify(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), vectorify(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CSM_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector is
    variable y : std_logic_vector(t'range);
    constant l :  integer := len(x(x'right));
    variable a :  integer;
    variable b :  integer;
  begin
    if t'ascending then
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(b to a), convert(x(i), y(b to a)));
      end loop;
    else
      for i in x'range loop
        a := l*i + y'low + l - 1;
        b := l*i + y'low;
        assign(y(a downto b), convert(x(i), y(a downto b)));
      end loop;
    end if;
    return y;
  end function convert;
  function structify(x: std_logic_vector; t: HAL_CSM_CSM_CTRL_t_ARRAY) return HAL_CSM_CSM_CTRL_t_ARRAY is
    variable y : HAL_CSM_CSM_CTRL_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := structify(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := structify(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function structify;
  function convert(x: std_logic_vector; t: HAL_CSM_CSM_CTRL_t_ARRAY) return HAL_CSM_CSM_CTRL_t_ARRAY is
    variable y : HAL_CSM_CSM_CTRL_t_ARRAY;
    constant l :  integer := len(y(y'left));
    variable a :  integer;
    variable b :  integer;
  begin
    if x'ascending then
      for i in y'range loop
        a := l*i + x'low + l - 1;
        b := l*i + x'low;
        y(i) := convert(x(b to a), y(i));
      end loop;
    else
      for i in y'range loop
        a := l*i + x'low + l-1;
        b := l*i + x'low;
        y(i) := convert(x(a downto b), y(i));
      end loop;
    end if;
    return y;
  end function convert;
  function nullify(x: HAL_CSM_CSM_CTRL_t_ARRAY) return HAL_CSM_CSM_CTRL_t_ARRAY is
    variable y : HAL_CSM_CSM_CTRL_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := nullify(y(i));
    end loop l;
    return y;
  end function nullify;
  function zeroed(x: HAL_CSM_CSM_CTRL_t_ARRAY) return HAL_CSM_CSM_CTRL_t_ARRAY is
    variable y : HAL_CSM_CSM_CTRL_t_ARRAY;
  begin
    l: for i in y'range loop
      y(i) := zeroed(y(i));
    end loop l;
    return y;
  end function zeroed;

  function len(x: HAL_CSM_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.CSM);
    return l;
  end function len;
  function width(x: HAL_CSM_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.CSM);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.CSM)-1), vectorify(x.CSM, y(left to left+len(x.CSM)-1)));
    else
      assign(y(left downto left-len(x.CSM)+1), vectorify(x.CSM, y(left downto left-len(x.CSM)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.CSM)-1), convert(x.CSM, y(left to left+len(x.CSM)-1)));
    else
      assign(y(left downto left-len(x.CSM)+1), convert(x.CSM, y(left downto left-len(x.CSM)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_MON_t) return HAL_CSM_MON_t is
    variable y: HAL_CSM_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.CSM := structify(x(left to left+len(y.CSM)-1), y.CSM);
    else
      y.CSM := structify(x(left downto left-len(y.CSM)+1), y.CSM);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_MON_t) return HAL_CSM_MON_t is
    variable y: HAL_CSM_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.CSM := convert(x(left to left+len(y.CSM)-1), y.CSM);
    else
      y.CSM := convert(x(left downto left-len(y.CSM)+1), y.CSM);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_MON_t) return HAL_CSM_MON_t is
  variable y: HAL_CSM_MON_t;
  begin
    y.CSM := nullify(t.CSM);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_MON_t) return HAL_CSM_MON_t is
  variable y: HAL_CSM_MON_t;
  begin
    y.CSM := zeroed(t.CSM);
    return y;
  end function zeroed;

  function len(x: HAL_CSM_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.CSM);
    return l;
  end function len;
  function width(x: HAL_CSM_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.CSM);
    return l;
  end function width;
  function vectorify(x: HAL_CSM_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.CSM)-1), vectorify(x.CSM, y(left to left+len(x.CSM)-1)));
    else
      assign(y(left downto left-len(x.CSM)+1), vectorify(x.CSM, y(left downto left-len(x.CSM)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CSM_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.CSM)-1), convert(x.CSM, y(left to left+len(x.CSM)-1)));
    else
      assign(y(left downto left-len(x.CSM)+1), convert(x.CSM, y(left downto left-len(x.CSM)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CSM_CTRL_t) return HAL_CSM_CTRL_t is
    variable y: HAL_CSM_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.CSM := structify(x(left to left+len(y.CSM)-1), y.CSM);
    else
      y.CSM := structify(x(left downto left-len(y.CSM)+1), y.CSM);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CSM_CTRL_t) return HAL_CSM_CTRL_t is
    variable y: HAL_CSM_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.CSM := convert(x(left to left+len(y.CSM)-1), y.CSM);
    else
      y.CSM := convert(x(left downto left-len(y.CSM)+1), y.CSM);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CSM_CTRL_t) return HAL_CSM_CTRL_t is
  variable y: HAL_CSM_CTRL_t;
  begin
    y.CSM := nullify(t.CSM);
    return y;
  end function nullify;
  function zeroed(t: HAL_CSM_CTRL_t) return HAL_CSM_CTRL_t is
  variable y: HAL_CSM_CTRL_t;
  begin
    y.CSM := zeroed(t.CSM);
    return y;
  end function zeroed;

  function len(x: HAL_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.CSM);
    return l;
  end function len;
  function width(x: HAL_MON_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.CSM);
    return l;
  end function width;
  function vectorify(x: HAL_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.CSM)-1), vectorify(x.CSM, y(left to left+len(x.CSM)-1)));
    else
      assign(y(left downto left-len(x.CSM)+1), vectorify(x.CSM, y(left downto left-len(x.CSM)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_MON_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.CSM)-1), convert(x.CSM, y(left to left+len(x.CSM)-1)));
    else
      assign(y(left downto left-len(x.CSM)+1), convert(x.CSM, y(left downto left-len(x.CSM)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_MON_t) return HAL_MON_t is
    variable y: HAL_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.CSM := structify(x(left to left+len(y.CSM)-1), y.CSM);
    else
      y.CSM := structify(x(left downto left-len(y.CSM)+1), y.CSM);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_MON_t) return HAL_MON_t is
    variable y: HAL_MON_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.CSM := convert(x(left to left+len(y.CSM)-1), y.CSM);
    else
      y.CSM := convert(x(left downto left-len(y.CSM)+1), y.CSM);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_MON_t) return HAL_MON_t is
  variable y: HAL_MON_t;
  begin
    y.CSM := nullify(t.CSM);
    return y;
  end function nullify;
  function zeroed(t: HAL_MON_t) return HAL_MON_t is
  variable y: HAL_MON_t;
  begin
    y.CSM := zeroed(t.CSM);
    return y;
  end function zeroed;

  function len(x: HAL_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + len(x.RESET_DOWNLINKS);
    l := l + len(x.RESET_UPLINKS);
    l := l + len(x.RESET_COUNTERS);
    l := l + len(x.CSM);
    return l;
  end function len;
  function width(x: HAL_CTRL_t) return natural is
    variable l : natural := 0;
  begin
    l := l + width(x.RESET_DOWNLINKS);
    l := l + width(x.RESET_UPLINKS);
    l := l + width(x.RESET_COUNTERS);
    l := l + width(x.CSM);
    return l;
  end function width;
  function vectorify(x: HAL_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.RESET_DOWNLINKS)-1), vectorify(x.RESET_DOWNLINKS, y(left to left+len(x.RESET_DOWNLINKS)-1)));
      left := left + len(x.RESET_DOWNLINKS);
      assign(y(left to left+len(x.RESET_UPLINKS)-1), vectorify(x.RESET_UPLINKS, y(left to left+len(x.RESET_UPLINKS)-1)));
      left := left + len(x.RESET_UPLINKS);
      assign(y(left to left+len(x.RESET_COUNTERS)-1), vectorify(x.RESET_COUNTERS, y(left to left+len(x.RESET_COUNTERS)-1)));
      left := left + len(x.RESET_COUNTERS);
      assign(y(left to left+len(x.CSM)-1), vectorify(x.CSM, y(left to left+len(x.CSM)-1)));
    else
      assign(y(left downto left-len(x.RESET_DOWNLINKS)+1), vectorify(x.RESET_DOWNLINKS, y(left downto left-len(x.RESET_DOWNLINKS)+1)));
      left := left - len(x.RESET_DOWNLINKS);
      assign(y(left downto left-len(x.RESET_UPLINKS)+1), vectorify(x.RESET_UPLINKS, y(left downto left-len(x.RESET_UPLINKS)+1)));
      left := left - len(x.RESET_UPLINKS);
      assign(y(left downto left-len(x.RESET_COUNTERS)+1), vectorify(x.RESET_COUNTERS, y(left downto left-len(x.RESET_COUNTERS)+1)));
      left := left - len(x.RESET_COUNTERS);
      assign(y(left downto left-len(x.CSM)+1), vectorify(x.CSM, y(left downto left-len(x.CSM)+1)));
    end if;
    return y;
  end function vectorify;
  function convert(x: HAL_CTRL_t; t: std_logic_vector) return std_logic_vector is
    variable left : natural := t'left;
    variable y : std_logic_vector(t'range);
  begin
    if t'ascending then
      assign(y(left to left+len(x.RESET_DOWNLINKS)-1), convert(x.RESET_DOWNLINKS, y(left to left+len(x.RESET_DOWNLINKS)-1)));
      left := left + len(x.RESET_DOWNLINKS);
      assign(y(left to left+len(x.RESET_UPLINKS)-1), convert(x.RESET_UPLINKS, y(left to left+len(x.RESET_UPLINKS)-1)));
      left := left + len(x.RESET_UPLINKS);
      assign(y(left to left+len(x.RESET_COUNTERS)-1), convert(x.RESET_COUNTERS, y(left to left+len(x.RESET_COUNTERS)-1)));
      left := left + len(x.RESET_COUNTERS);
      assign(y(left to left+len(x.CSM)-1), convert(x.CSM, y(left to left+len(x.CSM)-1)));
    else
      assign(y(left downto left-len(x.RESET_DOWNLINKS)+1), convert(x.RESET_DOWNLINKS, y(left downto left-len(x.RESET_DOWNLINKS)+1)));
      left := left - len(x.RESET_DOWNLINKS);
      assign(y(left downto left-len(x.RESET_UPLINKS)+1), convert(x.RESET_UPLINKS, y(left downto left-len(x.RESET_UPLINKS)+1)));
      left := left - len(x.RESET_UPLINKS);
      assign(y(left downto left-len(x.RESET_COUNTERS)+1), convert(x.RESET_COUNTERS, y(left downto left-len(x.RESET_COUNTERS)+1)));
      left := left - len(x.RESET_COUNTERS);
      assign(y(left downto left-len(x.CSM)+1), convert(x.CSM, y(left downto left-len(x.CSM)+1)));
    end if;
    return y;
  end function convert;
  function structify(x: in std_logic_vector; t: HAL_CTRL_t) return HAL_CTRL_t is
    variable y: HAL_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.RESET_DOWNLINKS := structify(x(left to left+len(y.RESET_DOWNLINKS)-1), y.RESET_DOWNLINKS);
      left := left + len(y.RESET_DOWNLINKS);
      y.RESET_UPLINKS := structify(x(left to left+len(y.RESET_UPLINKS)-1), y.RESET_UPLINKS);
      left := left + len(y.RESET_UPLINKS);
      y.RESET_COUNTERS := structify(x(left to left+len(y.RESET_COUNTERS)-1), y.RESET_COUNTERS);
      left := left + len(y.RESET_COUNTERS);
      y.CSM := structify(x(left to left+len(y.CSM)-1), y.CSM);
    else
      y.RESET_DOWNLINKS := structify(x(left downto left-len(y.RESET_DOWNLINKS)+1), y.RESET_DOWNLINKS);
      left := left - len(y.RESET_DOWNLINKS);
      y.RESET_UPLINKS := structify(x(left downto left-len(y.RESET_UPLINKS)+1), y.RESET_UPLINKS);
      left := left - len(y.RESET_UPLINKS);
      y.RESET_COUNTERS := structify(x(left downto left-len(y.RESET_COUNTERS)+1), y.RESET_COUNTERS);
      left := left - len(y.RESET_COUNTERS);
      y.CSM := structify(x(left downto left-len(y.CSM)+1), y.CSM);
    end if;
    return y;
  end function structify;
  function convert(x: in std_logic_vector; t: HAL_CTRL_t) return HAL_CTRL_t is
    variable y: HAL_CTRL_t;
    variable left : natural := x'left;
  begin
    if x'ascending then
      y.RESET_DOWNLINKS := convert(x(left to left+len(y.RESET_DOWNLINKS)-1), y.RESET_DOWNLINKS);
      left := left + len(y.RESET_DOWNLINKS);
      y.RESET_UPLINKS := convert(x(left to left+len(y.RESET_UPLINKS)-1), y.RESET_UPLINKS);
      left := left + len(y.RESET_UPLINKS);
      y.RESET_COUNTERS := convert(x(left to left+len(y.RESET_COUNTERS)-1), y.RESET_COUNTERS);
      left := left + len(y.RESET_COUNTERS);
      y.CSM := convert(x(left to left+len(y.CSM)-1), y.CSM);
    else
      y.RESET_DOWNLINKS := convert(x(left downto left-len(y.RESET_DOWNLINKS)+1), y.RESET_DOWNLINKS);
      left := left - len(y.RESET_DOWNLINKS);
      y.RESET_UPLINKS := convert(x(left downto left-len(y.RESET_UPLINKS)+1), y.RESET_UPLINKS);
      left := left - len(y.RESET_UPLINKS);
      y.RESET_COUNTERS := convert(x(left downto left-len(y.RESET_COUNTERS)+1), y.RESET_COUNTERS);
      left := left - len(y.RESET_COUNTERS);
      y.CSM := convert(x(left downto left-len(y.CSM)+1), y.CSM);
    end if;
    return y;
  end function convert;
  function nullify(t: HAL_CTRL_t) return HAL_CTRL_t is
  variable y: HAL_CTRL_t;
  begin
    y.RESET_DOWNLINKS := nullify(t.RESET_DOWNLINKS);
    y.RESET_UPLINKS := nullify(t.RESET_UPLINKS);
    y.RESET_COUNTERS := nullify(t.RESET_COUNTERS);
    y.CSM := nullify(t.CSM);
    return y;
  end function nullify;
  function zeroed(t: HAL_CTRL_t) return HAL_CTRL_t is
  variable y: HAL_CTRL_t;
  begin
    y.RESET_DOWNLINKS := zeroed(t.RESET_DOWNLINKS);
    y.RESET_UPLINKS := zeroed(t.RESET_UPLINKS);
    y.RESET_COUNTERS := zeroed(t.RESET_COUNTERS);
    y.CSM := zeroed(t.CSM);
    return y;
  end function zeroed;

end package body HAL_CTRL;
