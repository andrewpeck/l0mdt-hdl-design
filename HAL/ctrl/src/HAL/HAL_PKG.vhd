-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl
-- 2022-03-14 23:33:52

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.common_ieee_pkg.all;

package HAL_PKG is

   -- Custom types and functions --

   type HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t is record
      READY : std_logic;
      FEC_ERR_CNT : std_logic_vector(16-1 downto 0);
   end record HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t;
   function width(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t) return natural;
   function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t;

   type HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY is array(2-1 downto 0) of HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t;
   function width(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return integer;
   function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY;
   function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY;

   type HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t is record
      RESET : std_logic;
   end record HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t;
   function width(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t) return natural;
   function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t;

   type HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY is array(2-1 downto 0) of HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t;
   function width(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return integer;
   function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY;
   function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY;

   type HAL_CSM_CSM_LPGBT_UPLINK_MON_t is record
      UPLINK : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY;
   end record HAL_CSM_CSM_LPGBT_UPLINK_MON_t;
   function width(x: HAL_CSM_CSM_LPGBT_UPLINK_MON_t) return natural;
   function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_MON_t;

   type HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t is record
      UPLINK : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY;
   end record HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t;
   function width(x: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t) return natural;
   function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t;

   type HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t is record
      READY : std_logic;
   end record HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t;
   function width(x: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t) return natural;
   function convert(x: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t;

   type HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t is record
      RESET : std_logic;
   end record HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t;
   function width(x: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t) return natural;
   function convert(x: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t;

   type HAL_CSM_CSM_LPGBT_MON_t is record
      UPLINK : HAL_CSM_CSM_LPGBT_UPLINK_MON_t;
      DOWNLINK : HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t;
   end record HAL_CSM_CSM_LPGBT_MON_t;
   function width(x: HAL_CSM_CSM_LPGBT_MON_t) return natural;
   function convert(x: HAL_CSM_CSM_LPGBT_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_MON_t) return HAL_CSM_CSM_LPGBT_MON_t;

   type HAL_CSM_CSM_LPGBT_CTRL_t is record
      UPLINK : HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t;
      DOWNLINK : HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t;
   end record HAL_CSM_CSM_LPGBT_CTRL_t;
   function width(x: HAL_CSM_CSM_LPGBT_CTRL_t) return natural;
   function convert(x: HAL_CSM_CSM_LPGBT_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_CTRL_t) return HAL_CSM_CSM_LPGBT_CTRL_t;

   type HAL_CSM_CSM_SC_MASTER_IC_MON_t is record
      RX_DATA_FROM_GBTX : std_logic_vector(8-1 downto 0);
      TX_READY : std_logic;
      RX_DATA : std_logic_vector(32-1 downto 0);
      RX_CHIP_ADR : std_logic_vector(7-1 downto 0);
      RX_UP_PARITY_OK : std_logic;
      RX_DOWN_PARITY_OK : std_logic;
      RX_ERR : std_logic;
      RX_VALID : std_logic;
      RX_REG_ADR : std_logic_vector(16-1 downto 0);
      RX_LENGTH : std_logic_vector(16-1 downto 0);
   end record HAL_CSM_CSM_SC_MASTER_IC_MON_t;
   function width(x: HAL_CSM_CSM_SC_MASTER_IC_MON_t) return natural;
   function convert(x: HAL_CSM_CSM_SC_MASTER_IC_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_IC_MON_t) return HAL_CSM_CSM_SC_MASTER_IC_MON_t;

   type HAL_CSM_CSM_SC_MASTER_IC_CTRL_t is record
      TX_START_WRITE : std_logic;
      TX_START_READ : std_logic;
      TX_GBTX_ADDR : std_logic_vector(8-1 downto 0);
      TX_REGISTER_ADDR : std_logic_vector(16-1 downto 0);
      TX_NUM_BYTES_TO_READ : std_logic_vector(16-1 downto 0);
      TX_DATA_TO_GBTX : std_logic_vector(8-1 downto 0);
      TX_WR : std_logic;
   end record HAL_CSM_CSM_SC_MASTER_IC_CTRL_t;
   function width(x: HAL_CSM_CSM_SC_MASTER_IC_CTRL_t) return natural;
   function convert(x: HAL_CSM_CSM_SC_MASTER_IC_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_IC_CTRL_t) return HAL_CSM_CSM_SC_MASTER_IC_CTRL_t;

   type HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t is record
      RX_LEN : std_logic_vector(8-1 downto 0);
      RX_ADDRESS : std_logic_vector(8-1 downto 0);
      RX_CONTROL : std_logic_vector(8-1 downto 0);
      RX_TRANSID : std_logic_vector(8-1 downto 0);
      RX_ERR : std_logic_vector(8-1 downto 0);
      RX_RECEIVED : std_logic;
      RX_CHANNEL : std_logic_vector(8-1 downto 0);
      RX_DATA : std_logic_vector(32-1 downto 0);
   end record HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t;
   function width(x: HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t) return natural;
   function convert(x: HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t;

   type HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY is array(3-1 downto 0) of HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t;
   function width(x: HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY) return integer;
   function convert(x: HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY) return HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY;
   function convert(x: HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY) return HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY;

   type HAL_CSM_CSM_SC_MASTER_SCA_RX_MON_t is record
      RX : HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY;
   end record HAL_CSM_CSM_SC_MASTER_SCA_RX_MON_t;
   function width(x: HAL_CSM_CSM_SC_MASTER_SCA_RX_MON_t) return natural;
   function convert(x: HAL_CSM_CSM_SC_MASTER_SCA_RX_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_SCA_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_SCA_RX_MON_t;

   type HAL_CSM_CSM_SC_MASTER_MON_t is record
      IC : HAL_CSM_CSM_SC_MASTER_IC_MON_t;
      SCA_RX : HAL_CSM_CSM_SC_MASTER_SCA_RX_MON_t;
   end record HAL_CSM_CSM_SC_MASTER_MON_t;
   function width(x: HAL_CSM_CSM_SC_MASTER_MON_t) return natural;
   function convert(x: HAL_CSM_CSM_SC_MASTER_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_MON_t) return HAL_CSM_CSM_SC_MASTER_MON_t;

   type HAL_CSM_CSM_SC_MASTER_CTRL_t is record
      TX_RESET : std_logic;
      RX_RESET : std_logic;
      IC : HAL_CSM_CSM_SC_MASTER_IC_CTRL_t;
      TX_CMD : std_logic_vector(8-1 downto 0);
      TX_ADDRESS : std_logic_vector(8-1 downto 0);
      TX_TRANSID : std_logic_vector(8-1 downto 0);
      TX_CHANNEL : std_logic_vector(8-1 downto 0);
      TX_DATA : std_logic_vector(32-1 downto 0);
      SCA_ENABLE : std_logic_vector(3-1 downto 0);
      START_RESET : std_logic;
      START_CONNECT : std_logic;
      START_COMMAND : std_logic;
      INJ_CRC_ERR : std_logic;
   end record HAL_CSM_CSM_SC_MASTER_CTRL_t;
   function width(x: HAL_CSM_CSM_SC_MASTER_CTRL_t) return natural;
   function convert(x: HAL_CSM_CSM_SC_MASTER_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_CTRL_t) return HAL_CSM_CSM_SC_MASTER_CTRL_t;

   type HAL_CSM_CSM_SC_SLAVE_IC_MON_t is record
      RX_DATA_FROM_GBTX : std_logic_vector(8-1 downto 0);
      TX_READY : std_logic;
      RX_DATA : std_logic_vector(32-1 downto 0);
      RX_CHIP_ADR : std_logic_vector(7-1 downto 0);
      RX_UP_PARITY_OK : std_logic;
      RX_DOWN_PARITY_OK : std_logic;
      RX_ERR : std_logic;
      RX_VALID : std_logic;
      RX_REG_ADR : std_logic_vector(16-1 downto 0);
      RX_LENGTH : std_logic_vector(16-1 downto 0);
   end record HAL_CSM_CSM_SC_SLAVE_IC_MON_t;
   function width(x: HAL_CSM_CSM_SC_SLAVE_IC_MON_t) return natural;
   function convert(x: HAL_CSM_CSM_SC_SLAVE_IC_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_SLAVE_IC_MON_t) return HAL_CSM_CSM_SC_SLAVE_IC_MON_t;

   type HAL_CSM_CSM_SC_SLAVE_IC_CTRL_t is record
      TX_START_WRITE : std_logic;
      TX_START_READ : std_logic;
      TX_GBTX_ADDR : std_logic_vector(8-1 downto 0);
      TX_REGISTER_ADDR : std_logic_vector(16-1 downto 0);
      TX_NUM_BYTES_TO_READ : std_logic_vector(16-1 downto 0);
      TX_DATA_TO_GBTX : std_logic_vector(8-1 downto 0);
      TX_WR : std_logic;
   end record HAL_CSM_CSM_SC_SLAVE_IC_CTRL_t;
   function width(x: HAL_CSM_CSM_SC_SLAVE_IC_CTRL_t) return natural;
   function convert(x: HAL_CSM_CSM_SC_SLAVE_IC_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_SLAVE_IC_CTRL_t) return HAL_CSM_CSM_SC_SLAVE_IC_CTRL_t;

   type HAL_CSM_CSM_SC_SLAVE_MON_t is record
      IC : HAL_CSM_CSM_SC_SLAVE_IC_MON_t;
   end record HAL_CSM_CSM_SC_SLAVE_MON_t;
   function width(x: HAL_CSM_CSM_SC_SLAVE_MON_t) return natural;
   function convert(x: HAL_CSM_CSM_SC_SLAVE_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_SLAVE_MON_t) return HAL_CSM_CSM_SC_SLAVE_MON_t;

   type HAL_CSM_CSM_SC_SLAVE_CTRL_t is record
      TX_RESET : std_logic;
      RX_RESET : std_logic;
      IC : HAL_CSM_CSM_SC_SLAVE_IC_CTRL_t;
   end record HAL_CSM_CSM_SC_SLAVE_CTRL_t;
   function width(x: HAL_CSM_CSM_SC_SLAVE_CTRL_t) return natural;
   function convert(x: HAL_CSM_CSM_SC_SLAVE_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_SLAVE_CTRL_t) return HAL_CSM_CSM_SC_SLAVE_CTRL_t;

   type HAL_CSM_CSM_SC_MON_t is record
      MASTER : HAL_CSM_CSM_SC_MASTER_MON_t;
      SLAVE : HAL_CSM_CSM_SC_SLAVE_MON_t;
   end record HAL_CSM_CSM_SC_MON_t;
   function width(x: HAL_CSM_CSM_SC_MON_t) return natural;
   function convert(x: HAL_CSM_CSM_SC_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MON_t) return HAL_CSM_CSM_SC_MON_t;

   type HAL_CSM_CSM_SC_CTRL_t is record
      MASTER : HAL_CSM_CSM_SC_MASTER_CTRL_t;
      SLAVE : HAL_CSM_CSM_SC_SLAVE_CTRL_t;
   end record HAL_CSM_CSM_SC_CTRL_t;
   function width(x: HAL_CSM_CSM_SC_CTRL_t) return natural;
   function convert(x: HAL_CSM_CSM_SC_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_CTRL_t) return HAL_CSM_CSM_SC_CTRL_t;

   type HAL_CSM_CSM_MON_t is record
      LPGBT : HAL_CSM_CSM_LPGBT_MON_t;
      SC : HAL_CSM_CSM_SC_MON_t;
   end record HAL_CSM_CSM_MON_t;
   function width(x: HAL_CSM_CSM_MON_t) return natural;
   function convert(x: HAL_CSM_CSM_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_MON_t) return HAL_CSM_CSM_MON_t;

   type HAL_CSM_CSM_MON_t_ARRAY is array(36-1 downto 0) of HAL_CSM_CSM_MON_t;
   function width(x: HAL_CSM_CSM_MON_t_ARRAY) return integer;
   function convert(x: HAL_CSM_CSM_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_MON_t_ARRAY) return HAL_CSM_CSM_MON_t_ARRAY;
   function convert(x: HAL_CSM_CSM_MON_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: HAL_CSM_CSM_MON_t_ARRAY) return HAL_CSM_CSM_MON_t_ARRAY;

   type HAL_CSM_CSM_CTRL_t is record
      LPGBT : HAL_CSM_CSM_LPGBT_CTRL_t;
      SC : HAL_CSM_CSM_SC_CTRL_t;
   end record HAL_CSM_CSM_CTRL_t;
   function width(x: HAL_CSM_CSM_CTRL_t) return natural;
   function convert(x: HAL_CSM_CSM_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_CTRL_t) return HAL_CSM_CSM_CTRL_t;

   type HAL_CSM_CSM_CTRL_t_ARRAY is array(36-1 downto 0) of HAL_CSM_CSM_CTRL_t;
   function width(x: HAL_CSM_CSM_CTRL_t_ARRAY) return integer;
   function convert(x: HAL_CSM_CSM_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_CTRL_t_ARRAY) return HAL_CSM_CSM_CTRL_t_ARRAY;
   function convert(x: HAL_CSM_CSM_CTRL_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; t: HAL_CSM_CSM_CTRL_t_ARRAY) return HAL_CSM_CSM_CTRL_t_ARRAY;

   type HAL_CSM_MON_t is record
      CSM : HAL_CSM_CSM_MON_t_ARRAY;
   end record HAL_CSM_MON_t;
   function width(x: HAL_CSM_MON_t) return natural;
   function convert(x: HAL_CSM_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_MON_t) return HAL_CSM_MON_t;

   type HAL_CSM_CTRL_t is record
      CSM : HAL_CSM_CSM_CTRL_t_ARRAY;
   end record HAL_CSM_CTRL_t;
   function width(x: HAL_CSM_CTRL_t) return natural;
   function convert(x: HAL_CSM_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CSM_CTRL_t) return HAL_CSM_CTRL_t;

   type HAL_MON_t is record
      CSM : HAL_CSM_MON_t;
   end record HAL_MON_t;
   function width(x: HAL_MON_t) return natural;
   function convert(x: HAL_MON_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_MON_t) return HAL_MON_t;

   type HAL_CTRL_t is record
      RESET_DOWNLINKS : std_logic;
      RESET_UPLINKS : std_logic;
      RESET_COUNTERS : std_logic;
      CSM : HAL_CSM_CTRL_t;
   end record HAL_CTRL_t;
   function width(x: HAL_CTRL_t) return natural;
   function convert(x: HAL_CTRL_t; t: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; t: HAL_CTRL_t) return HAL_CTRL_t;

end package HAL_PKG;

------------------------------------------------------------

package body HAL_PKG is

   -- Custom types and functions --

   function width(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.READY);
      w := w + width(x.FEC_ERR_CNT);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.READY);
         y(u to u+w-1) := convert(x.READY, y(u to u+w-1));
         u := u + w;
         w := width(x.FEC_ERR_CNT);
         y(u to u+w-1) := convert(x.FEC_ERR_CNT, y(u to u+w-1));
      else
         w := width(x.READY);
         y(u downto u-w+1) := convert(x.READY, y(u downto u-w+1));
         u := u - w;
         w := width(x.FEC_ERR_CNT);
         y(u downto u-w+1) := convert(x.FEC_ERR_CNT, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t is
      variable y : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.READY);
         y.READY := convert(x(u to u+w-1), t.READY);
         u := u + w;
         w := width(t.FEC_ERR_CNT);
         y.FEC_ERR_CNT := convert(x(u to u+w-1), t.FEC_ERR_CNT);
      else
         w := width(t.READY);
         y.READY := convert(x(u downto u-w+1), t.READY);
         u := u - w;
         w := width(t.FEC_ERR_CNT);
         y.FEC_ERR_CNT := convert(x(u downto u-w+1), t.FEC_ERR_CNT);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY is
      variable y : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY;
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY is
      variable y : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_MON_t_ARRAY;
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.RESET);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.RESET);
         y(u to u+w-1) := convert(x.RESET, y(u to u+w-1));
      else
         w := width(x.RESET);
         y(u downto u-w+1) := convert(x.RESET, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t is
      variable y : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.RESET);
         y.RESET := convert(x(u to u+w-1), t.RESET);
      else
         w := width(t.RESET);
         y.RESET := convert(x(u downto u-w+1), t.RESET);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY is
      variable y : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY;
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY) return HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY is
      variable y : HAL_CSM_CSM_LPGBT_UPLINK_UPLINK_CTRL_t_ARRAY;
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_LPGBT_UPLINK_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.UPLINK);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.UPLINK);
         y(u to u+w-1) := convert(x.UPLINK, y(u to u+w-1));
      else
         w := width(x.UPLINK);
         y(u downto u-w+1) := convert(x.UPLINK, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_MON_t) return HAL_CSM_CSM_LPGBT_UPLINK_MON_t is
      variable y : HAL_CSM_CSM_LPGBT_UPLINK_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.UPLINK);
         y.UPLINK := convert(x(u to u+w-1), t.UPLINK);
      else
         w := width(t.UPLINK);
         y.UPLINK := convert(x(u downto u-w+1), t.UPLINK);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.UPLINK);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.UPLINK);
         y(u to u+w-1) := convert(x.UPLINK, y(u to u+w-1));
      else
         w := width(x.UPLINK);
         y(u downto u-w+1) := convert(x.UPLINK, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t is
      variable y : HAL_CSM_CSM_LPGBT_UPLINK_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.UPLINK);
         y.UPLINK := convert(x(u to u+w-1), t.UPLINK);
      else
         w := width(t.UPLINK);
         y.UPLINK := convert(x(u downto u-w+1), t.UPLINK);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.READY);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.READY);
         y(u to u+w-1) := convert(x.READY, y(u to u+w-1));
      else
         w := width(x.READY);
         y(u downto u-w+1) := convert(x.READY, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t is
      variable y : HAL_CSM_CSM_LPGBT_DOWNLINK_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.READY);
         y.READY := convert(x(u to u+w-1), t.READY);
      else
         w := width(t.READY);
         y.READY := convert(x(u downto u-w+1), t.READY);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.RESET);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.RESET);
         y(u to u+w-1) := convert(x.RESET, y(u to u+w-1));
      else
         w := width(x.RESET);
         y(u downto u-w+1) := convert(x.RESET, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t) return HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t is
      variable y : HAL_CSM_CSM_LPGBT_DOWNLINK_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.RESET);
         y.RESET := convert(x(u to u+w-1), t.RESET);
      else
         w := width(t.RESET);
         y.RESET := convert(x(u downto u-w+1), t.RESET);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_LPGBT_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.UPLINK);
      w := w + width(x.DOWNLINK);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_LPGBT_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.UPLINK);
         y(u to u+w-1) := convert(x.UPLINK, y(u to u+w-1));
         u := u + w;
         w := width(x.DOWNLINK);
         y(u to u+w-1) := convert(x.DOWNLINK, y(u to u+w-1));
      else
         w := width(x.UPLINK);
         y(u downto u-w+1) := convert(x.UPLINK, y(u downto u-w+1));
         u := u - w;
         w := width(x.DOWNLINK);
         y(u downto u-w+1) := convert(x.DOWNLINK, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_MON_t) return HAL_CSM_CSM_LPGBT_MON_t is
      variable y : HAL_CSM_CSM_LPGBT_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.UPLINK);
         y.UPLINK := convert(x(u to u+w-1), t.UPLINK);
         u := u + w;
         w := width(t.DOWNLINK);
         y.DOWNLINK := convert(x(u to u+w-1), t.DOWNLINK);
      else
         w := width(t.UPLINK);
         y.UPLINK := convert(x(u downto u-w+1), t.UPLINK);
         u := u - w;
         w := width(t.DOWNLINK);
         y.DOWNLINK := convert(x(u downto u-w+1), t.DOWNLINK);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_LPGBT_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.UPLINK);
      w := w + width(x.DOWNLINK);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_LPGBT_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.UPLINK);
         y(u to u+w-1) := convert(x.UPLINK, y(u to u+w-1));
         u := u + w;
         w := width(x.DOWNLINK);
         y(u to u+w-1) := convert(x.DOWNLINK, y(u to u+w-1));
      else
         w := width(x.UPLINK);
         y(u downto u-w+1) := convert(x.UPLINK, y(u downto u-w+1));
         u := u - w;
         w := width(x.DOWNLINK);
         y(u downto u-w+1) := convert(x.DOWNLINK, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_LPGBT_CTRL_t) return HAL_CSM_CSM_LPGBT_CTRL_t is
      variable y : HAL_CSM_CSM_LPGBT_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.UPLINK);
         y.UPLINK := convert(x(u to u+w-1), t.UPLINK);
         u := u + w;
         w := width(t.DOWNLINK);
         y.DOWNLINK := convert(x(u to u+w-1), t.DOWNLINK);
      else
         w := width(t.UPLINK);
         y.UPLINK := convert(x(u downto u-w+1), t.UPLINK);
         u := u - w;
         w := width(t.DOWNLINK);
         y.DOWNLINK := convert(x(u downto u-w+1), t.DOWNLINK);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_SC_MASTER_IC_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.RX_DATA_FROM_GBTX);
      w := w + width(x.TX_READY);
      w := w + width(x.RX_DATA);
      w := w + width(x.RX_CHIP_ADR);
      w := w + width(x.RX_UP_PARITY_OK);
      w := w + width(x.RX_DOWN_PARITY_OK);
      w := w + width(x.RX_ERR);
      w := w + width(x.RX_VALID);
      w := w + width(x.RX_REG_ADR);
      w := w + width(x.RX_LENGTH);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_SC_MASTER_IC_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.RX_DATA_FROM_GBTX);
         y(u to u+w-1) := convert(x.RX_DATA_FROM_GBTX, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_READY);
         y(u to u+w-1) := convert(x.TX_READY, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_DATA);
         y(u to u+w-1) := convert(x.RX_DATA, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_CHIP_ADR);
         y(u to u+w-1) := convert(x.RX_CHIP_ADR, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_UP_PARITY_OK);
         y(u to u+w-1) := convert(x.RX_UP_PARITY_OK, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_DOWN_PARITY_OK);
         y(u to u+w-1) := convert(x.RX_DOWN_PARITY_OK, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_ERR);
         y(u to u+w-1) := convert(x.RX_ERR, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_VALID);
         y(u to u+w-1) := convert(x.RX_VALID, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_REG_ADR);
         y(u to u+w-1) := convert(x.RX_REG_ADR, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_LENGTH);
         y(u to u+w-1) := convert(x.RX_LENGTH, y(u to u+w-1));
      else
         w := width(x.RX_DATA_FROM_GBTX);
         y(u downto u-w+1) := convert(x.RX_DATA_FROM_GBTX, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_READY);
         y(u downto u-w+1) := convert(x.TX_READY, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_DATA);
         y(u downto u-w+1) := convert(x.RX_DATA, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_CHIP_ADR);
         y(u downto u-w+1) := convert(x.RX_CHIP_ADR, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_UP_PARITY_OK);
         y(u downto u-w+1) := convert(x.RX_UP_PARITY_OK, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_DOWN_PARITY_OK);
         y(u downto u-w+1) := convert(x.RX_DOWN_PARITY_OK, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_ERR);
         y(u downto u-w+1) := convert(x.RX_ERR, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_VALID);
         y(u downto u-w+1) := convert(x.RX_VALID, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_REG_ADR);
         y(u downto u-w+1) := convert(x.RX_REG_ADR, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_LENGTH);
         y(u downto u-w+1) := convert(x.RX_LENGTH, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_IC_MON_t) return HAL_CSM_CSM_SC_MASTER_IC_MON_t is
      variable y : HAL_CSM_CSM_SC_MASTER_IC_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.RX_DATA_FROM_GBTX);
         y.RX_DATA_FROM_GBTX := convert(x(u to u+w-1), t.RX_DATA_FROM_GBTX);
         u := u + w;
         w := width(t.TX_READY);
         y.TX_READY := convert(x(u to u+w-1), t.TX_READY);
         u := u + w;
         w := width(t.RX_DATA);
         y.RX_DATA := convert(x(u to u+w-1), t.RX_DATA);
         u := u + w;
         w := width(t.RX_CHIP_ADR);
         y.RX_CHIP_ADR := convert(x(u to u+w-1), t.RX_CHIP_ADR);
         u := u + w;
         w := width(t.RX_UP_PARITY_OK);
         y.RX_UP_PARITY_OK := convert(x(u to u+w-1), t.RX_UP_PARITY_OK);
         u := u + w;
         w := width(t.RX_DOWN_PARITY_OK);
         y.RX_DOWN_PARITY_OK := convert(x(u to u+w-1), t.RX_DOWN_PARITY_OK);
         u := u + w;
         w := width(t.RX_ERR);
         y.RX_ERR := convert(x(u to u+w-1), t.RX_ERR);
         u := u + w;
         w := width(t.RX_VALID);
         y.RX_VALID := convert(x(u to u+w-1), t.RX_VALID);
         u := u + w;
         w := width(t.RX_REG_ADR);
         y.RX_REG_ADR := convert(x(u to u+w-1), t.RX_REG_ADR);
         u := u + w;
         w := width(t.RX_LENGTH);
         y.RX_LENGTH := convert(x(u to u+w-1), t.RX_LENGTH);
      else
         w := width(t.RX_DATA_FROM_GBTX);
         y.RX_DATA_FROM_GBTX := convert(x(u downto u-w+1), t.RX_DATA_FROM_GBTX);
         u := u - w;
         w := width(t.TX_READY);
         y.TX_READY := convert(x(u downto u-w+1), t.TX_READY);
         u := u - w;
         w := width(t.RX_DATA);
         y.RX_DATA := convert(x(u downto u-w+1), t.RX_DATA);
         u := u - w;
         w := width(t.RX_CHIP_ADR);
         y.RX_CHIP_ADR := convert(x(u downto u-w+1), t.RX_CHIP_ADR);
         u := u - w;
         w := width(t.RX_UP_PARITY_OK);
         y.RX_UP_PARITY_OK := convert(x(u downto u-w+1), t.RX_UP_PARITY_OK);
         u := u - w;
         w := width(t.RX_DOWN_PARITY_OK);
         y.RX_DOWN_PARITY_OK := convert(x(u downto u-w+1), t.RX_DOWN_PARITY_OK);
         u := u - w;
         w := width(t.RX_ERR);
         y.RX_ERR := convert(x(u downto u-w+1), t.RX_ERR);
         u := u - w;
         w := width(t.RX_VALID);
         y.RX_VALID := convert(x(u downto u-w+1), t.RX_VALID);
         u := u - w;
         w := width(t.RX_REG_ADR);
         y.RX_REG_ADR := convert(x(u downto u-w+1), t.RX_REG_ADR);
         u := u - w;
         w := width(t.RX_LENGTH);
         y.RX_LENGTH := convert(x(u downto u-w+1), t.RX_LENGTH);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_SC_MASTER_IC_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.TX_START_WRITE);
      w := w + width(x.TX_START_READ);
      w := w + width(x.TX_GBTX_ADDR);
      w := w + width(x.TX_REGISTER_ADDR);
      w := w + width(x.TX_NUM_BYTES_TO_READ);
      w := w + width(x.TX_DATA_TO_GBTX);
      w := w + width(x.TX_WR);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_SC_MASTER_IC_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.TX_START_WRITE);
         y(u to u+w-1) := convert(x.TX_START_WRITE, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_START_READ);
         y(u to u+w-1) := convert(x.TX_START_READ, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_GBTX_ADDR);
         y(u to u+w-1) := convert(x.TX_GBTX_ADDR, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_REGISTER_ADDR);
         y(u to u+w-1) := convert(x.TX_REGISTER_ADDR, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_NUM_BYTES_TO_READ);
         y(u to u+w-1) := convert(x.TX_NUM_BYTES_TO_READ, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_DATA_TO_GBTX);
         y(u to u+w-1) := convert(x.TX_DATA_TO_GBTX, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_WR);
         y(u to u+w-1) := convert(x.TX_WR, y(u to u+w-1));
      else
         w := width(x.TX_START_WRITE);
         y(u downto u-w+1) := convert(x.TX_START_WRITE, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_START_READ);
         y(u downto u-w+1) := convert(x.TX_START_READ, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_GBTX_ADDR);
         y(u downto u-w+1) := convert(x.TX_GBTX_ADDR, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_REGISTER_ADDR);
         y(u downto u-w+1) := convert(x.TX_REGISTER_ADDR, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_NUM_BYTES_TO_READ);
         y(u downto u-w+1) := convert(x.TX_NUM_BYTES_TO_READ, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_DATA_TO_GBTX);
         y(u downto u-w+1) := convert(x.TX_DATA_TO_GBTX, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_WR);
         y(u downto u-w+1) := convert(x.TX_WR, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_IC_CTRL_t) return HAL_CSM_CSM_SC_MASTER_IC_CTRL_t is
      variable y : HAL_CSM_CSM_SC_MASTER_IC_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.TX_START_WRITE);
         y.TX_START_WRITE := convert(x(u to u+w-1), t.TX_START_WRITE);
         u := u + w;
         w := width(t.TX_START_READ);
         y.TX_START_READ := convert(x(u to u+w-1), t.TX_START_READ);
         u := u + w;
         w := width(t.TX_GBTX_ADDR);
         y.TX_GBTX_ADDR := convert(x(u to u+w-1), t.TX_GBTX_ADDR);
         u := u + w;
         w := width(t.TX_REGISTER_ADDR);
         y.TX_REGISTER_ADDR := convert(x(u to u+w-1), t.TX_REGISTER_ADDR);
         u := u + w;
         w := width(t.TX_NUM_BYTES_TO_READ);
         y.TX_NUM_BYTES_TO_READ := convert(x(u to u+w-1), t.TX_NUM_BYTES_TO_READ);
         u := u + w;
         w := width(t.TX_DATA_TO_GBTX);
         y.TX_DATA_TO_GBTX := convert(x(u to u+w-1), t.TX_DATA_TO_GBTX);
         u := u + w;
         w := width(t.TX_WR);
         y.TX_WR := convert(x(u to u+w-1), t.TX_WR);
      else
         w := width(t.TX_START_WRITE);
         y.TX_START_WRITE := convert(x(u downto u-w+1), t.TX_START_WRITE);
         u := u - w;
         w := width(t.TX_START_READ);
         y.TX_START_READ := convert(x(u downto u-w+1), t.TX_START_READ);
         u := u - w;
         w := width(t.TX_GBTX_ADDR);
         y.TX_GBTX_ADDR := convert(x(u downto u-w+1), t.TX_GBTX_ADDR);
         u := u - w;
         w := width(t.TX_REGISTER_ADDR);
         y.TX_REGISTER_ADDR := convert(x(u downto u-w+1), t.TX_REGISTER_ADDR);
         u := u - w;
         w := width(t.TX_NUM_BYTES_TO_READ);
         y.TX_NUM_BYTES_TO_READ := convert(x(u downto u-w+1), t.TX_NUM_BYTES_TO_READ);
         u := u - w;
         w := width(t.TX_DATA_TO_GBTX);
         y.TX_DATA_TO_GBTX := convert(x(u downto u-w+1), t.TX_DATA_TO_GBTX);
         u := u - w;
         w := width(t.TX_WR);
         y.TX_WR := convert(x(u downto u-w+1), t.TX_WR);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.RX_LEN);
      w := w + width(x.RX_ADDRESS);
      w := w + width(x.RX_CONTROL);
      w := w + width(x.RX_TRANSID);
      w := w + width(x.RX_ERR);
      w := w + width(x.RX_RECEIVED);
      w := w + width(x.RX_CHANNEL);
      w := w + width(x.RX_DATA);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.RX_LEN);
         y(u to u+w-1) := convert(x.RX_LEN, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_ADDRESS);
         y(u to u+w-1) := convert(x.RX_ADDRESS, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_CONTROL);
         y(u to u+w-1) := convert(x.RX_CONTROL, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_TRANSID);
         y(u to u+w-1) := convert(x.RX_TRANSID, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_ERR);
         y(u to u+w-1) := convert(x.RX_ERR, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_RECEIVED);
         y(u to u+w-1) := convert(x.RX_RECEIVED, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_CHANNEL);
         y(u to u+w-1) := convert(x.RX_CHANNEL, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_DATA);
         y(u to u+w-1) := convert(x.RX_DATA, y(u to u+w-1));
      else
         w := width(x.RX_LEN);
         y(u downto u-w+1) := convert(x.RX_LEN, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_ADDRESS);
         y(u downto u-w+1) := convert(x.RX_ADDRESS, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_CONTROL);
         y(u downto u-w+1) := convert(x.RX_CONTROL, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_TRANSID);
         y(u downto u-w+1) := convert(x.RX_TRANSID, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_ERR);
         y(u downto u-w+1) := convert(x.RX_ERR, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_RECEIVED);
         y(u downto u-w+1) := convert(x.RX_RECEIVED, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_CHANNEL);
         y(u downto u-w+1) := convert(x.RX_CHANNEL, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_DATA);
         y(u downto u-w+1) := convert(x.RX_DATA, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t is
      variable y : HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.RX_LEN);
         y.RX_LEN := convert(x(u to u+w-1), t.RX_LEN);
         u := u + w;
         w := width(t.RX_ADDRESS);
         y.RX_ADDRESS := convert(x(u to u+w-1), t.RX_ADDRESS);
         u := u + w;
         w := width(t.RX_CONTROL);
         y.RX_CONTROL := convert(x(u to u+w-1), t.RX_CONTROL);
         u := u + w;
         w := width(t.RX_TRANSID);
         y.RX_TRANSID := convert(x(u to u+w-1), t.RX_TRANSID);
         u := u + w;
         w := width(t.RX_ERR);
         y.RX_ERR := convert(x(u to u+w-1), t.RX_ERR);
         u := u + w;
         w := width(t.RX_RECEIVED);
         y.RX_RECEIVED := convert(x(u to u+w-1), t.RX_RECEIVED);
         u := u + w;
         w := width(t.RX_CHANNEL);
         y.RX_CHANNEL := convert(x(u to u+w-1), t.RX_CHANNEL);
         u := u + w;
         w := width(t.RX_DATA);
         y.RX_DATA := convert(x(u to u+w-1), t.RX_DATA);
      else
         w := width(t.RX_LEN);
         y.RX_LEN := convert(x(u downto u-w+1), t.RX_LEN);
         u := u - w;
         w := width(t.RX_ADDRESS);
         y.RX_ADDRESS := convert(x(u downto u-w+1), t.RX_ADDRESS);
         u := u - w;
         w := width(t.RX_CONTROL);
         y.RX_CONTROL := convert(x(u downto u-w+1), t.RX_CONTROL);
         u := u - w;
         w := width(t.RX_TRANSID);
         y.RX_TRANSID := convert(x(u downto u-w+1), t.RX_TRANSID);
         u := u - w;
         w := width(t.RX_ERR);
         y.RX_ERR := convert(x(u downto u-w+1), t.RX_ERR);
         u := u - w;
         w := width(t.RX_RECEIVED);
         y.RX_RECEIVED := convert(x(u downto u-w+1), t.RX_RECEIVED);
         u := u - w;
         w := width(t.RX_CHANNEL);
         y.RX_CHANNEL := convert(x(u downto u-w+1), t.RX_CHANNEL);
         u := u - w;
         w := width(t.RX_DATA);
         y.RX_DATA := convert(x(u downto u-w+1), t.RX_DATA);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY) return HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY is
      variable y : HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY;
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY) return HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY is
      variable y : HAL_CSM_CSM_SC_MASTER_SCA_RX_RX_MON_t_ARRAY;
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_SC_MASTER_SCA_RX_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.RX);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_SC_MASTER_SCA_RX_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.RX);
         y(u to u+w-1) := convert(x.RX, y(u to u+w-1));
      else
         w := width(x.RX);
         y(u downto u-w+1) := convert(x.RX, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_SCA_RX_MON_t) return HAL_CSM_CSM_SC_MASTER_SCA_RX_MON_t is
      variable y : HAL_CSM_CSM_SC_MASTER_SCA_RX_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.RX);
         y.RX := convert(x(u to u+w-1), t.RX);
      else
         w := width(t.RX);
         y.RX := convert(x(u downto u-w+1), t.RX);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_SC_MASTER_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.IC);
      w := w + width(x.SCA_RX);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_SC_MASTER_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.IC);
         y(u to u+w-1) := convert(x.IC, y(u to u+w-1));
         u := u + w;
         w := width(x.SCA_RX);
         y(u to u+w-1) := convert(x.SCA_RX, y(u to u+w-1));
      else
         w := width(x.IC);
         y(u downto u-w+1) := convert(x.IC, y(u downto u-w+1));
         u := u - w;
         w := width(x.SCA_RX);
         y(u downto u-w+1) := convert(x.SCA_RX, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_MON_t) return HAL_CSM_CSM_SC_MASTER_MON_t is
      variable y : HAL_CSM_CSM_SC_MASTER_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.IC);
         y.IC := convert(x(u to u+w-1), t.IC);
         u := u + w;
         w := width(t.SCA_RX);
         y.SCA_RX := convert(x(u to u+w-1), t.SCA_RX);
      else
         w := width(t.IC);
         y.IC := convert(x(u downto u-w+1), t.IC);
         u := u - w;
         w := width(t.SCA_RX);
         y.SCA_RX := convert(x(u downto u-w+1), t.SCA_RX);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_SC_MASTER_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.TX_RESET);
      w := w + width(x.RX_RESET);
      w := w + width(x.IC);
      w := w + width(x.TX_CMD);
      w := w + width(x.TX_ADDRESS);
      w := w + width(x.TX_TRANSID);
      w := w + width(x.TX_CHANNEL);
      w := w + width(x.TX_DATA);
      w := w + width(x.SCA_ENABLE);
      w := w + width(x.START_RESET);
      w := w + width(x.START_CONNECT);
      w := w + width(x.START_COMMAND);
      w := w + width(x.INJ_CRC_ERR);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_SC_MASTER_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.TX_RESET);
         y(u to u+w-1) := convert(x.TX_RESET, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_RESET);
         y(u to u+w-1) := convert(x.RX_RESET, y(u to u+w-1));
         u := u + w;
         w := width(x.IC);
         y(u to u+w-1) := convert(x.IC, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_CMD);
         y(u to u+w-1) := convert(x.TX_CMD, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_ADDRESS);
         y(u to u+w-1) := convert(x.TX_ADDRESS, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_TRANSID);
         y(u to u+w-1) := convert(x.TX_TRANSID, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_CHANNEL);
         y(u to u+w-1) := convert(x.TX_CHANNEL, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_DATA);
         y(u to u+w-1) := convert(x.TX_DATA, y(u to u+w-1));
         u := u + w;
         w := width(x.SCA_ENABLE);
         y(u to u+w-1) := convert(x.SCA_ENABLE, y(u to u+w-1));
         u := u + w;
         w := width(x.START_RESET);
         y(u to u+w-1) := convert(x.START_RESET, y(u to u+w-1));
         u := u + w;
         w := width(x.START_CONNECT);
         y(u to u+w-1) := convert(x.START_CONNECT, y(u to u+w-1));
         u := u + w;
         w := width(x.START_COMMAND);
         y(u to u+w-1) := convert(x.START_COMMAND, y(u to u+w-1));
         u := u + w;
         w := width(x.INJ_CRC_ERR);
         y(u to u+w-1) := convert(x.INJ_CRC_ERR, y(u to u+w-1));
      else
         w := width(x.TX_RESET);
         y(u downto u-w+1) := convert(x.TX_RESET, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_RESET);
         y(u downto u-w+1) := convert(x.RX_RESET, y(u downto u-w+1));
         u := u - w;
         w := width(x.IC);
         y(u downto u-w+1) := convert(x.IC, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_CMD);
         y(u downto u-w+1) := convert(x.TX_CMD, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_ADDRESS);
         y(u downto u-w+1) := convert(x.TX_ADDRESS, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_TRANSID);
         y(u downto u-w+1) := convert(x.TX_TRANSID, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_CHANNEL);
         y(u downto u-w+1) := convert(x.TX_CHANNEL, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_DATA);
         y(u downto u-w+1) := convert(x.TX_DATA, y(u downto u-w+1));
         u := u - w;
         w := width(x.SCA_ENABLE);
         y(u downto u-w+1) := convert(x.SCA_ENABLE, y(u downto u-w+1));
         u := u - w;
         w := width(x.START_RESET);
         y(u downto u-w+1) := convert(x.START_RESET, y(u downto u-w+1));
         u := u - w;
         w := width(x.START_CONNECT);
         y(u downto u-w+1) := convert(x.START_CONNECT, y(u downto u-w+1));
         u := u - w;
         w := width(x.START_COMMAND);
         y(u downto u-w+1) := convert(x.START_COMMAND, y(u downto u-w+1));
         u := u - w;
         w := width(x.INJ_CRC_ERR);
         y(u downto u-w+1) := convert(x.INJ_CRC_ERR, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MASTER_CTRL_t) return HAL_CSM_CSM_SC_MASTER_CTRL_t is
      variable y : HAL_CSM_CSM_SC_MASTER_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.TX_RESET);
         y.TX_RESET := convert(x(u to u+w-1), t.TX_RESET);
         u := u + w;
         w := width(t.RX_RESET);
         y.RX_RESET := convert(x(u to u+w-1), t.RX_RESET);
         u := u + w;
         w := width(t.IC);
         y.IC := convert(x(u to u+w-1), t.IC);
         u := u + w;
         w := width(t.TX_CMD);
         y.TX_CMD := convert(x(u to u+w-1), t.TX_CMD);
         u := u + w;
         w := width(t.TX_ADDRESS);
         y.TX_ADDRESS := convert(x(u to u+w-1), t.TX_ADDRESS);
         u := u + w;
         w := width(t.TX_TRANSID);
         y.TX_TRANSID := convert(x(u to u+w-1), t.TX_TRANSID);
         u := u + w;
         w := width(t.TX_CHANNEL);
         y.TX_CHANNEL := convert(x(u to u+w-1), t.TX_CHANNEL);
         u := u + w;
         w := width(t.TX_DATA);
         y.TX_DATA := convert(x(u to u+w-1), t.TX_DATA);
         u := u + w;
         w := width(t.SCA_ENABLE);
         y.SCA_ENABLE := convert(x(u to u+w-1), t.SCA_ENABLE);
         u := u + w;
         w := width(t.START_RESET);
         y.START_RESET := convert(x(u to u+w-1), t.START_RESET);
         u := u + w;
         w := width(t.START_CONNECT);
         y.START_CONNECT := convert(x(u to u+w-1), t.START_CONNECT);
         u := u + w;
         w := width(t.START_COMMAND);
         y.START_COMMAND := convert(x(u to u+w-1), t.START_COMMAND);
         u := u + w;
         w := width(t.INJ_CRC_ERR);
         y.INJ_CRC_ERR := convert(x(u to u+w-1), t.INJ_CRC_ERR);
      else
         w := width(t.TX_RESET);
         y.TX_RESET := convert(x(u downto u-w+1), t.TX_RESET);
         u := u - w;
         w := width(t.RX_RESET);
         y.RX_RESET := convert(x(u downto u-w+1), t.RX_RESET);
         u := u - w;
         w := width(t.IC);
         y.IC := convert(x(u downto u-w+1), t.IC);
         u := u - w;
         w := width(t.TX_CMD);
         y.TX_CMD := convert(x(u downto u-w+1), t.TX_CMD);
         u := u - w;
         w := width(t.TX_ADDRESS);
         y.TX_ADDRESS := convert(x(u downto u-w+1), t.TX_ADDRESS);
         u := u - w;
         w := width(t.TX_TRANSID);
         y.TX_TRANSID := convert(x(u downto u-w+1), t.TX_TRANSID);
         u := u - w;
         w := width(t.TX_CHANNEL);
         y.TX_CHANNEL := convert(x(u downto u-w+1), t.TX_CHANNEL);
         u := u - w;
         w := width(t.TX_DATA);
         y.TX_DATA := convert(x(u downto u-w+1), t.TX_DATA);
         u := u - w;
         w := width(t.SCA_ENABLE);
         y.SCA_ENABLE := convert(x(u downto u-w+1), t.SCA_ENABLE);
         u := u - w;
         w := width(t.START_RESET);
         y.START_RESET := convert(x(u downto u-w+1), t.START_RESET);
         u := u - w;
         w := width(t.START_CONNECT);
         y.START_CONNECT := convert(x(u downto u-w+1), t.START_CONNECT);
         u := u - w;
         w := width(t.START_COMMAND);
         y.START_COMMAND := convert(x(u downto u-w+1), t.START_COMMAND);
         u := u - w;
         w := width(t.INJ_CRC_ERR);
         y.INJ_CRC_ERR := convert(x(u downto u-w+1), t.INJ_CRC_ERR);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_SC_SLAVE_IC_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.RX_DATA_FROM_GBTX);
      w := w + width(x.TX_READY);
      w := w + width(x.RX_DATA);
      w := w + width(x.RX_CHIP_ADR);
      w := w + width(x.RX_UP_PARITY_OK);
      w := w + width(x.RX_DOWN_PARITY_OK);
      w := w + width(x.RX_ERR);
      w := w + width(x.RX_VALID);
      w := w + width(x.RX_REG_ADR);
      w := w + width(x.RX_LENGTH);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_SC_SLAVE_IC_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.RX_DATA_FROM_GBTX);
         y(u to u+w-1) := convert(x.RX_DATA_FROM_GBTX, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_READY);
         y(u to u+w-1) := convert(x.TX_READY, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_DATA);
         y(u to u+w-1) := convert(x.RX_DATA, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_CHIP_ADR);
         y(u to u+w-1) := convert(x.RX_CHIP_ADR, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_UP_PARITY_OK);
         y(u to u+w-1) := convert(x.RX_UP_PARITY_OK, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_DOWN_PARITY_OK);
         y(u to u+w-1) := convert(x.RX_DOWN_PARITY_OK, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_ERR);
         y(u to u+w-1) := convert(x.RX_ERR, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_VALID);
         y(u to u+w-1) := convert(x.RX_VALID, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_REG_ADR);
         y(u to u+w-1) := convert(x.RX_REG_ADR, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_LENGTH);
         y(u to u+w-1) := convert(x.RX_LENGTH, y(u to u+w-1));
      else
         w := width(x.RX_DATA_FROM_GBTX);
         y(u downto u-w+1) := convert(x.RX_DATA_FROM_GBTX, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_READY);
         y(u downto u-w+1) := convert(x.TX_READY, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_DATA);
         y(u downto u-w+1) := convert(x.RX_DATA, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_CHIP_ADR);
         y(u downto u-w+1) := convert(x.RX_CHIP_ADR, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_UP_PARITY_OK);
         y(u downto u-w+1) := convert(x.RX_UP_PARITY_OK, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_DOWN_PARITY_OK);
         y(u downto u-w+1) := convert(x.RX_DOWN_PARITY_OK, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_ERR);
         y(u downto u-w+1) := convert(x.RX_ERR, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_VALID);
         y(u downto u-w+1) := convert(x.RX_VALID, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_REG_ADR);
         y(u downto u-w+1) := convert(x.RX_REG_ADR, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_LENGTH);
         y(u downto u-w+1) := convert(x.RX_LENGTH, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_SLAVE_IC_MON_t) return HAL_CSM_CSM_SC_SLAVE_IC_MON_t is
      variable y : HAL_CSM_CSM_SC_SLAVE_IC_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.RX_DATA_FROM_GBTX);
         y.RX_DATA_FROM_GBTX := convert(x(u to u+w-1), t.RX_DATA_FROM_GBTX);
         u := u + w;
         w := width(t.TX_READY);
         y.TX_READY := convert(x(u to u+w-1), t.TX_READY);
         u := u + w;
         w := width(t.RX_DATA);
         y.RX_DATA := convert(x(u to u+w-1), t.RX_DATA);
         u := u + w;
         w := width(t.RX_CHIP_ADR);
         y.RX_CHIP_ADR := convert(x(u to u+w-1), t.RX_CHIP_ADR);
         u := u + w;
         w := width(t.RX_UP_PARITY_OK);
         y.RX_UP_PARITY_OK := convert(x(u to u+w-1), t.RX_UP_PARITY_OK);
         u := u + w;
         w := width(t.RX_DOWN_PARITY_OK);
         y.RX_DOWN_PARITY_OK := convert(x(u to u+w-1), t.RX_DOWN_PARITY_OK);
         u := u + w;
         w := width(t.RX_ERR);
         y.RX_ERR := convert(x(u to u+w-1), t.RX_ERR);
         u := u + w;
         w := width(t.RX_VALID);
         y.RX_VALID := convert(x(u to u+w-1), t.RX_VALID);
         u := u + w;
         w := width(t.RX_REG_ADR);
         y.RX_REG_ADR := convert(x(u to u+w-1), t.RX_REG_ADR);
         u := u + w;
         w := width(t.RX_LENGTH);
         y.RX_LENGTH := convert(x(u to u+w-1), t.RX_LENGTH);
      else
         w := width(t.RX_DATA_FROM_GBTX);
         y.RX_DATA_FROM_GBTX := convert(x(u downto u-w+1), t.RX_DATA_FROM_GBTX);
         u := u - w;
         w := width(t.TX_READY);
         y.TX_READY := convert(x(u downto u-w+1), t.TX_READY);
         u := u - w;
         w := width(t.RX_DATA);
         y.RX_DATA := convert(x(u downto u-w+1), t.RX_DATA);
         u := u - w;
         w := width(t.RX_CHIP_ADR);
         y.RX_CHIP_ADR := convert(x(u downto u-w+1), t.RX_CHIP_ADR);
         u := u - w;
         w := width(t.RX_UP_PARITY_OK);
         y.RX_UP_PARITY_OK := convert(x(u downto u-w+1), t.RX_UP_PARITY_OK);
         u := u - w;
         w := width(t.RX_DOWN_PARITY_OK);
         y.RX_DOWN_PARITY_OK := convert(x(u downto u-w+1), t.RX_DOWN_PARITY_OK);
         u := u - w;
         w := width(t.RX_ERR);
         y.RX_ERR := convert(x(u downto u-w+1), t.RX_ERR);
         u := u - w;
         w := width(t.RX_VALID);
         y.RX_VALID := convert(x(u downto u-w+1), t.RX_VALID);
         u := u - w;
         w := width(t.RX_REG_ADR);
         y.RX_REG_ADR := convert(x(u downto u-w+1), t.RX_REG_ADR);
         u := u - w;
         w := width(t.RX_LENGTH);
         y.RX_LENGTH := convert(x(u downto u-w+1), t.RX_LENGTH);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_SC_SLAVE_IC_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.TX_START_WRITE);
      w := w + width(x.TX_START_READ);
      w := w + width(x.TX_GBTX_ADDR);
      w := w + width(x.TX_REGISTER_ADDR);
      w := w + width(x.TX_NUM_BYTES_TO_READ);
      w := w + width(x.TX_DATA_TO_GBTX);
      w := w + width(x.TX_WR);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_SC_SLAVE_IC_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.TX_START_WRITE);
         y(u to u+w-1) := convert(x.TX_START_WRITE, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_START_READ);
         y(u to u+w-1) := convert(x.TX_START_READ, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_GBTX_ADDR);
         y(u to u+w-1) := convert(x.TX_GBTX_ADDR, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_REGISTER_ADDR);
         y(u to u+w-1) := convert(x.TX_REGISTER_ADDR, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_NUM_BYTES_TO_READ);
         y(u to u+w-1) := convert(x.TX_NUM_BYTES_TO_READ, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_DATA_TO_GBTX);
         y(u to u+w-1) := convert(x.TX_DATA_TO_GBTX, y(u to u+w-1));
         u := u + w;
         w := width(x.TX_WR);
         y(u to u+w-1) := convert(x.TX_WR, y(u to u+w-1));
      else
         w := width(x.TX_START_WRITE);
         y(u downto u-w+1) := convert(x.TX_START_WRITE, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_START_READ);
         y(u downto u-w+1) := convert(x.TX_START_READ, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_GBTX_ADDR);
         y(u downto u-w+1) := convert(x.TX_GBTX_ADDR, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_REGISTER_ADDR);
         y(u downto u-w+1) := convert(x.TX_REGISTER_ADDR, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_NUM_BYTES_TO_READ);
         y(u downto u-w+1) := convert(x.TX_NUM_BYTES_TO_READ, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_DATA_TO_GBTX);
         y(u downto u-w+1) := convert(x.TX_DATA_TO_GBTX, y(u downto u-w+1));
         u := u - w;
         w := width(x.TX_WR);
         y(u downto u-w+1) := convert(x.TX_WR, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_SLAVE_IC_CTRL_t) return HAL_CSM_CSM_SC_SLAVE_IC_CTRL_t is
      variable y : HAL_CSM_CSM_SC_SLAVE_IC_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.TX_START_WRITE);
         y.TX_START_WRITE := convert(x(u to u+w-1), t.TX_START_WRITE);
         u := u + w;
         w := width(t.TX_START_READ);
         y.TX_START_READ := convert(x(u to u+w-1), t.TX_START_READ);
         u := u + w;
         w := width(t.TX_GBTX_ADDR);
         y.TX_GBTX_ADDR := convert(x(u to u+w-1), t.TX_GBTX_ADDR);
         u := u + w;
         w := width(t.TX_REGISTER_ADDR);
         y.TX_REGISTER_ADDR := convert(x(u to u+w-1), t.TX_REGISTER_ADDR);
         u := u + w;
         w := width(t.TX_NUM_BYTES_TO_READ);
         y.TX_NUM_BYTES_TO_READ := convert(x(u to u+w-1), t.TX_NUM_BYTES_TO_READ);
         u := u + w;
         w := width(t.TX_DATA_TO_GBTX);
         y.TX_DATA_TO_GBTX := convert(x(u to u+w-1), t.TX_DATA_TO_GBTX);
         u := u + w;
         w := width(t.TX_WR);
         y.TX_WR := convert(x(u to u+w-1), t.TX_WR);
      else
         w := width(t.TX_START_WRITE);
         y.TX_START_WRITE := convert(x(u downto u-w+1), t.TX_START_WRITE);
         u := u - w;
         w := width(t.TX_START_READ);
         y.TX_START_READ := convert(x(u downto u-w+1), t.TX_START_READ);
         u := u - w;
         w := width(t.TX_GBTX_ADDR);
         y.TX_GBTX_ADDR := convert(x(u downto u-w+1), t.TX_GBTX_ADDR);
         u := u - w;
         w := width(t.TX_REGISTER_ADDR);
         y.TX_REGISTER_ADDR := convert(x(u downto u-w+1), t.TX_REGISTER_ADDR);
         u := u - w;
         w := width(t.TX_NUM_BYTES_TO_READ);
         y.TX_NUM_BYTES_TO_READ := convert(x(u downto u-w+1), t.TX_NUM_BYTES_TO_READ);
         u := u - w;
         w := width(t.TX_DATA_TO_GBTX);
         y.TX_DATA_TO_GBTX := convert(x(u downto u-w+1), t.TX_DATA_TO_GBTX);
         u := u - w;
         w := width(t.TX_WR);
         y.TX_WR := convert(x(u downto u-w+1), t.TX_WR);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_SC_SLAVE_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.IC);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_SC_SLAVE_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.IC);
         y(u to u+w-1) := convert(x.IC, y(u to u+w-1));
      else
         w := width(x.IC);
         y(u downto u-w+1) := convert(x.IC, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_SLAVE_MON_t) return HAL_CSM_CSM_SC_SLAVE_MON_t is
      variable y : HAL_CSM_CSM_SC_SLAVE_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.IC);
         y.IC := convert(x(u to u+w-1), t.IC);
      else
         w := width(t.IC);
         y.IC := convert(x(u downto u-w+1), t.IC);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_SC_SLAVE_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.TX_RESET);
      w := w + width(x.RX_RESET);
      w := w + width(x.IC);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_SC_SLAVE_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.TX_RESET);
         y(u to u+w-1) := convert(x.TX_RESET, y(u to u+w-1));
         u := u + w;
         w := width(x.RX_RESET);
         y(u to u+w-1) := convert(x.RX_RESET, y(u to u+w-1));
         u := u + w;
         w := width(x.IC);
         y(u to u+w-1) := convert(x.IC, y(u to u+w-1));
      else
         w := width(x.TX_RESET);
         y(u downto u-w+1) := convert(x.TX_RESET, y(u downto u-w+1));
         u := u - w;
         w := width(x.RX_RESET);
         y(u downto u-w+1) := convert(x.RX_RESET, y(u downto u-w+1));
         u := u - w;
         w := width(x.IC);
         y(u downto u-w+1) := convert(x.IC, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_SLAVE_CTRL_t) return HAL_CSM_CSM_SC_SLAVE_CTRL_t is
      variable y : HAL_CSM_CSM_SC_SLAVE_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.TX_RESET);
         y.TX_RESET := convert(x(u to u+w-1), t.TX_RESET);
         u := u + w;
         w := width(t.RX_RESET);
         y.RX_RESET := convert(x(u to u+w-1), t.RX_RESET);
         u := u + w;
         w := width(t.IC);
         y.IC := convert(x(u to u+w-1), t.IC);
      else
         w := width(t.TX_RESET);
         y.TX_RESET := convert(x(u downto u-w+1), t.TX_RESET);
         u := u - w;
         w := width(t.RX_RESET);
         y.RX_RESET := convert(x(u downto u-w+1), t.RX_RESET);
         u := u - w;
         w := width(t.IC);
         y.IC := convert(x(u downto u-w+1), t.IC);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_SC_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.MASTER);
      w := w + width(x.SLAVE);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_SC_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.MASTER);
         y(u to u+w-1) := convert(x.MASTER, y(u to u+w-1));
         u := u + w;
         w := width(x.SLAVE);
         y(u to u+w-1) := convert(x.SLAVE, y(u to u+w-1));
      else
         w := width(x.MASTER);
         y(u downto u-w+1) := convert(x.MASTER, y(u downto u-w+1));
         u := u - w;
         w := width(x.SLAVE);
         y(u downto u-w+1) := convert(x.SLAVE, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_MON_t) return HAL_CSM_CSM_SC_MON_t is
      variable y : HAL_CSM_CSM_SC_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.MASTER);
         y.MASTER := convert(x(u to u+w-1), t.MASTER);
         u := u + w;
         w := width(t.SLAVE);
         y.SLAVE := convert(x(u to u+w-1), t.SLAVE);
      else
         w := width(t.MASTER);
         y.MASTER := convert(x(u downto u-w+1), t.MASTER);
         u := u - w;
         w := width(t.SLAVE);
         y.SLAVE := convert(x(u downto u-w+1), t.SLAVE);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_SC_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.MASTER);
      w := w + width(x.SLAVE);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_SC_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.MASTER);
         y(u to u+w-1) := convert(x.MASTER, y(u to u+w-1));
         u := u + w;
         w := width(x.SLAVE);
         y(u to u+w-1) := convert(x.SLAVE, y(u to u+w-1));
      else
         w := width(x.MASTER);
         y(u downto u-w+1) := convert(x.MASTER, y(u downto u-w+1));
         u := u - w;
         w := width(x.SLAVE);
         y(u downto u-w+1) := convert(x.SLAVE, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_SC_CTRL_t) return HAL_CSM_CSM_SC_CTRL_t is
      variable y : HAL_CSM_CSM_SC_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.MASTER);
         y.MASTER := convert(x(u to u+w-1), t.MASTER);
         u := u + w;
         w := width(t.SLAVE);
         y.SLAVE := convert(x(u to u+w-1), t.SLAVE);
      else
         w := width(t.MASTER);
         y.MASTER := convert(x(u downto u-w+1), t.MASTER);
         u := u - w;
         w := width(t.SLAVE);
         y.SLAVE := convert(x(u downto u-w+1), t.SLAVE);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.LPGBT);
      w := w + width(x.SC);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.LPGBT);
         y(u to u+w-1) := convert(x.LPGBT, y(u to u+w-1));
         u := u + w;
         w := width(x.SC);
         y(u to u+w-1) := convert(x.SC, y(u to u+w-1));
      else
         w := width(x.LPGBT);
         y(u downto u-w+1) := convert(x.LPGBT, y(u downto u-w+1));
         u := u - w;
         w := width(x.SC);
         y(u downto u-w+1) := convert(x.SC, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_MON_t) return HAL_CSM_CSM_MON_t is
      variable y : HAL_CSM_CSM_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.LPGBT);
         y.LPGBT := convert(x(u to u+w-1), t.LPGBT);
         u := u + w;
         w := width(t.SC);
         y.SC := convert(x(u to u+w-1), t.SC);
      else
         w := width(t.LPGBT);
         y.LPGBT := convert(x(u downto u-w+1), t.LPGBT);
         u := u - w;
         w := width(t.SC);
         y.SC := convert(x(u downto u-w+1), t.SC);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_MON_t_ARRAY) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_MON_t_ARRAY; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_MON_t_ARRAY) return HAL_CSM_CSM_MON_t_ARRAY is
      variable y : HAL_CSM_CSM_MON_t_ARRAY;
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: HAL_CSM_CSM_MON_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: HAL_CSM_CSM_MON_t_ARRAY) return HAL_CSM_CSM_MON_t_ARRAY is
      variable y : HAL_CSM_CSM_MON_t_ARRAY;
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.LPGBT);
      w := w + width(x.SC);
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.LPGBT);
         y(u to u+w-1) := convert(x.LPGBT, y(u to u+w-1));
         u := u + w;
         w := width(x.SC);
         y(u to u+w-1) := convert(x.SC, y(u to u+w-1));
      else
         w := width(x.LPGBT);
         y(u downto u-w+1) := convert(x.LPGBT, y(u downto u-w+1));
         u := u - w;
         w := width(x.SC);
         y(u downto u-w+1) := convert(x.SC, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_CTRL_t) return HAL_CSM_CSM_CTRL_t is
      variable y : HAL_CSM_CSM_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.LPGBT);
         y.LPGBT := convert(x(u to u+w-1), t.LPGBT);
         u := u + w;
         w := width(t.SC);
         y.SC := convert(x(u to u+w-1), t.SC);
      else
         w := width(t.LPGBT);
         y.LPGBT := convert(x(u downto u-w+1), t.LPGBT);
         u := u - w;
         w := width(t.SC);
         y.SC := convert(x(u downto u-w+1), t.SC);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CSM_CTRL_t_ARRAY) return integer is
      variable w : integer := x'length * width(x(x'low));
   begin
      return w;
   end function width;
   function convert(x: HAL_CSM_CSM_CTRL_t_ARRAY; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CSM_CTRL_t_ARRAY) return HAL_CSM_CSM_CTRL_t_ARRAY is
      variable y : HAL_CSM_CSM_CTRL_t_ARRAY;
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: HAL_CSM_CSM_CTRL_t_ARRAY; t: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(t'range)(t(t'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; t: HAL_CSM_CSM_CTRL_t_ARRAY) return HAL_CSM_CSM_CTRL_t_ARRAY is
      variable y : HAL_CSM_CSM_CTRL_t_ARRAY;
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: HAL_CSM_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.CSM);
      return w;
   end function width;
   function convert(x: HAL_CSM_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.CSM);
         y(u to u+w-1) := convert(x.CSM, y(u to u+w-1));
      else
         w := width(x.CSM);
         y(u downto u-w+1) := convert(x.CSM, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_MON_t) return HAL_CSM_MON_t is
      variable y : HAL_CSM_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.CSM);
         y.CSM := convert(x(u to u+w-1), t.CSM);
      else
         w := width(t.CSM);
         y.CSM := convert(x(u downto u-w+1), t.CSM);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CSM_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.CSM);
      return w;
   end function width;
   function convert(x: HAL_CSM_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.CSM);
         y(u to u+w-1) := convert(x.CSM, y(u to u+w-1));
      else
         w := width(x.CSM);
         y(u downto u-w+1) := convert(x.CSM, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CSM_CTRL_t) return HAL_CSM_CTRL_t is
      variable y : HAL_CSM_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.CSM);
         y.CSM := convert(x(u to u+w-1), t.CSM);
      else
         w := width(t.CSM);
         y.CSM := convert(x(u downto u-w+1), t.CSM);
      end if;
      return y;
   end function convert;

   function width(x: HAL_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.CSM);
      return w;
   end function width;
   function convert(x: HAL_MON_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.CSM);
         y(u to u+w-1) := convert(x.CSM, y(u to u+w-1));
      else
         w := width(x.CSM);
         y(u downto u-w+1) := convert(x.CSM, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_MON_t) return HAL_MON_t is
      variable y : HAL_MON_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.CSM);
         y.CSM := convert(x(u to u+w-1), t.CSM);
      else
         w := width(t.CSM);
         y.CSM := convert(x(u downto u-w+1), t.CSM);
      end if;
      return y;
   end function convert;

   function width(x: HAL_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.RESET_DOWNLINKS);
      w := w + width(x.RESET_UPLINKS);
      w := w + width(x.RESET_COUNTERS);
      w := w + width(x.CSM);
      return w;
   end function width;
   function convert(x: HAL_CTRL_t; t: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(t'range);
      variable w : integer;
      variable u : integer := t'left;
   begin
      if t'ascending then
         w := width(x.RESET_DOWNLINKS);
         y(u to u+w-1) := convert(x.RESET_DOWNLINKS, y(u to u+w-1));
         u := u + w;
         w := width(x.RESET_UPLINKS);
         y(u to u+w-1) := convert(x.RESET_UPLINKS, y(u to u+w-1));
         u := u + w;
         w := width(x.RESET_COUNTERS);
         y(u to u+w-1) := convert(x.RESET_COUNTERS, y(u to u+w-1));
         u := u + w;
         w := width(x.CSM);
         y(u to u+w-1) := convert(x.CSM, y(u to u+w-1));
      else
         w := width(x.RESET_DOWNLINKS);
         y(u downto u-w+1) := convert(x.RESET_DOWNLINKS, y(u downto u-w+1));
         u := u - w;
         w := width(x.RESET_UPLINKS);
         y(u downto u-w+1) := convert(x.RESET_UPLINKS, y(u downto u-w+1));
         u := u - w;
         w := width(x.RESET_COUNTERS);
         y(u downto u-w+1) := convert(x.RESET_COUNTERS, y(u downto u-w+1));
         u := u - w;
         w := width(x.CSM);
         y(u downto u-w+1) := convert(x.CSM, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; t: HAL_CTRL_t) return HAL_CTRL_t is
      variable y : HAL_CTRL_t := t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(t.RESET_DOWNLINKS);
         y.RESET_DOWNLINKS := convert(x(u to u+w-1), t.RESET_DOWNLINKS);
         u := u + w;
         w := width(t.RESET_UPLINKS);
         y.RESET_UPLINKS := convert(x(u to u+w-1), t.RESET_UPLINKS);
         u := u + w;
         w := width(t.RESET_COUNTERS);
         y.RESET_COUNTERS := convert(x(u to u+w-1), t.RESET_COUNTERS);
         u := u + w;
         w := width(t.CSM);
         y.CSM := convert(x(u to u+w-1), t.CSM);
      else
         w := width(t.RESET_DOWNLINKS);
         y.RESET_DOWNLINKS := convert(x(u downto u-w+1), t.RESET_DOWNLINKS);
         u := u - w;
         w := width(t.RESET_UPLINKS);
         y.RESET_UPLINKS := convert(x(u downto u-w+1), t.RESET_UPLINKS);
         u := u - w;
         w := width(t.RESET_COUNTERS);
         y.RESET_COUNTERS := convert(x(u downto u-w+1), t.RESET_COUNTERS);
         u := u - w;
         w := width(t.CSM);
         y.CSM := convert(x(u downto u-w+1), t.CSM);
      end if;
      return y;
   end function convert;

end package body HAL_PKG;
