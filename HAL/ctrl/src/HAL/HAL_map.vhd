--This file was auto-generated.
--Modifications might be lost.
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.AXIRegWidthPkg.all;
use work.AXIRegPkg.all;
use work.types.all;

use work.HAL_Ctrl.all;
use work.HAL_Ctrl_DEF.all;


entity HAL_map is
  generic (
    READ_TIMEOUT     : integer := 2048;
    ALLOCATED_MEMORY_RANGE : integer 
    );
  port (
    clk_axi          : in  std_logic;
    reset_axi_n      : in  std_logic;
    slave_readMOSI   : in  AXIReadMOSI;
    slave_readMISO   : out AXIReadMISO  := DefaultAXIReadMISO;
    slave_writeMOSI  : in  AXIWriteMOSI;
    slave_writeMISO  : out AXIWriteMISO := DefaultAXIWriteMISO;
    
    Mon              : in  HAL_Mon_t;
    
    
    Ctrl             : out HAL_Ctrl_t
        
    );
end entity HAL_map;
architecture behavioral of HAL_map is
  signal localAddress       : std_logic_vector(AXI_ADDR_WIDTH-1 downto 0);
  signal localRdData        : slv_32_t;
  signal localRdData_latch  : slv_32_t;
  signal localWrData        : slv_32_t;
  signal localWrEn          : std_logic;
  signal localRdReq         : std_logic;
  signal localRdAck         : std_logic;
  signal regRdAck           : std_logic;

  
  
  signal reg_data :  slv32_array_t(integer range 0 to 3320);
  constant Default_reg_data : slv32_array_t(integer range 0 to 3320) := (others => x"00000000");
begin  -- architecture behavioral

  -------------------------------------------------------------------------------
  -- AXI 
  -------------------------------------------------------------------------------
  -------------------------------------------------------------------------------
  assert ((4*3320) <= ALLOCATED_MEMORY_RANGE)
    report "HAL: Regmap addressing range " & integer'image(4*3320) & " is outside of AXI mapped range " & integer'image(ALLOCATED_MEMORY_RANGE)
  severity ERROR;
  assert ((4*3320) > ALLOCATED_MEMORY_RANGE)
    report "HAL: Regmap addressing range " & integer'image(4*3320) & " is inside of AXI mapped range " & integer'image(ALLOCATED_MEMORY_RANGE)
  severity NOTE;

  AXIRegBridge : entity work.axiLiteRegBlocking
    generic map (
      READ_TIMEOUT => READ_TIMEOUT
      )
    port map (
      clk_axi     => clk_axi,
      reset_axi_n => reset_axi_n,
      readMOSI    => slave_readMOSI,
      readMISO    => slave_readMISO,
      writeMOSI   => slave_writeMOSI,
      writeMISO   => slave_writeMISO,
      address     => localAddress,
      rd_data     => localRdData_latch,
      wr_data     => localWrData,
      write_en    => localWrEn,
      read_req    => localRdReq,
      read_ack    => localRdAck);

  -------------------------------------------------------------------------------
  -- Record read decoding
  -------------------------------------------------------------------------------
  -------------------------------------------------------------------------------

  latch_reads: process (clk_axi,reset_axi_n) is
  begin  -- process latch_reads
    if reset_axi_n = '0' then
      localRdAck <= '0';
    elsif clk_axi'event and clk_axi = '1' then  -- rising clock edge
      localRdAck <= '0';
      
      if regRdAck = '1' then
        localRdData_latch <= localRdData;
        localRdAck <= '1';
      
      end if;
    end if;
  end process latch_reads;

  
  reads: process (clk_axi,reset_axi_n) is
  begin  -- process latch_reads
    if reset_axi_n = '0' then
      regRdAck <= '0';
    elsif clk_axi'event and clk_axi = '1' then  -- rising clock edge
      regRdAck  <= '0';
      localRdData <= x"00000000";
      if localRdReq = '1' then
        regRdAck  <= '1';
        case to_integer(unsigned(localAddress(11 downto 0))) is
          
        when 0 => --0x0
          localRdData( 0)            <=  reg_data( 0)( 0);                                        --Resets all LPGBT Downlinks
        when 1 => --0x1
          localRdData( 0)            <=  reg_data( 1)( 0);                                        --Resets all LPGBT Uplinks
        when 2 => --0x2
          localRdData( 0)            <=  reg_data( 2)( 0);                                        --Resets counters
        when 16 => --0x10
          localRdData( 0)            <=  reg_data(16)( 0);                                        --Reset this Uplink
        when 17 => --0x11
          localRdData( 0)            <=  Mon.CSM.CSM(0).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(0).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 18 => --0x12
          localRdData( 0)            <=  reg_data(18)( 0);                                        --Reset this Uplink
        when 19 => --0x13
          localRdData( 0)            <=  Mon.CSM.CSM(0).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(0).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 27 => --0x1b
          localRdData( 0)            <=  reg_data(27)( 0);                                        --Reset this Downlink
        when 28 => --0x1c
          localRdData( 0)            <=  Mon.CSM.CSM(0).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 32 => --0x20
          localRdData( 0)            <=  reg_data(32)( 0);                                        --Reset TX datapath
        when 33 => --0x21
          localRdData( 1)            <=  reg_data(33)( 1);                                        --Reset RX datapath
        when 34 => --0x22
          localRdData( 0)            <=  reg_data(34)( 0);                                        --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(34)( 1);                                        --Request a read config to the GBTx (IC)
        when 35 => --0x23
          localRdData(15 downto  0)  <=  reg_data(35)(15 downto  0);                              --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(35)(31 downto 16);                              --Number of words/bytes to be read (only for read transactions)
        when 36 => --0x24
          localRdData( 7 downto  0)  <=  reg_data(36)( 7 downto  0);                              --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(0).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(36)(31 downto 24);                              --I2C address of the GBTx
        when 37 => --0x25
          localRdData( 0)            <=  reg_data(37)( 0);                                        --Request a write operation into the internal FIFO (Data to GBTx)
        when 38 => --0x26
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 39 => --0x27
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 40 => --0x28
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 41 => --0x29
          localRdData( 7 downto  0)  <=  reg_data(41)( 7 downto  0);                              --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(41)(15 downto  8);                              --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(41)(23 downto 16);                              --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(41)(31 downto 24);                              --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 42 => --0x2a
          localRdData(31 downto  0)  <=  reg_data(42)(31 downto  0);                              --Command: data field (According to the SCA manual)
        when 43 => --0x2b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 44 => --0x2c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 45 => --0x2d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 46 => --0x2e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 47 => --0x2f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 48 => --0x30
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 49 => --0x31
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 50 => --0x32
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 51 => --0x33
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 53 => --0x35
          localRdData( 2 downto  0)  <=  reg_data(53)( 2 downto  0);                              --Enable flag to select SCAs
        when 54 => --0x36
          localRdData( 0)            <=  reg_data(54)( 0);                                        --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(54)( 1);                                        --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(54)( 2);                                        --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(54)( 3);                                        --Emulate a CRC error
        when 57 => --0x39
          localRdData( 0)            <=  reg_data(57)( 0);                                        --0 = lpgbt v0; 1 = lpgbt v1
        when 64 => --0x40
          localRdData( 0)            <=  reg_data(64)( 0);                                        --Reset TX datapath
        when 65 => --0x41
          localRdData( 1)            <=  reg_data(65)( 1);                                        --Reset RX datapath
        when 66 => --0x42
          localRdData( 0)            <=  reg_data(66)( 0);                                        --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(66)( 1);                                        --Request a read config to the GBTx (IC)
        when 67 => --0x43
          localRdData(15 downto  0)  <=  reg_data(67)(15 downto  0);                              --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(67)(31 downto 16);                              --Number of words/bytes to be read (only for read transactions)
        when 68 => --0x44
          localRdData( 7 downto  0)  <=  reg_data(68)( 7 downto  0);                              --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(0).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(68)(31 downto 24);                              --I2C address of the GBTx
        when 69 => --0x45
          localRdData( 0)            <=  reg_data(69)( 0);                                        --Request a write operation into the internal FIFO (Data to GBTx)
        when 70 => --0x46
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 71 => --0x47
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 72 => --0x48
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 80 => --0x50
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(0).CONFIG.master_link_id;                    --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(0).CONFIG.servant_link_id;                   --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(0).CONFIG.station;                           --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(0).CONFIG.polmux;                            --CSM polmux number
        when 81 => --0x51
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(0).CONFIG.en;                                --CSM is en
        when 82 => --0x52
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(0).CONFIG.legacy;                            --CSM is legacy
        when 96 => --0x60
          localRdData( 0)            <=  reg_data(96)( 0);                                        --Reset this Uplink
        when 97 => --0x61
          localRdData( 0)            <=  Mon.CSM.CSM(1).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(1).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 98 => --0x62
          localRdData( 0)            <=  reg_data(98)( 0);                                        --Reset this Uplink
        when 99 => --0x63
          localRdData( 0)            <=  Mon.CSM.CSM(1).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(1).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 107 => --0x6b
          localRdData( 0)            <=  reg_data(107)( 0);                                       --Reset this Downlink
        when 108 => --0x6c
          localRdData( 0)            <=  Mon.CSM.CSM(1).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 112 => --0x70
          localRdData( 0)            <=  reg_data(112)( 0);                                       --Reset TX datapath
        when 113 => --0x71
          localRdData( 1)            <=  reg_data(113)( 1);                                       --Reset RX datapath
        when 114 => --0x72
          localRdData( 0)            <=  reg_data(114)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(114)( 1);                                       --Request a read config to the GBTx (IC)
        when 115 => --0x73
          localRdData(15 downto  0)  <=  reg_data(115)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(115)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 116 => --0x74
          localRdData( 7 downto  0)  <=  reg_data(116)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(1).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(116)(31 downto 24);                             --I2C address of the GBTx
        when 117 => --0x75
          localRdData( 0)            <=  reg_data(117)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 118 => --0x76
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 119 => --0x77
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 120 => --0x78
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 121 => --0x79
          localRdData( 7 downto  0)  <=  reg_data(121)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(121)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(121)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(121)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 122 => --0x7a
          localRdData(31 downto  0)  <=  reg_data(122)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 123 => --0x7b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 124 => --0x7c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 125 => --0x7d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 126 => --0x7e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 127 => --0x7f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 128 => --0x80
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 129 => --0x81
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 130 => --0x82
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 131 => --0x83
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 133 => --0x85
          localRdData( 2 downto  0)  <=  reg_data(133)( 2 downto  0);                             --Enable flag to select SCAs
        when 134 => --0x86
          localRdData( 0)            <=  reg_data(134)( 0);                                       --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(134)( 1);                                       --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(134)( 2);                                       --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(134)( 3);                                       --Emulate a CRC error
        when 137 => --0x89
          localRdData( 0)            <=  reg_data(137)( 0);                                       --0 = lpgbt v0; 1 = lpgbt v1
        when 144 => --0x90
          localRdData( 0)            <=  reg_data(144)( 0);                                       --Reset TX datapath
        when 145 => --0x91
          localRdData( 1)            <=  reg_data(145)( 1);                                       --Reset RX datapath
        when 146 => --0x92
          localRdData( 0)            <=  reg_data(146)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(146)( 1);                                       --Request a read config to the GBTx (IC)
        when 147 => --0x93
          localRdData(15 downto  0)  <=  reg_data(147)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(147)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 148 => --0x94
          localRdData( 7 downto  0)  <=  reg_data(148)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(1).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(148)(31 downto 24);                             --I2C address of the GBTx
        when 149 => --0x95
          localRdData( 0)            <=  reg_data(149)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 150 => --0x96
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 151 => --0x97
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 152 => --0x98
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 160 => --0xa0
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(1).CONFIG.master_link_id;                    --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(1).CONFIG.servant_link_id;                   --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(1).CONFIG.station;                           --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(1).CONFIG.polmux;                            --CSM polmux number
        when 161 => --0xa1
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(1).CONFIG.en;                                --CSM is en
        when 162 => --0xa2
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(1).CONFIG.legacy;                            --CSM is legacy
        when 176 => --0xb0
          localRdData( 0)            <=  reg_data(176)( 0);                                       --Reset this Uplink
        when 177 => --0xb1
          localRdData( 0)            <=  Mon.CSM.CSM(2).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(2).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 178 => --0xb2
          localRdData( 0)            <=  reg_data(178)( 0);                                       --Reset this Uplink
        when 179 => --0xb3
          localRdData( 0)            <=  Mon.CSM.CSM(2).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(2).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 187 => --0xbb
          localRdData( 0)            <=  reg_data(187)( 0);                                       --Reset this Downlink
        when 188 => --0xbc
          localRdData( 0)            <=  Mon.CSM.CSM(2).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 192 => --0xc0
          localRdData( 0)            <=  reg_data(192)( 0);                                       --Reset TX datapath
        when 193 => --0xc1
          localRdData( 1)            <=  reg_data(193)( 1);                                       --Reset RX datapath
        when 194 => --0xc2
          localRdData( 0)            <=  reg_data(194)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(194)( 1);                                       --Request a read config to the GBTx (IC)
        when 195 => --0xc3
          localRdData(15 downto  0)  <=  reg_data(195)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(195)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 196 => --0xc4
          localRdData( 7 downto  0)  <=  reg_data(196)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(2).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(196)(31 downto 24);                             --I2C address of the GBTx
        when 197 => --0xc5
          localRdData( 0)            <=  reg_data(197)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 198 => --0xc6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 199 => --0xc7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 200 => --0xc8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 201 => --0xc9
          localRdData( 7 downto  0)  <=  reg_data(201)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(201)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(201)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(201)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 202 => --0xca
          localRdData(31 downto  0)  <=  reg_data(202)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 203 => --0xcb
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 204 => --0xcc
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 205 => --0xcd
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 206 => --0xce
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 207 => --0xcf
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 208 => --0xd0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 209 => --0xd1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 210 => --0xd2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 211 => --0xd3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 213 => --0xd5
          localRdData( 2 downto  0)  <=  reg_data(213)( 2 downto  0);                             --Enable flag to select SCAs
        when 214 => --0xd6
          localRdData( 0)            <=  reg_data(214)( 0);                                       --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(214)( 1);                                       --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(214)( 2);                                       --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(214)( 3);                                       --Emulate a CRC error
        when 217 => --0xd9
          localRdData( 0)            <=  reg_data(217)( 0);                                       --0 = lpgbt v0; 1 = lpgbt v1
        when 224 => --0xe0
          localRdData( 0)            <=  reg_data(224)( 0);                                       --Reset TX datapath
        when 225 => --0xe1
          localRdData( 1)            <=  reg_data(225)( 1);                                       --Reset RX datapath
        when 226 => --0xe2
          localRdData( 0)            <=  reg_data(226)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(226)( 1);                                       --Request a read config to the GBTx (IC)
        when 227 => --0xe3
          localRdData(15 downto  0)  <=  reg_data(227)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(227)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 228 => --0xe4
          localRdData( 7 downto  0)  <=  reg_data(228)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(2).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(228)(31 downto 24);                             --I2C address of the GBTx
        when 229 => --0xe5
          localRdData( 0)            <=  reg_data(229)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 230 => --0xe6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 231 => --0xe7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 232 => --0xe8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 240 => --0xf0
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(2).CONFIG.master_link_id;                    --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(2).CONFIG.servant_link_id;                   --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(2).CONFIG.station;                           --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(2).CONFIG.polmux;                            --CSM polmux number
        when 241 => --0xf1
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(2).CONFIG.en;                                --CSM is en
        when 242 => --0xf2
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(2).CONFIG.legacy;                            --CSM is legacy
        when 256 => --0x100
          localRdData( 0)            <=  reg_data(256)( 0);                                       --Reset this Uplink
        when 257 => --0x101
          localRdData( 0)            <=  Mon.CSM.CSM(3).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(3).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 258 => --0x102
          localRdData( 0)            <=  reg_data(258)( 0);                                       --Reset this Uplink
        when 259 => --0x103
          localRdData( 0)            <=  Mon.CSM.CSM(3).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(3).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 267 => --0x10b
          localRdData( 0)            <=  reg_data(267)( 0);                                       --Reset this Downlink
        when 268 => --0x10c
          localRdData( 0)            <=  Mon.CSM.CSM(3).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 272 => --0x110
          localRdData( 0)            <=  reg_data(272)( 0);                                       --Reset TX datapath
        when 273 => --0x111
          localRdData( 1)            <=  reg_data(273)( 1);                                       --Reset RX datapath
        when 274 => --0x112
          localRdData( 0)            <=  reg_data(274)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(274)( 1);                                       --Request a read config to the GBTx (IC)
        when 275 => --0x113
          localRdData(15 downto  0)  <=  reg_data(275)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(275)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 276 => --0x114
          localRdData( 7 downto  0)  <=  reg_data(276)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(3).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(276)(31 downto 24);                             --I2C address of the GBTx
        when 277 => --0x115
          localRdData( 0)            <=  reg_data(277)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 278 => --0x116
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 279 => --0x117
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 280 => --0x118
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 281 => --0x119
          localRdData( 7 downto  0)  <=  reg_data(281)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(281)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(281)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(281)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 282 => --0x11a
          localRdData(31 downto  0)  <=  reg_data(282)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 283 => --0x11b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 284 => --0x11c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 285 => --0x11d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 286 => --0x11e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 287 => --0x11f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 288 => --0x120
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 289 => --0x121
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 290 => --0x122
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 291 => --0x123
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 293 => --0x125
          localRdData( 2 downto  0)  <=  reg_data(293)( 2 downto  0);                             --Enable flag to select SCAs
        when 294 => --0x126
          localRdData( 0)            <=  reg_data(294)( 0);                                       --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(294)( 1);                                       --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(294)( 2);                                       --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(294)( 3);                                       --Emulate a CRC error
        when 297 => --0x129
          localRdData( 0)            <=  reg_data(297)( 0);                                       --0 = lpgbt v0; 1 = lpgbt v1
        when 304 => --0x130
          localRdData( 0)            <=  reg_data(304)( 0);                                       --Reset TX datapath
        when 305 => --0x131
          localRdData( 1)            <=  reg_data(305)( 1);                                       --Reset RX datapath
        when 306 => --0x132
          localRdData( 0)            <=  reg_data(306)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(306)( 1);                                       --Request a read config to the GBTx (IC)
        when 307 => --0x133
          localRdData(15 downto  0)  <=  reg_data(307)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(307)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 308 => --0x134
          localRdData( 7 downto  0)  <=  reg_data(308)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(3).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(308)(31 downto 24);                             --I2C address of the GBTx
        when 309 => --0x135
          localRdData( 0)            <=  reg_data(309)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 310 => --0x136
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 311 => --0x137
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 312 => --0x138
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 320 => --0x140
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(3).CONFIG.master_link_id;                    --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(3).CONFIG.servant_link_id;                   --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(3).CONFIG.station;                           --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(3).CONFIG.polmux;                            --CSM polmux number
        when 321 => --0x141
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(3).CONFIG.en;                                --CSM is en
        when 322 => --0x142
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(3).CONFIG.legacy;                            --CSM is legacy
        when 336 => --0x150
          localRdData( 0)            <=  reg_data(336)( 0);                                       --Reset this Uplink
        when 337 => --0x151
          localRdData( 0)            <=  Mon.CSM.CSM(4).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(4).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 338 => --0x152
          localRdData( 0)            <=  reg_data(338)( 0);                                       --Reset this Uplink
        when 339 => --0x153
          localRdData( 0)            <=  Mon.CSM.CSM(4).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(4).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 347 => --0x15b
          localRdData( 0)            <=  reg_data(347)( 0);                                       --Reset this Downlink
        when 348 => --0x15c
          localRdData( 0)            <=  Mon.CSM.CSM(4).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 352 => --0x160
          localRdData( 0)            <=  reg_data(352)( 0);                                       --Reset TX datapath
        when 353 => --0x161
          localRdData( 1)            <=  reg_data(353)( 1);                                       --Reset RX datapath
        when 354 => --0x162
          localRdData( 0)            <=  reg_data(354)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(354)( 1);                                       --Request a read config to the GBTx (IC)
        when 355 => --0x163
          localRdData(15 downto  0)  <=  reg_data(355)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(355)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 356 => --0x164
          localRdData( 7 downto  0)  <=  reg_data(356)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(4).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(356)(31 downto 24);                             --I2C address of the GBTx
        when 357 => --0x165
          localRdData( 0)            <=  reg_data(357)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 358 => --0x166
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 359 => --0x167
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 360 => --0x168
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 361 => --0x169
          localRdData( 7 downto  0)  <=  reg_data(361)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(361)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(361)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(361)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 362 => --0x16a
          localRdData(31 downto  0)  <=  reg_data(362)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 363 => --0x16b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 364 => --0x16c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 365 => --0x16d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 366 => --0x16e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 367 => --0x16f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 368 => --0x170
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 369 => --0x171
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 370 => --0x172
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 371 => --0x173
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 373 => --0x175
          localRdData( 2 downto  0)  <=  reg_data(373)( 2 downto  0);                             --Enable flag to select SCAs
        when 374 => --0x176
          localRdData( 0)            <=  reg_data(374)( 0);                                       --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(374)( 1);                                       --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(374)( 2);                                       --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(374)( 3);                                       --Emulate a CRC error
        when 377 => --0x179
          localRdData( 0)            <=  reg_data(377)( 0);                                       --0 = lpgbt v0; 1 = lpgbt v1
        when 384 => --0x180
          localRdData( 0)            <=  reg_data(384)( 0);                                       --Reset TX datapath
        when 385 => --0x181
          localRdData( 1)            <=  reg_data(385)( 1);                                       --Reset RX datapath
        when 386 => --0x182
          localRdData( 0)            <=  reg_data(386)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(386)( 1);                                       --Request a read config to the GBTx (IC)
        when 387 => --0x183
          localRdData(15 downto  0)  <=  reg_data(387)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(387)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 388 => --0x184
          localRdData( 7 downto  0)  <=  reg_data(388)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(4).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(388)(31 downto 24);                             --I2C address of the GBTx
        when 389 => --0x185
          localRdData( 0)            <=  reg_data(389)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 390 => --0x186
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 391 => --0x187
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 392 => --0x188
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 400 => --0x190
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(4).CONFIG.master_link_id;                    --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(4).CONFIG.servant_link_id;                   --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(4).CONFIG.station;                           --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(4).CONFIG.polmux;                            --CSM polmux number
        when 401 => --0x191
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(4).CONFIG.en;                                --CSM is en
        when 402 => --0x192
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(4).CONFIG.legacy;                            --CSM is legacy
        when 416 => --0x1a0
          localRdData( 0)            <=  reg_data(416)( 0);                                       --Reset this Uplink
        when 417 => --0x1a1
          localRdData( 0)            <=  Mon.CSM.CSM(5).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(5).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 418 => --0x1a2
          localRdData( 0)            <=  reg_data(418)( 0);                                       --Reset this Uplink
        when 419 => --0x1a3
          localRdData( 0)            <=  Mon.CSM.CSM(5).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(5).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 427 => --0x1ab
          localRdData( 0)            <=  reg_data(427)( 0);                                       --Reset this Downlink
        when 428 => --0x1ac
          localRdData( 0)            <=  Mon.CSM.CSM(5).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 432 => --0x1b0
          localRdData( 0)            <=  reg_data(432)( 0);                                       --Reset TX datapath
        when 433 => --0x1b1
          localRdData( 1)            <=  reg_data(433)( 1);                                       --Reset RX datapath
        when 434 => --0x1b2
          localRdData( 0)            <=  reg_data(434)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(434)( 1);                                       --Request a read config to the GBTx (IC)
        when 435 => --0x1b3
          localRdData(15 downto  0)  <=  reg_data(435)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(435)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 436 => --0x1b4
          localRdData( 7 downto  0)  <=  reg_data(436)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(5).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(436)(31 downto 24);                             --I2C address of the GBTx
        when 437 => --0x1b5
          localRdData( 0)            <=  reg_data(437)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 438 => --0x1b6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 439 => --0x1b7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 440 => --0x1b8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 441 => --0x1b9
          localRdData( 7 downto  0)  <=  reg_data(441)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(441)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(441)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(441)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 442 => --0x1ba
          localRdData(31 downto  0)  <=  reg_data(442)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 443 => --0x1bb
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 444 => --0x1bc
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 445 => --0x1bd
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 446 => --0x1be
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 447 => --0x1bf
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 448 => --0x1c0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 449 => --0x1c1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 450 => --0x1c2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 451 => --0x1c3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 453 => --0x1c5
          localRdData( 2 downto  0)  <=  reg_data(453)( 2 downto  0);                             --Enable flag to select SCAs
        when 454 => --0x1c6
          localRdData( 0)            <=  reg_data(454)( 0);                                       --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(454)( 1);                                       --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(454)( 2);                                       --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(454)( 3);                                       --Emulate a CRC error
        when 457 => --0x1c9
          localRdData( 0)            <=  reg_data(457)( 0);                                       --0 = lpgbt v0; 1 = lpgbt v1
        when 464 => --0x1d0
          localRdData( 0)            <=  reg_data(464)( 0);                                       --Reset TX datapath
        when 465 => --0x1d1
          localRdData( 1)            <=  reg_data(465)( 1);                                       --Reset RX datapath
        when 466 => --0x1d2
          localRdData( 0)            <=  reg_data(466)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(466)( 1);                                       --Request a read config to the GBTx (IC)
        when 467 => --0x1d3
          localRdData(15 downto  0)  <=  reg_data(467)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(467)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 468 => --0x1d4
          localRdData( 7 downto  0)  <=  reg_data(468)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(5).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(468)(31 downto 24);                             --I2C address of the GBTx
        when 469 => --0x1d5
          localRdData( 0)            <=  reg_data(469)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 470 => --0x1d6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 471 => --0x1d7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 472 => --0x1d8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 480 => --0x1e0
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(5).CONFIG.master_link_id;                    --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(5).CONFIG.servant_link_id;                   --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(5).CONFIG.station;                           --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(5).CONFIG.polmux;                            --CSM polmux number
        when 481 => --0x1e1
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(5).CONFIG.en;                                --CSM is en
        when 482 => --0x1e2
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(5).CONFIG.legacy;                            --CSM is legacy
        when 496 => --0x1f0
          localRdData( 0)            <=  reg_data(496)( 0);                                       --Reset this Uplink
        when 497 => --0x1f1
          localRdData( 0)            <=  Mon.CSM.CSM(6).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(6).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 498 => --0x1f2
          localRdData( 0)            <=  reg_data(498)( 0);                                       --Reset this Uplink
        when 499 => --0x1f3
          localRdData( 0)            <=  Mon.CSM.CSM(6).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(6).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 507 => --0x1fb
          localRdData( 0)            <=  reg_data(507)( 0);                                       --Reset this Downlink
        when 508 => --0x1fc
          localRdData( 0)            <=  Mon.CSM.CSM(6).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 512 => --0x200
          localRdData( 0)            <=  reg_data(512)( 0);                                       --Reset TX datapath
        when 513 => --0x201
          localRdData( 1)            <=  reg_data(513)( 1);                                       --Reset RX datapath
        when 514 => --0x202
          localRdData( 0)            <=  reg_data(514)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(514)( 1);                                       --Request a read config to the GBTx (IC)
        when 515 => --0x203
          localRdData(15 downto  0)  <=  reg_data(515)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(515)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 516 => --0x204
          localRdData( 7 downto  0)  <=  reg_data(516)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(6).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(516)(31 downto 24);                             --I2C address of the GBTx
        when 517 => --0x205
          localRdData( 0)            <=  reg_data(517)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 518 => --0x206
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 519 => --0x207
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 520 => --0x208
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 521 => --0x209
          localRdData( 7 downto  0)  <=  reg_data(521)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(521)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(521)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(521)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 522 => --0x20a
          localRdData(31 downto  0)  <=  reg_data(522)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 523 => --0x20b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 524 => --0x20c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 525 => --0x20d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 526 => --0x20e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 527 => --0x20f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 528 => --0x210
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 529 => --0x211
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 530 => --0x212
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 531 => --0x213
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 533 => --0x215
          localRdData( 2 downto  0)  <=  reg_data(533)( 2 downto  0);                             --Enable flag to select SCAs
        when 534 => --0x216
          localRdData( 0)            <=  reg_data(534)( 0);                                       --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(534)( 1);                                       --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(534)( 2);                                       --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(534)( 3);                                       --Emulate a CRC error
        when 537 => --0x219
          localRdData( 0)            <=  reg_data(537)( 0);                                       --0 = lpgbt v0; 1 = lpgbt v1
        when 544 => --0x220
          localRdData( 0)            <=  reg_data(544)( 0);                                       --Reset TX datapath
        when 545 => --0x221
          localRdData( 1)            <=  reg_data(545)( 1);                                       --Reset RX datapath
        when 546 => --0x222
          localRdData( 0)            <=  reg_data(546)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(546)( 1);                                       --Request a read config to the GBTx (IC)
        when 547 => --0x223
          localRdData(15 downto  0)  <=  reg_data(547)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(547)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 548 => --0x224
          localRdData( 7 downto  0)  <=  reg_data(548)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(6).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(548)(31 downto 24);                             --I2C address of the GBTx
        when 549 => --0x225
          localRdData( 0)            <=  reg_data(549)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 550 => --0x226
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 551 => --0x227
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 552 => --0x228
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 560 => --0x230
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(6).CONFIG.master_link_id;                    --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(6).CONFIG.servant_link_id;                   --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(6).CONFIG.station;                           --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(6).CONFIG.polmux;                            --CSM polmux number
        when 561 => --0x231
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(6).CONFIG.en;                                --CSM is en
        when 562 => --0x232
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(6).CONFIG.legacy;                            --CSM is legacy
        when 576 => --0x240
          localRdData( 0)            <=  reg_data(576)( 0);                                       --Reset this Uplink
        when 577 => --0x241
          localRdData( 0)            <=  Mon.CSM.CSM(7).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(7).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 578 => --0x242
          localRdData( 0)            <=  reg_data(578)( 0);                                       --Reset this Uplink
        when 579 => --0x243
          localRdData( 0)            <=  Mon.CSM.CSM(7).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(7).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 587 => --0x24b
          localRdData( 0)            <=  reg_data(587)( 0);                                       --Reset this Downlink
        when 588 => --0x24c
          localRdData( 0)            <=  Mon.CSM.CSM(7).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 592 => --0x250
          localRdData( 0)            <=  reg_data(592)( 0);                                       --Reset TX datapath
        when 593 => --0x251
          localRdData( 1)            <=  reg_data(593)( 1);                                       --Reset RX datapath
        when 594 => --0x252
          localRdData( 0)            <=  reg_data(594)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(594)( 1);                                       --Request a read config to the GBTx (IC)
        when 595 => --0x253
          localRdData(15 downto  0)  <=  reg_data(595)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(595)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 596 => --0x254
          localRdData( 7 downto  0)  <=  reg_data(596)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(7).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(596)(31 downto 24);                             --I2C address of the GBTx
        when 597 => --0x255
          localRdData( 0)            <=  reg_data(597)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 598 => --0x256
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 599 => --0x257
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 600 => --0x258
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 601 => --0x259
          localRdData( 7 downto  0)  <=  reg_data(601)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(601)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(601)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(601)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 602 => --0x25a
          localRdData(31 downto  0)  <=  reg_data(602)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 603 => --0x25b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 604 => --0x25c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 605 => --0x25d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 606 => --0x25e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 607 => --0x25f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 608 => --0x260
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 609 => --0x261
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 610 => --0x262
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 611 => --0x263
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 613 => --0x265
          localRdData( 2 downto  0)  <=  reg_data(613)( 2 downto  0);                             --Enable flag to select SCAs
        when 614 => --0x266
          localRdData( 0)            <=  reg_data(614)( 0);                                       --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(614)( 1);                                       --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(614)( 2);                                       --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(614)( 3);                                       --Emulate a CRC error
        when 617 => --0x269
          localRdData( 0)            <=  reg_data(617)( 0);                                       --0 = lpgbt v0; 1 = lpgbt v1
        when 624 => --0x270
          localRdData( 0)            <=  reg_data(624)( 0);                                       --Reset TX datapath
        when 625 => --0x271
          localRdData( 1)            <=  reg_data(625)( 1);                                       --Reset RX datapath
        when 626 => --0x272
          localRdData( 0)            <=  reg_data(626)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(626)( 1);                                       --Request a read config to the GBTx (IC)
        when 627 => --0x273
          localRdData(15 downto  0)  <=  reg_data(627)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(627)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 628 => --0x274
          localRdData( 7 downto  0)  <=  reg_data(628)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(7).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(628)(31 downto 24);                             --I2C address of the GBTx
        when 629 => --0x275
          localRdData( 0)            <=  reg_data(629)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 630 => --0x276
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 631 => --0x277
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 632 => --0x278
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 640 => --0x280
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(7).CONFIG.master_link_id;                    --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(7).CONFIG.servant_link_id;                   --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(7).CONFIG.station;                           --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(7).CONFIG.polmux;                            --CSM polmux number
        when 641 => --0x281
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(7).CONFIG.en;                                --CSM is en
        when 642 => --0x282
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(7).CONFIG.legacy;                            --CSM is legacy
        when 656 => --0x290
          localRdData( 0)            <=  reg_data(656)( 0);                                       --Reset this Uplink
        when 657 => --0x291
          localRdData( 0)            <=  Mon.CSM.CSM(8).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(8).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 658 => --0x292
          localRdData( 0)            <=  reg_data(658)( 0);                                       --Reset this Uplink
        when 659 => --0x293
          localRdData( 0)            <=  Mon.CSM.CSM(8).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(8).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 667 => --0x29b
          localRdData( 0)            <=  reg_data(667)( 0);                                       --Reset this Downlink
        when 668 => --0x29c
          localRdData( 0)            <=  Mon.CSM.CSM(8).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 672 => --0x2a0
          localRdData( 0)            <=  reg_data(672)( 0);                                       --Reset TX datapath
        when 673 => --0x2a1
          localRdData( 1)            <=  reg_data(673)( 1);                                       --Reset RX datapath
        when 674 => --0x2a2
          localRdData( 0)            <=  reg_data(674)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(674)( 1);                                       --Request a read config to the GBTx (IC)
        when 675 => --0x2a3
          localRdData(15 downto  0)  <=  reg_data(675)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(675)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 676 => --0x2a4
          localRdData( 7 downto  0)  <=  reg_data(676)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(8).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(676)(31 downto 24);                             --I2C address of the GBTx
        when 677 => --0x2a5
          localRdData( 0)            <=  reg_data(677)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 678 => --0x2a6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 679 => --0x2a7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 680 => --0x2a8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 681 => --0x2a9
          localRdData( 7 downto  0)  <=  reg_data(681)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(681)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(681)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(681)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 682 => --0x2aa
          localRdData(31 downto  0)  <=  reg_data(682)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 683 => --0x2ab
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 684 => --0x2ac
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 685 => --0x2ad
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 686 => --0x2ae
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 687 => --0x2af
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 688 => --0x2b0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 689 => --0x2b1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 690 => --0x2b2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 691 => --0x2b3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 693 => --0x2b5
          localRdData( 2 downto  0)  <=  reg_data(693)( 2 downto  0);                             --Enable flag to select SCAs
        when 694 => --0x2b6
          localRdData( 0)            <=  reg_data(694)( 0);                                       --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(694)( 1);                                       --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(694)( 2);                                       --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(694)( 3);                                       --Emulate a CRC error
        when 697 => --0x2b9
          localRdData( 0)            <=  reg_data(697)( 0);                                       --0 = lpgbt v0; 1 = lpgbt v1
        when 704 => --0x2c0
          localRdData( 0)            <=  reg_data(704)( 0);                                       --Reset TX datapath
        when 705 => --0x2c1
          localRdData( 1)            <=  reg_data(705)( 1);                                       --Reset RX datapath
        when 706 => --0x2c2
          localRdData( 0)            <=  reg_data(706)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(706)( 1);                                       --Request a read config to the GBTx (IC)
        when 707 => --0x2c3
          localRdData(15 downto  0)  <=  reg_data(707)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(707)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 708 => --0x2c4
          localRdData( 7 downto  0)  <=  reg_data(708)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(8).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(708)(31 downto 24);                             --I2C address of the GBTx
        when 709 => --0x2c5
          localRdData( 0)            <=  reg_data(709)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 710 => --0x2c6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 711 => --0x2c7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 712 => --0x2c8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 720 => --0x2d0
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(8).CONFIG.master_link_id;                    --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(8).CONFIG.servant_link_id;                   --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(8).CONFIG.station;                           --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(8).CONFIG.polmux;                            --CSM polmux number
        when 721 => --0x2d1
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(8).CONFIG.en;                                --CSM is en
        when 722 => --0x2d2
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(8).CONFIG.legacy;                            --CSM is legacy
        when 736 => --0x2e0
          localRdData( 0)            <=  reg_data(736)( 0);                                       --Reset this Uplink
        when 737 => --0x2e1
          localRdData( 0)            <=  Mon.CSM.CSM(9).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(9).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 738 => --0x2e2
          localRdData( 0)            <=  reg_data(738)( 0);                                       --Reset this Uplink
        when 739 => --0x2e3
          localRdData( 0)            <=  Mon.CSM.CSM(9).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(9).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 747 => --0x2eb
          localRdData( 0)            <=  reg_data(747)( 0);                                       --Reset this Downlink
        when 748 => --0x2ec
          localRdData( 0)            <=  Mon.CSM.CSM(9).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 752 => --0x2f0
          localRdData( 0)            <=  reg_data(752)( 0);                                       --Reset TX datapath
        when 753 => --0x2f1
          localRdData( 1)            <=  reg_data(753)( 1);                                       --Reset RX datapath
        when 754 => --0x2f2
          localRdData( 0)            <=  reg_data(754)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(754)( 1);                                       --Request a read config to the GBTx (IC)
        when 755 => --0x2f3
          localRdData(15 downto  0)  <=  reg_data(755)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(755)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 756 => --0x2f4
          localRdData( 7 downto  0)  <=  reg_data(756)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(9).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(756)(31 downto 24);                             --I2C address of the GBTx
        when 757 => --0x2f5
          localRdData( 0)            <=  reg_data(757)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 758 => --0x2f6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 759 => --0x2f7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 760 => --0x2f8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 761 => --0x2f9
          localRdData( 7 downto  0)  <=  reg_data(761)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(761)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(761)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(761)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 762 => --0x2fa
          localRdData(31 downto  0)  <=  reg_data(762)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 763 => --0x2fb
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 764 => --0x2fc
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 765 => --0x2fd
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 766 => --0x2fe
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 767 => --0x2ff
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 768 => --0x300
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 769 => --0x301
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 770 => --0x302
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 771 => --0x303
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 773 => --0x305
          localRdData( 2 downto  0)  <=  reg_data(773)( 2 downto  0);                             --Enable flag to select SCAs
        when 774 => --0x306
          localRdData( 0)            <=  reg_data(774)( 0);                                       --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(774)( 1);                                       --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(774)( 2);                                       --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(774)( 3);                                       --Emulate a CRC error
        when 777 => --0x309
          localRdData( 0)            <=  reg_data(777)( 0);                                       --0 = lpgbt v0; 1 = lpgbt v1
        when 784 => --0x310
          localRdData( 0)            <=  reg_data(784)( 0);                                       --Reset TX datapath
        when 785 => --0x311
          localRdData( 1)            <=  reg_data(785)( 1);                                       --Reset RX datapath
        when 786 => --0x312
          localRdData( 0)            <=  reg_data(786)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(786)( 1);                                       --Request a read config to the GBTx (IC)
        when 787 => --0x313
          localRdData(15 downto  0)  <=  reg_data(787)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(787)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 788 => --0x314
          localRdData( 7 downto  0)  <=  reg_data(788)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(9).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(788)(31 downto 24);                             --I2C address of the GBTx
        when 789 => --0x315
          localRdData( 0)            <=  reg_data(789)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 790 => --0x316
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 791 => --0x317
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 792 => --0x318
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 800 => --0x320
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(9).CONFIG.master_link_id;                    --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(9).CONFIG.servant_link_id;                   --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(9).CONFIG.station;                           --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(9).CONFIG.polmux;                            --CSM polmux number
        when 801 => --0x321
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(9).CONFIG.en;                                --CSM is en
        when 802 => --0x322
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(9).CONFIG.legacy;                            --CSM is legacy
        when 816 => --0x330
          localRdData( 0)            <=  reg_data(816)( 0);                                       --Reset this Uplink
        when 817 => --0x331
          localRdData( 0)            <=  Mon.CSM.CSM(10).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(10).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 818 => --0x332
          localRdData( 0)            <=  reg_data(818)( 0);                                       --Reset this Uplink
        when 819 => --0x333
          localRdData( 0)            <=  Mon.CSM.CSM(10).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(10).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 827 => --0x33b
          localRdData( 0)            <=  reg_data(827)( 0);                                       --Reset this Downlink
        when 828 => --0x33c
          localRdData( 0)            <=  Mon.CSM.CSM(10).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 832 => --0x340
          localRdData( 0)            <=  reg_data(832)( 0);                                       --Reset TX datapath
        when 833 => --0x341
          localRdData( 1)            <=  reg_data(833)( 1);                                       --Reset RX datapath
        when 834 => --0x342
          localRdData( 0)            <=  reg_data(834)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(834)( 1);                                       --Request a read config to the GBTx (IC)
        when 835 => --0x343
          localRdData(15 downto  0)  <=  reg_data(835)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(835)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 836 => --0x344
          localRdData( 7 downto  0)  <=  reg_data(836)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(10).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(836)(31 downto 24);                             --I2C address of the GBTx
        when 837 => --0x345
          localRdData( 0)            <=  reg_data(837)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 838 => --0x346
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 839 => --0x347
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 840 => --0x348
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 841 => --0x349
          localRdData( 7 downto  0)  <=  reg_data(841)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(841)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(841)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(841)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 842 => --0x34a
          localRdData(31 downto  0)  <=  reg_data(842)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 843 => --0x34b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 844 => --0x34c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 845 => --0x34d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 846 => --0x34e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 847 => --0x34f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 848 => --0x350
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 849 => --0x351
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 850 => --0x352
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 851 => --0x353
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 853 => --0x355
          localRdData( 2 downto  0)  <=  reg_data(853)( 2 downto  0);                             --Enable flag to select SCAs
        when 854 => --0x356
          localRdData( 0)            <=  reg_data(854)( 0);                                       --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(854)( 1);                                       --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(854)( 2);                                       --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(854)( 3);                                       --Emulate a CRC error
        when 857 => --0x359
          localRdData( 0)            <=  reg_data(857)( 0);                                       --0 = lpgbt v0; 1 = lpgbt v1
        when 864 => --0x360
          localRdData( 0)            <=  reg_data(864)( 0);                                       --Reset TX datapath
        when 865 => --0x361
          localRdData( 1)            <=  reg_data(865)( 1);                                       --Reset RX datapath
        when 866 => --0x362
          localRdData( 0)            <=  reg_data(866)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(866)( 1);                                       --Request a read config to the GBTx (IC)
        when 867 => --0x363
          localRdData(15 downto  0)  <=  reg_data(867)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(867)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 868 => --0x364
          localRdData( 7 downto  0)  <=  reg_data(868)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(10).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(868)(31 downto 24);                             --I2C address of the GBTx
        when 869 => --0x365
          localRdData( 0)            <=  reg_data(869)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 870 => --0x366
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 871 => --0x367
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 872 => --0x368
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 880 => --0x370
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(10).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(10).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(10).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(10).CONFIG.polmux;                           --CSM polmux number
        when 881 => --0x371
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(10).CONFIG.en;                               --CSM is en
        when 882 => --0x372
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(10).CONFIG.legacy;                           --CSM is legacy
        when 896 => --0x380
          localRdData( 0)            <=  reg_data(896)( 0);                                       --Reset this Uplink
        when 897 => --0x381
          localRdData( 0)            <=  Mon.CSM.CSM(11).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(11).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 898 => --0x382
          localRdData( 0)            <=  reg_data(898)( 0);                                       --Reset this Uplink
        when 899 => --0x383
          localRdData( 0)            <=  Mon.CSM.CSM(11).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(11).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 907 => --0x38b
          localRdData( 0)            <=  reg_data(907)( 0);                                       --Reset this Downlink
        when 908 => --0x38c
          localRdData( 0)            <=  Mon.CSM.CSM(11).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 912 => --0x390
          localRdData( 0)            <=  reg_data(912)( 0);                                       --Reset TX datapath
        when 913 => --0x391
          localRdData( 1)            <=  reg_data(913)( 1);                                       --Reset RX datapath
        when 914 => --0x392
          localRdData( 0)            <=  reg_data(914)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(914)( 1);                                       --Request a read config to the GBTx (IC)
        when 915 => --0x393
          localRdData(15 downto  0)  <=  reg_data(915)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(915)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 916 => --0x394
          localRdData( 7 downto  0)  <=  reg_data(916)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(11).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(916)(31 downto 24);                             --I2C address of the GBTx
        when 917 => --0x395
          localRdData( 0)            <=  reg_data(917)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 918 => --0x396
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 919 => --0x397
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 920 => --0x398
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 921 => --0x399
          localRdData( 7 downto  0)  <=  reg_data(921)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(921)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(921)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(921)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 922 => --0x39a
          localRdData(31 downto  0)  <=  reg_data(922)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 923 => --0x39b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 924 => --0x39c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 925 => --0x39d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 926 => --0x39e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 927 => --0x39f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 928 => --0x3a0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 929 => --0x3a1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 930 => --0x3a2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 931 => --0x3a3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 933 => --0x3a5
          localRdData( 2 downto  0)  <=  reg_data(933)( 2 downto  0);                             --Enable flag to select SCAs
        when 934 => --0x3a6
          localRdData( 0)            <=  reg_data(934)( 0);                                       --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(934)( 1);                                       --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(934)( 2);                                       --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(934)( 3);                                       --Emulate a CRC error
        when 937 => --0x3a9
          localRdData( 0)            <=  reg_data(937)( 0);                                       --0 = lpgbt v0; 1 = lpgbt v1
        when 944 => --0x3b0
          localRdData( 0)            <=  reg_data(944)( 0);                                       --Reset TX datapath
        when 945 => --0x3b1
          localRdData( 1)            <=  reg_data(945)( 1);                                       --Reset RX datapath
        when 946 => --0x3b2
          localRdData( 0)            <=  reg_data(946)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(946)( 1);                                       --Request a read config to the GBTx (IC)
        when 947 => --0x3b3
          localRdData(15 downto  0)  <=  reg_data(947)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(947)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 948 => --0x3b4
          localRdData( 7 downto  0)  <=  reg_data(948)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(11).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(948)(31 downto 24);                             --I2C address of the GBTx
        when 949 => --0x3b5
          localRdData( 0)            <=  reg_data(949)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 950 => --0x3b6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 951 => --0x3b7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 952 => --0x3b8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 960 => --0x3c0
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(11).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(11).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(11).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(11).CONFIG.polmux;                           --CSM polmux number
        when 961 => --0x3c1
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(11).CONFIG.en;                               --CSM is en
        when 962 => --0x3c2
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(11).CONFIG.legacy;                           --CSM is legacy
        when 976 => --0x3d0
          localRdData( 0)            <=  reg_data(976)( 0);                                       --Reset this Uplink
        when 977 => --0x3d1
          localRdData( 0)            <=  Mon.CSM.CSM(12).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(12).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 978 => --0x3d2
          localRdData( 0)            <=  reg_data(978)( 0);                                       --Reset this Uplink
        when 979 => --0x3d3
          localRdData( 0)            <=  Mon.CSM.CSM(12).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(12).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 987 => --0x3db
          localRdData( 0)            <=  reg_data(987)( 0);                                       --Reset this Downlink
        when 988 => --0x3dc
          localRdData( 0)            <=  Mon.CSM.CSM(12).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 992 => --0x3e0
          localRdData( 0)            <=  reg_data(992)( 0);                                       --Reset TX datapath
        when 993 => --0x3e1
          localRdData( 1)            <=  reg_data(993)( 1);                                       --Reset RX datapath
        when 994 => --0x3e2
          localRdData( 0)            <=  reg_data(994)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(994)( 1);                                       --Request a read config to the GBTx (IC)
        when 995 => --0x3e3
          localRdData(15 downto  0)  <=  reg_data(995)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(995)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 996 => --0x3e4
          localRdData( 7 downto  0)  <=  reg_data(996)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(12).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(996)(31 downto 24);                             --I2C address of the GBTx
        when 997 => --0x3e5
          localRdData( 0)            <=  reg_data(997)( 0);                                       --Request a write operation into the internal FIFO (Data to GBTx)
        when 998 => --0x3e6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 999 => --0x3e7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 1000 => --0x3e8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1001 => --0x3e9
          localRdData( 7 downto  0)  <=  reg_data(1001)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(1001)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(1001)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(1001)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1002 => --0x3ea
          localRdData(31 downto  0)  <=  reg_data(1002)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 1003 => --0x3eb
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1004 => --0x3ec
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1005 => --0x3ed
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1006 => --0x3ee
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1007 => --0x3ef
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1008 => --0x3f0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1009 => --0x3f1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1010 => --0x3f2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1011 => --0x3f3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1013 => --0x3f5
          localRdData( 2 downto  0)  <=  reg_data(1013)( 2 downto  0);                            --Enable flag to select SCAs
        when 1014 => --0x3f6
          localRdData( 0)            <=  reg_data(1014)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(1014)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(1014)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(1014)( 3);                                      --Emulate a CRC error
        when 1017 => --0x3f9
          localRdData( 0)            <=  reg_data(1017)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 1024 => --0x400
          localRdData( 0)            <=  reg_data(1024)( 0);                                      --Reset TX datapath
        when 1025 => --0x401
          localRdData( 1)            <=  reg_data(1025)( 1);                                      --Reset RX datapath
        when 1026 => --0x402
          localRdData( 0)            <=  reg_data(1026)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1026)( 1);                                      --Request a read config to the GBTx (IC)
        when 1027 => --0x403
          localRdData(15 downto  0)  <=  reg_data(1027)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1027)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1028 => --0x404
          localRdData( 7 downto  0)  <=  reg_data(1028)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(12).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1028)(31 downto 24);                            --I2C address of the GBTx
        when 1029 => --0x405
          localRdData( 0)            <=  reg_data(1029)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1030 => --0x406
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 1031 => --0x407
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 1032 => --0x408
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1040 => --0x410
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(12).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(12).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(12).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(12).CONFIG.polmux;                           --CSM polmux number
        when 1041 => --0x411
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(12).CONFIG.en;                               --CSM is en
        when 1042 => --0x412
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(12).CONFIG.legacy;                           --CSM is legacy
        when 1056 => --0x420
          localRdData( 0)            <=  reg_data(1056)( 0);                                      --Reset this Uplink
        when 1057 => --0x421
          localRdData( 0)            <=  Mon.CSM.CSM(13).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(13).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 1058 => --0x422
          localRdData( 0)            <=  reg_data(1058)( 0);                                      --Reset this Uplink
        when 1059 => --0x423
          localRdData( 0)            <=  Mon.CSM.CSM(13).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(13).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 1067 => --0x42b
          localRdData( 0)            <=  reg_data(1067)( 0);                                      --Reset this Downlink
        when 1068 => --0x42c
          localRdData( 0)            <=  Mon.CSM.CSM(13).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 1072 => --0x430
          localRdData( 0)            <=  reg_data(1072)( 0);                                      --Reset TX datapath
        when 1073 => --0x431
          localRdData( 1)            <=  reg_data(1073)( 1);                                      --Reset RX datapath
        when 1074 => --0x432
          localRdData( 0)            <=  reg_data(1074)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1074)( 1);                                      --Request a read config to the GBTx (IC)
        when 1075 => --0x433
          localRdData(15 downto  0)  <=  reg_data(1075)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1075)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1076 => --0x434
          localRdData( 7 downto  0)  <=  reg_data(1076)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(13).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1076)(31 downto 24);                            --I2C address of the GBTx
        when 1077 => --0x435
          localRdData( 0)            <=  reg_data(1077)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1078 => --0x436
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 1079 => --0x437
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 1080 => --0x438
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1081 => --0x439
          localRdData( 7 downto  0)  <=  reg_data(1081)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(1081)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(1081)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(1081)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1082 => --0x43a
          localRdData(31 downto  0)  <=  reg_data(1082)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 1083 => --0x43b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1084 => --0x43c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1085 => --0x43d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1086 => --0x43e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1087 => --0x43f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1088 => --0x440
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1089 => --0x441
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1090 => --0x442
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1091 => --0x443
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1093 => --0x445
          localRdData( 2 downto  0)  <=  reg_data(1093)( 2 downto  0);                            --Enable flag to select SCAs
        when 1094 => --0x446
          localRdData( 0)            <=  reg_data(1094)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(1094)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(1094)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(1094)( 3);                                      --Emulate a CRC error
        when 1097 => --0x449
          localRdData( 0)            <=  reg_data(1097)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 1104 => --0x450
          localRdData( 0)            <=  reg_data(1104)( 0);                                      --Reset TX datapath
        when 1105 => --0x451
          localRdData( 1)            <=  reg_data(1105)( 1);                                      --Reset RX datapath
        when 1106 => --0x452
          localRdData( 0)            <=  reg_data(1106)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1106)( 1);                                      --Request a read config to the GBTx (IC)
        when 1107 => --0x453
          localRdData(15 downto  0)  <=  reg_data(1107)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1107)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1108 => --0x454
          localRdData( 7 downto  0)  <=  reg_data(1108)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(13).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1108)(31 downto 24);                            --I2C address of the GBTx
        when 1109 => --0x455
          localRdData( 0)            <=  reg_data(1109)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1110 => --0x456
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 1111 => --0x457
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 1112 => --0x458
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1120 => --0x460
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(13).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(13).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(13).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(13).CONFIG.polmux;                           --CSM polmux number
        when 1121 => --0x461
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(13).CONFIG.en;                               --CSM is en
        when 1122 => --0x462
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(13).CONFIG.legacy;                           --CSM is legacy
        when 1136 => --0x470
          localRdData( 0)            <=  reg_data(1136)( 0);                                      --Reset this Uplink
        when 1137 => --0x471
          localRdData( 0)            <=  Mon.CSM.CSM(14).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(14).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 1138 => --0x472
          localRdData( 0)            <=  reg_data(1138)( 0);                                      --Reset this Uplink
        when 1139 => --0x473
          localRdData( 0)            <=  Mon.CSM.CSM(14).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(14).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 1147 => --0x47b
          localRdData( 0)            <=  reg_data(1147)( 0);                                      --Reset this Downlink
        when 1148 => --0x47c
          localRdData( 0)            <=  Mon.CSM.CSM(14).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 1152 => --0x480
          localRdData( 0)            <=  reg_data(1152)( 0);                                      --Reset TX datapath
        when 1153 => --0x481
          localRdData( 1)            <=  reg_data(1153)( 1);                                      --Reset RX datapath
        when 1154 => --0x482
          localRdData( 0)            <=  reg_data(1154)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1154)( 1);                                      --Request a read config to the GBTx (IC)
        when 1155 => --0x483
          localRdData(15 downto  0)  <=  reg_data(1155)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1155)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1156 => --0x484
          localRdData( 7 downto  0)  <=  reg_data(1156)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(14).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1156)(31 downto 24);                            --I2C address of the GBTx
        when 1157 => --0x485
          localRdData( 0)            <=  reg_data(1157)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1158 => --0x486
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 1159 => --0x487
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 1160 => --0x488
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1161 => --0x489
          localRdData( 7 downto  0)  <=  reg_data(1161)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(1161)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(1161)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(1161)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1162 => --0x48a
          localRdData(31 downto  0)  <=  reg_data(1162)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 1163 => --0x48b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1164 => --0x48c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1165 => --0x48d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1166 => --0x48e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1167 => --0x48f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1168 => --0x490
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1169 => --0x491
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1170 => --0x492
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1171 => --0x493
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1173 => --0x495
          localRdData( 2 downto  0)  <=  reg_data(1173)( 2 downto  0);                            --Enable flag to select SCAs
        when 1174 => --0x496
          localRdData( 0)            <=  reg_data(1174)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(1174)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(1174)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(1174)( 3);                                      --Emulate a CRC error
        when 1177 => --0x499
          localRdData( 0)            <=  reg_data(1177)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 1184 => --0x4a0
          localRdData( 0)            <=  reg_data(1184)( 0);                                      --Reset TX datapath
        when 1185 => --0x4a1
          localRdData( 1)            <=  reg_data(1185)( 1);                                      --Reset RX datapath
        when 1186 => --0x4a2
          localRdData( 0)            <=  reg_data(1186)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1186)( 1);                                      --Request a read config to the GBTx (IC)
        when 1187 => --0x4a3
          localRdData(15 downto  0)  <=  reg_data(1187)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1187)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1188 => --0x4a4
          localRdData( 7 downto  0)  <=  reg_data(1188)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(14).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1188)(31 downto 24);                            --I2C address of the GBTx
        when 1189 => --0x4a5
          localRdData( 0)            <=  reg_data(1189)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1190 => --0x4a6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 1191 => --0x4a7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 1192 => --0x4a8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1200 => --0x4b0
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(14).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(14).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(14).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(14).CONFIG.polmux;                           --CSM polmux number
        when 1201 => --0x4b1
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(14).CONFIG.en;                               --CSM is en
        when 1202 => --0x4b2
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(14).CONFIG.legacy;                           --CSM is legacy
        when 1216 => --0x4c0
          localRdData( 0)            <=  reg_data(1216)( 0);                                      --Reset this Uplink
        when 1217 => --0x4c1
          localRdData( 0)            <=  Mon.CSM.CSM(15).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(15).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 1218 => --0x4c2
          localRdData( 0)            <=  reg_data(1218)( 0);                                      --Reset this Uplink
        when 1219 => --0x4c3
          localRdData( 0)            <=  Mon.CSM.CSM(15).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(15).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 1227 => --0x4cb
          localRdData( 0)            <=  reg_data(1227)( 0);                                      --Reset this Downlink
        when 1228 => --0x4cc
          localRdData( 0)            <=  Mon.CSM.CSM(15).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 1232 => --0x4d0
          localRdData( 0)            <=  reg_data(1232)( 0);                                      --Reset TX datapath
        when 1233 => --0x4d1
          localRdData( 1)            <=  reg_data(1233)( 1);                                      --Reset RX datapath
        when 1234 => --0x4d2
          localRdData( 0)            <=  reg_data(1234)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1234)( 1);                                      --Request a read config to the GBTx (IC)
        when 1235 => --0x4d3
          localRdData(15 downto  0)  <=  reg_data(1235)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1235)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1236 => --0x4d4
          localRdData( 7 downto  0)  <=  reg_data(1236)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(15).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1236)(31 downto 24);                            --I2C address of the GBTx
        when 1237 => --0x4d5
          localRdData( 0)            <=  reg_data(1237)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1238 => --0x4d6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 1239 => --0x4d7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 1240 => --0x4d8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1241 => --0x4d9
          localRdData( 7 downto  0)  <=  reg_data(1241)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(1241)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(1241)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(1241)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1242 => --0x4da
          localRdData(31 downto  0)  <=  reg_data(1242)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 1243 => --0x4db
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1244 => --0x4dc
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1245 => --0x4dd
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1246 => --0x4de
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1247 => --0x4df
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1248 => --0x4e0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1249 => --0x4e1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1250 => --0x4e2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1251 => --0x4e3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1253 => --0x4e5
          localRdData( 2 downto  0)  <=  reg_data(1253)( 2 downto  0);                            --Enable flag to select SCAs
        when 1254 => --0x4e6
          localRdData( 0)            <=  reg_data(1254)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(1254)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(1254)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(1254)( 3);                                      --Emulate a CRC error
        when 1257 => --0x4e9
          localRdData( 0)            <=  reg_data(1257)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 1264 => --0x4f0
          localRdData( 0)            <=  reg_data(1264)( 0);                                      --Reset TX datapath
        when 1265 => --0x4f1
          localRdData( 1)            <=  reg_data(1265)( 1);                                      --Reset RX datapath
        when 1266 => --0x4f2
          localRdData( 0)            <=  reg_data(1266)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1266)( 1);                                      --Request a read config to the GBTx (IC)
        when 1267 => --0x4f3
          localRdData(15 downto  0)  <=  reg_data(1267)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1267)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1268 => --0x4f4
          localRdData( 7 downto  0)  <=  reg_data(1268)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(15).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1268)(31 downto 24);                            --I2C address of the GBTx
        when 1269 => --0x4f5
          localRdData( 0)            <=  reg_data(1269)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1270 => --0x4f6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 1271 => --0x4f7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 1272 => --0x4f8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1280 => --0x500
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(15).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(15).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(15).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(15).CONFIG.polmux;                           --CSM polmux number
        when 1281 => --0x501
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(15).CONFIG.en;                               --CSM is en
        when 1282 => --0x502
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(15).CONFIG.legacy;                           --CSM is legacy
        when 1296 => --0x510
          localRdData( 0)            <=  reg_data(1296)( 0);                                      --Reset this Uplink
        when 1297 => --0x511
          localRdData( 0)            <=  Mon.CSM.CSM(16).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(16).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 1298 => --0x512
          localRdData( 0)            <=  reg_data(1298)( 0);                                      --Reset this Uplink
        when 1299 => --0x513
          localRdData( 0)            <=  Mon.CSM.CSM(16).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(16).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 1307 => --0x51b
          localRdData( 0)            <=  reg_data(1307)( 0);                                      --Reset this Downlink
        when 1308 => --0x51c
          localRdData( 0)            <=  Mon.CSM.CSM(16).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 1312 => --0x520
          localRdData( 0)            <=  reg_data(1312)( 0);                                      --Reset TX datapath
        when 1313 => --0x521
          localRdData( 1)            <=  reg_data(1313)( 1);                                      --Reset RX datapath
        when 1314 => --0x522
          localRdData( 0)            <=  reg_data(1314)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1314)( 1);                                      --Request a read config to the GBTx (IC)
        when 1315 => --0x523
          localRdData(15 downto  0)  <=  reg_data(1315)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1315)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1316 => --0x524
          localRdData( 7 downto  0)  <=  reg_data(1316)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(16).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1316)(31 downto 24);                            --I2C address of the GBTx
        when 1317 => --0x525
          localRdData( 0)            <=  reg_data(1317)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1318 => --0x526
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 1319 => --0x527
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 1320 => --0x528
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1321 => --0x529
          localRdData( 7 downto  0)  <=  reg_data(1321)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(1321)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(1321)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(1321)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1322 => --0x52a
          localRdData(31 downto  0)  <=  reg_data(1322)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 1323 => --0x52b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1324 => --0x52c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1325 => --0x52d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1326 => --0x52e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1327 => --0x52f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1328 => --0x530
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1329 => --0x531
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1330 => --0x532
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1331 => --0x533
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1333 => --0x535
          localRdData( 2 downto  0)  <=  reg_data(1333)( 2 downto  0);                            --Enable flag to select SCAs
        when 1334 => --0x536
          localRdData( 0)            <=  reg_data(1334)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(1334)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(1334)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(1334)( 3);                                      --Emulate a CRC error
        when 1337 => --0x539
          localRdData( 0)            <=  reg_data(1337)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 1344 => --0x540
          localRdData( 0)            <=  reg_data(1344)( 0);                                      --Reset TX datapath
        when 1345 => --0x541
          localRdData( 1)            <=  reg_data(1345)( 1);                                      --Reset RX datapath
        when 1346 => --0x542
          localRdData( 0)            <=  reg_data(1346)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1346)( 1);                                      --Request a read config to the GBTx (IC)
        when 1347 => --0x543
          localRdData(15 downto  0)  <=  reg_data(1347)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1347)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1348 => --0x544
          localRdData( 7 downto  0)  <=  reg_data(1348)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(16).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1348)(31 downto 24);                            --I2C address of the GBTx
        when 1349 => --0x545
          localRdData( 0)            <=  reg_data(1349)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1350 => --0x546
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 1351 => --0x547
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 1352 => --0x548
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1360 => --0x550
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(16).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(16).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(16).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(16).CONFIG.polmux;                           --CSM polmux number
        when 1361 => --0x551
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(16).CONFIG.en;                               --CSM is en
        when 1362 => --0x552
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(16).CONFIG.legacy;                           --CSM is legacy
        when 1376 => --0x560
          localRdData( 0)            <=  reg_data(1376)( 0);                                      --Reset this Uplink
        when 1377 => --0x561
          localRdData( 0)            <=  Mon.CSM.CSM(17).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(17).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 1378 => --0x562
          localRdData( 0)            <=  reg_data(1378)( 0);                                      --Reset this Uplink
        when 1379 => --0x563
          localRdData( 0)            <=  Mon.CSM.CSM(17).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(17).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 1387 => --0x56b
          localRdData( 0)            <=  reg_data(1387)( 0);                                      --Reset this Downlink
        when 1388 => --0x56c
          localRdData( 0)            <=  Mon.CSM.CSM(17).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 1392 => --0x570
          localRdData( 0)            <=  reg_data(1392)( 0);                                      --Reset TX datapath
        when 1393 => --0x571
          localRdData( 1)            <=  reg_data(1393)( 1);                                      --Reset RX datapath
        when 1394 => --0x572
          localRdData( 0)            <=  reg_data(1394)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1394)( 1);                                      --Request a read config to the GBTx (IC)
        when 1395 => --0x573
          localRdData(15 downto  0)  <=  reg_data(1395)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1395)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1396 => --0x574
          localRdData( 7 downto  0)  <=  reg_data(1396)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(17).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1396)(31 downto 24);                            --I2C address of the GBTx
        when 1397 => --0x575
          localRdData( 0)            <=  reg_data(1397)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1398 => --0x576
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 1399 => --0x577
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 1400 => --0x578
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1401 => --0x579
          localRdData( 7 downto  0)  <=  reg_data(1401)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(1401)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(1401)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(1401)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1402 => --0x57a
          localRdData(31 downto  0)  <=  reg_data(1402)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 1403 => --0x57b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1404 => --0x57c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1405 => --0x57d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1406 => --0x57e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1407 => --0x57f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1408 => --0x580
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1409 => --0x581
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1410 => --0x582
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1411 => --0x583
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1413 => --0x585
          localRdData( 2 downto  0)  <=  reg_data(1413)( 2 downto  0);                            --Enable flag to select SCAs
        when 1414 => --0x586
          localRdData( 0)            <=  reg_data(1414)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(1414)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(1414)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(1414)( 3);                                      --Emulate a CRC error
        when 1417 => --0x589
          localRdData( 0)            <=  reg_data(1417)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 1424 => --0x590
          localRdData( 0)            <=  reg_data(1424)( 0);                                      --Reset TX datapath
        when 1425 => --0x591
          localRdData( 1)            <=  reg_data(1425)( 1);                                      --Reset RX datapath
        when 1426 => --0x592
          localRdData( 0)            <=  reg_data(1426)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1426)( 1);                                      --Request a read config to the GBTx (IC)
        when 1427 => --0x593
          localRdData(15 downto  0)  <=  reg_data(1427)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1427)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1428 => --0x594
          localRdData( 7 downto  0)  <=  reg_data(1428)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(17).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1428)(31 downto 24);                            --I2C address of the GBTx
        when 1429 => --0x595
          localRdData( 0)            <=  reg_data(1429)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1430 => --0x596
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 1431 => --0x597
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 1432 => --0x598
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1440 => --0x5a0
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(17).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(17).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(17).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(17).CONFIG.polmux;                           --CSM polmux number
        when 1441 => --0x5a1
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(17).CONFIG.en;                               --CSM is en
        when 1442 => --0x5a2
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(17).CONFIG.legacy;                           --CSM is legacy
        when 1456 => --0x5b0
          localRdData( 0)            <=  reg_data(1456)( 0);                                      --Reset this Uplink
        when 1457 => --0x5b1
          localRdData( 0)            <=  Mon.CSM.CSM(18).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(18).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 1458 => --0x5b2
          localRdData( 0)            <=  reg_data(1458)( 0);                                      --Reset this Uplink
        when 1459 => --0x5b3
          localRdData( 0)            <=  Mon.CSM.CSM(18).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(18).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 1467 => --0x5bb
          localRdData( 0)            <=  reg_data(1467)( 0);                                      --Reset this Downlink
        when 1468 => --0x5bc
          localRdData( 0)            <=  Mon.CSM.CSM(18).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 1472 => --0x5c0
          localRdData( 0)            <=  reg_data(1472)( 0);                                      --Reset TX datapath
        when 1473 => --0x5c1
          localRdData( 1)            <=  reg_data(1473)( 1);                                      --Reset RX datapath
        when 1474 => --0x5c2
          localRdData( 0)            <=  reg_data(1474)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1474)( 1);                                      --Request a read config to the GBTx (IC)
        when 1475 => --0x5c3
          localRdData(15 downto  0)  <=  reg_data(1475)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1475)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1476 => --0x5c4
          localRdData( 7 downto  0)  <=  reg_data(1476)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(18).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(18).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1476)(31 downto 24);                            --I2C address of the GBTx
        when 1477 => --0x5c5
          localRdData( 0)            <=  reg_data(1477)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1478 => --0x5c6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(18).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 1479 => --0x5c7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(18).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(18).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(18).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(18).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(18).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 1480 => --0x5c8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(18).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(18).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1481 => --0x5c9
          localRdData( 7 downto  0)  <=  reg_data(1481)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(1481)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(1481)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(1481)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1482 => --0x5ca
          localRdData(31 downto  0)  <=  reg_data(1482)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 1483 => --0x5cb
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1484 => --0x5cc
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1485 => --0x5cd
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1486 => --0x5ce
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1487 => --0x5cf
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1488 => --0x5d0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1489 => --0x5d1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1490 => --0x5d2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1491 => --0x5d3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(18).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1493 => --0x5d5
          localRdData( 2 downto  0)  <=  reg_data(1493)( 2 downto  0);                            --Enable flag to select SCAs
        when 1494 => --0x5d6
          localRdData( 0)            <=  reg_data(1494)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(1494)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(1494)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(1494)( 3);                                      --Emulate a CRC error
        when 1497 => --0x5d9
          localRdData( 0)            <=  reg_data(1497)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 1504 => --0x5e0
          localRdData( 0)            <=  reg_data(1504)( 0);                                      --Reset TX datapath
        when 1505 => --0x5e1
          localRdData( 1)            <=  reg_data(1505)( 1);                                      --Reset RX datapath
        when 1506 => --0x5e2
          localRdData( 0)            <=  reg_data(1506)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1506)( 1);                                      --Request a read config to the GBTx (IC)
        when 1507 => --0x5e3
          localRdData(15 downto  0)  <=  reg_data(1507)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1507)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1508 => --0x5e4
          localRdData( 7 downto  0)  <=  reg_data(1508)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(18).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(18).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1508)(31 downto 24);                            --I2C address of the GBTx
        when 1509 => --0x5e5
          localRdData( 0)            <=  reg_data(1509)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1510 => --0x5e6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(18).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 1511 => --0x5e7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(18).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(18).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(18).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(18).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(18).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 1512 => --0x5e8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(18).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(18).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1520 => --0x5f0
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(18).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(18).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(18).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(18).CONFIG.polmux;                           --CSM polmux number
        when 1521 => --0x5f1
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(18).CONFIG.en;                               --CSM is en
        when 1522 => --0x5f2
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(18).CONFIG.legacy;                           --CSM is legacy
        when 1536 => --0x600
          localRdData( 0)            <=  reg_data(1536)( 0);                                      --Reset this Uplink
        when 1537 => --0x601
          localRdData( 0)            <=  Mon.CSM.CSM(19).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(19).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 1538 => --0x602
          localRdData( 0)            <=  reg_data(1538)( 0);                                      --Reset this Uplink
        when 1539 => --0x603
          localRdData( 0)            <=  Mon.CSM.CSM(19).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(19).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 1547 => --0x60b
          localRdData( 0)            <=  reg_data(1547)( 0);                                      --Reset this Downlink
        when 1548 => --0x60c
          localRdData( 0)            <=  Mon.CSM.CSM(19).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 1552 => --0x610
          localRdData( 0)            <=  reg_data(1552)( 0);                                      --Reset TX datapath
        when 1553 => --0x611
          localRdData( 1)            <=  reg_data(1553)( 1);                                      --Reset RX datapath
        when 1554 => --0x612
          localRdData( 0)            <=  reg_data(1554)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1554)( 1);                                      --Request a read config to the GBTx (IC)
        when 1555 => --0x613
          localRdData(15 downto  0)  <=  reg_data(1555)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1555)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1556 => --0x614
          localRdData( 7 downto  0)  <=  reg_data(1556)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(19).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(19).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1556)(31 downto 24);                            --I2C address of the GBTx
        when 1557 => --0x615
          localRdData( 0)            <=  reg_data(1557)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1558 => --0x616
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(19).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 1559 => --0x617
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(19).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(19).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(19).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(19).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(19).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 1560 => --0x618
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(19).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(19).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1561 => --0x619
          localRdData( 7 downto  0)  <=  reg_data(1561)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(1561)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(1561)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(1561)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1562 => --0x61a
          localRdData(31 downto  0)  <=  reg_data(1562)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 1563 => --0x61b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1564 => --0x61c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1565 => --0x61d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1566 => --0x61e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1567 => --0x61f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1568 => --0x620
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1569 => --0x621
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1570 => --0x622
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1571 => --0x623
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(19).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1573 => --0x625
          localRdData( 2 downto  0)  <=  reg_data(1573)( 2 downto  0);                            --Enable flag to select SCAs
        when 1574 => --0x626
          localRdData( 0)            <=  reg_data(1574)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(1574)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(1574)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(1574)( 3);                                      --Emulate a CRC error
        when 1577 => --0x629
          localRdData( 0)            <=  reg_data(1577)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 1584 => --0x630
          localRdData( 0)            <=  reg_data(1584)( 0);                                      --Reset TX datapath
        when 1585 => --0x631
          localRdData( 1)            <=  reg_data(1585)( 1);                                      --Reset RX datapath
        when 1586 => --0x632
          localRdData( 0)            <=  reg_data(1586)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1586)( 1);                                      --Request a read config to the GBTx (IC)
        when 1587 => --0x633
          localRdData(15 downto  0)  <=  reg_data(1587)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1587)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1588 => --0x634
          localRdData( 7 downto  0)  <=  reg_data(1588)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(19).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(19).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1588)(31 downto 24);                            --I2C address of the GBTx
        when 1589 => --0x635
          localRdData( 0)            <=  reg_data(1589)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1590 => --0x636
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(19).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 1591 => --0x637
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(19).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(19).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(19).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(19).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(19).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 1592 => --0x638
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(19).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(19).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1600 => --0x640
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(19).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(19).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(19).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(19).CONFIG.polmux;                           --CSM polmux number
        when 1601 => --0x641
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(19).CONFIG.en;                               --CSM is en
        when 1602 => --0x642
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(19).CONFIG.legacy;                           --CSM is legacy
        when 1616 => --0x650
          localRdData( 0)            <=  reg_data(1616)( 0);                                      --Reset this Uplink
        when 1617 => --0x651
          localRdData( 0)            <=  Mon.CSM.CSM(20).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(20).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 1618 => --0x652
          localRdData( 0)            <=  reg_data(1618)( 0);                                      --Reset this Uplink
        when 1619 => --0x653
          localRdData( 0)            <=  Mon.CSM.CSM(20).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(20).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 1627 => --0x65b
          localRdData( 0)            <=  reg_data(1627)( 0);                                      --Reset this Downlink
        when 1628 => --0x65c
          localRdData( 0)            <=  Mon.CSM.CSM(20).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 1632 => --0x660
          localRdData( 0)            <=  reg_data(1632)( 0);                                      --Reset TX datapath
        when 1633 => --0x661
          localRdData( 1)            <=  reg_data(1633)( 1);                                      --Reset RX datapath
        when 1634 => --0x662
          localRdData( 0)            <=  reg_data(1634)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1634)( 1);                                      --Request a read config to the GBTx (IC)
        when 1635 => --0x663
          localRdData(15 downto  0)  <=  reg_data(1635)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1635)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1636 => --0x664
          localRdData( 7 downto  0)  <=  reg_data(1636)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(20).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(20).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1636)(31 downto 24);                            --I2C address of the GBTx
        when 1637 => --0x665
          localRdData( 0)            <=  reg_data(1637)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1638 => --0x666
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(20).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 1639 => --0x667
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(20).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(20).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(20).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(20).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(20).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 1640 => --0x668
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(20).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(20).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1641 => --0x669
          localRdData( 7 downto  0)  <=  reg_data(1641)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(1641)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(1641)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(1641)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1642 => --0x66a
          localRdData(31 downto  0)  <=  reg_data(1642)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 1643 => --0x66b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1644 => --0x66c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1645 => --0x66d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1646 => --0x66e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1647 => --0x66f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1648 => --0x670
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1649 => --0x671
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1650 => --0x672
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1651 => --0x673
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(20).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1653 => --0x675
          localRdData( 2 downto  0)  <=  reg_data(1653)( 2 downto  0);                            --Enable flag to select SCAs
        when 1654 => --0x676
          localRdData( 0)            <=  reg_data(1654)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(1654)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(1654)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(1654)( 3);                                      --Emulate a CRC error
        when 1657 => --0x679
          localRdData( 0)            <=  reg_data(1657)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 1664 => --0x680
          localRdData( 0)            <=  reg_data(1664)( 0);                                      --Reset TX datapath
        when 1665 => --0x681
          localRdData( 1)            <=  reg_data(1665)( 1);                                      --Reset RX datapath
        when 1666 => --0x682
          localRdData( 0)            <=  reg_data(1666)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1666)( 1);                                      --Request a read config to the GBTx (IC)
        when 1667 => --0x683
          localRdData(15 downto  0)  <=  reg_data(1667)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1667)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1668 => --0x684
          localRdData( 7 downto  0)  <=  reg_data(1668)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(20).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(20).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1668)(31 downto 24);                            --I2C address of the GBTx
        when 1669 => --0x685
          localRdData( 0)            <=  reg_data(1669)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1670 => --0x686
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(20).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 1671 => --0x687
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(20).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(20).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(20).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(20).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(20).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 1672 => --0x688
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(20).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(20).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1680 => --0x690
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(20).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(20).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(20).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(20).CONFIG.polmux;                           --CSM polmux number
        when 1681 => --0x691
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(20).CONFIG.en;                               --CSM is en
        when 1682 => --0x692
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(20).CONFIG.legacy;                           --CSM is legacy
        when 1696 => --0x6a0
          localRdData( 0)            <=  reg_data(1696)( 0);                                      --Reset this Uplink
        when 1697 => --0x6a1
          localRdData( 0)            <=  Mon.CSM.CSM(21).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(21).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 1698 => --0x6a2
          localRdData( 0)            <=  reg_data(1698)( 0);                                      --Reset this Uplink
        when 1699 => --0x6a3
          localRdData( 0)            <=  Mon.CSM.CSM(21).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(21).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 1707 => --0x6ab
          localRdData( 0)            <=  reg_data(1707)( 0);                                      --Reset this Downlink
        when 1708 => --0x6ac
          localRdData( 0)            <=  Mon.CSM.CSM(21).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 1712 => --0x6b0
          localRdData( 0)            <=  reg_data(1712)( 0);                                      --Reset TX datapath
        when 1713 => --0x6b1
          localRdData( 1)            <=  reg_data(1713)( 1);                                      --Reset RX datapath
        when 1714 => --0x6b2
          localRdData( 0)            <=  reg_data(1714)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1714)( 1);                                      --Request a read config to the GBTx (IC)
        when 1715 => --0x6b3
          localRdData(15 downto  0)  <=  reg_data(1715)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1715)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1716 => --0x6b4
          localRdData( 7 downto  0)  <=  reg_data(1716)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(21).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(21).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1716)(31 downto 24);                            --I2C address of the GBTx
        when 1717 => --0x6b5
          localRdData( 0)            <=  reg_data(1717)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1718 => --0x6b6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(21).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 1719 => --0x6b7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(21).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(21).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(21).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(21).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(21).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 1720 => --0x6b8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(21).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(21).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1721 => --0x6b9
          localRdData( 7 downto  0)  <=  reg_data(1721)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(1721)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(1721)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(1721)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1722 => --0x6ba
          localRdData(31 downto  0)  <=  reg_data(1722)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 1723 => --0x6bb
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1724 => --0x6bc
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1725 => --0x6bd
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1726 => --0x6be
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1727 => --0x6bf
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1728 => --0x6c0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1729 => --0x6c1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1730 => --0x6c2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1731 => --0x6c3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(21).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1733 => --0x6c5
          localRdData( 2 downto  0)  <=  reg_data(1733)( 2 downto  0);                            --Enable flag to select SCAs
        when 1734 => --0x6c6
          localRdData( 0)            <=  reg_data(1734)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(1734)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(1734)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(1734)( 3);                                      --Emulate a CRC error
        when 1737 => --0x6c9
          localRdData( 0)            <=  reg_data(1737)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 1744 => --0x6d0
          localRdData( 0)            <=  reg_data(1744)( 0);                                      --Reset TX datapath
        when 1745 => --0x6d1
          localRdData( 1)            <=  reg_data(1745)( 1);                                      --Reset RX datapath
        when 1746 => --0x6d2
          localRdData( 0)            <=  reg_data(1746)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1746)( 1);                                      --Request a read config to the GBTx (IC)
        when 1747 => --0x6d3
          localRdData(15 downto  0)  <=  reg_data(1747)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1747)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1748 => --0x6d4
          localRdData( 7 downto  0)  <=  reg_data(1748)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(21).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(21).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1748)(31 downto 24);                            --I2C address of the GBTx
        when 1749 => --0x6d5
          localRdData( 0)            <=  reg_data(1749)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1750 => --0x6d6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(21).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 1751 => --0x6d7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(21).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(21).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(21).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(21).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(21).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 1752 => --0x6d8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(21).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(21).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1760 => --0x6e0
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(21).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(21).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(21).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(21).CONFIG.polmux;                           --CSM polmux number
        when 1761 => --0x6e1
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(21).CONFIG.en;                               --CSM is en
        when 1762 => --0x6e2
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(21).CONFIG.legacy;                           --CSM is legacy
        when 1776 => --0x6f0
          localRdData( 0)            <=  reg_data(1776)( 0);                                      --Reset this Uplink
        when 1777 => --0x6f1
          localRdData( 0)            <=  Mon.CSM.CSM(22).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(22).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 1778 => --0x6f2
          localRdData( 0)            <=  reg_data(1778)( 0);                                      --Reset this Uplink
        when 1779 => --0x6f3
          localRdData( 0)            <=  Mon.CSM.CSM(22).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(22).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 1787 => --0x6fb
          localRdData( 0)            <=  reg_data(1787)( 0);                                      --Reset this Downlink
        when 1788 => --0x6fc
          localRdData( 0)            <=  Mon.CSM.CSM(22).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 1792 => --0x700
          localRdData( 0)            <=  reg_data(1792)( 0);                                      --Reset TX datapath
        when 1793 => --0x701
          localRdData( 1)            <=  reg_data(1793)( 1);                                      --Reset RX datapath
        when 1794 => --0x702
          localRdData( 0)            <=  reg_data(1794)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1794)( 1);                                      --Request a read config to the GBTx (IC)
        when 1795 => --0x703
          localRdData(15 downto  0)  <=  reg_data(1795)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1795)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1796 => --0x704
          localRdData( 7 downto  0)  <=  reg_data(1796)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(22).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(22).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1796)(31 downto 24);                            --I2C address of the GBTx
        when 1797 => --0x705
          localRdData( 0)            <=  reg_data(1797)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1798 => --0x706
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(22).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 1799 => --0x707
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(22).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(22).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(22).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(22).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(22).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 1800 => --0x708
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(22).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(22).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1801 => --0x709
          localRdData( 7 downto  0)  <=  reg_data(1801)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(1801)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(1801)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(1801)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1802 => --0x70a
          localRdData(31 downto  0)  <=  reg_data(1802)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 1803 => --0x70b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1804 => --0x70c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1805 => --0x70d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1806 => --0x70e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1807 => --0x70f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1808 => --0x710
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1809 => --0x711
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1810 => --0x712
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1811 => --0x713
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(22).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1813 => --0x715
          localRdData( 2 downto  0)  <=  reg_data(1813)( 2 downto  0);                            --Enable flag to select SCAs
        when 1814 => --0x716
          localRdData( 0)            <=  reg_data(1814)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(1814)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(1814)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(1814)( 3);                                      --Emulate a CRC error
        when 1817 => --0x719
          localRdData( 0)            <=  reg_data(1817)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 1824 => --0x720
          localRdData( 0)            <=  reg_data(1824)( 0);                                      --Reset TX datapath
        when 1825 => --0x721
          localRdData( 1)            <=  reg_data(1825)( 1);                                      --Reset RX datapath
        when 1826 => --0x722
          localRdData( 0)            <=  reg_data(1826)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1826)( 1);                                      --Request a read config to the GBTx (IC)
        when 1827 => --0x723
          localRdData(15 downto  0)  <=  reg_data(1827)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1827)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1828 => --0x724
          localRdData( 7 downto  0)  <=  reg_data(1828)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(22).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(22).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1828)(31 downto 24);                            --I2C address of the GBTx
        when 1829 => --0x725
          localRdData( 0)            <=  reg_data(1829)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1830 => --0x726
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(22).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 1831 => --0x727
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(22).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(22).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(22).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(22).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(22).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 1832 => --0x728
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(22).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(22).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1840 => --0x730
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(22).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(22).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(22).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(22).CONFIG.polmux;                           --CSM polmux number
        when 1841 => --0x731
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(22).CONFIG.en;                               --CSM is en
        when 1842 => --0x732
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(22).CONFIG.legacy;                           --CSM is legacy
        when 1856 => --0x740
          localRdData( 0)            <=  reg_data(1856)( 0);                                      --Reset this Uplink
        when 1857 => --0x741
          localRdData( 0)            <=  Mon.CSM.CSM(23).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(23).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 1858 => --0x742
          localRdData( 0)            <=  reg_data(1858)( 0);                                      --Reset this Uplink
        when 1859 => --0x743
          localRdData( 0)            <=  Mon.CSM.CSM(23).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(23).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 1867 => --0x74b
          localRdData( 0)            <=  reg_data(1867)( 0);                                      --Reset this Downlink
        when 1868 => --0x74c
          localRdData( 0)            <=  Mon.CSM.CSM(23).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 1872 => --0x750
          localRdData( 0)            <=  reg_data(1872)( 0);                                      --Reset TX datapath
        when 1873 => --0x751
          localRdData( 1)            <=  reg_data(1873)( 1);                                      --Reset RX datapath
        when 1874 => --0x752
          localRdData( 0)            <=  reg_data(1874)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1874)( 1);                                      --Request a read config to the GBTx (IC)
        when 1875 => --0x753
          localRdData(15 downto  0)  <=  reg_data(1875)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1875)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1876 => --0x754
          localRdData( 7 downto  0)  <=  reg_data(1876)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(23).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(23).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1876)(31 downto 24);                            --I2C address of the GBTx
        when 1877 => --0x755
          localRdData( 0)            <=  reg_data(1877)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1878 => --0x756
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(23).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 1879 => --0x757
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(23).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(23).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(23).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(23).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(23).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 1880 => --0x758
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(23).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(23).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1881 => --0x759
          localRdData( 7 downto  0)  <=  reg_data(1881)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(1881)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(1881)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(1881)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1882 => --0x75a
          localRdData(31 downto  0)  <=  reg_data(1882)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 1883 => --0x75b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1884 => --0x75c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1885 => --0x75d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1886 => --0x75e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1887 => --0x75f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1888 => --0x760
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1889 => --0x761
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1890 => --0x762
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1891 => --0x763
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(23).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1893 => --0x765
          localRdData( 2 downto  0)  <=  reg_data(1893)( 2 downto  0);                            --Enable flag to select SCAs
        when 1894 => --0x766
          localRdData( 0)            <=  reg_data(1894)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(1894)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(1894)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(1894)( 3);                                      --Emulate a CRC error
        when 1897 => --0x769
          localRdData( 0)            <=  reg_data(1897)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 1904 => --0x770
          localRdData( 0)            <=  reg_data(1904)( 0);                                      --Reset TX datapath
        when 1905 => --0x771
          localRdData( 1)            <=  reg_data(1905)( 1);                                      --Reset RX datapath
        when 1906 => --0x772
          localRdData( 0)            <=  reg_data(1906)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1906)( 1);                                      --Request a read config to the GBTx (IC)
        when 1907 => --0x773
          localRdData(15 downto  0)  <=  reg_data(1907)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1907)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1908 => --0x774
          localRdData( 7 downto  0)  <=  reg_data(1908)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(23).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(23).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1908)(31 downto 24);                            --I2C address of the GBTx
        when 1909 => --0x775
          localRdData( 0)            <=  reg_data(1909)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1910 => --0x776
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(23).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 1911 => --0x777
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(23).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(23).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(23).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(23).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(23).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 1912 => --0x778
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(23).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(23).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1920 => --0x780
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(23).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(23).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(23).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(23).CONFIG.polmux;                           --CSM polmux number
        when 1921 => --0x781
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(23).CONFIG.en;                               --CSM is en
        when 1922 => --0x782
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(23).CONFIG.legacy;                           --CSM is legacy
        when 1936 => --0x790
          localRdData( 0)            <=  reg_data(1936)( 0);                                      --Reset this Uplink
        when 1937 => --0x791
          localRdData( 0)            <=  Mon.CSM.CSM(24).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(24).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 1938 => --0x792
          localRdData( 0)            <=  reg_data(1938)( 0);                                      --Reset this Uplink
        when 1939 => --0x793
          localRdData( 0)            <=  Mon.CSM.CSM(24).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(24).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 1947 => --0x79b
          localRdData( 0)            <=  reg_data(1947)( 0);                                      --Reset this Downlink
        when 1948 => --0x79c
          localRdData( 0)            <=  Mon.CSM.CSM(24).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 1952 => --0x7a0
          localRdData( 0)            <=  reg_data(1952)( 0);                                      --Reset TX datapath
        when 1953 => --0x7a1
          localRdData( 1)            <=  reg_data(1953)( 1);                                      --Reset RX datapath
        when 1954 => --0x7a2
          localRdData( 0)            <=  reg_data(1954)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1954)( 1);                                      --Request a read config to the GBTx (IC)
        when 1955 => --0x7a3
          localRdData(15 downto  0)  <=  reg_data(1955)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1955)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1956 => --0x7a4
          localRdData( 7 downto  0)  <=  reg_data(1956)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(24).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(24).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1956)(31 downto 24);                            --I2C address of the GBTx
        when 1957 => --0x7a5
          localRdData( 0)            <=  reg_data(1957)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1958 => --0x7a6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(24).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 1959 => --0x7a7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(24).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(24).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(24).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(24).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(24).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 1960 => --0x7a8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(24).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(24).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1961 => --0x7a9
          localRdData( 7 downto  0)  <=  reg_data(1961)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(1961)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(1961)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(1961)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1962 => --0x7aa
          localRdData(31 downto  0)  <=  reg_data(1962)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 1963 => --0x7ab
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1964 => --0x7ac
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1965 => --0x7ad
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1966 => --0x7ae
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1967 => --0x7af
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1968 => --0x7b0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1969 => --0x7b1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1970 => --0x7b2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1971 => --0x7b3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(24).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1973 => --0x7b5
          localRdData( 2 downto  0)  <=  reg_data(1973)( 2 downto  0);                            --Enable flag to select SCAs
        when 1974 => --0x7b6
          localRdData( 0)            <=  reg_data(1974)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(1974)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(1974)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(1974)( 3);                                      --Emulate a CRC error
        when 1977 => --0x7b9
          localRdData( 0)            <=  reg_data(1977)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 1984 => --0x7c0
          localRdData( 0)            <=  reg_data(1984)( 0);                                      --Reset TX datapath
        when 1985 => --0x7c1
          localRdData( 1)            <=  reg_data(1985)( 1);                                      --Reset RX datapath
        when 1986 => --0x7c2
          localRdData( 0)            <=  reg_data(1986)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1986)( 1);                                      --Request a read config to the GBTx (IC)
        when 1987 => --0x7c3
          localRdData(15 downto  0)  <=  reg_data(1987)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1987)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1988 => --0x7c4
          localRdData( 7 downto  0)  <=  reg_data(1988)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(24).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(24).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(1988)(31 downto 24);                            --I2C address of the GBTx
        when 1989 => --0x7c5
          localRdData( 0)            <=  reg_data(1989)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 1990 => --0x7c6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(24).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 1991 => --0x7c7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(24).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(24).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(24).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(24).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(24).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 1992 => --0x7c8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(24).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(24).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2000 => --0x7d0
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(24).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(24).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(24).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(24).CONFIG.polmux;                           --CSM polmux number
        when 2001 => --0x7d1
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(24).CONFIG.en;                               --CSM is en
        when 2002 => --0x7d2
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(24).CONFIG.legacy;                           --CSM is legacy
        when 2016 => --0x7e0
          localRdData( 0)            <=  reg_data(2016)( 0);                                      --Reset this Uplink
        when 2017 => --0x7e1
          localRdData( 0)            <=  Mon.CSM.CSM(25).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(25).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 2018 => --0x7e2
          localRdData( 0)            <=  reg_data(2018)( 0);                                      --Reset this Uplink
        when 2019 => --0x7e3
          localRdData( 0)            <=  Mon.CSM.CSM(25).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(25).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 2027 => --0x7eb
          localRdData( 0)            <=  reg_data(2027)( 0);                                      --Reset this Downlink
        when 2028 => --0x7ec
          localRdData( 0)            <=  Mon.CSM.CSM(25).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 2032 => --0x7f0
          localRdData( 0)            <=  reg_data(2032)( 0);                                      --Reset TX datapath
        when 2033 => --0x7f1
          localRdData( 1)            <=  reg_data(2033)( 1);                                      --Reset RX datapath
        when 2034 => --0x7f2
          localRdData( 0)            <=  reg_data(2034)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2034)( 1);                                      --Request a read config to the GBTx (IC)
        when 2035 => --0x7f3
          localRdData(15 downto  0)  <=  reg_data(2035)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2035)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2036 => --0x7f4
          localRdData( 7 downto  0)  <=  reg_data(2036)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(25).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(25).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2036)(31 downto 24);                            --I2C address of the GBTx
        when 2037 => --0x7f5
          localRdData( 0)            <=  reg_data(2037)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2038 => --0x7f6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(25).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 2039 => --0x7f7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(25).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(25).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(25).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(25).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(25).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 2040 => --0x7f8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(25).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(25).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2041 => --0x7f9
          localRdData( 7 downto  0)  <=  reg_data(2041)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(2041)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(2041)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(2041)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2042 => --0x7fa
          localRdData(31 downto  0)  <=  reg_data(2042)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 2043 => --0x7fb
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2044 => --0x7fc
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2045 => --0x7fd
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2046 => --0x7fe
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2047 => --0x7ff
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2048 => --0x800
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2049 => --0x801
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2050 => --0x802
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2051 => --0x803
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(25).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2053 => --0x805
          localRdData( 2 downto  0)  <=  reg_data(2053)( 2 downto  0);                            --Enable flag to select SCAs
        when 2054 => --0x806
          localRdData( 0)            <=  reg_data(2054)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(2054)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(2054)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(2054)( 3);                                      --Emulate a CRC error
        when 2057 => --0x809
          localRdData( 0)            <=  reg_data(2057)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 2064 => --0x810
          localRdData( 0)            <=  reg_data(2064)( 0);                                      --Reset TX datapath
        when 2065 => --0x811
          localRdData( 1)            <=  reg_data(2065)( 1);                                      --Reset RX datapath
        when 2066 => --0x812
          localRdData( 0)            <=  reg_data(2066)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2066)( 1);                                      --Request a read config to the GBTx (IC)
        when 2067 => --0x813
          localRdData(15 downto  0)  <=  reg_data(2067)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2067)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2068 => --0x814
          localRdData( 7 downto  0)  <=  reg_data(2068)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(25).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(25).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2068)(31 downto 24);                            --I2C address of the GBTx
        when 2069 => --0x815
          localRdData( 0)            <=  reg_data(2069)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2070 => --0x816
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(25).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 2071 => --0x817
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(25).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(25).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(25).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(25).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(25).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 2072 => --0x818
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(25).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(25).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2080 => --0x820
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(25).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(25).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(25).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(25).CONFIG.polmux;                           --CSM polmux number
        when 2081 => --0x821
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(25).CONFIG.en;                               --CSM is en
        when 2082 => --0x822
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(25).CONFIG.legacy;                           --CSM is legacy
        when 2096 => --0x830
          localRdData( 0)            <=  reg_data(2096)( 0);                                      --Reset this Uplink
        when 2097 => --0x831
          localRdData( 0)            <=  Mon.CSM.CSM(26).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(26).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 2098 => --0x832
          localRdData( 0)            <=  reg_data(2098)( 0);                                      --Reset this Uplink
        when 2099 => --0x833
          localRdData( 0)            <=  Mon.CSM.CSM(26).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(26).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 2107 => --0x83b
          localRdData( 0)            <=  reg_data(2107)( 0);                                      --Reset this Downlink
        when 2108 => --0x83c
          localRdData( 0)            <=  Mon.CSM.CSM(26).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 2112 => --0x840
          localRdData( 0)            <=  reg_data(2112)( 0);                                      --Reset TX datapath
        when 2113 => --0x841
          localRdData( 1)            <=  reg_data(2113)( 1);                                      --Reset RX datapath
        when 2114 => --0x842
          localRdData( 0)            <=  reg_data(2114)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2114)( 1);                                      --Request a read config to the GBTx (IC)
        when 2115 => --0x843
          localRdData(15 downto  0)  <=  reg_data(2115)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2115)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2116 => --0x844
          localRdData( 7 downto  0)  <=  reg_data(2116)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(26).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(26).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2116)(31 downto 24);                            --I2C address of the GBTx
        when 2117 => --0x845
          localRdData( 0)            <=  reg_data(2117)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2118 => --0x846
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(26).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 2119 => --0x847
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(26).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(26).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(26).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(26).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(26).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 2120 => --0x848
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(26).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(26).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2121 => --0x849
          localRdData( 7 downto  0)  <=  reg_data(2121)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(2121)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(2121)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(2121)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2122 => --0x84a
          localRdData(31 downto  0)  <=  reg_data(2122)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 2123 => --0x84b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2124 => --0x84c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2125 => --0x84d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2126 => --0x84e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2127 => --0x84f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2128 => --0x850
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2129 => --0x851
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2130 => --0x852
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2131 => --0x853
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(26).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2133 => --0x855
          localRdData( 2 downto  0)  <=  reg_data(2133)( 2 downto  0);                            --Enable flag to select SCAs
        when 2134 => --0x856
          localRdData( 0)            <=  reg_data(2134)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(2134)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(2134)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(2134)( 3);                                      --Emulate a CRC error
        when 2137 => --0x859
          localRdData( 0)            <=  reg_data(2137)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 2144 => --0x860
          localRdData( 0)            <=  reg_data(2144)( 0);                                      --Reset TX datapath
        when 2145 => --0x861
          localRdData( 1)            <=  reg_data(2145)( 1);                                      --Reset RX datapath
        when 2146 => --0x862
          localRdData( 0)            <=  reg_data(2146)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2146)( 1);                                      --Request a read config to the GBTx (IC)
        when 2147 => --0x863
          localRdData(15 downto  0)  <=  reg_data(2147)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2147)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2148 => --0x864
          localRdData( 7 downto  0)  <=  reg_data(2148)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(26).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(26).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2148)(31 downto 24);                            --I2C address of the GBTx
        when 2149 => --0x865
          localRdData( 0)            <=  reg_data(2149)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2150 => --0x866
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(26).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 2151 => --0x867
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(26).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(26).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(26).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(26).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(26).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 2152 => --0x868
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(26).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(26).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2160 => --0x870
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(26).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(26).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(26).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(26).CONFIG.polmux;                           --CSM polmux number
        when 2161 => --0x871
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(26).CONFIG.en;                               --CSM is en
        when 2162 => --0x872
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(26).CONFIG.legacy;                           --CSM is legacy
        when 2176 => --0x880
          localRdData( 0)            <=  reg_data(2176)( 0);                                      --Reset this Uplink
        when 2177 => --0x881
          localRdData( 0)            <=  Mon.CSM.CSM(27).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(27).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 2178 => --0x882
          localRdData( 0)            <=  reg_data(2178)( 0);                                      --Reset this Uplink
        when 2179 => --0x883
          localRdData( 0)            <=  Mon.CSM.CSM(27).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(27).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 2187 => --0x88b
          localRdData( 0)            <=  reg_data(2187)( 0);                                      --Reset this Downlink
        when 2188 => --0x88c
          localRdData( 0)            <=  Mon.CSM.CSM(27).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 2192 => --0x890
          localRdData( 0)            <=  reg_data(2192)( 0);                                      --Reset TX datapath
        when 2193 => --0x891
          localRdData( 1)            <=  reg_data(2193)( 1);                                      --Reset RX datapath
        when 2194 => --0x892
          localRdData( 0)            <=  reg_data(2194)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2194)( 1);                                      --Request a read config to the GBTx (IC)
        when 2195 => --0x893
          localRdData(15 downto  0)  <=  reg_data(2195)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2195)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2196 => --0x894
          localRdData( 7 downto  0)  <=  reg_data(2196)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(27).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(27).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2196)(31 downto 24);                            --I2C address of the GBTx
        when 2197 => --0x895
          localRdData( 0)            <=  reg_data(2197)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2198 => --0x896
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(27).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 2199 => --0x897
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(27).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(27).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(27).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(27).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(27).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 2200 => --0x898
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(27).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(27).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2201 => --0x899
          localRdData( 7 downto  0)  <=  reg_data(2201)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(2201)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(2201)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(2201)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2202 => --0x89a
          localRdData(31 downto  0)  <=  reg_data(2202)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 2203 => --0x89b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2204 => --0x89c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2205 => --0x89d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2206 => --0x89e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2207 => --0x89f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2208 => --0x8a0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2209 => --0x8a1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2210 => --0x8a2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2211 => --0x8a3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(27).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2213 => --0x8a5
          localRdData( 2 downto  0)  <=  reg_data(2213)( 2 downto  0);                            --Enable flag to select SCAs
        when 2214 => --0x8a6
          localRdData( 0)            <=  reg_data(2214)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(2214)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(2214)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(2214)( 3);                                      --Emulate a CRC error
        when 2217 => --0x8a9
          localRdData( 0)            <=  reg_data(2217)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 2224 => --0x8b0
          localRdData( 0)            <=  reg_data(2224)( 0);                                      --Reset TX datapath
        when 2225 => --0x8b1
          localRdData( 1)            <=  reg_data(2225)( 1);                                      --Reset RX datapath
        when 2226 => --0x8b2
          localRdData( 0)            <=  reg_data(2226)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2226)( 1);                                      --Request a read config to the GBTx (IC)
        when 2227 => --0x8b3
          localRdData(15 downto  0)  <=  reg_data(2227)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2227)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2228 => --0x8b4
          localRdData( 7 downto  0)  <=  reg_data(2228)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(27).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(27).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2228)(31 downto 24);                            --I2C address of the GBTx
        when 2229 => --0x8b5
          localRdData( 0)            <=  reg_data(2229)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2230 => --0x8b6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(27).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 2231 => --0x8b7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(27).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(27).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(27).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(27).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(27).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 2232 => --0x8b8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(27).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(27).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2240 => --0x8c0
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(27).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(27).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(27).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(27).CONFIG.polmux;                           --CSM polmux number
        when 2241 => --0x8c1
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(27).CONFIG.en;                               --CSM is en
        when 2242 => --0x8c2
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(27).CONFIG.legacy;                           --CSM is legacy
        when 2256 => --0x8d0
          localRdData( 0)            <=  reg_data(2256)( 0);                                      --Reset this Uplink
        when 2257 => --0x8d1
          localRdData( 0)            <=  Mon.CSM.CSM(28).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(28).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 2258 => --0x8d2
          localRdData( 0)            <=  reg_data(2258)( 0);                                      --Reset this Uplink
        when 2259 => --0x8d3
          localRdData( 0)            <=  Mon.CSM.CSM(28).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(28).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 2267 => --0x8db
          localRdData( 0)            <=  reg_data(2267)( 0);                                      --Reset this Downlink
        when 2268 => --0x8dc
          localRdData( 0)            <=  Mon.CSM.CSM(28).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 2272 => --0x8e0
          localRdData( 0)            <=  reg_data(2272)( 0);                                      --Reset TX datapath
        when 2273 => --0x8e1
          localRdData( 1)            <=  reg_data(2273)( 1);                                      --Reset RX datapath
        when 2274 => --0x8e2
          localRdData( 0)            <=  reg_data(2274)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2274)( 1);                                      --Request a read config to the GBTx (IC)
        when 2275 => --0x8e3
          localRdData(15 downto  0)  <=  reg_data(2275)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2275)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2276 => --0x8e4
          localRdData( 7 downto  0)  <=  reg_data(2276)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(28).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(28).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2276)(31 downto 24);                            --I2C address of the GBTx
        when 2277 => --0x8e5
          localRdData( 0)            <=  reg_data(2277)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2278 => --0x8e6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(28).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 2279 => --0x8e7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(28).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(28).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(28).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(28).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(28).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 2280 => --0x8e8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(28).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(28).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2281 => --0x8e9
          localRdData( 7 downto  0)  <=  reg_data(2281)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(2281)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(2281)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(2281)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2282 => --0x8ea
          localRdData(31 downto  0)  <=  reg_data(2282)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 2283 => --0x8eb
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2284 => --0x8ec
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2285 => --0x8ed
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2286 => --0x8ee
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2287 => --0x8ef
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2288 => --0x8f0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2289 => --0x8f1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2290 => --0x8f2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2291 => --0x8f3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(28).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2293 => --0x8f5
          localRdData( 2 downto  0)  <=  reg_data(2293)( 2 downto  0);                            --Enable flag to select SCAs
        when 2294 => --0x8f6
          localRdData( 0)            <=  reg_data(2294)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(2294)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(2294)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(2294)( 3);                                      --Emulate a CRC error
        when 2297 => --0x8f9
          localRdData( 0)            <=  reg_data(2297)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 2304 => --0x900
          localRdData( 0)            <=  reg_data(2304)( 0);                                      --Reset TX datapath
        when 2305 => --0x901
          localRdData( 1)            <=  reg_data(2305)( 1);                                      --Reset RX datapath
        when 2306 => --0x902
          localRdData( 0)            <=  reg_data(2306)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2306)( 1);                                      --Request a read config to the GBTx (IC)
        when 2307 => --0x903
          localRdData(15 downto  0)  <=  reg_data(2307)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2307)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2308 => --0x904
          localRdData( 7 downto  0)  <=  reg_data(2308)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(28).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(28).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2308)(31 downto 24);                            --I2C address of the GBTx
        when 2309 => --0x905
          localRdData( 0)            <=  reg_data(2309)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2310 => --0x906
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(28).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 2311 => --0x907
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(28).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(28).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(28).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(28).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(28).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 2312 => --0x908
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(28).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(28).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2320 => --0x910
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(28).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(28).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(28).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(28).CONFIG.polmux;                           --CSM polmux number
        when 2321 => --0x911
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(28).CONFIG.en;                               --CSM is en
        when 2322 => --0x912
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(28).CONFIG.legacy;                           --CSM is legacy
        when 2336 => --0x920
          localRdData( 0)            <=  reg_data(2336)( 0);                                      --Reset this Uplink
        when 2337 => --0x921
          localRdData( 0)            <=  Mon.CSM.CSM(29).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(29).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 2338 => --0x922
          localRdData( 0)            <=  reg_data(2338)( 0);                                      --Reset this Uplink
        when 2339 => --0x923
          localRdData( 0)            <=  Mon.CSM.CSM(29).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(29).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 2347 => --0x92b
          localRdData( 0)            <=  reg_data(2347)( 0);                                      --Reset this Downlink
        when 2348 => --0x92c
          localRdData( 0)            <=  Mon.CSM.CSM(29).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 2352 => --0x930
          localRdData( 0)            <=  reg_data(2352)( 0);                                      --Reset TX datapath
        when 2353 => --0x931
          localRdData( 1)            <=  reg_data(2353)( 1);                                      --Reset RX datapath
        when 2354 => --0x932
          localRdData( 0)            <=  reg_data(2354)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2354)( 1);                                      --Request a read config to the GBTx (IC)
        when 2355 => --0x933
          localRdData(15 downto  0)  <=  reg_data(2355)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2355)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2356 => --0x934
          localRdData( 7 downto  0)  <=  reg_data(2356)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(29).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(29).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2356)(31 downto 24);                            --I2C address of the GBTx
        when 2357 => --0x935
          localRdData( 0)            <=  reg_data(2357)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2358 => --0x936
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(29).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 2359 => --0x937
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(29).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(29).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(29).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(29).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(29).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 2360 => --0x938
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(29).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(29).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2361 => --0x939
          localRdData( 7 downto  0)  <=  reg_data(2361)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(2361)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(2361)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(2361)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2362 => --0x93a
          localRdData(31 downto  0)  <=  reg_data(2362)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 2363 => --0x93b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2364 => --0x93c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2365 => --0x93d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2366 => --0x93e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2367 => --0x93f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2368 => --0x940
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2369 => --0x941
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2370 => --0x942
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2371 => --0x943
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(29).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2373 => --0x945
          localRdData( 2 downto  0)  <=  reg_data(2373)( 2 downto  0);                            --Enable flag to select SCAs
        when 2374 => --0x946
          localRdData( 0)            <=  reg_data(2374)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(2374)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(2374)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(2374)( 3);                                      --Emulate a CRC error
        when 2377 => --0x949
          localRdData( 0)            <=  reg_data(2377)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 2384 => --0x950
          localRdData( 0)            <=  reg_data(2384)( 0);                                      --Reset TX datapath
        when 2385 => --0x951
          localRdData( 1)            <=  reg_data(2385)( 1);                                      --Reset RX datapath
        when 2386 => --0x952
          localRdData( 0)            <=  reg_data(2386)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2386)( 1);                                      --Request a read config to the GBTx (IC)
        when 2387 => --0x953
          localRdData(15 downto  0)  <=  reg_data(2387)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2387)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2388 => --0x954
          localRdData( 7 downto  0)  <=  reg_data(2388)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(29).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(29).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2388)(31 downto 24);                            --I2C address of the GBTx
        when 2389 => --0x955
          localRdData( 0)            <=  reg_data(2389)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2390 => --0x956
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(29).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 2391 => --0x957
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(29).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(29).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(29).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(29).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(29).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 2392 => --0x958
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(29).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(29).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2400 => --0x960
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(29).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(29).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(29).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(29).CONFIG.polmux;                           --CSM polmux number
        when 2401 => --0x961
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(29).CONFIG.en;                               --CSM is en
        when 2402 => --0x962
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(29).CONFIG.legacy;                           --CSM is legacy
        when 2416 => --0x970
          localRdData( 0)            <=  reg_data(2416)( 0);                                      --Reset this Uplink
        when 2417 => --0x971
          localRdData( 0)            <=  Mon.CSM.CSM(30).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(30).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 2418 => --0x972
          localRdData( 0)            <=  reg_data(2418)( 0);                                      --Reset this Uplink
        when 2419 => --0x973
          localRdData( 0)            <=  Mon.CSM.CSM(30).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(30).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 2427 => --0x97b
          localRdData( 0)            <=  reg_data(2427)( 0);                                      --Reset this Downlink
        when 2428 => --0x97c
          localRdData( 0)            <=  Mon.CSM.CSM(30).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 2432 => --0x980
          localRdData( 0)            <=  reg_data(2432)( 0);                                      --Reset TX datapath
        when 2433 => --0x981
          localRdData( 1)            <=  reg_data(2433)( 1);                                      --Reset RX datapath
        when 2434 => --0x982
          localRdData( 0)            <=  reg_data(2434)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2434)( 1);                                      --Request a read config to the GBTx (IC)
        when 2435 => --0x983
          localRdData(15 downto  0)  <=  reg_data(2435)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2435)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2436 => --0x984
          localRdData( 7 downto  0)  <=  reg_data(2436)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(30).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(30).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2436)(31 downto 24);                            --I2C address of the GBTx
        when 2437 => --0x985
          localRdData( 0)            <=  reg_data(2437)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2438 => --0x986
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(30).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 2439 => --0x987
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(30).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(30).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(30).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(30).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(30).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 2440 => --0x988
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(30).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(30).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2441 => --0x989
          localRdData( 7 downto  0)  <=  reg_data(2441)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(2441)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(2441)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(2441)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2442 => --0x98a
          localRdData(31 downto  0)  <=  reg_data(2442)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 2443 => --0x98b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2444 => --0x98c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2445 => --0x98d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2446 => --0x98e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2447 => --0x98f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2448 => --0x990
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2449 => --0x991
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2450 => --0x992
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2451 => --0x993
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(30).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2453 => --0x995
          localRdData( 2 downto  0)  <=  reg_data(2453)( 2 downto  0);                            --Enable flag to select SCAs
        when 2454 => --0x996
          localRdData( 0)            <=  reg_data(2454)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(2454)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(2454)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(2454)( 3);                                      --Emulate a CRC error
        when 2457 => --0x999
          localRdData( 0)            <=  reg_data(2457)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 2464 => --0x9a0
          localRdData( 0)            <=  reg_data(2464)( 0);                                      --Reset TX datapath
        when 2465 => --0x9a1
          localRdData( 1)            <=  reg_data(2465)( 1);                                      --Reset RX datapath
        when 2466 => --0x9a2
          localRdData( 0)            <=  reg_data(2466)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2466)( 1);                                      --Request a read config to the GBTx (IC)
        when 2467 => --0x9a3
          localRdData(15 downto  0)  <=  reg_data(2467)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2467)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2468 => --0x9a4
          localRdData( 7 downto  0)  <=  reg_data(2468)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(30).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(30).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2468)(31 downto 24);                            --I2C address of the GBTx
        when 2469 => --0x9a5
          localRdData( 0)            <=  reg_data(2469)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2470 => --0x9a6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(30).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 2471 => --0x9a7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(30).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(30).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(30).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(30).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(30).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 2472 => --0x9a8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(30).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(30).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2480 => --0x9b0
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(30).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(30).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(30).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(30).CONFIG.polmux;                           --CSM polmux number
        when 2481 => --0x9b1
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(30).CONFIG.en;                               --CSM is en
        when 2482 => --0x9b2
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(30).CONFIG.legacy;                           --CSM is legacy
        when 2496 => --0x9c0
          localRdData( 0)            <=  reg_data(2496)( 0);                                      --Reset this Uplink
        when 2497 => --0x9c1
          localRdData( 0)            <=  Mon.CSM.CSM(31).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(31).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 2498 => --0x9c2
          localRdData( 0)            <=  reg_data(2498)( 0);                                      --Reset this Uplink
        when 2499 => --0x9c3
          localRdData( 0)            <=  Mon.CSM.CSM(31).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(31).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 2507 => --0x9cb
          localRdData( 0)            <=  reg_data(2507)( 0);                                      --Reset this Downlink
        when 2508 => --0x9cc
          localRdData( 0)            <=  Mon.CSM.CSM(31).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 2512 => --0x9d0
          localRdData( 0)            <=  reg_data(2512)( 0);                                      --Reset TX datapath
        when 2513 => --0x9d1
          localRdData( 1)            <=  reg_data(2513)( 1);                                      --Reset RX datapath
        when 2514 => --0x9d2
          localRdData( 0)            <=  reg_data(2514)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2514)( 1);                                      --Request a read config to the GBTx (IC)
        when 2515 => --0x9d3
          localRdData(15 downto  0)  <=  reg_data(2515)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2515)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2516 => --0x9d4
          localRdData( 7 downto  0)  <=  reg_data(2516)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(31).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(31).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2516)(31 downto 24);                            --I2C address of the GBTx
        when 2517 => --0x9d5
          localRdData( 0)            <=  reg_data(2517)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2518 => --0x9d6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(31).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 2519 => --0x9d7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(31).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(31).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(31).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(31).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(31).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 2520 => --0x9d8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(31).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(31).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2521 => --0x9d9
          localRdData( 7 downto  0)  <=  reg_data(2521)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(2521)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(2521)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(2521)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2522 => --0x9da
          localRdData(31 downto  0)  <=  reg_data(2522)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 2523 => --0x9db
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2524 => --0x9dc
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2525 => --0x9dd
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2526 => --0x9de
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2527 => --0x9df
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2528 => --0x9e0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2529 => --0x9e1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2530 => --0x9e2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2531 => --0x9e3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(31).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2533 => --0x9e5
          localRdData( 2 downto  0)  <=  reg_data(2533)( 2 downto  0);                            --Enable flag to select SCAs
        when 2534 => --0x9e6
          localRdData( 0)            <=  reg_data(2534)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(2534)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(2534)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(2534)( 3);                                      --Emulate a CRC error
        when 2537 => --0x9e9
          localRdData( 0)            <=  reg_data(2537)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 2544 => --0x9f0
          localRdData( 0)            <=  reg_data(2544)( 0);                                      --Reset TX datapath
        when 2545 => --0x9f1
          localRdData( 1)            <=  reg_data(2545)( 1);                                      --Reset RX datapath
        when 2546 => --0x9f2
          localRdData( 0)            <=  reg_data(2546)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2546)( 1);                                      --Request a read config to the GBTx (IC)
        when 2547 => --0x9f3
          localRdData(15 downto  0)  <=  reg_data(2547)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2547)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2548 => --0x9f4
          localRdData( 7 downto  0)  <=  reg_data(2548)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(31).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(31).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2548)(31 downto 24);                            --I2C address of the GBTx
        when 2549 => --0x9f5
          localRdData( 0)            <=  reg_data(2549)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2550 => --0x9f6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(31).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 2551 => --0x9f7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(31).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(31).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(31).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(31).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(31).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 2552 => --0x9f8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(31).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(31).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2560 => --0xa00
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(31).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(31).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(31).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(31).CONFIG.polmux;                           --CSM polmux number
        when 2561 => --0xa01
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(31).CONFIG.en;                               --CSM is en
        when 2562 => --0xa02
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(31).CONFIG.legacy;                           --CSM is legacy
        when 2576 => --0xa10
          localRdData( 0)            <=  reg_data(2576)( 0);                                      --Reset this Uplink
        when 2577 => --0xa11
          localRdData( 0)            <=  Mon.CSM.CSM(32).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(32).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 2578 => --0xa12
          localRdData( 0)            <=  reg_data(2578)( 0);                                      --Reset this Uplink
        when 2579 => --0xa13
          localRdData( 0)            <=  Mon.CSM.CSM(32).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(32).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 2587 => --0xa1b
          localRdData( 0)            <=  reg_data(2587)( 0);                                      --Reset this Downlink
        when 2588 => --0xa1c
          localRdData( 0)            <=  Mon.CSM.CSM(32).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 2592 => --0xa20
          localRdData( 0)            <=  reg_data(2592)( 0);                                      --Reset TX datapath
        when 2593 => --0xa21
          localRdData( 1)            <=  reg_data(2593)( 1);                                      --Reset RX datapath
        when 2594 => --0xa22
          localRdData( 0)            <=  reg_data(2594)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2594)( 1);                                      --Request a read config to the GBTx (IC)
        when 2595 => --0xa23
          localRdData(15 downto  0)  <=  reg_data(2595)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2595)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2596 => --0xa24
          localRdData( 7 downto  0)  <=  reg_data(2596)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(32).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(32).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2596)(31 downto 24);                            --I2C address of the GBTx
        when 2597 => --0xa25
          localRdData( 0)            <=  reg_data(2597)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2598 => --0xa26
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(32).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 2599 => --0xa27
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(32).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(32).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(32).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(32).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(32).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 2600 => --0xa28
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(32).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(32).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2601 => --0xa29
          localRdData( 7 downto  0)  <=  reg_data(2601)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(2601)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(2601)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(2601)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2602 => --0xa2a
          localRdData(31 downto  0)  <=  reg_data(2602)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 2603 => --0xa2b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2604 => --0xa2c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2605 => --0xa2d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2606 => --0xa2e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2607 => --0xa2f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2608 => --0xa30
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2609 => --0xa31
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2610 => --0xa32
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2611 => --0xa33
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(32).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2613 => --0xa35
          localRdData( 2 downto  0)  <=  reg_data(2613)( 2 downto  0);                            --Enable flag to select SCAs
        when 2614 => --0xa36
          localRdData( 0)            <=  reg_data(2614)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(2614)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(2614)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(2614)( 3);                                      --Emulate a CRC error
        when 2617 => --0xa39
          localRdData( 0)            <=  reg_data(2617)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 2624 => --0xa40
          localRdData( 0)            <=  reg_data(2624)( 0);                                      --Reset TX datapath
        when 2625 => --0xa41
          localRdData( 1)            <=  reg_data(2625)( 1);                                      --Reset RX datapath
        when 2626 => --0xa42
          localRdData( 0)            <=  reg_data(2626)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2626)( 1);                                      --Request a read config to the GBTx (IC)
        when 2627 => --0xa43
          localRdData(15 downto  0)  <=  reg_data(2627)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2627)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2628 => --0xa44
          localRdData( 7 downto  0)  <=  reg_data(2628)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(32).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(32).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2628)(31 downto 24);                            --I2C address of the GBTx
        when 2629 => --0xa45
          localRdData( 0)            <=  reg_data(2629)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2630 => --0xa46
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(32).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 2631 => --0xa47
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(32).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(32).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(32).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(32).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(32).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 2632 => --0xa48
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(32).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(32).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2640 => --0xa50
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(32).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(32).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(32).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(32).CONFIG.polmux;                           --CSM polmux number
        when 2641 => --0xa51
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(32).CONFIG.en;                               --CSM is en
        when 2642 => --0xa52
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(32).CONFIG.legacy;                           --CSM is legacy
        when 2656 => --0xa60
          localRdData( 0)            <=  reg_data(2656)( 0);                                      --Reset this Uplink
        when 2657 => --0xa61
          localRdData( 0)            <=  Mon.CSM.CSM(33).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(33).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 2658 => --0xa62
          localRdData( 0)            <=  reg_data(2658)( 0);                                      --Reset this Uplink
        when 2659 => --0xa63
          localRdData( 0)            <=  Mon.CSM.CSM(33).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(33).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 2667 => --0xa6b
          localRdData( 0)            <=  reg_data(2667)( 0);                                      --Reset this Downlink
        when 2668 => --0xa6c
          localRdData( 0)            <=  Mon.CSM.CSM(33).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 2672 => --0xa70
          localRdData( 0)            <=  reg_data(2672)( 0);                                      --Reset TX datapath
        when 2673 => --0xa71
          localRdData( 1)            <=  reg_data(2673)( 1);                                      --Reset RX datapath
        when 2674 => --0xa72
          localRdData( 0)            <=  reg_data(2674)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2674)( 1);                                      --Request a read config to the GBTx (IC)
        when 2675 => --0xa73
          localRdData(15 downto  0)  <=  reg_data(2675)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2675)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2676 => --0xa74
          localRdData( 7 downto  0)  <=  reg_data(2676)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(33).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(33).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2676)(31 downto 24);                            --I2C address of the GBTx
        when 2677 => --0xa75
          localRdData( 0)            <=  reg_data(2677)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2678 => --0xa76
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(33).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 2679 => --0xa77
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(33).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(33).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(33).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(33).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(33).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 2680 => --0xa78
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(33).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(33).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2681 => --0xa79
          localRdData( 7 downto  0)  <=  reg_data(2681)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(2681)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(2681)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(2681)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2682 => --0xa7a
          localRdData(31 downto  0)  <=  reg_data(2682)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 2683 => --0xa7b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2684 => --0xa7c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2685 => --0xa7d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2686 => --0xa7e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2687 => --0xa7f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2688 => --0xa80
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2689 => --0xa81
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2690 => --0xa82
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2691 => --0xa83
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(33).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2693 => --0xa85
          localRdData( 2 downto  0)  <=  reg_data(2693)( 2 downto  0);                            --Enable flag to select SCAs
        when 2694 => --0xa86
          localRdData( 0)            <=  reg_data(2694)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(2694)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(2694)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(2694)( 3);                                      --Emulate a CRC error
        when 2697 => --0xa89
          localRdData( 0)            <=  reg_data(2697)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 2704 => --0xa90
          localRdData( 0)            <=  reg_data(2704)( 0);                                      --Reset TX datapath
        when 2705 => --0xa91
          localRdData( 1)            <=  reg_data(2705)( 1);                                      --Reset RX datapath
        when 2706 => --0xa92
          localRdData( 0)            <=  reg_data(2706)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2706)( 1);                                      --Request a read config to the GBTx (IC)
        when 2707 => --0xa93
          localRdData(15 downto  0)  <=  reg_data(2707)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2707)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2708 => --0xa94
          localRdData( 7 downto  0)  <=  reg_data(2708)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(33).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(33).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2708)(31 downto 24);                            --I2C address of the GBTx
        when 2709 => --0xa95
          localRdData( 0)            <=  reg_data(2709)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2710 => --0xa96
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(33).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 2711 => --0xa97
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(33).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(33).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(33).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(33).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(33).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 2712 => --0xa98
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(33).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(33).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2720 => --0xaa0
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(33).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(33).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(33).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(33).CONFIG.polmux;                           --CSM polmux number
        when 2721 => --0xaa1
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(33).CONFIG.en;                               --CSM is en
        when 2722 => --0xaa2
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(33).CONFIG.legacy;                           --CSM is legacy
        when 2736 => --0xab0
          localRdData( 0)            <=  reg_data(2736)( 0);                                      --Reset this Uplink
        when 2737 => --0xab1
          localRdData( 0)            <=  Mon.CSM.CSM(34).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(34).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 2738 => --0xab2
          localRdData( 0)            <=  reg_data(2738)( 0);                                      --Reset this Uplink
        when 2739 => --0xab3
          localRdData( 0)            <=  Mon.CSM.CSM(34).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(34).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 2747 => --0xabb
          localRdData( 0)            <=  reg_data(2747)( 0);                                      --Reset this Downlink
        when 2748 => --0xabc
          localRdData( 0)            <=  Mon.CSM.CSM(34).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 2752 => --0xac0
          localRdData( 0)            <=  reg_data(2752)( 0);                                      --Reset TX datapath
        when 2753 => --0xac1
          localRdData( 1)            <=  reg_data(2753)( 1);                                      --Reset RX datapath
        when 2754 => --0xac2
          localRdData( 0)            <=  reg_data(2754)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2754)( 1);                                      --Request a read config to the GBTx (IC)
        when 2755 => --0xac3
          localRdData(15 downto  0)  <=  reg_data(2755)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2755)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2756 => --0xac4
          localRdData( 7 downto  0)  <=  reg_data(2756)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(34).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(34).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2756)(31 downto 24);                            --I2C address of the GBTx
        when 2757 => --0xac5
          localRdData( 0)            <=  reg_data(2757)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2758 => --0xac6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(34).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 2759 => --0xac7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(34).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(34).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(34).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(34).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(34).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 2760 => --0xac8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(34).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(34).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2761 => --0xac9
          localRdData( 7 downto  0)  <=  reg_data(2761)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(2761)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(2761)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(2761)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2762 => --0xaca
          localRdData(31 downto  0)  <=  reg_data(2762)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 2763 => --0xacb
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2764 => --0xacc
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2765 => --0xacd
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2766 => --0xace
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2767 => --0xacf
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2768 => --0xad0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2769 => --0xad1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2770 => --0xad2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2771 => --0xad3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(34).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2773 => --0xad5
          localRdData( 2 downto  0)  <=  reg_data(2773)( 2 downto  0);                            --Enable flag to select SCAs
        when 2774 => --0xad6
          localRdData( 0)            <=  reg_data(2774)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(2774)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(2774)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(2774)( 3);                                      --Emulate a CRC error
        when 2777 => --0xad9
          localRdData( 0)            <=  reg_data(2777)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 2784 => --0xae0
          localRdData( 0)            <=  reg_data(2784)( 0);                                      --Reset TX datapath
        when 2785 => --0xae1
          localRdData( 1)            <=  reg_data(2785)( 1);                                      --Reset RX datapath
        when 2786 => --0xae2
          localRdData( 0)            <=  reg_data(2786)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2786)( 1);                                      --Request a read config to the GBTx (IC)
        when 2787 => --0xae3
          localRdData(15 downto  0)  <=  reg_data(2787)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2787)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2788 => --0xae4
          localRdData( 7 downto  0)  <=  reg_data(2788)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(34).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(34).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2788)(31 downto 24);                            --I2C address of the GBTx
        when 2789 => --0xae5
          localRdData( 0)            <=  reg_data(2789)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2790 => --0xae6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(34).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 2791 => --0xae7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(34).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(34).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(34).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(34).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(34).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 2792 => --0xae8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(34).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(34).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2800 => --0xaf0
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(34).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(34).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(34).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(34).CONFIG.polmux;                           --CSM polmux number
        when 2801 => --0xaf1
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(34).CONFIG.en;                               --CSM is en
        when 2802 => --0xaf2
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(34).CONFIG.legacy;                           --CSM is legacy
        when 2816 => --0xb00
          localRdData( 0)            <=  reg_data(2816)( 0);                                      --Reset this Uplink
        when 2817 => --0xb01
          localRdData( 0)            <=  Mon.CSM.CSM(35).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(35).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 2818 => --0xb02
          localRdData( 0)            <=  reg_data(2818)( 0);                                      --Reset this Uplink
        when 2819 => --0xb03
          localRdData( 0)            <=  Mon.CSM.CSM(35).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(35).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 2827 => --0xb0b
          localRdData( 0)            <=  reg_data(2827)( 0);                                      --Reset this Downlink
        when 2828 => --0xb0c
          localRdData( 0)            <=  Mon.CSM.CSM(35).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 2832 => --0xb10
          localRdData( 0)            <=  reg_data(2832)( 0);                                      --Reset TX datapath
        when 2833 => --0xb11
          localRdData( 1)            <=  reg_data(2833)( 1);                                      --Reset RX datapath
        when 2834 => --0xb12
          localRdData( 0)            <=  reg_data(2834)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2834)( 1);                                      --Request a read config to the GBTx (IC)
        when 2835 => --0xb13
          localRdData(15 downto  0)  <=  reg_data(2835)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2835)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2836 => --0xb14
          localRdData( 7 downto  0)  <=  reg_data(2836)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(35).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(35).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2836)(31 downto 24);                            --I2C address of the GBTx
        when 2837 => --0xb15
          localRdData( 0)            <=  reg_data(2837)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2838 => --0xb16
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(35).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 2839 => --0xb17
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(35).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(35).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(35).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(35).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(35).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 2840 => --0xb18
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(35).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(35).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2841 => --0xb19
          localRdData( 7 downto  0)  <=  reg_data(2841)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(2841)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(2841)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(2841)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2842 => --0xb1a
          localRdData(31 downto  0)  <=  reg_data(2842)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 2843 => --0xb1b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2844 => --0xb1c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2845 => --0xb1d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2846 => --0xb1e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2847 => --0xb1f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2848 => --0xb20
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2849 => --0xb21
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 2850 => --0xb22
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2851 => --0xb23
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(35).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 2853 => --0xb25
          localRdData( 2 downto  0)  <=  reg_data(2853)( 2 downto  0);                            --Enable flag to select SCAs
        when 2854 => --0xb26
          localRdData( 0)            <=  reg_data(2854)( 0);                                      --Send a reset command to the enabled SCAs
          localRdData( 1)            <=  reg_data(2854)( 1);                                      --Send a connect command to the enabled SCAs
          localRdData( 2)            <=  reg_data(2854)( 2);                                      --Send the command set in input to the enabled SCAs
          localRdData( 3)            <=  reg_data(2854)( 3);                                      --Emulate a CRC error
        when 2857 => --0xb29
          localRdData( 0)            <=  reg_data(2857)( 0);                                      --0 = lpgbt v0; 1 = lpgbt v1
        when 2864 => --0xb30
          localRdData( 0)            <=  reg_data(2864)( 0);                                      --Reset TX datapath
        when 2865 => --0xb31
          localRdData( 1)            <=  reg_data(2865)( 1);                                      --Reset RX datapath
        when 2866 => --0xb32
          localRdData( 0)            <=  reg_data(2866)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(2866)( 1);                                      --Request a read config to the GBTx (IC)
        when 2867 => --0xb33
          localRdData(15 downto  0)  <=  reg_data(2867)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(2867)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 2868 => --0xb34
          localRdData( 7 downto  0)  <=  reg_data(2868)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(35).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(35).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
          localRdData(31 downto 24)  <=  reg_data(2868)(31 downto 24);                            --I2C address of the GBTx
        when 2869 => --0xb35
          localRdData( 0)            <=  reg_data(2869)( 0);                                      --Request a write operation into the internal FIFO (Data to GBTx)
        when 2870 => --0xb36
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(35).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 2871 => --0xb37
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(35).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(35).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(35).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(35).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(35).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 2872 => --0xb38
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(35).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(35).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 2880 => --0xb40
          localRdData( 5 downto  0)  <=  Mon.CSM.CSM(35).CONFIG.master_link_id;                   --CSM master_link_id
          localRdData(12 downto  7)  <=  Mon.CSM.CSM(35).CONFIG.servant_link_id;                  --CSM servant_link_id
          localRdData(15 downto 13)  <=  Mon.CSM.CSM(35).CONFIG.station;                          --CSM station
          localRdData(21 downto 16)  <=  Mon.CSM.CSM(35).CONFIG.polmux;                           --CSM polmux number
        when 2881 => --0xb41
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(35).CONFIG.en;                               --CSM is en
        when 2882 => --0xb42
          localRdData(19 downto  0)  <=  Mon.CSM.CSM(35).CONFIG.legacy;                           --CSM is legacy
        when 3072 => --0xc00
          localRdData(31 downto  0)  <=  Mon.SL.RX_COMMA_LOCK;                                    --rx comma detection lock status
        when 3088 => --0xc10
          localRdData(31 downto  0)  <=  Mon.SL.RX_PACKET_LOCKED;                                 --rx packet former lock status
        when 3104 => --0xc20
          localRdData(31 downto  0)  <=  reg_data(3104)(31 downto  0);                            --tx test pattern enable
        when 3120 => --0xc30
          localRdData( 0)            <=  reg_data(3120)( 0);                                      --Resets all comma detection
          localRdData( 1)            <=  reg_data(3120)( 1);                                      --Resets all packet former
          localRdData( 2)            <=  reg_data(3120)( 2);                                      --Resets all rx_test_pattern counter
        when 3136 => --0xc40
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(0).ERROR_COUNTER;                         --error_counter_out from rx_test_pattern_checker
        when 3140 => --0xc44
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(0).WORD_COUNTER_0;                        --word_counter_out from rx_test_pattern_checker
        when 3144 => --0xc48
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(0).WORD_COUNTER_1;                        --word_counter_out from rx_test_pattern_checker
        when 3152 => --0xc50
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(1).ERROR_COUNTER;                         --error_counter_out from rx_test_pattern_checker
        when 3156 => --0xc54
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(1).WORD_COUNTER_0;                        --word_counter_out from rx_test_pattern_checker
        when 3160 => --0xc58
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(1).WORD_COUNTER_1;                        --word_counter_out from rx_test_pattern_checker
        when 3168 => --0xc60
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(2).ERROR_COUNTER;                         --error_counter_out from rx_test_pattern_checker
        when 3172 => --0xc64
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(2).WORD_COUNTER_0;                        --word_counter_out from rx_test_pattern_checker
        when 3176 => --0xc68
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(2).WORD_COUNTER_1;                        --word_counter_out from rx_test_pattern_checker
        when 3184 => --0xc70
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(3).ERROR_COUNTER;                         --error_counter_out from rx_test_pattern_checker
        when 3188 => --0xc74
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(3).WORD_COUNTER_0;                        --word_counter_out from rx_test_pattern_checker
        when 3192 => --0xc78
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(3).WORD_COUNTER_1;                        --word_counter_out from rx_test_pattern_checker
        when 3200 => --0xc80
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(4).ERROR_COUNTER;                         --error_counter_out from rx_test_pattern_checker
        when 3204 => --0xc84
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(4).WORD_COUNTER_0;                        --word_counter_out from rx_test_pattern_checker
        when 3208 => --0xc88
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(4).WORD_COUNTER_1;                        --word_counter_out from rx_test_pattern_checker
        when 3216 => --0xc90
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(5).ERROR_COUNTER;                         --error_counter_out from rx_test_pattern_checker
        when 3220 => --0xc94
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(5).WORD_COUNTER_0;                        --word_counter_out from rx_test_pattern_checker
        when 3224 => --0xc98
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(5).WORD_COUNTER_1;                        --word_counter_out from rx_test_pattern_checker
        when 3232 => --0xca0
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(6).ERROR_COUNTER;                         --error_counter_out from rx_test_pattern_checker
        when 3236 => --0xca4
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(6).WORD_COUNTER_0;                        --word_counter_out from rx_test_pattern_checker
        when 3240 => --0xca8
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(6).WORD_COUNTER_1;                        --word_counter_out from rx_test_pattern_checker
        when 3248 => --0xcb0
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(7).ERROR_COUNTER;                         --error_counter_out from rx_test_pattern_checker
        when 3252 => --0xcb4
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(7).WORD_COUNTER_0;                        --word_counter_out from rx_test_pattern_checker
        when 3256 => --0xcb8
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(7).WORD_COUNTER_1;                        --word_counter_out from rx_test_pattern_checker
        when 3264 => --0xcc0
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(8).ERROR_COUNTER;                         --error_counter_out from rx_test_pattern_checker
        when 3268 => --0xcc4
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(8).WORD_COUNTER_0;                        --word_counter_out from rx_test_pattern_checker
        when 3272 => --0xcc8
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(8).WORD_COUNTER_1;                        --word_counter_out from rx_test_pattern_checker
        when 3280 => --0xcd0
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(9).ERROR_COUNTER;                         --error_counter_out from rx_test_pattern_checker
        when 3284 => --0xcd4
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(9).WORD_COUNTER_0;                        --word_counter_out from rx_test_pattern_checker
        when 3288 => --0xcd8
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(9).WORD_COUNTER_1;                        --word_counter_out from rx_test_pattern_checker
        when 3296 => --0xce0
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(10).ERROR_COUNTER;                        --error_counter_out from rx_test_pattern_checker
        when 3300 => --0xce4
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(10).WORD_COUNTER_0;                       --word_counter_out from rx_test_pattern_checker
        when 3304 => --0xce8
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(10).WORD_COUNTER_1;                       --word_counter_out from rx_test_pattern_checker
        when 3312 => --0xcf0
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(11).ERROR_COUNTER;                        --error_counter_out from rx_test_pattern_checker
        when 3316 => --0xcf4
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(11).WORD_COUNTER_0;                       --word_counter_out from rx_test_pattern_checker
        when 3320 => --0xcf8
          localRdData(31 downto  0)  <=  Mon.SL.SL_TEST(11).WORD_COUNTER_1;                       --word_counter_out from rx_test_pattern_checker


          when others =>
            regRdAck <= '0';
            localRdData <= x"00000000";
        end case;
      end if;
    end if;
  end process reads;


  -------------------------------------------------------------------------------
  -- Record write decoding
  -------------------------------------------------------------------------------
  -------------------------------------------------------------------------------

  -- Register mapping to ctrl structures
  Ctrl.RESET_DOWNLINKS                                <=  reg_data( 0)( 0);                 
  Ctrl.RESET_UPLINKS                                  <=  reg_data( 1)( 0);                 
  Ctrl.RESET_COUNTERS                                 <=  reg_data( 2)( 0);                 
  Ctrl.CSM.CSM(0).LPGBT.UPLINK.UPLINK(0).RESET        <=  reg_data(16)( 0);                 
  Ctrl.CSM.CSM(0).LPGBT.UPLINK.UPLINK(1).RESET        <=  reg_data(18)( 0);                 
  Ctrl.CSM.CSM(0).LPGBT.DOWNLINK.RESET                <=  reg_data(27)( 0);                 
  Ctrl.CSM.CSM(0).SC.MASTER.TX_RESET                  <=  reg_data(32)( 0);                 
  Ctrl.CSM.CSM(0).SC.MASTER.RX_RESET                  <=  reg_data(33)( 1);                 
  Ctrl.CSM.CSM(0).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(34)( 0);                 
  Ctrl.CSM.CSM(0).SC.MASTER.IC.TX_START_READ          <=  reg_data(34)( 1);                 
  Ctrl.CSM.CSM(0).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(35)(15 downto  0);       
  Ctrl.CSM.CSM(0).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(35)(31 downto 16);       
  Ctrl.CSM.CSM(0).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(36)( 7 downto  0);       
  Ctrl.CSM.CSM(0).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(36)(31 downto 24);       
  Ctrl.CSM.CSM(0).SC.MASTER.IC.TX_WR                  <=  reg_data(37)( 0);                 
  Ctrl.CSM.CSM(0).SC.MASTER.TX_CMD                    <=  reg_data(41)( 7 downto  0);       
  Ctrl.CSM.CSM(0).SC.MASTER.TX_ADDRESS                <=  reg_data(41)(15 downto  8);       
  Ctrl.CSM.CSM(0).SC.MASTER.TX_TRANSID                <=  reg_data(41)(23 downto 16);       
  Ctrl.CSM.CSM(0).SC.MASTER.TX_CHANNEL                <=  reg_data(41)(31 downto 24);       
  Ctrl.CSM.CSM(0).SC.MASTER.TX_DATA                   <=  reg_data(42)(31 downto  0);       
  Ctrl.CSM.CSM(0).SC.MASTER.SCA_ENABLE                <=  reg_data(53)( 2 downto  0);       
  Ctrl.CSM.CSM(0).SC.MASTER.START_RESET               <=  reg_data(54)( 0);                 
  Ctrl.CSM.CSM(0).SC.MASTER.START_CONNECT             <=  reg_data(54)( 1);                 
  Ctrl.CSM.CSM(0).SC.MASTER.START_COMMAND             <=  reg_data(54)( 2);                 
  Ctrl.CSM.CSM(0).SC.MASTER.INJ_CRC_ERR               <=  reg_data(54)( 3);                 
  Ctrl.CSM.CSM(0).SC.FRAME_FORMAT                     <=  reg_data(57)( 0);                 
  Ctrl.CSM.CSM(0).SC.SLAVE.TX_RESET                   <=  reg_data(64)( 0);                 
  Ctrl.CSM.CSM(0).SC.SLAVE.RX_RESET                   <=  reg_data(65)( 1);                 
  Ctrl.CSM.CSM(0).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(66)( 0);                 
  Ctrl.CSM.CSM(0).SC.SLAVE.IC.TX_START_READ           <=  reg_data(66)( 1);                 
  Ctrl.CSM.CSM(0).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(67)(15 downto  0);       
  Ctrl.CSM.CSM(0).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(67)(31 downto 16);       
  Ctrl.CSM.CSM(0).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(68)( 7 downto  0);       
  Ctrl.CSM.CSM(0).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(68)(31 downto 24);       
  Ctrl.CSM.CSM(0).SC.SLAVE.IC.TX_WR                   <=  reg_data(69)( 0);                 
  Ctrl.CSM.CSM(1).LPGBT.UPLINK.UPLINK(0).RESET        <=  reg_data(96)( 0);                 
  Ctrl.CSM.CSM(1).LPGBT.UPLINK.UPLINK(1).RESET        <=  reg_data(98)( 0);                 
  Ctrl.CSM.CSM(1).LPGBT.DOWNLINK.RESET                <=  reg_data(107)( 0);                
  Ctrl.CSM.CSM(1).SC.MASTER.TX_RESET                  <=  reg_data(112)( 0);                
  Ctrl.CSM.CSM(1).SC.MASTER.RX_RESET                  <=  reg_data(113)( 1);                
  Ctrl.CSM.CSM(1).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(114)( 0);                
  Ctrl.CSM.CSM(1).SC.MASTER.IC.TX_START_READ          <=  reg_data(114)( 1);                
  Ctrl.CSM.CSM(1).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(115)(15 downto  0);      
  Ctrl.CSM.CSM(1).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(115)(31 downto 16);      
  Ctrl.CSM.CSM(1).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(116)( 7 downto  0);      
  Ctrl.CSM.CSM(1).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(116)(31 downto 24);      
  Ctrl.CSM.CSM(1).SC.MASTER.IC.TX_WR                  <=  reg_data(117)( 0);                
  Ctrl.CSM.CSM(1).SC.MASTER.TX_CMD                    <=  reg_data(121)( 7 downto  0);      
  Ctrl.CSM.CSM(1).SC.MASTER.TX_ADDRESS                <=  reg_data(121)(15 downto  8);      
  Ctrl.CSM.CSM(1).SC.MASTER.TX_TRANSID                <=  reg_data(121)(23 downto 16);      
  Ctrl.CSM.CSM(1).SC.MASTER.TX_CHANNEL                <=  reg_data(121)(31 downto 24);      
  Ctrl.CSM.CSM(1).SC.MASTER.TX_DATA                   <=  reg_data(122)(31 downto  0);      
  Ctrl.CSM.CSM(1).SC.MASTER.SCA_ENABLE                <=  reg_data(133)( 2 downto  0);      
  Ctrl.CSM.CSM(1).SC.MASTER.START_RESET               <=  reg_data(134)( 0);                
  Ctrl.CSM.CSM(1).SC.MASTER.START_CONNECT             <=  reg_data(134)( 1);                
  Ctrl.CSM.CSM(1).SC.MASTER.START_COMMAND             <=  reg_data(134)( 2);                
  Ctrl.CSM.CSM(1).SC.MASTER.INJ_CRC_ERR               <=  reg_data(134)( 3);                
  Ctrl.CSM.CSM(1).SC.FRAME_FORMAT                     <=  reg_data(137)( 0);                
  Ctrl.CSM.CSM(1).SC.SLAVE.TX_RESET                   <=  reg_data(144)( 0);                
  Ctrl.CSM.CSM(1).SC.SLAVE.RX_RESET                   <=  reg_data(145)( 1);                
  Ctrl.CSM.CSM(1).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(146)( 0);                
  Ctrl.CSM.CSM(1).SC.SLAVE.IC.TX_START_READ           <=  reg_data(146)( 1);                
  Ctrl.CSM.CSM(1).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(147)(15 downto  0);      
  Ctrl.CSM.CSM(1).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(147)(31 downto 16);      
  Ctrl.CSM.CSM(1).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(148)( 7 downto  0);      
  Ctrl.CSM.CSM(1).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(148)(31 downto 24);      
  Ctrl.CSM.CSM(1).SC.SLAVE.IC.TX_WR                   <=  reg_data(149)( 0);                
  Ctrl.CSM.CSM(2).LPGBT.UPLINK.UPLINK(0).RESET        <=  reg_data(176)( 0);                
  Ctrl.CSM.CSM(2).LPGBT.UPLINK.UPLINK(1).RESET        <=  reg_data(178)( 0);                
  Ctrl.CSM.CSM(2).LPGBT.DOWNLINK.RESET                <=  reg_data(187)( 0);                
  Ctrl.CSM.CSM(2).SC.MASTER.TX_RESET                  <=  reg_data(192)( 0);                
  Ctrl.CSM.CSM(2).SC.MASTER.RX_RESET                  <=  reg_data(193)( 1);                
  Ctrl.CSM.CSM(2).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(194)( 0);                
  Ctrl.CSM.CSM(2).SC.MASTER.IC.TX_START_READ          <=  reg_data(194)( 1);                
  Ctrl.CSM.CSM(2).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(195)(15 downto  0);      
  Ctrl.CSM.CSM(2).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(195)(31 downto 16);      
  Ctrl.CSM.CSM(2).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(196)( 7 downto  0);      
  Ctrl.CSM.CSM(2).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(196)(31 downto 24);      
  Ctrl.CSM.CSM(2).SC.MASTER.IC.TX_WR                  <=  reg_data(197)( 0);                
  Ctrl.CSM.CSM(2).SC.MASTER.TX_CMD                    <=  reg_data(201)( 7 downto  0);      
  Ctrl.CSM.CSM(2).SC.MASTER.TX_ADDRESS                <=  reg_data(201)(15 downto  8);      
  Ctrl.CSM.CSM(2).SC.MASTER.TX_TRANSID                <=  reg_data(201)(23 downto 16);      
  Ctrl.CSM.CSM(2).SC.MASTER.TX_CHANNEL                <=  reg_data(201)(31 downto 24);      
  Ctrl.CSM.CSM(2).SC.MASTER.TX_DATA                   <=  reg_data(202)(31 downto  0);      
  Ctrl.CSM.CSM(2).SC.MASTER.SCA_ENABLE                <=  reg_data(213)( 2 downto  0);      
  Ctrl.CSM.CSM(2).SC.MASTER.START_RESET               <=  reg_data(214)( 0);                
  Ctrl.CSM.CSM(2).SC.MASTER.START_CONNECT             <=  reg_data(214)( 1);                
  Ctrl.CSM.CSM(2).SC.MASTER.START_COMMAND             <=  reg_data(214)( 2);                
  Ctrl.CSM.CSM(2).SC.MASTER.INJ_CRC_ERR               <=  reg_data(214)( 3);                
  Ctrl.CSM.CSM(2).SC.FRAME_FORMAT                     <=  reg_data(217)( 0);                
  Ctrl.CSM.CSM(2).SC.SLAVE.TX_RESET                   <=  reg_data(224)( 0);                
  Ctrl.CSM.CSM(2).SC.SLAVE.RX_RESET                   <=  reg_data(225)( 1);                
  Ctrl.CSM.CSM(2).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(226)( 0);                
  Ctrl.CSM.CSM(2).SC.SLAVE.IC.TX_START_READ           <=  reg_data(226)( 1);                
  Ctrl.CSM.CSM(2).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(227)(15 downto  0);      
  Ctrl.CSM.CSM(2).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(227)(31 downto 16);      
  Ctrl.CSM.CSM(2).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(228)( 7 downto  0);      
  Ctrl.CSM.CSM(2).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(228)(31 downto 24);      
  Ctrl.CSM.CSM(2).SC.SLAVE.IC.TX_WR                   <=  reg_data(229)( 0);                
  Ctrl.CSM.CSM(3).LPGBT.UPLINK.UPLINK(0).RESET        <=  reg_data(256)( 0);                
  Ctrl.CSM.CSM(3).LPGBT.UPLINK.UPLINK(1).RESET        <=  reg_data(258)( 0);                
  Ctrl.CSM.CSM(3).LPGBT.DOWNLINK.RESET                <=  reg_data(267)( 0);                
  Ctrl.CSM.CSM(3).SC.MASTER.TX_RESET                  <=  reg_data(272)( 0);                
  Ctrl.CSM.CSM(3).SC.MASTER.RX_RESET                  <=  reg_data(273)( 1);                
  Ctrl.CSM.CSM(3).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(274)( 0);                
  Ctrl.CSM.CSM(3).SC.MASTER.IC.TX_START_READ          <=  reg_data(274)( 1);                
  Ctrl.CSM.CSM(3).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(275)(15 downto  0);      
  Ctrl.CSM.CSM(3).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(275)(31 downto 16);      
  Ctrl.CSM.CSM(3).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(276)( 7 downto  0);      
  Ctrl.CSM.CSM(3).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(276)(31 downto 24);      
  Ctrl.CSM.CSM(3).SC.MASTER.IC.TX_WR                  <=  reg_data(277)( 0);                
  Ctrl.CSM.CSM(3).SC.MASTER.TX_CMD                    <=  reg_data(281)( 7 downto  0);      
  Ctrl.CSM.CSM(3).SC.MASTER.TX_ADDRESS                <=  reg_data(281)(15 downto  8);      
  Ctrl.CSM.CSM(3).SC.MASTER.TX_TRANSID                <=  reg_data(281)(23 downto 16);      
  Ctrl.CSM.CSM(3).SC.MASTER.TX_CHANNEL                <=  reg_data(281)(31 downto 24);      
  Ctrl.CSM.CSM(3).SC.MASTER.TX_DATA                   <=  reg_data(282)(31 downto  0);      
  Ctrl.CSM.CSM(3).SC.MASTER.SCA_ENABLE                <=  reg_data(293)( 2 downto  0);      
  Ctrl.CSM.CSM(3).SC.MASTER.START_RESET               <=  reg_data(294)( 0);                
  Ctrl.CSM.CSM(3).SC.MASTER.START_CONNECT             <=  reg_data(294)( 1);                
  Ctrl.CSM.CSM(3).SC.MASTER.START_COMMAND             <=  reg_data(294)( 2);                
  Ctrl.CSM.CSM(3).SC.MASTER.INJ_CRC_ERR               <=  reg_data(294)( 3);                
  Ctrl.CSM.CSM(3).SC.FRAME_FORMAT                     <=  reg_data(297)( 0);                
  Ctrl.CSM.CSM(3).SC.SLAVE.TX_RESET                   <=  reg_data(304)( 0);                
  Ctrl.CSM.CSM(3).SC.SLAVE.RX_RESET                   <=  reg_data(305)( 1);                
  Ctrl.CSM.CSM(3).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(306)( 0);                
  Ctrl.CSM.CSM(3).SC.SLAVE.IC.TX_START_READ           <=  reg_data(306)( 1);                
  Ctrl.CSM.CSM(3).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(307)(15 downto  0);      
  Ctrl.CSM.CSM(3).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(307)(31 downto 16);      
  Ctrl.CSM.CSM(3).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(308)( 7 downto  0);      
  Ctrl.CSM.CSM(3).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(308)(31 downto 24);      
  Ctrl.CSM.CSM(3).SC.SLAVE.IC.TX_WR                   <=  reg_data(309)( 0);                
  Ctrl.CSM.CSM(4).LPGBT.UPLINK.UPLINK(0).RESET        <=  reg_data(336)( 0);                
  Ctrl.CSM.CSM(4).LPGBT.UPLINK.UPLINK(1).RESET        <=  reg_data(338)( 0);                
  Ctrl.CSM.CSM(4).LPGBT.DOWNLINK.RESET                <=  reg_data(347)( 0);                
  Ctrl.CSM.CSM(4).SC.MASTER.TX_RESET                  <=  reg_data(352)( 0);                
  Ctrl.CSM.CSM(4).SC.MASTER.RX_RESET                  <=  reg_data(353)( 1);                
  Ctrl.CSM.CSM(4).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(354)( 0);                
  Ctrl.CSM.CSM(4).SC.MASTER.IC.TX_START_READ          <=  reg_data(354)( 1);                
  Ctrl.CSM.CSM(4).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(355)(15 downto  0);      
  Ctrl.CSM.CSM(4).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(355)(31 downto 16);      
  Ctrl.CSM.CSM(4).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(356)( 7 downto  0);      
  Ctrl.CSM.CSM(4).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(356)(31 downto 24);      
  Ctrl.CSM.CSM(4).SC.MASTER.IC.TX_WR                  <=  reg_data(357)( 0);                
  Ctrl.CSM.CSM(4).SC.MASTER.TX_CMD                    <=  reg_data(361)( 7 downto  0);      
  Ctrl.CSM.CSM(4).SC.MASTER.TX_ADDRESS                <=  reg_data(361)(15 downto  8);      
  Ctrl.CSM.CSM(4).SC.MASTER.TX_TRANSID                <=  reg_data(361)(23 downto 16);      
  Ctrl.CSM.CSM(4).SC.MASTER.TX_CHANNEL                <=  reg_data(361)(31 downto 24);      
  Ctrl.CSM.CSM(4).SC.MASTER.TX_DATA                   <=  reg_data(362)(31 downto  0);      
  Ctrl.CSM.CSM(4).SC.MASTER.SCA_ENABLE                <=  reg_data(373)( 2 downto  0);      
  Ctrl.CSM.CSM(4).SC.MASTER.START_RESET               <=  reg_data(374)( 0);                
  Ctrl.CSM.CSM(4).SC.MASTER.START_CONNECT             <=  reg_data(374)( 1);                
  Ctrl.CSM.CSM(4).SC.MASTER.START_COMMAND             <=  reg_data(374)( 2);                
  Ctrl.CSM.CSM(4).SC.MASTER.INJ_CRC_ERR               <=  reg_data(374)( 3);                
  Ctrl.CSM.CSM(4).SC.FRAME_FORMAT                     <=  reg_data(377)( 0);                
  Ctrl.CSM.CSM(4).SC.SLAVE.TX_RESET                   <=  reg_data(384)( 0);                
  Ctrl.CSM.CSM(4).SC.SLAVE.RX_RESET                   <=  reg_data(385)( 1);                
  Ctrl.CSM.CSM(4).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(386)( 0);                
  Ctrl.CSM.CSM(4).SC.SLAVE.IC.TX_START_READ           <=  reg_data(386)( 1);                
  Ctrl.CSM.CSM(4).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(387)(15 downto  0);      
  Ctrl.CSM.CSM(4).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(387)(31 downto 16);      
  Ctrl.CSM.CSM(4).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(388)( 7 downto  0);      
  Ctrl.CSM.CSM(4).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(388)(31 downto 24);      
  Ctrl.CSM.CSM(4).SC.SLAVE.IC.TX_WR                   <=  reg_data(389)( 0);                
  Ctrl.CSM.CSM(5).LPGBT.UPLINK.UPLINK(0).RESET        <=  reg_data(416)( 0);                
  Ctrl.CSM.CSM(5).LPGBT.UPLINK.UPLINK(1).RESET        <=  reg_data(418)( 0);                
  Ctrl.CSM.CSM(5).LPGBT.DOWNLINK.RESET                <=  reg_data(427)( 0);                
  Ctrl.CSM.CSM(5).SC.MASTER.TX_RESET                  <=  reg_data(432)( 0);                
  Ctrl.CSM.CSM(5).SC.MASTER.RX_RESET                  <=  reg_data(433)( 1);                
  Ctrl.CSM.CSM(5).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(434)( 0);                
  Ctrl.CSM.CSM(5).SC.MASTER.IC.TX_START_READ          <=  reg_data(434)( 1);                
  Ctrl.CSM.CSM(5).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(435)(15 downto  0);      
  Ctrl.CSM.CSM(5).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(435)(31 downto 16);      
  Ctrl.CSM.CSM(5).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(436)( 7 downto  0);      
  Ctrl.CSM.CSM(5).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(436)(31 downto 24);      
  Ctrl.CSM.CSM(5).SC.MASTER.IC.TX_WR                  <=  reg_data(437)( 0);                
  Ctrl.CSM.CSM(5).SC.MASTER.TX_CMD                    <=  reg_data(441)( 7 downto  0);      
  Ctrl.CSM.CSM(5).SC.MASTER.TX_ADDRESS                <=  reg_data(441)(15 downto  8);      
  Ctrl.CSM.CSM(5).SC.MASTER.TX_TRANSID                <=  reg_data(441)(23 downto 16);      
  Ctrl.CSM.CSM(5).SC.MASTER.TX_CHANNEL                <=  reg_data(441)(31 downto 24);      
  Ctrl.CSM.CSM(5).SC.MASTER.TX_DATA                   <=  reg_data(442)(31 downto  0);      
  Ctrl.CSM.CSM(5).SC.MASTER.SCA_ENABLE                <=  reg_data(453)( 2 downto  0);      
  Ctrl.CSM.CSM(5).SC.MASTER.START_RESET               <=  reg_data(454)( 0);                
  Ctrl.CSM.CSM(5).SC.MASTER.START_CONNECT             <=  reg_data(454)( 1);                
  Ctrl.CSM.CSM(5).SC.MASTER.START_COMMAND             <=  reg_data(454)( 2);                
  Ctrl.CSM.CSM(5).SC.MASTER.INJ_CRC_ERR               <=  reg_data(454)( 3);                
  Ctrl.CSM.CSM(5).SC.FRAME_FORMAT                     <=  reg_data(457)( 0);                
  Ctrl.CSM.CSM(5).SC.SLAVE.TX_RESET                   <=  reg_data(464)( 0);                
  Ctrl.CSM.CSM(5).SC.SLAVE.RX_RESET                   <=  reg_data(465)( 1);                
  Ctrl.CSM.CSM(5).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(466)( 0);                
  Ctrl.CSM.CSM(5).SC.SLAVE.IC.TX_START_READ           <=  reg_data(466)( 1);                
  Ctrl.CSM.CSM(5).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(467)(15 downto  0);      
  Ctrl.CSM.CSM(5).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(467)(31 downto 16);      
  Ctrl.CSM.CSM(5).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(468)( 7 downto  0);      
  Ctrl.CSM.CSM(5).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(468)(31 downto 24);      
  Ctrl.CSM.CSM(5).SC.SLAVE.IC.TX_WR                   <=  reg_data(469)( 0);                
  Ctrl.CSM.CSM(6).LPGBT.UPLINK.UPLINK(0).RESET        <=  reg_data(496)( 0);                
  Ctrl.CSM.CSM(6).LPGBT.UPLINK.UPLINK(1).RESET        <=  reg_data(498)( 0);                
  Ctrl.CSM.CSM(6).LPGBT.DOWNLINK.RESET                <=  reg_data(507)( 0);                
  Ctrl.CSM.CSM(6).SC.MASTER.TX_RESET                  <=  reg_data(512)( 0);                
  Ctrl.CSM.CSM(6).SC.MASTER.RX_RESET                  <=  reg_data(513)( 1);                
  Ctrl.CSM.CSM(6).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(514)( 0);                
  Ctrl.CSM.CSM(6).SC.MASTER.IC.TX_START_READ          <=  reg_data(514)( 1);                
  Ctrl.CSM.CSM(6).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(515)(15 downto  0);      
  Ctrl.CSM.CSM(6).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(515)(31 downto 16);      
  Ctrl.CSM.CSM(6).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(516)( 7 downto  0);      
  Ctrl.CSM.CSM(6).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(516)(31 downto 24);      
  Ctrl.CSM.CSM(6).SC.MASTER.IC.TX_WR                  <=  reg_data(517)( 0);                
  Ctrl.CSM.CSM(6).SC.MASTER.TX_CMD                    <=  reg_data(521)( 7 downto  0);      
  Ctrl.CSM.CSM(6).SC.MASTER.TX_ADDRESS                <=  reg_data(521)(15 downto  8);      
  Ctrl.CSM.CSM(6).SC.MASTER.TX_TRANSID                <=  reg_data(521)(23 downto 16);      
  Ctrl.CSM.CSM(6).SC.MASTER.TX_CHANNEL                <=  reg_data(521)(31 downto 24);      
  Ctrl.CSM.CSM(6).SC.MASTER.TX_DATA                   <=  reg_data(522)(31 downto  0);      
  Ctrl.CSM.CSM(6).SC.MASTER.SCA_ENABLE                <=  reg_data(533)( 2 downto  0);      
  Ctrl.CSM.CSM(6).SC.MASTER.START_RESET               <=  reg_data(534)( 0);                
  Ctrl.CSM.CSM(6).SC.MASTER.START_CONNECT             <=  reg_data(534)( 1);                
  Ctrl.CSM.CSM(6).SC.MASTER.START_COMMAND             <=  reg_data(534)( 2);                
  Ctrl.CSM.CSM(6).SC.MASTER.INJ_CRC_ERR               <=  reg_data(534)( 3);                
  Ctrl.CSM.CSM(6).SC.FRAME_FORMAT                     <=  reg_data(537)( 0);                
  Ctrl.CSM.CSM(6).SC.SLAVE.TX_RESET                   <=  reg_data(544)( 0);                
  Ctrl.CSM.CSM(6).SC.SLAVE.RX_RESET                   <=  reg_data(545)( 1);                
  Ctrl.CSM.CSM(6).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(546)( 0);                
  Ctrl.CSM.CSM(6).SC.SLAVE.IC.TX_START_READ           <=  reg_data(546)( 1);                
  Ctrl.CSM.CSM(6).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(547)(15 downto  0);      
  Ctrl.CSM.CSM(6).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(547)(31 downto 16);      
  Ctrl.CSM.CSM(6).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(548)( 7 downto  0);      
  Ctrl.CSM.CSM(6).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(548)(31 downto 24);      
  Ctrl.CSM.CSM(6).SC.SLAVE.IC.TX_WR                   <=  reg_data(549)( 0);                
  Ctrl.CSM.CSM(7).LPGBT.UPLINK.UPLINK(0).RESET        <=  reg_data(576)( 0);                
  Ctrl.CSM.CSM(7).LPGBT.UPLINK.UPLINK(1).RESET        <=  reg_data(578)( 0);                
  Ctrl.CSM.CSM(7).LPGBT.DOWNLINK.RESET                <=  reg_data(587)( 0);                
  Ctrl.CSM.CSM(7).SC.MASTER.TX_RESET                  <=  reg_data(592)( 0);                
  Ctrl.CSM.CSM(7).SC.MASTER.RX_RESET                  <=  reg_data(593)( 1);                
  Ctrl.CSM.CSM(7).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(594)( 0);                
  Ctrl.CSM.CSM(7).SC.MASTER.IC.TX_START_READ          <=  reg_data(594)( 1);                
  Ctrl.CSM.CSM(7).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(595)(15 downto  0);      
  Ctrl.CSM.CSM(7).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(595)(31 downto 16);      
  Ctrl.CSM.CSM(7).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(596)( 7 downto  0);      
  Ctrl.CSM.CSM(7).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(596)(31 downto 24);      
  Ctrl.CSM.CSM(7).SC.MASTER.IC.TX_WR                  <=  reg_data(597)( 0);                
  Ctrl.CSM.CSM(7).SC.MASTER.TX_CMD                    <=  reg_data(601)( 7 downto  0);      
  Ctrl.CSM.CSM(7).SC.MASTER.TX_ADDRESS                <=  reg_data(601)(15 downto  8);      
  Ctrl.CSM.CSM(7).SC.MASTER.TX_TRANSID                <=  reg_data(601)(23 downto 16);      
  Ctrl.CSM.CSM(7).SC.MASTER.TX_CHANNEL                <=  reg_data(601)(31 downto 24);      
  Ctrl.CSM.CSM(7).SC.MASTER.TX_DATA                   <=  reg_data(602)(31 downto  0);      
  Ctrl.CSM.CSM(7).SC.MASTER.SCA_ENABLE                <=  reg_data(613)( 2 downto  0);      
  Ctrl.CSM.CSM(7).SC.MASTER.START_RESET               <=  reg_data(614)( 0);                
  Ctrl.CSM.CSM(7).SC.MASTER.START_CONNECT             <=  reg_data(614)( 1);                
  Ctrl.CSM.CSM(7).SC.MASTER.START_COMMAND             <=  reg_data(614)( 2);                
  Ctrl.CSM.CSM(7).SC.MASTER.INJ_CRC_ERR               <=  reg_data(614)( 3);                
  Ctrl.CSM.CSM(7).SC.FRAME_FORMAT                     <=  reg_data(617)( 0);                
  Ctrl.CSM.CSM(7).SC.SLAVE.TX_RESET                   <=  reg_data(624)( 0);                
  Ctrl.CSM.CSM(7).SC.SLAVE.RX_RESET                   <=  reg_data(625)( 1);                
  Ctrl.CSM.CSM(7).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(626)( 0);                
  Ctrl.CSM.CSM(7).SC.SLAVE.IC.TX_START_READ           <=  reg_data(626)( 1);                
  Ctrl.CSM.CSM(7).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(627)(15 downto  0);      
  Ctrl.CSM.CSM(7).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(627)(31 downto 16);      
  Ctrl.CSM.CSM(7).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(628)( 7 downto  0);      
  Ctrl.CSM.CSM(7).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(628)(31 downto 24);      
  Ctrl.CSM.CSM(7).SC.SLAVE.IC.TX_WR                   <=  reg_data(629)( 0);                
  Ctrl.CSM.CSM(8).LPGBT.UPLINK.UPLINK(0).RESET        <=  reg_data(656)( 0);                
  Ctrl.CSM.CSM(8).LPGBT.UPLINK.UPLINK(1).RESET        <=  reg_data(658)( 0);                
  Ctrl.CSM.CSM(8).LPGBT.DOWNLINK.RESET                <=  reg_data(667)( 0);                
  Ctrl.CSM.CSM(8).SC.MASTER.TX_RESET                  <=  reg_data(672)( 0);                
  Ctrl.CSM.CSM(8).SC.MASTER.RX_RESET                  <=  reg_data(673)( 1);                
  Ctrl.CSM.CSM(8).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(674)( 0);                
  Ctrl.CSM.CSM(8).SC.MASTER.IC.TX_START_READ          <=  reg_data(674)( 1);                
  Ctrl.CSM.CSM(8).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(675)(15 downto  0);      
  Ctrl.CSM.CSM(8).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(675)(31 downto 16);      
  Ctrl.CSM.CSM(8).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(676)( 7 downto  0);      
  Ctrl.CSM.CSM(8).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(676)(31 downto 24);      
  Ctrl.CSM.CSM(8).SC.MASTER.IC.TX_WR                  <=  reg_data(677)( 0);                
  Ctrl.CSM.CSM(8).SC.MASTER.TX_CMD                    <=  reg_data(681)( 7 downto  0);      
  Ctrl.CSM.CSM(8).SC.MASTER.TX_ADDRESS                <=  reg_data(681)(15 downto  8);      
  Ctrl.CSM.CSM(8).SC.MASTER.TX_TRANSID                <=  reg_data(681)(23 downto 16);      
  Ctrl.CSM.CSM(8).SC.MASTER.TX_CHANNEL                <=  reg_data(681)(31 downto 24);      
  Ctrl.CSM.CSM(8).SC.MASTER.TX_DATA                   <=  reg_data(682)(31 downto  0);      
  Ctrl.CSM.CSM(8).SC.MASTER.SCA_ENABLE                <=  reg_data(693)( 2 downto  0);      
  Ctrl.CSM.CSM(8).SC.MASTER.START_RESET               <=  reg_data(694)( 0);                
  Ctrl.CSM.CSM(8).SC.MASTER.START_CONNECT             <=  reg_data(694)( 1);                
  Ctrl.CSM.CSM(8).SC.MASTER.START_COMMAND             <=  reg_data(694)( 2);                
  Ctrl.CSM.CSM(8).SC.MASTER.INJ_CRC_ERR               <=  reg_data(694)( 3);                
  Ctrl.CSM.CSM(8).SC.FRAME_FORMAT                     <=  reg_data(697)( 0);                
  Ctrl.CSM.CSM(8).SC.SLAVE.TX_RESET                   <=  reg_data(704)( 0);                
  Ctrl.CSM.CSM(8).SC.SLAVE.RX_RESET                   <=  reg_data(705)( 1);                
  Ctrl.CSM.CSM(8).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(706)( 0);                
  Ctrl.CSM.CSM(8).SC.SLAVE.IC.TX_START_READ           <=  reg_data(706)( 1);                
  Ctrl.CSM.CSM(8).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(707)(15 downto  0);      
  Ctrl.CSM.CSM(8).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(707)(31 downto 16);      
  Ctrl.CSM.CSM(8).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(708)( 7 downto  0);      
  Ctrl.CSM.CSM(8).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(708)(31 downto 24);      
  Ctrl.CSM.CSM(8).SC.SLAVE.IC.TX_WR                   <=  reg_data(709)( 0);                
  Ctrl.CSM.CSM(9).LPGBT.UPLINK.UPLINK(0).RESET        <=  reg_data(736)( 0);                
  Ctrl.CSM.CSM(9).LPGBT.UPLINK.UPLINK(1).RESET        <=  reg_data(738)( 0);                
  Ctrl.CSM.CSM(9).LPGBT.DOWNLINK.RESET                <=  reg_data(747)( 0);                
  Ctrl.CSM.CSM(9).SC.MASTER.TX_RESET                  <=  reg_data(752)( 0);                
  Ctrl.CSM.CSM(9).SC.MASTER.RX_RESET                  <=  reg_data(753)( 1);                
  Ctrl.CSM.CSM(9).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(754)( 0);                
  Ctrl.CSM.CSM(9).SC.MASTER.IC.TX_START_READ          <=  reg_data(754)( 1);                
  Ctrl.CSM.CSM(9).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(755)(15 downto  0);      
  Ctrl.CSM.CSM(9).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(755)(31 downto 16);      
  Ctrl.CSM.CSM(9).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(756)( 7 downto  0);      
  Ctrl.CSM.CSM(9).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(756)(31 downto 24);      
  Ctrl.CSM.CSM(9).SC.MASTER.IC.TX_WR                  <=  reg_data(757)( 0);                
  Ctrl.CSM.CSM(9).SC.MASTER.TX_CMD                    <=  reg_data(761)( 7 downto  0);      
  Ctrl.CSM.CSM(9).SC.MASTER.TX_ADDRESS                <=  reg_data(761)(15 downto  8);      
  Ctrl.CSM.CSM(9).SC.MASTER.TX_TRANSID                <=  reg_data(761)(23 downto 16);      
  Ctrl.CSM.CSM(9).SC.MASTER.TX_CHANNEL                <=  reg_data(761)(31 downto 24);      
  Ctrl.CSM.CSM(9).SC.MASTER.TX_DATA                   <=  reg_data(762)(31 downto  0);      
  Ctrl.CSM.CSM(9).SC.MASTER.SCA_ENABLE                <=  reg_data(773)( 2 downto  0);      
  Ctrl.CSM.CSM(9).SC.MASTER.START_RESET               <=  reg_data(774)( 0);                
  Ctrl.CSM.CSM(9).SC.MASTER.START_CONNECT             <=  reg_data(774)( 1);                
  Ctrl.CSM.CSM(9).SC.MASTER.START_COMMAND             <=  reg_data(774)( 2);                
  Ctrl.CSM.CSM(9).SC.MASTER.INJ_CRC_ERR               <=  reg_data(774)( 3);                
  Ctrl.CSM.CSM(9).SC.FRAME_FORMAT                     <=  reg_data(777)( 0);                
  Ctrl.CSM.CSM(9).SC.SLAVE.TX_RESET                   <=  reg_data(784)( 0);                
  Ctrl.CSM.CSM(9).SC.SLAVE.RX_RESET                   <=  reg_data(785)( 1);                
  Ctrl.CSM.CSM(9).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(786)( 0);                
  Ctrl.CSM.CSM(9).SC.SLAVE.IC.TX_START_READ           <=  reg_data(786)( 1);                
  Ctrl.CSM.CSM(9).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(787)(15 downto  0);      
  Ctrl.CSM.CSM(9).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(787)(31 downto 16);      
  Ctrl.CSM.CSM(9).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(788)( 7 downto  0);      
  Ctrl.CSM.CSM(9).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(788)(31 downto 24);      
  Ctrl.CSM.CSM(9).SC.SLAVE.IC.TX_WR                   <=  reg_data(789)( 0);                
  Ctrl.CSM.CSM(10).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(816)( 0);                
  Ctrl.CSM.CSM(10).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(818)( 0);                
  Ctrl.CSM.CSM(10).LPGBT.DOWNLINK.RESET               <=  reg_data(827)( 0);                
  Ctrl.CSM.CSM(10).SC.MASTER.TX_RESET                 <=  reg_data(832)( 0);                
  Ctrl.CSM.CSM(10).SC.MASTER.RX_RESET                 <=  reg_data(833)( 1);                
  Ctrl.CSM.CSM(10).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(834)( 0);                
  Ctrl.CSM.CSM(10).SC.MASTER.IC.TX_START_READ         <=  reg_data(834)( 1);                
  Ctrl.CSM.CSM(10).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(835)(15 downto  0);      
  Ctrl.CSM.CSM(10).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(835)(31 downto 16);      
  Ctrl.CSM.CSM(10).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(836)( 7 downto  0);      
  Ctrl.CSM.CSM(10).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(836)(31 downto 24);      
  Ctrl.CSM.CSM(10).SC.MASTER.IC.TX_WR                 <=  reg_data(837)( 0);                
  Ctrl.CSM.CSM(10).SC.MASTER.TX_CMD                   <=  reg_data(841)( 7 downto  0);      
  Ctrl.CSM.CSM(10).SC.MASTER.TX_ADDRESS               <=  reg_data(841)(15 downto  8);      
  Ctrl.CSM.CSM(10).SC.MASTER.TX_TRANSID               <=  reg_data(841)(23 downto 16);      
  Ctrl.CSM.CSM(10).SC.MASTER.TX_CHANNEL               <=  reg_data(841)(31 downto 24);      
  Ctrl.CSM.CSM(10).SC.MASTER.TX_DATA                  <=  reg_data(842)(31 downto  0);      
  Ctrl.CSM.CSM(10).SC.MASTER.SCA_ENABLE               <=  reg_data(853)( 2 downto  0);      
  Ctrl.CSM.CSM(10).SC.MASTER.START_RESET              <=  reg_data(854)( 0);                
  Ctrl.CSM.CSM(10).SC.MASTER.START_CONNECT            <=  reg_data(854)( 1);                
  Ctrl.CSM.CSM(10).SC.MASTER.START_COMMAND            <=  reg_data(854)( 2);                
  Ctrl.CSM.CSM(10).SC.MASTER.INJ_CRC_ERR              <=  reg_data(854)( 3);                
  Ctrl.CSM.CSM(10).SC.FRAME_FORMAT                    <=  reg_data(857)( 0);                
  Ctrl.CSM.CSM(10).SC.SLAVE.TX_RESET                  <=  reg_data(864)( 0);                
  Ctrl.CSM.CSM(10).SC.SLAVE.RX_RESET                  <=  reg_data(865)( 1);                
  Ctrl.CSM.CSM(10).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(866)( 0);                
  Ctrl.CSM.CSM(10).SC.SLAVE.IC.TX_START_READ          <=  reg_data(866)( 1);                
  Ctrl.CSM.CSM(10).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(867)(15 downto  0);      
  Ctrl.CSM.CSM(10).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(867)(31 downto 16);      
  Ctrl.CSM.CSM(10).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(868)( 7 downto  0);      
  Ctrl.CSM.CSM(10).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(868)(31 downto 24);      
  Ctrl.CSM.CSM(10).SC.SLAVE.IC.TX_WR                  <=  reg_data(869)( 0);                
  Ctrl.CSM.CSM(11).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(896)( 0);                
  Ctrl.CSM.CSM(11).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(898)( 0);                
  Ctrl.CSM.CSM(11).LPGBT.DOWNLINK.RESET               <=  reg_data(907)( 0);                
  Ctrl.CSM.CSM(11).SC.MASTER.TX_RESET                 <=  reg_data(912)( 0);                
  Ctrl.CSM.CSM(11).SC.MASTER.RX_RESET                 <=  reg_data(913)( 1);                
  Ctrl.CSM.CSM(11).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(914)( 0);                
  Ctrl.CSM.CSM(11).SC.MASTER.IC.TX_START_READ         <=  reg_data(914)( 1);                
  Ctrl.CSM.CSM(11).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(915)(15 downto  0);      
  Ctrl.CSM.CSM(11).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(915)(31 downto 16);      
  Ctrl.CSM.CSM(11).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(916)( 7 downto  0);      
  Ctrl.CSM.CSM(11).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(916)(31 downto 24);      
  Ctrl.CSM.CSM(11).SC.MASTER.IC.TX_WR                 <=  reg_data(917)( 0);                
  Ctrl.CSM.CSM(11).SC.MASTER.TX_CMD                   <=  reg_data(921)( 7 downto  0);      
  Ctrl.CSM.CSM(11).SC.MASTER.TX_ADDRESS               <=  reg_data(921)(15 downto  8);      
  Ctrl.CSM.CSM(11).SC.MASTER.TX_TRANSID               <=  reg_data(921)(23 downto 16);      
  Ctrl.CSM.CSM(11).SC.MASTER.TX_CHANNEL               <=  reg_data(921)(31 downto 24);      
  Ctrl.CSM.CSM(11).SC.MASTER.TX_DATA                  <=  reg_data(922)(31 downto  0);      
  Ctrl.CSM.CSM(11).SC.MASTER.SCA_ENABLE               <=  reg_data(933)( 2 downto  0);      
  Ctrl.CSM.CSM(11).SC.MASTER.START_RESET              <=  reg_data(934)( 0);                
  Ctrl.CSM.CSM(11).SC.MASTER.START_CONNECT            <=  reg_data(934)( 1);                
  Ctrl.CSM.CSM(11).SC.MASTER.START_COMMAND            <=  reg_data(934)( 2);                
  Ctrl.CSM.CSM(11).SC.MASTER.INJ_CRC_ERR              <=  reg_data(934)( 3);                
  Ctrl.CSM.CSM(11).SC.FRAME_FORMAT                    <=  reg_data(937)( 0);                
  Ctrl.CSM.CSM(11).SC.SLAVE.TX_RESET                  <=  reg_data(944)( 0);                
  Ctrl.CSM.CSM(11).SC.SLAVE.RX_RESET                  <=  reg_data(945)( 1);                
  Ctrl.CSM.CSM(11).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(946)( 0);                
  Ctrl.CSM.CSM(11).SC.SLAVE.IC.TX_START_READ          <=  reg_data(946)( 1);                
  Ctrl.CSM.CSM(11).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(947)(15 downto  0);      
  Ctrl.CSM.CSM(11).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(947)(31 downto 16);      
  Ctrl.CSM.CSM(11).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(948)( 7 downto  0);      
  Ctrl.CSM.CSM(11).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(948)(31 downto 24);      
  Ctrl.CSM.CSM(11).SC.SLAVE.IC.TX_WR                  <=  reg_data(949)( 0);                
  Ctrl.CSM.CSM(12).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(976)( 0);                
  Ctrl.CSM.CSM(12).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(978)( 0);                
  Ctrl.CSM.CSM(12).LPGBT.DOWNLINK.RESET               <=  reg_data(987)( 0);                
  Ctrl.CSM.CSM(12).SC.MASTER.TX_RESET                 <=  reg_data(992)( 0);                
  Ctrl.CSM.CSM(12).SC.MASTER.RX_RESET                 <=  reg_data(993)( 1);                
  Ctrl.CSM.CSM(12).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(994)( 0);                
  Ctrl.CSM.CSM(12).SC.MASTER.IC.TX_START_READ         <=  reg_data(994)( 1);                
  Ctrl.CSM.CSM(12).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(995)(15 downto  0);      
  Ctrl.CSM.CSM(12).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(995)(31 downto 16);      
  Ctrl.CSM.CSM(12).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(996)( 7 downto  0);      
  Ctrl.CSM.CSM(12).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(996)(31 downto 24);      
  Ctrl.CSM.CSM(12).SC.MASTER.IC.TX_WR                 <=  reg_data(997)( 0);                
  Ctrl.CSM.CSM(12).SC.MASTER.TX_CMD                   <=  reg_data(1001)( 7 downto  0);     
  Ctrl.CSM.CSM(12).SC.MASTER.TX_ADDRESS               <=  reg_data(1001)(15 downto  8);     
  Ctrl.CSM.CSM(12).SC.MASTER.TX_TRANSID               <=  reg_data(1001)(23 downto 16);     
  Ctrl.CSM.CSM(12).SC.MASTER.TX_CHANNEL               <=  reg_data(1001)(31 downto 24);     
  Ctrl.CSM.CSM(12).SC.MASTER.TX_DATA                  <=  reg_data(1002)(31 downto  0);     
  Ctrl.CSM.CSM(12).SC.MASTER.SCA_ENABLE               <=  reg_data(1013)( 2 downto  0);     
  Ctrl.CSM.CSM(12).SC.MASTER.START_RESET              <=  reg_data(1014)( 0);               
  Ctrl.CSM.CSM(12).SC.MASTER.START_CONNECT            <=  reg_data(1014)( 1);               
  Ctrl.CSM.CSM(12).SC.MASTER.START_COMMAND            <=  reg_data(1014)( 2);               
  Ctrl.CSM.CSM(12).SC.MASTER.INJ_CRC_ERR              <=  reg_data(1014)( 3);               
  Ctrl.CSM.CSM(12).SC.FRAME_FORMAT                    <=  reg_data(1017)( 0);               
  Ctrl.CSM.CSM(12).SC.SLAVE.TX_RESET                  <=  reg_data(1024)( 0);               
  Ctrl.CSM.CSM(12).SC.SLAVE.RX_RESET                  <=  reg_data(1025)( 1);               
  Ctrl.CSM.CSM(12).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(1026)( 0);               
  Ctrl.CSM.CSM(12).SC.SLAVE.IC.TX_START_READ          <=  reg_data(1026)( 1);               
  Ctrl.CSM.CSM(12).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(1027)(15 downto  0);     
  Ctrl.CSM.CSM(12).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(1027)(31 downto 16);     
  Ctrl.CSM.CSM(12).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(1028)( 7 downto  0);     
  Ctrl.CSM.CSM(12).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(1028)(31 downto 24);     
  Ctrl.CSM.CSM(12).SC.SLAVE.IC.TX_WR                  <=  reg_data(1029)( 0);               
  Ctrl.CSM.CSM(13).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(1056)( 0);               
  Ctrl.CSM.CSM(13).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(1058)( 0);               
  Ctrl.CSM.CSM(13).LPGBT.DOWNLINK.RESET               <=  reg_data(1067)( 0);               
  Ctrl.CSM.CSM(13).SC.MASTER.TX_RESET                 <=  reg_data(1072)( 0);               
  Ctrl.CSM.CSM(13).SC.MASTER.RX_RESET                 <=  reg_data(1073)( 1);               
  Ctrl.CSM.CSM(13).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(1074)( 0);               
  Ctrl.CSM.CSM(13).SC.MASTER.IC.TX_START_READ         <=  reg_data(1074)( 1);               
  Ctrl.CSM.CSM(13).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(1075)(15 downto  0);     
  Ctrl.CSM.CSM(13).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(1075)(31 downto 16);     
  Ctrl.CSM.CSM(13).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(1076)( 7 downto  0);     
  Ctrl.CSM.CSM(13).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(1076)(31 downto 24);     
  Ctrl.CSM.CSM(13).SC.MASTER.IC.TX_WR                 <=  reg_data(1077)( 0);               
  Ctrl.CSM.CSM(13).SC.MASTER.TX_CMD                   <=  reg_data(1081)( 7 downto  0);     
  Ctrl.CSM.CSM(13).SC.MASTER.TX_ADDRESS               <=  reg_data(1081)(15 downto  8);     
  Ctrl.CSM.CSM(13).SC.MASTER.TX_TRANSID               <=  reg_data(1081)(23 downto 16);     
  Ctrl.CSM.CSM(13).SC.MASTER.TX_CHANNEL               <=  reg_data(1081)(31 downto 24);     
  Ctrl.CSM.CSM(13).SC.MASTER.TX_DATA                  <=  reg_data(1082)(31 downto  0);     
  Ctrl.CSM.CSM(13).SC.MASTER.SCA_ENABLE               <=  reg_data(1093)( 2 downto  0);     
  Ctrl.CSM.CSM(13).SC.MASTER.START_RESET              <=  reg_data(1094)( 0);               
  Ctrl.CSM.CSM(13).SC.MASTER.START_CONNECT            <=  reg_data(1094)( 1);               
  Ctrl.CSM.CSM(13).SC.MASTER.START_COMMAND            <=  reg_data(1094)( 2);               
  Ctrl.CSM.CSM(13).SC.MASTER.INJ_CRC_ERR              <=  reg_data(1094)( 3);               
  Ctrl.CSM.CSM(13).SC.FRAME_FORMAT                    <=  reg_data(1097)( 0);               
  Ctrl.CSM.CSM(13).SC.SLAVE.TX_RESET                  <=  reg_data(1104)( 0);               
  Ctrl.CSM.CSM(13).SC.SLAVE.RX_RESET                  <=  reg_data(1105)( 1);               
  Ctrl.CSM.CSM(13).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(1106)( 0);               
  Ctrl.CSM.CSM(13).SC.SLAVE.IC.TX_START_READ          <=  reg_data(1106)( 1);               
  Ctrl.CSM.CSM(13).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(1107)(15 downto  0);     
  Ctrl.CSM.CSM(13).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(1107)(31 downto 16);     
  Ctrl.CSM.CSM(13).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(1108)( 7 downto  0);     
  Ctrl.CSM.CSM(13).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(1108)(31 downto 24);     
  Ctrl.CSM.CSM(13).SC.SLAVE.IC.TX_WR                  <=  reg_data(1109)( 0);               
  Ctrl.CSM.CSM(14).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(1136)( 0);               
  Ctrl.CSM.CSM(14).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(1138)( 0);               
  Ctrl.CSM.CSM(14).LPGBT.DOWNLINK.RESET               <=  reg_data(1147)( 0);               
  Ctrl.CSM.CSM(14).SC.MASTER.TX_RESET                 <=  reg_data(1152)( 0);               
  Ctrl.CSM.CSM(14).SC.MASTER.RX_RESET                 <=  reg_data(1153)( 1);               
  Ctrl.CSM.CSM(14).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(1154)( 0);               
  Ctrl.CSM.CSM(14).SC.MASTER.IC.TX_START_READ         <=  reg_data(1154)( 1);               
  Ctrl.CSM.CSM(14).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(1155)(15 downto  0);     
  Ctrl.CSM.CSM(14).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(1155)(31 downto 16);     
  Ctrl.CSM.CSM(14).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(1156)( 7 downto  0);     
  Ctrl.CSM.CSM(14).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(1156)(31 downto 24);     
  Ctrl.CSM.CSM(14).SC.MASTER.IC.TX_WR                 <=  reg_data(1157)( 0);               
  Ctrl.CSM.CSM(14).SC.MASTER.TX_CMD                   <=  reg_data(1161)( 7 downto  0);     
  Ctrl.CSM.CSM(14).SC.MASTER.TX_ADDRESS               <=  reg_data(1161)(15 downto  8);     
  Ctrl.CSM.CSM(14).SC.MASTER.TX_TRANSID               <=  reg_data(1161)(23 downto 16);     
  Ctrl.CSM.CSM(14).SC.MASTER.TX_CHANNEL               <=  reg_data(1161)(31 downto 24);     
  Ctrl.CSM.CSM(14).SC.MASTER.TX_DATA                  <=  reg_data(1162)(31 downto  0);     
  Ctrl.CSM.CSM(14).SC.MASTER.SCA_ENABLE               <=  reg_data(1173)( 2 downto  0);     
  Ctrl.CSM.CSM(14).SC.MASTER.START_RESET              <=  reg_data(1174)( 0);               
  Ctrl.CSM.CSM(14).SC.MASTER.START_CONNECT            <=  reg_data(1174)( 1);               
  Ctrl.CSM.CSM(14).SC.MASTER.START_COMMAND            <=  reg_data(1174)( 2);               
  Ctrl.CSM.CSM(14).SC.MASTER.INJ_CRC_ERR              <=  reg_data(1174)( 3);               
  Ctrl.CSM.CSM(14).SC.FRAME_FORMAT                    <=  reg_data(1177)( 0);               
  Ctrl.CSM.CSM(14).SC.SLAVE.TX_RESET                  <=  reg_data(1184)( 0);               
  Ctrl.CSM.CSM(14).SC.SLAVE.RX_RESET                  <=  reg_data(1185)( 1);               
  Ctrl.CSM.CSM(14).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(1186)( 0);               
  Ctrl.CSM.CSM(14).SC.SLAVE.IC.TX_START_READ          <=  reg_data(1186)( 1);               
  Ctrl.CSM.CSM(14).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(1187)(15 downto  0);     
  Ctrl.CSM.CSM(14).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(1187)(31 downto 16);     
  Ctrl.CSM.CSM(14).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(1188)( 7 downto  0);     
  Ctrl.CSM.CSM(14).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(1188)(31 downto 24);     
  Ctrl.CSM.CSM(14).SC.SLAVE.IC.TX_WR                  <=  reg_data(1189)( 0);               
  Ctrl.CSM.CSM(15).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(1216)( 0);               
  Ctrl.CSM.CSM(15).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(1218)( 0);               
  Ctrl.CSM.CSM(15).LPGBT.DOWNLINK.RESET               <=  reg_data(1227)( 0);               
  Ctrl.CSM.CSM(15).SC.MASTER.TX_RESET                 <=  reg_data(1232)( 0);               
  Ctrl.CSM.CSM(15).SC.MASTER.RX_RESET                 <=  reg_data(1233)( 1);               
  Ctrl.CSM.CSM(15).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(1234)( 0);               
  Ctrl.CSM.CSM(15).SC.MASTER.IC.TX_START_READ         <=  reg_data(1234)( 1);               
  Ctrl.CSM.CSM(15).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(1235)(15 downto  0);     
  Ctrl.CSM.CSM(15).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(1235)(31 downto 16);     
  Ctrl.CSM.CSM(15).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(1236)( 7 downto  0);     
  Ctrl.CSM.CSM(15).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(1236)(31 downto 24);     
  Ctrl.CSM.CSM(15).SC.MASTER.IC.TX_WR                 <=  reg_data(1237)( 0);               
  Ctrl.CSM.CSM(15).SC.MASTER.TX_CMD                   <=  reg_data(1241)( 7 downto  0);     
  Ctrl.CSM.CSM(15).SC.MASTER.TX_ADDRESS               <=  reg_data(1241)(15 downto  8);     
  Ctrl.CSM.CSM(15).SC.MASTER.TX_TRANSID               <=  reg_data(1241)(23 downto 16);     
  Ctrl.CSM.CSM(15).SC.MASTER.TX_CHANNEL               <=  reg_data(1241)(31 downto 24);     
  Ctrl.CSM.CSM(15).SC.MASTER.TX_DATA                  <=  reg_data(1242)(31 downto  0);     
  Ctrl.CSM.CSM(15).SC.MASTER.SCA_ENABLE               <=  reg_data(1253)( 2 downto  0);     
  Ctrl.CSM.CSM(15).SC.MASTER.START_RESET              <=  reg_data(1254)( 0);               
  Ctrl.CSM.CSM(15).SC.MASTER.START_CONNECT            <=  reg_data(1254)( 1);               
  Ctrl.CSM.CSM(15).SC.MASTER.START_COMMAND            <=  reg_data(1254)( 2);               
  Ctrl.CSM.CSM(15).SC.MASTER.INJ_CRC_ERR              <=  reg_data(1254)( 3);               
  Ctrl.CSM.CSM(15).SC.FRAME_FORMAT                    <=  reg_data(1257)( 0);               
  Ctrl.CSM.CSM(15).SC.SLAVE.TX_RESET                  <=  reg_data(1264)( 0);               
  Ctrl.CSM.CSM(15).SC.SLAVE.RX_RESET                  <=  reg_data(1265)( 1);               
  Ctrl.CSM.CSM(15).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(1266)( 0);               
  Ctrl.CSM.CSM(15).SC.SLAVE.IC.TX_START_READ          <=  reg_data(1266)( 1);               
  Ctrl.CSM.CSM(15).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(1267)(15 downto  0);     
  Ctrl.CSM.CSM(15).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(1267)(31 downto 16);     
  Ctrl.CSM.CSM(15).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(1268)( 7 downto  0);     
  Ctrl.CSM.CSM(15).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(1268)(31 downto 24);     
  Ctrl.CSM.CSM(15).SC.SLAVE.IC.TX_WR                  <=  reg_data(1269)( 0);               
  Ctrl.CSM.CSM(16).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(1296)( 0);               
  Ctrl.CSM.CSM(16).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(1298)( 0);               
  Ctrl.CSM.CSM(16).LPGBT.DOWNLINK.RESET               <=  reg_data(1307)( 0);               
  Ctrl.CSM.CSM(16).SC.MASTER.TX_RESET                 <=  reg_data(1312)( 0);               
  Ctrl.CSM.CSM(16).SC.MASTER.RX_RESET                 <=  reg_data(1313)( 1);               
  Ctrl.CSM.CSM(16).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(1314)( 0);               
  Ctrl.CSM.CSM(16).SC.MASTER.IC.TX_START_READ         <=  reg_data(1314)( 1);               
  Ctrl.CSM.CSM(16).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(1315)(15 downto  0);     
  Ctrl.CSM.CSM(16).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(1315)(31 downto 16);     
  Ctrl.CSM.CSM(16).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(1316)( 7 downto  0);     
  Ctrl.CSM.CSM(16).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(1316)(31 downto 24);     
  Ctrl.CSM.CSM(16).SC.MASTER.IC.TX_WR                 <=  reg_data(1317)( 0);               
  Ctrl.CSM.CSM(16).SC.MASTER.TX_CMD                   <=  reg_data(1321)( 7 downto  0);     
  Ctrl.CSM.CSM(16).SC.MASTER.TX_ADDRESS               <=  reg_data(1321)(15 downto  8);     
  Ctrl.CSM.CSM(16).SC.MASTER.TX_TRANSID               <=  reg_data(1321)(23 downto 16);     
  Ctrl.CSM.CSM(16).SC.MASTER.TX_CHANNEL               <=  reg_data(1321)(31 downto 24);     
  Ctrl.CSM.CSM(16).SC.MASTER.TX_DATA                  <=  reg_data(1322)(31 downto  0);     
  Ctrl.CSM.CSM(16).SC.MASTER.SCA_ENABLE               <=  reg_data(1333)( 2 downto  0);     
  Ctrl.CSM.CSM(16).SC.MASTER.START_RESET              <=  reg_data(1334)( 0);               
  Ctrl.CSM.CSM(16).SC.MASTER.START_CONNECT            <=  reg_data(1334)( 1);               
  Ctrl.CSM.CSM(16).SC.MASTER.START_COMMAND            <=  reg_data(1334)( 2);               
  Ctrl.CSM.CSM(16).SC.MASTER.INJ_CRC_ERR              <=  reg_data(1334)( 3);               
  Ctrl.CSM.CSM(16).SC.FRAME_FORMAT                    <=  reg_data(1337)( 0);               
  Ctrl.CSM.CSM(16).SC.SLAVE.TX_RESET                  <=  reg_data(1344)( 0);               
  Ctrl.CSM.CSM(16).SC.SLAVE.RX_RESET                  <=  reg_data(1345)( 1);               
  Ctrl.CSM.CSM(16).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(1346)( 0);               
  Ctrl.CSM.CSM(16).SC.SLAVE.IC.TX_START_READ          <=  reg_data(1346)( 1);               
  Ctrl.CSM.CSM(16).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(1347)(15 downto  0);     
  Ctrl.CSM.CSM(16).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(1347)(31 downto 16);     
  Ctrl.CSM.CSM(16).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(1348)( 7 downto  0);     
  Ctrl.CSM.CSM(16).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(1348)(31 downto 24);     
  Ctrl.CSM.CSM(16).SC.SLAVE.IC.TX_WR                  <=  reg_data(1349)( 0);               
  Ctrl.CSM.CSM(17).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(1376)( 0);               
  Ctrl.CSM.CSM(17).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(1378)( 0);               
  Ctrl.CSM.CSM(17).LPGBT.DOWNLINK.RESET               <=  reg_data(1387)( 0);               
  Ctrl.CSM.CSM(17).SC.MASTER.TX_RESET                 <=  reg_data(1392)( 0);               
  Ctrl.CSM.CSM(17).SC.MASTER.RX_RESET                 <=  reg_data(1393)( 1);               
  Ctrl.CSM.CSM(17).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(1394)( 0);               
  Ctrl.CSM.CSM(17).SC.MASTER.IC.TX_START_READ         <=  reg_data(1394)( 1);               
  Ctrl.CSM.CSM(17).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(1395)(15 downto  0);     
  Ctrl.CSM.CSM(17).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(1395)(31 downto 16);     
  Ctrl.CSM.CSM(17).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(1396)( 7 downto  0);     
  Ctrl.CSM.CSM(17).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(1396)(31 downto 24);     
  Ctrl.CSM.CSM(17).SC.MASTER.IC.TX_WR                 <=  reg_data(1397)( 0);               
  Ctrl.CSM.CSM(17).SC.MASTER.TX_CMD                   <=  reg_data(1401)( 7 downto  0);     
  Ctrl.CSM.CSM(17).SC.MASTER.TX_ADDRESS               <=  reg_data(1401)(15 downto  8);     
  Ctrl.CSM.CSM(17).SC.MASTER.TX_TRANSID               <=  reg_data(1401)(23 downto 16);     
  Ctrl.CSM.CSM(17).SC.MASTER.TX_CHANNEL               <=  reg_data(1401)(31 downto 24);     
  Ctrl.CSM.CSM(17).SC.MASTER.TX_DATA                  <=  reg_data(1402)(31 downto  0);     
  Ctrl.CSM.CSM(17).SC.MASTER.SCA_ENABLE               <=  reg_data(1413)( 2 downto  0);     
  Ctrl.CSM.CSM(17).SC.MASTER.START_RESET              <=  reg_data(1414)( 0);               
  Ctrl.CSM.CSM(17).SC.MASTER.START_CONNECT            <=  reg_data(1414)( 1);               
  Ctrl.CSM.CSM(17).SC.MASTER.START_COMMAND            <=  reg_data(1414)( 2);               
  Ctrl.CSM.CSM(17).SC.MASTER.INJ_CRC_ERR              <=  reg_data(1414)( 3);               
  Ctrl.CSM.CSM(17).SC.FRAME_FORMAT                    <=  reg_data(1417)( 0);               
  Ctrl.CSM.CSM(17).SC.SLAVE.TX_RESET                  <=  reg_data(1424)( 0);               
  Ctrl.CSM.CSM(17).SC.SLAVE.RX_RESET                  <=  reg_data(1425)( 1);               
  Ctrl.CSM.CSM(17).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(1426)( 0);               
  Ctrl.CSM.CSM(17).SC.SLAVE.IC.TX_START_READ          <=  reg_data(1426)( 1);               
  Ctrl.CSM.CSM(17).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(1427)(15 downto  0);     
  Ctrl.CSM.CSM(17).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(1427)(31 downto 16);     
  Ctrl.CSM.CSM(17).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(1428)( 7 downto  0);     
  Ctrl.CSM.CSM(17).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(1428)(31 downto 24);     
  Ctrl.CSM.CSM(17).SC.SLAVE.IC.TX_WR                  <=  reg_data(1429)( 0);               
  Ctrl.CSM.CSM(18).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(1456)( 0);               
  Ctrl.CSM.CSM(18).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(1458)( 0);               
  Ctrl.CSM.CSM(18).LPGBT.DOWNLINK.RESET               <=  reg_data(1467)( 0);               
  Ctrl.CSM.CSM(18).SC.MASTER.TX_RESET                 <=  reg_data(1472)( 0);               
  Ctrl.CSM.CSM(18).SC.MASTER.RX_RESET                 <=  reg_data(1473)( 1);               
  Ctrl.CSM.CSM(18).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(1474)( 0);               
  Ctrl.CSM.CSM(18).SC.MASTER.IC.TX_START_READ         <=  reg_data(1474)( 1);               
  Ctrl.CSM.CSM(18).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(1475)(15 downto  0);     
  Ctrl.CSM.CSM(18).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(1475)(31 downto 16);     
  Ctrl.CSM.CSM(18).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(1476)( 7 downto  0);     
  Ctrl.CSM.CSM(18).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(1476)(31 downto 24);     
  Ctrl.CSM.CSM(18).SC.MASTER.IC.TX_WR                 <=  reg_data(1477)( 0);               
  Ctrl.CSM.CSM(18).SC.MASTER.TX_CMD                   <=  reg_data(1481)( 7 downto  0);     
  Ctrl.CSM.CSM(18).SC.MASTER.TX_ADDRESS               <=  reg_data(1481)(15 downto  8);     
  Ctrl.CSM.CSM(18).SC.MASTER.TX_TRANSID               <=  reg_data(1481)(23 downto 16);     
  Ctrl.CSM.CSM(18).SC.MASTER.TX_CHANNEL               <=  reg_data(1481)(31 downto 24);     
  Ctrl.CSM.CSM(18).SC.MASTER.TX_DATA                  <=  reg_data(1482)(31 downto  0);     
  Ctrl.CSM.CSM(18).SC.MASTER.SCA_ENABLE               <=  reg_data(1493)( 2 downto  0);     
  Ctrl.CSM.CSM(18).SC.MASTER.START_RESET              <=  reg_data(1494)( 0);               
  Ctrl.CSM.CSM(18).SC.MASTER.START_CONNECT            <=  reg_data(1494)( 1);               
  Ctrl.CSM.CSM(18).SC.MASTER.START_COMMAND            <=  reg_data(1494)( 2);               
  Ctrl.CSM.CSM(18).SC.MASTER.INJ_CRC_ERR              <=  reg_data(1494)( 3);               
  Ctrl.CSM.CSM(18).SC.FRAME_FORMAT                    <=  reg_data(1497)( 0);               
  Ctrl.CSM.CSM(18).SC.SLAVE.TX_RESET                  <=  reg_data(1504)( 0);               
  Ctrl.CSM.CSM(18).SC.SLAVE.RX_RESET                  <=  reg_data(1505)( 1);               
  Ctrl.CSM.CSM(18).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(1506)( 0);               
  Ctrl.CSM.CSM(18).SC.SLAVE.IC.TX_START_READ          <=  reg_data(1506)( 1);               
  Ctrl.CSM.CSM(18).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(1507)(15 downto  0);     
  Ctrl.CSM.CSM(18).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(1507)(31 downto 16);     
  Ctrl.CSM.CSM(18).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(1508)( 7 downto  0);     
  Ctrl.CSM.CSM(18).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(1508)(31 downto 24);     
  Ctrl.CSM.CSM(18).SC.SLAVE.IC.TX_WR                  <=  reg_data(1509)( 0);               
  Ctrl.CSM.CSM(19).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(1536)( 0);               
  Ctrl.CSM.CSM(19).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(1538)( 0);               
  Ctrl.CSM.CSM(19).LPGBT.DOWNLINK.RESET               <=  reg_data(1547)( 0);               
  Ctrl.CSM.CSM(19).SC.MASTER.TX_RESET                 <=  reg_data(1552)( 0);               
  Ctrl.CSM.CSM(19).SC.MASTER.RX_RESET                 <=  reg_data(1553)( 1);               
  Ctrl.CSM.CSM(19).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(1554)( 0);               
  Ctrl.CSM.CSM(19).SC.MASTER.IC.TX_START_READ         <=  reg_data(1554)( 1);               
  Ctrl.CSM.CSM(19).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(1555)(15 downto  0);     
  Ctrl.CSM.CSM(19).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(1555)(31 downto 16);     
  Ctrl.CSM.CSM(19).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(1556)( 7 downto  0);     
  Ctrl.CSM.CSM(19).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(1556)(31 downto 24);     
  Ctrl.CSM.CSM(19).SC.MASTER.IC.TX_WR                 <=  reg_data(1557)( 0);               
  Ctrl.CSM.CSM(19).SC.MASTER.TX_CMD                   <=  reg_data(1561)( 7 downto  0);     
  Ctrl.CSM.CSM(19).SC.MASTER.TX_ADDRESS               <=  reg_data(1561)(15 downto  8);     
  Ctrl.CSM.CSM(19).SC.MASTER.TX_TRANSID               <=  reg_data(1561)(23 downto 16);     
  Ctrl.CSM.CSM(19).SC.MASTER.TX_CHANNEL               <=  reg_data(1561)(31 downto 24);     
  Ctrl.CSM.CSM(19).SC.MASTER.TX_DATA                  <=  reg_data(1562)(31 downto  0);     
  Ctrl.CSM.CSM(19).SC.MASTER.SCA_ENABLE               <=  reg_data(1573)( 2 downto  0);     
  Ctrl.CSM.CSM(19).SC.MASTER.START_RESET              <=  reg_data(1574)( 0);               
  Ctrl.CSM.CSM(19).SC.MASTER.START_CONNECT            <=  reg_data(1574)( 1);               
  Ctrl.CSM.CSM(19).SC.MASTER.START_COMMAND            <=  reg_data(1574)( 2);               
  Ctrl.CSM.CSM(19).SC.MASTER.INJ_CRC_ERR              <=  reg_data(1574)( 3);               
  Ctrl.CSM.CSM(19).SC.FRAME_FORMAT                    <=  reg_data(1577)( 0);               
  Ctrl.CSM.CSM(19).SC.SLAVE.TX_RESET                  <=  reg_data(1584)( 0);               
  Ctrl.CSM.CSM(19).SC.SLAVE.RX_RESET                  <=  reg_data(1585)( 1);               
  Ctrl.CSM.CSM(19).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(1586)( 0);               
  Ctrl.CSM.CSM(19).SC.SLAVE.IC.TX_START_READ          <=  reg_data(1586)( 1);               
  Ctrl.CSM.CSM(19).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(1587)(15 downto  0);     
  Ctrl.CSM.CSM(19).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(1587)(31 downto 16);     
  Ctrl.CSM.CSM(19).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(1588)( 7 downto  0);     
  Ctrl.CSM.CSM(19).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(1588)(31 downto 24);     
  Ctrl.CSM.CSM(19).SC.SLAVE.IC.TX_WR                  <=  reg_data(1589)( 0);               
  Ctrl.CSM.CSM(20).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(1616)( 0);               
  Ctrl.CSM.CSM(20).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(1618)( 0);               
  Ctrl.CSM.CSM(20).LPGBT.DOWNLINK.RESET               <=  reg_data(1627)( 0);               
  Ctrl.CSM.CSM(20).SC.MASTER.TX_RESET                 <=  reg_data(1632)( 0);               
  Ctrl.CSM.CSM(20).SC.MASTER.RX_RESET                 <=  reg_data(1633)( 1);               
  Ctrl.CSM.CSM(20).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(1634)( 0);               
  Ctrl.CSM.CSM(20).SC.MASTER.IC.TX_START_READ         <=  reg_data(1634)( 1);               
  Ctrl.CSM.CSM(20).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(1635)(15 downto  0);     
  Ctrl.CSM.CSM(20).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(1635)(31 downto 16);     
  Ctrl.CSM.CSM(20).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(1636)( 7 downto  0);     
  Ctrl.CSM.CSM(20).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(1636)(31 downto 24);     
  Ctrl.CSM.CSM(20).SC.MASTER.IC.TX_WR                 <=  reg_data(1637)( 0);               
  Ctrl.CSM.CSM(20).SC.MASTER.TX_CMD                   <=  reg_data(1641)( 7 downto  0);     
  Ctrl.CSM.CSM(20).SC.MASTER.TX_ADDRESS               <=  reg_data(1641)(15 downto  8);     
  Ctrl.CSM.CSM(20).SC.MASTER.TX_TRANSID               <=  reg_data(1641)(23 downto 16);     
  Ctrl.CSM.CSM(20).SC.MASTER.TX_CHANNEL               <=  reg_data(1641)(31 downto 24);     
  Ctrl.CSM.CSM(20).SC.MASTER.TX_DATA                  <=  reg_data(1642)(31 downto  0);     
  Ctrl.CSM.CSM(20).SC.MASTER.SCA_ENABLE               <=  reg_data(1653)( 2 downto  0);     
  Ctrl.CSM.CSM(20).SC.MASTER.START_RESET              <=  reg_data(1654)( 0);               
  Ctrl.CSM.CSM(20).SC.MASTER.START_CONNECT            <=  reg_data(1654)( 1);               
  Ctrl.CSM.CSM(20).SC.MASTER.START_COMMAND            <=  reg_data(1654)( 2);               
  Ctrl.CSM.CSM(20).SC.MASTER.INJ_CRC_ERR              <=  reg_data(1654)( 3);               
  Ctrl.CSM.CSM(20).SC.FRAME_FORMAT                    <=  reg_data(1657)( 0);               
  Ctrl.CSM.CSM(20).SC.SLAVE.TX_RESET                  <=  reg_data(1664)( 0);               
  Ctrl.CSM.CSM(20).SC.SLAVE.RX_RESET                  <=  reg_data(1665)( 1);               
  Ctrl.CSM.CSM(20).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(1666)( 0);               
  Ctrl.CSM.CSM(20).SC.SLAVE.IC.TX_START_READ          <=  reg_data(1666)( 1);               
  Ctrl.CSM.CSM(20).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(1667)(15 downto  0);     
  Ctrl.CSM.CSM(20).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(1667)(31 downto 16);     
  Ctrl.CSM.CSM(20).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(1668)( 7 downto  0);     
  Ctrl.CSM.CSM(20).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(1668)(31 downto 24);     
  Ctrl.CSM.CSM(20).SC.SLAVE.IC.TX_WR                  <=  reg_data(1669)( 0);               
  Ctrl.CSM.CSM(21).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(1696)( 0);               
  Ctrl.CSM.CSM(21).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(1698)( 0);               
  Ctrl.CSM.CSM(21).LPGBT.DOWNLINK.RESET               <=  reg_data(1707)( 0);               
  Ctrl.CSM.CSM(21).SC.MASTER.TX_RESET                 <=  reg_data(1712)( 0);               
  Ctrl.CSM.CSM(21).SC.MASTER.RX_RESET                 <=  reg_data(1713)( 1);               
  Ctrl.CSM.CSM(21).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(1714)( 0);               
  Ctrl.CSM.CSM(21).SC.MASTER.IC.TX_START_READ         <=  reg_data(1714)( 1);               
  Ctrl.CSM.CSM(21).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(1715)(15 downto  0);     
  Ctrl.CSM.CSM(21).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(1715)(31 downto 16);     
  Ctrl.CSM.CSM(21).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(1716)( 7 downto  0);     
  Ctrl.CSM.CSM(21).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(1716)(31 downto 24);     
  Ctrl.CSM.CSM(21).SC.MASTER.IC.TX_WR                 <=  reg_data(1717)( 0);               
  Ctrl.CSM.CSM(21).SC.MASTER.TX_CMD                   <=  reg_data(1721)( 7 downto  0);     
  Ctrl.CSM.CSM(21).SC.MASTER.TX_ADDRESS               <=  reg_data(1721)(15 downto  8);     
  Ctrl.CSM.CSM(21).SC.MASTER.TX_TRANSID               <=  reg_data(1721)(23 downto 16);     
  Ctrl.CSM.CSM(21).SC.MASTER.TX_CHANNEL               <=  reg_data(1721)(31 downto 24);     
  Ctrl.CSM.CSM(21).SC.MASTER.TX_DATA                  <=  reg_data(1722)(31 downto  0);     
  Ctrl.CSM.CSM(21).SC.MASTER.SCA_ENABLE               <=  reg_data(1733)( 2 downto  0);     
  Ctrl.CSM.CSM(21).SC.MASTER.START_RESET              <=  reg_data(1734)( 0);               
  Ctrl.CSM.CSM(21).SC.MASTER.START_CONNECT            <=  reg_data(1734)( 1);               
  Ctrl.CSM.CSM(21).SC.MASTER.START_COMMAND            <=  reg_data(1734)( 2);               
  Ctrl.CSM.CSM(21).SC.MASTER.INJ_CRC_ERR              <=  reg_data(1734)( 3);               
  Ctrl.CSM.CSM(21).SC.FRAME_FORMAT                    <=  reg_data(1737)( 0);               
  Ctrl.CSM.CSM(21).SC.SLAVE.TX_RESET                  <=  reg_data(1744)( 0);               
  Ctrl.CSM.CSM(21).SC.SLAVE.RX_RESET                  <=  reg_data(1745)( 1);               
  Ctrl.CSM.CSM(21).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(1746)( 0);               
  Ctrl.CSM.CSM(21).SC.SLAVE.IC.TX_START_READ          <=  reg_data(1746)( 1);               
  Ctrl.CSM.CSM(21).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(1747)(15 downto  0);     
  Ctrl.CSM.CSM(21).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(1747)(31 downto 16);     
  Ctrl.CSM.CSM(21).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(1748)( 7 downto  0);     
  Ctrl.CSM.CSM(21).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(1748)(31 downto 24);     
  Ctrl.CSM.CSM(21).SC.SLAVE.IC.TX_WR                  <=  reg_data(1749)( 0);               
  Ctrl.CSM.CSM(22).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(1776)( 0);               
  Ctrl.CSM.CSM(22).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(1778)( 0);               
  Ctrl.CSM.CSM(22).LPGBT.DOWNLINK.RESET               <=  reg_data(1787)( 0);               
  Ctrl.CSM.CSM(22).SC.MASTER.TX_RESET                 <=  reg_data(1792)( 0);               
  Ctrl.CSM.CSM(22).SC.MASTER.RX_RESET                 <=  reg_data(1793)( 1);               
  Ctrl.CSM.CSM(22).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(1794)( 0);               
  Ctrl.CSM.CSM(22).SC.MASTER.IC.TX_START_READ         <=  reg_data(1794)( 1);               
  Ctrl.CSM.CSM(22).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(1795)(15 downto  0);     
  Ctrl.CSM.CSM(22).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(1795)(31 downto 16);     
  Ctrl.CSM.CSM(22).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(1796)( 7 downto  0);     
  Ctrl.CSM.CSM(22).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(1796)(31 downto 24);     
  Ctrl.CSM.CSM(22).SC.MASTER.IC.TX_WR                 <=  reg_data(1797)( 0);               
  Ctrl.CSM.CSM(22).SC.MASTER.TX_CMD                   <=  reg_data(1801)( 7 downto  0);     
  Ctrl.CSM.CSM(22).SC.MASTER.TX_ADDRESS               <=  reg_data(1801)(15 downto  8);     
  Ctrl.CSM.CSM(22).SC.MASTER.TX_TRANSID               <=  reg_data(1801)(23 downto 16);     
  Ctrl.CSM.CSM(22).SC.MASTER.TX_CHANNEL               <=  reg_data(1801)(31 downto 24);     
  Ctrl.CSM.CSM(22).SC.MASTER.TX_DATA                  <=  reg_data(1802)(31 downto  0);     
  Ctrl.CSM.CSM(22).SC.MASTER.SCA_ENABLE               <=  reg_data(1813)( 2 downto  0);     
  Ctrl.CSM.CSM(22).SC.MASTER.START_RESET              <=  reg_data(1814)( 0);               
  Ctrl.CSM.CSM(22).SC.MASTER.START_CONNECT            <=  reg_data(1814)( 1);               
  Ctrl.CSM.CSM(22).SC.MASTER.START_COMMAND            <=  reg_data(1814)( 2);               
  Ctrl.CSM.CSM(22).SC.MASTER.INJ_CRC_ERR              <=  reg_data(1814)( 3);               
  Ctrl.CSM.CSM(22).SC.FRAME_FORMAT                    <=  reg_data(1817)( 0);               
  Ctrl.CSM.CSM(22).SC.SLAVE.TX_RESET                  <=  reg_data(1824)( 0);               
  Ctrl.CSM.CSM(22).SC.SLAVE.RX_RESET                  <=  reg_data(1825)( 1);               
  Ctrl.CSM.CSM(22).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(1826)( 0);               
  Ctrl.CSM.CSM(22).SC.SLAVE.IC.TX_START_READ          <=  reg_data(1826)( 1);               
  Ctrl.CSM.CSM(22).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(1827)(15 downto  0);     
  Ctrl.CSM.CSM(22).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(1827)(31 downto 16);     
  Ctrl.CSM.CSM(22).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(1828)( 7 downto  0);     
  Ctrl.CSM.CSM(22).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(1828)(31 downto 24);     
  Ctrl.CSM.CSM(22).SC.SLAVE.IC.TX_WR                  <=  reg_data(1829)( 0);               
  Ctrl.CSM.CSM(23).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(1856)( 0);               
  Ctrl.CSM.CSM(23).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(1858)( 0);               
  Ctrl.CSM.CSM(23).LPGBT.DOWNLINK.RESET               <=  reg_data(1867)( 0);               
  Ctrl.CSM.CSM(23).SC.MASTER.TX_RESET                 <=  reg_data(1872)( 0);               
  Ctrl.CSM.CSM(23).SC.MASTER.RX_RESET                 <=  reg_data(1873)( 1);               
  Ctrl.CSM.CSM(23).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(1874)( 0);               
  Ctrl.CSM.CSM(23).SC.MASTER.IC.TX_START_READ         <=  reg_data(1874)( 1);               
  Ctrl.CSM.CSM(23).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(1875)(15 downto  0);     
  Ctrl.CSM.CSM(23).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(1875)(31 downto 16);     
  Ctrl.CSM.CSM(23).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(1876)( 7 downto  0);     
  Ctrl.CSM.CSM(23).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(1876)(31 downto 24);     
  Ctrl.CSM.CSM(23).SC.MASTER.IC.TX_WR                 <=  reg_data(1877)( 0);               
  Ctrl.CSM.CSM(23).SC.MASTER.TX_CMD                   <=  reg_data(1881)( 7 downto  0);     
  Ctrl.CSM.CSM(23).SC.MASTER.TX_ADDRESS               <=  reg_data(1881)(15 downto  8);     
  Ctrl.CSM.CSM(23).SC.MASTER.TX_TRANSID               <=  reg_data(1881)(23 downto 16);     
  Ctrl.CSM.CSM(23).SC.MASTER.TX_CHANNEL               <=  reg_data(1881)(31 downto 24);     
  Ctrl.CSM.CSM(23).SC.MASTER.TX_DATA                  <=  reg_data(1882)(31 downto  0);     
  Ctrl.CSM.CSM(23).SC.MASTER.SCA_ENABLE               <=  reg_data(1893)( 2 downto  0);     
  Ctrl.CSM.CSM(23).SC.MASTER.START_RESET              <=  reg_data(1894)( 0);               
  Ctrl.CSM.CSM(23).SC.MASTER.START_CONNECT            <=  reg_data(1894)( 1);               
  Ctrl.CSM.CSM(23).SC.MASTER.START_COMMAND            <=  reg_data(1894)( 2);               
  Ctrl.CSM.CSM(23).SC.MASTER.INJ_CRC_ERR              <=  reg_data(1894)( 3);               
  Ctrl.CSM.CSM(23).SC.FRAME_FORMAT                    <=  reg_data(1897)( 0);               
  Ctrl.CSM.CSM(23).SC.SLAVE.TX_RESET                  <=  reg_data(1904)( 0);               
  Ctrl.CSM.CSM(23).SC.SLAVE.RX_RESET                  <=  reg_data(1905)( 1);               
  Ctrl.CSM.CSM(23).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(1906)( 0);               
  Ctrl.CSM.CSM(23).SC.SLAVE.IC.TX_START_READ          <=  reg_data(1906)( 1);               
  Ctrl.CSM.CSM(23).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(1907)(15 downto  0);     
  Ctrl.CSM.CSM(23).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(1907)(31 downto 16);     
  Ctrl.CSM.CSM(23).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(1908)( 7 downto  0);     
  Ctrl.CSM.CSM(23).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(1908)(31 downto 24);     
  Ctrl.CSM.CSM(23).SC.SLAVE.IC.TX_WR                  <=  reg_data(1909)( 0);               
  Ctrl.CSM.CSM(24).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(1936)( 0);               
  Ctrl.CSM.CSM(24).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(1938)( 0);               
  Ctrl.CSM.CSM(24).LPGBT.DOWNLINK.RESET               <=  reg_data(1947)( 0);               
  Ctrl.CSM.CSM(24).SC.MASTER.TX_RESET                 <=  reg_data(1952)( 0);               
  Ctrl.CSM.CSM(24).SC.MASTER.RX_RESET                 <=  reg_data(1953)( 1);               
  Ctrl.CSM.CSM(24).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(1954)( 0);               
  Ctrl.CSM.CSM(24).SC.MASTER.IC.TX_START_READ         <=  reg_data(1954)( 1);               
  Ctrl.CSM.CSM(24).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(1955)(15 downto  0);     
  Ctrl.CSM.CSM(24).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(1955)(31 downto 16);     
  Ctrl.CSM.CSM(24).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(1956)( 7 downto  0);     
  Ctrl.CSM.CSM(24).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(1956)(31 downto 24);     
  Ctrl.CSM.CSM(24).SC.MASTER.IC.TX_WR                 <=  reg_data(1957)( 0);               
  Ctrl.CSM.CSM(24).SC.MASTER.TX_CMD                   <=  reg_data(1961)( 7 downto  0);     
  Ctrl.CSM.CSM(24).SC.MASTER.TX_ADDRESS               <=  reg_data(1961)(15 downto  8);     
  Ctrl.CSM.CSM(24).SC.MASTER.TX_TRANSID               <=  reg_data(1961)(23 downto 16);     
  Ctrl.CSM.CSM(24).SC.MASTER.TX_CHANNEL               <=  reg_data(1961)(31 downto 24);     
  Ctrl.CSM.CSM(24).SC.MASTER.TX_DATA                  <=  reg_data(1962)(31 downto  0);     
  Ctrl.CSM.CSM(24).SC.MASTER.SCA_ENABLE               <=  reg_data(1973)( 2 downto  0);     
  Ctrl.CSM.CSM(24).SC.MASTER.START_RESET              <=  reg_data(1974)( 0);               
  Ctrl.CSM.CSM(24).SC.MASTER.START_CONNECT            <=  reg_data(1974)( 1);               
  Ctrl.CSM.CSM(24).SC.MASTER.START_COMMAND            <=  reg_data(1974)( 2);               
  Ctrl.CSM.CSM(24).SC.MASTER.INJ_CRC_ERR              <=  reg_data(1974)( 3);               
  Ctrl.CSM.CSM(24).SC.FRAME_FORMAT                    <=  reg_data(1977)( 0);               
  Ctrl.CSM.CSM(24).SC.SLAVE.TX_RESET                  <=  reg_data(1984)( 0);               
  Ctrl.CSM.CSM(24).SC.SLAVE.RX_RESET                  <=  reg_data(1985)( 1);               
  Ctrl.CSM.CSM(24).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(1986)( 0);               
  Ctrl.CSM.CSM(24).SC.SLAVE.IC.TX_START_READ          <=  reg_data(1986)( 1);               
  Ctrl.CSM.CSM(24).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(1987)(15 downto  0);     
  Ctrl.CSM.CSM(24).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(1987)(31 downto 16);     
  Ctrl.CSM.CSM(24).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(1988)( 7 downto  0);     
  Ctrl.CSM.CSM(24).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(1988)(31 downto 24);     
  Ctrl.CSM.CSM(24).SC.SLAVE.IC.TX_WR                  <=  reg_data(1989)( 0);               
  Ctrl.CSM.CSM(25).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(2016)( 0);               
  Ctrl.CSM.CSM(25).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(2018)( 0);               
  Ctrl.CSM.CSM(25).LPGBT.DOWNLINK.RESET               <=  reg_data(2027)( 0);               
  Ctrl.CSM.CSM(25).SC.MASTER.TX_RESET                 <=  reg_data(2032)( 0);               
  Ctrl.CSM.CSM(25).SC.MASTER.RX_RESET                 <=  reg_data(2033)( 1);               
  Ctrl.CSM.CSM(25).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(2034)( 0);               
  Ctrl.CSM.CSM(25).SC.MASTER.IC.TX_START_READ         <=  reg_data(2034)( 1);               
  Ctrl.CSM.CSM(25).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(2035)(15 downto  0);     
  Ctrl.CSM.CSM(25).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(2035)(31 downto 16);     
  Ctrl.CSM.CSM(25).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(2036)( 7 downto  0);     
  Ctrl.CSM.CSM(25).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(2036)(31 downto 24);     
  Ctrl.CSM.CSM(25).SC.MASTER.IC.TX_WR                 <=  reg_data(2037)( 0);               
  Ctrl.CSM.CSM(25).SC.MASTER.TX_CMD                   <=  reg_data(2041)( 7 downto  0);     
  Ctrl.CSM.CSM(25).SC.MASTER.TX_ADDRESS               <=  reg_data(2041)(15 downto  8);     
  Ctrl.CSM.CSM(25).SC.MASTER.TX_TRANSID               <=  reg_data(2041)(23 downto 16);     
  Ctrl.CSM.CSM(25).SC.MASTER.TX_CHANNEL               <=  reg_data(2041)(31 downto 24);     
  Ctrl.CSM.CSM(25).SC.MASTER.TX_DATA                  <=  reg_data(2042)(31 downto  0);     
  Ctrl.CSM.CSM(25).SC.MASTER.SCA_ENABLE               <=  reg_data(2053)( 2 downto  0);     
  Ctrl.CSM.CSM(25).SC.MASTER.START_RESET              <=  reg_data(2054)( 0);               
  Ctrl.CSM.CSM(25).SC.MASTER.START_CONNECT            <=  reg_data(2054)( 1);               
  Ctrl.CSM.CSM(25).SC.MASTER.START_COMMAND            <=  reg_data(2054)( 2);               
  Ctrl.CSM.CSM(25).SC.MASTER.INJ_CRC_ERR              <=  reg_data(2054)( 3);               
  Ctrl.CSM.CSM(25).SC.FRAME_FORMAT                    <=  reg_data(2057)( 0);               
  Ctrl.CSM.CSM(25).SC.SLAVE.TX_RESET                  <=  reg_data(2064)( 0);               
  Ctrl.CSM.CSM(25).SC.SLAVE.RX_RESET                  <=  reg_data(2065)( 1);               
  Ctrl.CSM.CSM(25).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(2066)( 0);               
  Ctrl.CSM.CSM(25).SC.SLAVE.IC.TX_START_READ          <=  reg_data(2066)( 1);               
  Ctrl.CSM.CSM(25).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(2067)(15 downto  0);     
  Ctrl.CSM.CSM(25).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(2067)(31 downto 16);     
  Ctrl.CSM.CSM(25).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(2068)( 7 downto  0);     
  Ctrl.CSM.CSM(25).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(2068)(31 downto 24);     
  Ctrl.CSM.CSM(25).SC.SLAVE.IC.TX_WR                  <=  reg_data(2069)( 0);               
  Ctrl.CSM.CSM(26).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(2096)( 0);               
  Ctrl.CSM.CSM(26).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(2098)( 0);               
  Ctrl.CSM.CSM(26).LPGBT.DOWNLINK.RESET               <=  reg_data(2107)( 0);               
  Ctrl.CSM.CSM(26).SC.MASTER.TX_RESET                 <=  reg_data(2112)( 0);               
  Ctrl.CSM.CSM(26).SC.MASTER.RX_RESET                 <=  reg_data(2113)( 1);               
  Ctrl.CSM.CSM(26).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(2114)( 0);               
  Ctrl.CSM.CSM(26).SC.MASTER.IC.TX_START_READ         <=  reg_data(2114)( 1);               
  Ctrl.CSM.CSM(26).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(2115)(15 downto  0);     
  Ctrl.CSM.CSM(26).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(2115)(31 downto 16);     
  Ctrl.CSM.CSM(26).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(2116)( 7 downto  0);     
  Ctrl.CSM.CSM(26).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(2116)(31 downto 24);     
  Ctrl.CSM.CSM(26).SC.MASTER.IC.TX_WR                 <=  reg_data(2117)( 0);               
  Ctrl.CSM.CSM(26).SC.MASTER.TX_CMD                   <=  reg_data(2121)( 7 downto  0);     
  Ctrl.CSM.CSM(26).SC.MASTER.TX_ADDRESS               <=  reg_data(2121)(15 downto  8);     
  Ctrl.CSM.CSM(26).SC.MASTER.TX_TRANSID               <=  reg_data(2121)(23 downto 16);     
  Ctrl.CSM.CSM(26).SC.MASTER.TX_CHANNEL               <=  reg_data(2121)(31 downto 24);     
  Ctrl.CSM.CSM(26).SC.MASTER.TX_DATA                  <=  reg_data(2122)(31 downto  0);     
  Ctrl.CSM.CSM(26).SC.MASTER.SCA_ENABLE               <=  reg_data(2133)( 2 downto  0);     
  Ctrl.CSM.CSM(26).SC.MASTER.START_RESET              <=  reg_data(2134)( 0);               
  Ctrl.CSM.CSM(26).SC.MASTER.START_CONNECT            <=  reg_data(2134)( 1);               
  Ctrl.CSM.CSM(26).SC.MASTER.START_COMMAND            <=  reg_data(2134)( 2);               
  Ctrl.CSM.CSM(26).SC.MASTER.INJ_CRC_ERR              <=  reg_data(2134)( 3);               
  Ctrl.CSM.CSM(26).SC.FRAME_FORMAT                    <=  reg_data(2137)( 0);               
  Ctrl.CSM.CSM(26).SC.SLAVE.TX_RESET                  <=  reg_data(2144)( 0);               
  Ctrl.CSM.CSM(26).SC.SLAVE.RX_RESET                  <=  reg_data(2145)( 1);               
  Ctrl.CSM.CSM(26).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(2146)( 0);               
  Ctrl.CSM.CSM(26).SC.SLAVE.IC.TX_START_READ          <=  reg_data(2146)( 1);               
  Ctrl.CSM.CSM(26).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(2147)(15 downto  0);     
  Ctrl.CSM.CSM(26).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(2147)(31 downto 16);     
  Ctrl.CSM.CSM(26).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(2148)( 7 downto  0);     
  Ctrl.CSM.CSM(26).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(2148)(31 downto 24);     
  Ctrl.CSM.CSM(26).SC.SLAVE.IC.TX_WR                  <=  reg_data(2149)( 0);               
  Ctrl.CSM.CSM(27).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(2176)( 0);               
  Ctrl.CSM.CSM(27).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(2178)( 0);               
  Ctrl.CSM.CSM(27).LPGBT.DOWNLINK.RESET               <=  reg_data(2187)( 0);               
  Ctrl.CSM.CSM(27).SC.MASTER.TX_RESET                 <=  reg_data(2192)( 0);               
  Ctrl.CSM.CSM(27).SC.MASTER.RX_RESET                 <=  reg_data(2193)( 1);               
  Ctrl.CSM.CSM(27).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(2194)( 0);               
  Ctrl.CSM.CSM(27).SC.MASTER.IC.TX_START_READ         <=  reg_data(2194)( 1);               
  Ctrl.CSM.CSM(27).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(2195)(15 downto  0);     
  Ctrl.CSM.CSM(27).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(2195)(31 downto 16);     
  Ctrl.CSM.CSM(27).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(2196)( 7 downto  0);     
  Ctrl.CSM.CSM(27).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(2196)(31 downto 24);     
  Ctrl.CSM.CSM(27).SC.MASTER.IC.TX_WR                 <=  reg_data(2197)( 0);               
  Ctrl.CSM.CSM(27).SC.MASTER.TX_CMD                   <=  reg_data(2201)( 7 downto  0);     
  Ctrl.CSM.CSM(27).SC.MASTER.TX_ADDRESS               <=  reg_data(2201)(15 downto  8);     
  Ctrl.CSM.CSM(27).SC.MASTER.TX_TRANSID               <=  reg_data(2201)(23 downto 16);     
  Ctrl.CSM.CSM(27).SC.MASTER.TX_CHANNEL               <=  reg_data(2201)(31 downto 24);     
  Ctrl.CSM.CSM(27).SC.MASTER.TX_DATA                  <=  reg_data(2202)(31 downto  0);     
  Ctrl.CSM.CSM(27).SC.MASTER.SCA_ENABLE               <=  reg_data(2213)( 2 downto  0);     
  Ctrl.CSM.CSM(27).SC.MASTER.START_RESET              <=  reg_data(2214)( 0);               
  Ctrl.CSM.CSM(27).SC.MASTER.START_CONNECT            <=  reg_data(2214)( 1);               
  Ctrl.CSM.CSM(27).SC.MASTER.START_COMMAND            <=  reg_data(2214)( 2);               
  Ctrl.CSM.CSM(27).SC.MASTER.INJ_CRC_ERR              <=  reg_data(2214)( 3);               
  Ctrl.CSM.CSM(27).SC.FRAME_FORMAT                    <=  reg_data(2217)( 0);               
  Ctrl.CSM.CSM(27).SC.SLAVE.TX_RESET                  <=  reg_data(2224)( 0);               
  Ctrl.CSM.CSM(27).SC.SLAVE.RX_RESET                  <=  reg_data(2225)( 1);               
  Ctrl.CSM.CSM(27).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(2226)( 0);               
  Ctrl.CSM.CSM(27).SC.SLAVE.IC.TX_START_READ          <=  reg_data(2226)( 1);               
  Ctrl.CSM.CSM(27).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(2227)(15 downto  0);     
  Ctrl.CSM.CSM(27).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(2227)(31 downto 16);     
  Ctrl.CSM.CSM(27).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(2228)( 7 downto  0);     
  Ctrl.CSM.CSM(27).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(2228)(31 downto 24);     
  Ctrl.CSM.CSM(27).SC.SLAVE.IC.TX_WR                  <=  reg_data(2229)( 0);               
  Ctrl.CSM.CSM(28).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(2256)( 0);               
  Ctrl.CSM.CSM(28).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(2258)( 0);               
  Ctrl.CSM.CSM(28).LPGBT.DOWNLINK.RESET               <=  reg_data(2267)( 0);               
  Ctrl.CSM.CSM(28).SC.MASTER.TX_RESET                 <=  reg_data(2272)( 0);               
  Ctrl.CSM.CSM(28).SC.MASTER.RX_RESET                 <=  reg_data(2273)( 1);               
  Ctrl.CSM.CSM(28).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(2274)( 0);               
  Ctrl.CSM.CSM(28).SC.MASTER.IC.TX_START_READ         <=  reg_data(2274)( 1);               
  Ctrl.CSM.CSM(28).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(2275)(15 downto  0);     
  Ctrl.CSM.CSM(28).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(2275)(31 downto 16);     
  Ctrl.CSM.CSM(28).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(2276)( 7 downto  0);     
  Ctrl.CSM.CSM(28).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(2276)(31 downto 24);     
  Ctrl.CSM.CSM(28).SC.MASTER.IC.TX_WR                 <=  reg_data(2277)( 0);               
  Ctrl.CSM.CSM(28).SC.MASTER.TX_CMD                   <=  reg_data(2281)( 7 downto  0);     
  Ctrl.CSM.CSM(28).SC.MASTER.TX_ADDRESS               <=  reg_data(2281)(15 downto  8);     
  Ctrl.CSM.CSM(28).SC.MASTER.TX_TRANSID               <=  reg_data(2281)(23 downto 16);     
  Ctrl.CSM.CSM(28).SC.MASTER.TX_CHANNEL               <=  reg_data(2281)(31 downto 24);     
  Ctrl.CSM.CSM(28).SC.MASTER.TX_DATA                  <=  reg_data(2282)(31 downto  0);     
  Ctrl.CSM.CSM(28).SC.MASTER.SCA_ENABLE               <=  reg_data(2293)( 2 downto  0);     
  Ctrl.CSM.CSM(28).SC.MASTER.START_RESET              <=  reg_data(2294)( 0);               
  Ctrl.CSM.CSM(28).SC.MASTER.START_CONNECT            <=  reg_data(2294)( 1);               
  Ctrl.CSM.CSM(28).SC.MASTER.START_COMMAND            <=  reg_data(2294)( 2);               
  Ctrl.CSM.CSM(28).SC.MASTER.INJ_CRC_ERR              <=  reg_data(2294)( 3);               
  Ctrl.CSM.CSM(28).SC.FRAME_FORMAT                    <=  reg_data(2297)( 0);               
  Ctrl.CSM.CSM(28).SC.SLAVE.TX_RESET                  <=  reg_data(2304)( 0);               
  Ctrl.CSM.CSM(28).SC.SLAVE.RX_RESET                  <=  reg_data(2305)( 1);               
  Ctrl.CSM.CSM(28).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(2306)( 0);               
  Ctrl.CSM.CSM(28).SC.SLAVE.IC.TX_START_READ          <=  reg_data(2306)( 1);               
  Ctrl.CSM.CSM(28).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(2307)(15 downto  0);     
  Ctrl.CSM.CSM(28).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(2307)(31 downto 16);     
  Ctrl.CSM.CSM(28).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(2308)( 7 downto  0);     
  Ctrl.CSM.CSM(28).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(2308)(31 downto 24);     
  Ctrl.CSM.CSM(28).SC.SLAVE.IC.TX_WR                  <=  reg_data(2309)( 0);               
  Ctrl.CSM.CSM(29).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(2336)( 0);               
  Ctrl.CSM.CSM(29).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(2338)( 0);               
  Ctrl.CSM.CSM(29).LPGBT.DOWNLINK.RESET               <=  reg_data(2347)( 0);               
  Ctrl.CSM.CSM(29).SC.MASTER.TX_RESET                 <=  reg_data(2352)( 0);               
  Ctrl.CSM.CSM(29).SC.MASTER.RX_RESET                 <=  reg_data(2353)( 1);               
  Ctrl.CSM.CSM(29).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(2354)( 0);               
  Ctrl.CSM.CSM(29).SC.MASTER.IC.TX_START_READ         <=  reg_data(2354)( 1);               
  Ctrl.CSM.CSM(29).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(2355)(15 downto  0);     
  Ctrl.CSM.CSM(29).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(2355)(31 downto 16);     
  Ctrl.CSM.CSM(29).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(2356)( 7 downto  0);     
  Ctrl.CSM.CSM(29).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(2356)(31 downto 24);     
  Ctrl.CSM.CSM(29).SC.MASTER.IC.TX_WR                 <=  reg_data(2357)( 0);               
  Ctrl.CSM.CSM(29).SC.MASTER.TX_CMD                   <=  reg_data(2361)( 7 downto  0);     
  Ctrl.CSM.CSM(29).SC.MASTER.TX_ADDRESS               <=  reg_data(2361)(15 downto  8);     
  Ctrl.CSM.CSM(29).SC.MASTER.TX_TRANSID               <=  reg_data(2361)(23 downto 16);     
  Ctrl.CSM.CSM(29).SC.MASTER.TX_CHANNEL               <=  reg_data(2361)(31 downto 24);     
  Ctrl.CSM.CSM(29).SC.MASTER.TX_DATA                  <=  reg_data(2362)(31 downto  0);     
  Ctrl.CSM.CSM(29).SC.MASTER.SCA_ENABLE               <=  reg_data(2373)( 2 downto  0);     
  Ctrl.CSM.CSM(29).SC.MASTER.START_RESET              <=  reg_data(2374)( 0);               
  Ctrl.CSM.CSM(29).SC.MASTER.START_CONNECT            <=  reg_data(2374)( 1);               
  Ctrl.CSM.CSM(29).SC.MASTER.START_COMMAND            <=  reg_data(2374)( 2);               
  Ctrl.CSM.CSM(29).SC.MASTER.INJ_CRC_ERR              <=  reg_data(2374)( 3);               
  Ctrl.CSM.CSM(29).SC.FRAME_FORMAT                    <=  reg_data(2377)( 0);               
  Ctrl.CSM.CSM(29).SC.SLAVE.TX_RESET                  <=  reg_data(2384)( 0);               
  Ctrl.CSM.CSM(29).SC.SLAVE.RX_RESET                  <=  reg_data(2385)( 1);               
  Ctrl.CSM.CSM(29).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(2386)( 0);               
  Ctrl.CSM.CSM(29).SC.SLAVE.IC.TX_START_READ          <=  reg_data(2386)( 1);               
  Ctrl.CSM.CSM(29).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(2387)(15 downto  0);     
  Ctrl.CSM.CSM(29).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(2387)(31 downto 16);     
  Ctrl.CSM.CSM(29).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(2388)( 7 downto  0);     
  Ctrl.CSM.CSM(29).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(2388)(31 downto 24);     
  Ctrl.CSM.CSM(29).SC.SLAVE.IC.TX_WR                  <=  reg_data(2389)( 0);               
  Ctrl.CSM.CSM(30).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(2416)( 0);               
  Ctrl.CSM.CSM(30).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(2418)( 0);               
  Ctrl.CSM.CSM(30).LPGBT.DOWNLINK.RESET               <=  reg_data(2427)( 0);               
  Ctrl.CSM.CSM(30).SC.MASTER.TX_RESET                 <=  reg_data(2432)( 0);               
  Ctrl.CSM.CSM(30).SC.MASTER.RX_RESET                 <=  reg_data(2433)( 1);               
  Ctrl.CSM.CSM(30).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(2434)( 0);               
  Ctrl.CSM.CSM(30).SC.MASTER.IC.TX_START_READ         <=  reg_data(2434)( 1);               
  Ctrl.CSM.CSM(30).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(2435)(15 downto  0);     
  Ctrl.CSM.CSM(30).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(2435)(31 downto 16);     
  Ctrl.CSM.CSM(30).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(2436)( 7 downto  0);     
  Ctrl.CSM.CSM(30).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(2436)(31 downto 24);     
  Ctrl.CSM.CSM(30).SC.MASTER.IC.TX_WR                 <=  reg_data(2437)( 0);               
  Ctrl.CSM.CSM(30).SC.MASTER.TX_CMD                   <=  reg_data(2441)( 7 downto  0);     
  Ctrl.CSM.CSM(30).SC.MASTER.TX_ADDRESS               <=  reg_data(2441)(15 downto  8);     
  Ctrl.CSM.CSM(30).SC.MASTER.TX_TRANSID               <=  reg_data(2441)(23 downto 16);     
  Ctrl.CSM.CSM(30).SC.MASTER.TX_CHANNEL               <=  reg_data(2441)(31 downto 24);     
  Ctrl.CSM.CSM(30).SC.MASTER.TX_DATA                  <=  reg_data(2442)(31 downto  0);     
  Ctrl.CSM.CSM(30).SC.MASTER.SCA_ENABLE               <=  reg_data(2453)( 2 downto  0);     
  Ctrl.CSM.CSM(30).SC.MASTER.START_RESET              <=  reg_data(2454)( 0);               
  Ctrl.CSM.CSM(30).SC.MASTER.START_CONNECT            <=  reg_data(2454)( 1);               
  Ctrl.CSM.CSM(30).SC.MASTER.START_COMMAND            <=  reg_data(2454)( 2);               
  Ctrl.CSM.CSM(30).SC.MASTER.INJ_CRC_ERR              <=  reg_data(2454)( 3);               
  Ctrl.CSM.CSM(30).SC.FRAME_FORMAT                    <=  reg_data(2457)( 0);               
  Ctrl.CSM.CSM(30).SC.SLAVE.TX_RESET                  <=  reg_data(2464)( 0);               
  Ctrl.CSM.CSM(30).SC.SLAVE.RX_RESET                  <=  reg_data(2465)( 1);               
  Ctrl.CSM.CSM(30).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(2466)( 0);               
  Ctrl.CSM.CSM(30).SC.SLAVE.IC.TX_START_READ          <=  reg_data(2466)( 1);               
  Ctrl.CSM.CSM(30).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(2467)(15 downto  0);     
  Ctrl.CSM.CSM(30).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(2467)(31 downto 16);     
  Ctrl.CSM.CSM(30).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(2468)( 7 downto  0);     
  Ctrl.CSM.CSM(30).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(2468)(31 downto 24);     
  Ctrl.CSM.CSM(30).SC.SLAVE.IC.TX_WR                  <=  reg_data(2469)( 0);               
  Ctrl.CSM.CSM(31).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(2496)( 0);               
  Ctrl.CSM.CSM(31).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(2498)( 0);               
  Ctrl.CSM.CSM(31).LPGBT.DOWNLINK.RESET               <=  reg_data(2507)( 0);               
  Ctrl.CSM.CSM(31).SC.MASTER.TX_RESET                 <=  reg_data(2512)( 0);               
  Ctrl.CSM.CSM(31).SC.MASTER.RX_RESET                 <=  reg_data(2513)( 1);               
  Ctrl.CSM.CSM(31).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(2514)( 0);               
  Ctrl.CSM.CSM(31).SC.MASTER.IC.TX_START_READ         <=  reg_data(2514)( 1);               
  Ctrl.CSM.CSM(31).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(2515)(15 downto  0);     
  Ctrl.CSM.CSM(31).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(2515)(31 downto 16);     
  Ctrl.CSM.CSM(31).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(2516)( 7 downto  0);     
  Ctrl.CSM.CSM(31).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(2516)(31 downto 24);     
  Ctrl.CSM.CSM(31).SC.MASTER.IC.TX_WR                 <=  reg_data(2517)( 0);               
  Ctrl.CSM.CSM(31).SC.MASTER.TX_CMD                   <=  reg_data(2521)( 7 downto  0);     
  Ctrl.CSM.CSM(31).SC.MASTER.TX_ADDRESS               <=  reg_data(2521)(15 downto  8);     
  Ctrl.CSM.CSM(31).SC.MASTER.TX_TRANSID               <=  reg_data(2521)(23 downto 16);     
  Ctrl.CSM.CSM(31).SC.MASTER.TX_CHANNEL               <=  reg_data(2521)(31 downto 24);     
  Ctrl.CSM.CSM(31).SC.MASTER.TX_DATA                  <=  reg_data(2522)(31 downto  0);     
  Ctrl.CSM.CSM(31).SC.MASTER.SCA_ENABLE               <=  reg_data(2533)( 2 downto  0);     
  Ctrl.CSM.CSM(31).SC.MASTER.START_RESET              <=  reg_data(2534)( 0);               
  Ctrl.CSM.CSM(31).SC.MASTER.START_CONNECT            <=  reg_data(2534)( 1);               
  Ctrl.CSM.CSM(31).SC.MASTER.START_COMMAND            <=  reg_data(2534)( 2);               
  Ctrl.CSM.CSM(31).SC.MASTER.INJ_CRC_ERR              <=  reg_data(2534)( 3);               
  Ctrl.CSM.CSM(31).SC.FRAME_FORMAT                    <=  reg_data(2537)( 0);               
  Ctrl.CSM.CSM(31).SC.SLAVE.TX_RESET                  <=  reg_data(2544)( 0);               
  Ctrl.CSM.CSM(31).SC.SLAVE.RX_RESET                  <=  reg_data(2545)( 1);               
  Ctrl.CSM.CSM(31).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(2546)( 0);               
  Ctrl.CSM.CSM(31).SC.SLAVE.IC.TX_START_READ          <=  reg_data(2546)( 1);               
  Ctrl.CSM.CSM(31).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(2547)(15 downto  0);     
  Ctrl.CSM.CSM(31).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(2547)(31 downto 16);     
  Ctrl.CSM.CSM(31).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(2548)( 7 downto  0);     
  Ctrl.CSM.CSM(31).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(2548)(31 downto 24);     
  Ctrl.CSM.CSM(31).SC.SLAVE.IC.TX_WR                  <=  reg_data(2549)( 0);               
  Ctrl.CSM.CSM(32).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(2576)( 0);               
  Ctrl.CSM.CSM(32).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(2578)( 0);               
  Ctrl.CSM.CSM(32).LPGBT.DOWNLINK.RESET               <=  reg_data(2587)( 0);               
  Ctrl.CSM.CSM(32).SC.MASTER.TX_RESET                 <=  reg_data(2592)( 0);               
  Ctrl.CSM.CSM(32).SC.MASTER.RX_RESET                 <=  reg_data(2593)( 1);               
  Ctrl.CSM.CSM(32).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(2594)( 0);               
  Ctrl.CSM.CSM(32).SC.MASTER.IC.TX_START_READ         <=  reg_data(2594)( 1);               
  Ctrl.CSM.CSM(32).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(2595)(15 downto  0);     
  Ctrl.CSM.CSM(32).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(2595)(31 downto 16);     
  Ctrl.CSM.CSM(32).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(2596)( 7 downto  0);     
  Ctrl.CSM.CSM(32).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(2596)(31 downto 24);     
  Ctrl.CSM.CSM(32).SC.MASTER.IC.TX_WR                 <=  reg_data(2597)( 0);               
  Ctrl.CSM.CSM(32).SC.MASTER.TX_CMD                   <=  reg_data(2601)( 7 downto  0);     
  Ctrl.CSM.CSM(32).SC.MASTER.TX_ADDRESS               <=  reg_data(2601)(15 downto  8);     
  Ctrl.CSM.CSM(32).SC.MASTER.TX_TRANSID               <=  reg_data(2601)(23 downto 16);     
  Ctrl.CSM.CSM(32).SC.MASTER.TX_CHANNEL               <=  reg_data(2601)(31 downto 24);     
  Ctrl.CSM.CSM(32).SC.MASTER.TX_DATA                  <=  reg_data(2602)(31 downto  0);     
  Ctrl.CSM.CSM(32).SC.MASTER.SCA_ENABLE               <=  reg_data(2613)( 2 downto  0);     
  Ctrl.CSM.CSM(32).SC.MASTER.START_RESET              <=  reg_data(2614)( 0);               
  Ctrl.CSM.CSM(32).SC.MASTER.START_CONNECT            <=  reg_data(2614)( 1);               
  Ctrl.CSM.CSM(32).SC.MASTER.START_COMMAND            <=  reg_data(2614)( 2);               
  Ctrl.CSM.CSM(32).SC.MASTER.INJ_CRC_ERR              <=  reg_data(2614)( 3);               
  Ctrl.CSM.CSM(32).SC.FRAME_FORMAT                    <=  reg_data(2617)( 0);               
  Ctrl.CSM.CSM(32).SC.SLAVE.TX_RESET                  <=  reg_data(2624)( 0);               
  Ctrl.CSM.CSM(32).SC.SLAVE.RX_RESET                  <=  reg_data(2625)( 1);               
  Ctrl.CSM.CSM(32).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(2626)( 0);               
  Ctrl.CSM.CSM(32).SC.SLAVE.IC.TX_START_READ          <=  reg_data(2626)( 1);               
  Ctrl.CSM.CSM(32).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(2627)(15 downto  0);     
  Ctrl.CSM.CSM(32).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(2627)(31 downto 16);     
  Ctrl.CSM.CSM(32).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(2628)( 7 downto  0);     
  Ctrl.CSM.CSM(32).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(2628)(31 downto 24);     
  Ctrl.CSM.CSM(32).SC.SLAVE.IC.TX_WR                  <=  reg_data(2629)( 0);               
  Ctrl.CSM.CSM(33).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(2656)( 0);               
  Ctrl.CSM.CSM(33).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(2658)( 0);               
  Ctrl.CSM.CSM(33).LPGBT.DOWNLINK.RESET               <=  reg_data(2667)( 0);               
  Ctrl.CSM.CSM(33).SC.MASTER.TX_RESET                 <=  reg_data(2672)( 0);               
  Ctrl.CSM.CSM(33).SC.MASTER.RX_RESET                 <=  reg_data(2673)( 1);               
  Ctrl.CSM.CSM(33).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(2674)( 0);               
  Ctrl.CSM.CSM(33).SC.MASTER.IC.TX_START_READ         <=  reg_data(2674)( 1);               
  Ctrl.CSM.CSM(33).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(2675)(15 downto  0);     
  Ctrl.CSM.CSM(33).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(2675)(31 downto 16);     
  Ctrl.CSM.CSM(33).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(2676)( 7 downto  0);     
  Ctrl.CSM.CSM(33).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(2676)(31 downto 24);     
  Ctrl.CSM.CSM(33).SC.MASTER.IC.TX_WR                 <=  reg_data(2677)( 0);               
  Ctrl.CSM.CSM(33).SC.MASTER.TX_CMD                   <=  reg_data(2681)( 7 downto  0);     
  Ctrl.CSM.CSM(33).SC.MASTER.TX_ADDRESS               <=  reg_data(2681)(15 downto  8);     
  Ctrl.CSM.CSM(33).SC.MASTER.TX_TRANSID               <=  reg_data(2681)(23 downto 16);     
  Ctrl.CSM.CSM(33).SC.MASTER.TX_CHANNEL               <=  reg_data(2681)(31 downto 24);     
  Ctrl.CSM.CSM(33).SC.MASTER.TX_DATA                  <=  reg_data(2682)(31 downto  0);     
  Ctrl.CSM.CSM(33).SC.MASTER.SCA_ENABLE               <=  reg_data(2693)( 2 downto  0);     
  Ctrl.CSM.CSM(33).SC.MASTER.START_RESET              <=  reg_data(2694)( 0);               
  Ctrl.CSM.CSM(33).SC.MASTER.START_CONNECT            <=  reg_data(2694)( 1);               
  Ctrl.CSM.CSM(33).SC.MASTER.START_COMMAND            <=  reg_data(2694)( 2);               
  Ctrl.CSM.CSM(33).SC.MASTER.INJ_CRC_ERR              <=  reg_data(2694)( 3);               
  Ctrl.CSM.CSM(33).SC.FRAME_FORMAT                    <=  reg_data(2697)( 0);               
  Ctrl.CSM.CSM(33).SC.SLAVE.TX_RESET                  <=  reg_data(2704)( 0);               
  Ctrl.CSM.CSM(33).SC.SLAVE.RX_RESET                  <=  reg_data(2705)( 1);               
  Ctrl.CSM.CSM(33).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(2706)( 0);               
  Ctrl.CSM.CSM(33).SC.SLAVE.IC.TX_START_READ          <=  reg_data(2706)( 1);               
  Ctrl.CSM.CSM(33).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(2707)(15 downto  0);     
  Ctrl.CSM.CSM(33).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(2707)(31 downto 16);     
  Ctrl.CSM.CSM(33).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(2708)( 7 downto  0);     
  Ctrl.CSM.CSM(33).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(2708)(31 downto 24);     
  Ctrl.CSM.CSM(33).SC.SLAVE.IC.TX_WR                  <=  reg_data(2709)( 0);               
  Ctrl.CSM.CSM(34).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(2736)( 0);               
  Ctrl.CSM.CSM(34).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(2738)( 0);               
  Ctrl.CSM.CSM(34).LPGBT.DOWNLINK.RESET               <=  reg_data(2747)( 0);               
  Ctrl.CSM.CSM(34).SC.MASTER.TX_RESET                 <=  reg_data(2752)( 0);               
  Ctrl.CSM.CSM(34).SC.MASTER.RX_RESET                 <=  reg_data(2753)( 1);               
  Ctrl.CSM.CSM(34).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(2754)( 0);               
  Ctrl.CSM.CSM(34).SC.MASTER.IC.TX_START_READ         <=  reg_data(2754)( 1);               
  Ctrl.CSM.CSM(34).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(2755)(15 downto  0);     
  Ctrl.CSM.CSM(34).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(2755)(31 downto 16);     
  Ctrl.CSM.CSM(34).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(2756)( 7 downto  0);     
  Ctrl.CSM.CSM(34).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(2756)(31 downto 24);     
  Ctrl.CSM.CSM(34).SC.MASTER.IC.TX_WR                 <=  reg_data(2757)( 0);               
  Ctrl.CSM.CSM(34).SC.MASTER.TX_CMD                   <=  reg_data(2761)( 7 downto  0);     
  Ctrl.CSM.CSM(34).SC.MASTER.TX_ADDRESS               <=  reg_data(2761)(15 downto  8);     
  Ctrl.CSM.CSM(34).SC.MASTER.TX_TRANSID               <=  reg_data(2761)(23 downto 16);     
  Ctrl.CSM.CSM(34).SC.MASTER.TX_CHANNEL               <=  reg_data(2761)(31 downto 24);     
  Ctrl.CSM.CSM(34).SC.MASTER.TX_DATA                  <=  reg_data(2762)(31 downto  0);     
  Ctrl.CSM.CSM(34).SC.MASTER.SCA_ENABLE               <=  reg_data(2773)( 2 downto  0);     
  Ctrl.CSM.CSM(34).SC.MASTER.START_RESET              <=  reg_data(2774)( 0);               
  Ctrl.CSM.CSM(34).SC.MASTER.START_CONNECT            <=  reg_data(2774)( 1);               
  Ctrl.CSM.CSM(34).SC.MASTER.START_COMMAND            <=  reg_data(2774)( 2);               
  Ctrl.CSM.CSM(34).SC.MASTER.INJ_CRC_ERR              <=  reg_data(2774)( 3);               
  Ctrl.CSM.CSM(34).SC.FRAME_FORMAT                    <=  reg_data(2777)( 0);               
  Ctrl.CSM.CSM(34).SC.SLAVE.TX_RESET                  <=  reg_data(2784)( 0);               
  Ctrl.CSM.CSM(34).SC.SLAVE.RX_RESET                  <=  reg_data(2785)( 1);               
  Ctrl.CSM.CSM(34).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(2786)( 0);               
  Ctrl.CSM.CSM(34).SC.SLAVE.IC.TX_START_READ          <=  reg_data(2786)( 1);               
  Ctrl.CSM.CSM(34).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(2787)(15 downto  0);     
  Ctrl.CSM.CSM(34).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(2787)(31 downto 16);     
  Ctrl.CSM.CSM(34).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(2788)( 7 downto  0);     
  Ctrl.CSM.CSM(34).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(2788)(31 downto 24);     
  Ctrl.CSM.CSM(34).SC.SLAVE.IC.TX_WR                  <=  reg_data(2789)( 0);               
  Ctrl.CSM.CSM(35).LPGBT.UPLINK.UPLINK(0).RESET       <=  reg_data(2816)( 0);               
  Ctrl.CSM.CSM(35).LPGBT.UPLINK.UPLINK(1).RESET       <=  reg_data(2818)( 0);               
  Ctrl.CSM.CSM(35).LPGBT.DOWNLINK.RESET               <=  reg_data(2827)( 0);               
  Ctrl.CSM.CSM(35).SC.MASTER.TX_RESET                 <=  reg_data(2832)( 0);               
  Ctrl.CSM.CSM(35).SC.MASTER.RX_RESET                 <=  reg_data(2833)( 1);               
  Ctrl.CSM.CSM(35).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(2834)( 0);               
  Ctrl.CSM.CSM(35).SC.MASTER.IC.TX_START_READ         <=  reg_data(2834)( 1);               
  Ctrl.CSM.CSM(35).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(2835)(15 downto  0);     
  Ctrl.CSM.CSM(35).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(2835)(31 downto 16);     
  Ctrl.CSM.CSM(35).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(2836)( 7 downto  0);     
  Ctrl.CSM.CSM(35).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(2836)(31 downto 24);     
  Ctrl.CSM.CSM(35).SC.MASTER.IC.TX_WR                 <=  reg_data(2837)( 0);               
  Ctrl.CSM.CSM(35).SC.MASTER.TX_CMD                   <=  reg_data(2841)( 7 downto  0);     
  Ctrl.CSM.CSM(35).SC.MASTER.TX_ADDRESS               <=  reg_data(2841)(15 downto  8);     
  Ctrl.CSM.CSM(35).SC.MASTER.TX_TRANSID               <=  reg_data(2841)(23 downto 16);     
  Ctrl.CSM.CSM(35).SC.MASTER.TX_CHANNEL               <=  reg_data(2841)(31 downto 24);     
  Ctrl.CSM.CSM(35).SC.MASTER.TX_DATA                  <=  reg_data(2842)(31 downto  0);     
  Ctrl.CSM.CSM(35).SC.MASTER.SCA_ENABLE               <=  reg_data(2853)( 2 downto  0);     
  Ctrl.CSM.CSM(35).SC.MASTER.START_RESET              <=  reg_data(2854)( 0);               
  Ctrl.CSM.CSM(35).SC.MASTER.START_CONNECT            <=  reg_data(2854)( 1);               
  Ctrl.CSM.CSM(35).SC.MASTER.START_COMMAND            <=  reg_data(2854)( 2);               
  Ctrl.CSM.CSM(35).SC.MASTER.INJ_CRC_ERR              <=  reg_data(2854)( 3);               
  Ctrl.CSM.CSM(35).SC.FRAME_FORMAT                    <=  reg_data(2857)( 0);               
  Ctrl.CSM.CSM(35).SC.SLAVE.TX_RESET                  <=  reg_data(2864)( 0);               
  Ctrl.CSM.CSM(35).SC.SLAVE.RX_RESET                  <=  reg_data(2865)( 1);               
  Ctrl.CSM.CSM(35).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(2866)( 0);               
  Ctrl.CSM.CSM(35).SC.SLAVE.IC.TX_START_READ          <=  reg_data(2866)( 1);               
  Ctrl.CSM.CSM(35).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(2867)(15 downto  0);     
  Ctrl.CSM.CSM(35).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(2867)(31 downto 16);     
  Ctrl.CSM.CSM(35).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(2868)( 7 downto  0);     
  Ctrl.CSM.CSM(35).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(2868)(31 downto 24);     
  Ctrl.CSM.CSM(35).SC.SLAVE.IC.TX_WR                  <=  reg_data(2869)( 0);               
  Ctrl.SL.TX_ENA_TEST_PATTERN                         <=  reg_data(3104)(31 downto  0);     
  Ctrl.SL.RESET.rx_comma                              <=  reg_data(3120)( 0);               
  Ctrl.SL.RESET.rx_packet_former                      <=  reg_data(3120)( 1);               
  Ctrl.SL.RESET.rx_counter                            <=  reg_data(3120)( 2);               


  reg_writes: process (clk_axi, reset_axi_n) is
  begin  -- process reg_writes
    if reset_axi_n = '0' then                 -- asynchronous reset (active low)
      reg_data( 0)( 0)  <= DEFAULT_HAL_CTRL_t.RESET_DOWNLINKS;
      reg_data( 1)( 0)  <= DEFAULT_HAL_CTRL_t.RESET_UPLINKS;
      reg_data( 2)( 0)  <= DEFAULT_HAL_CTRL_t.RESET_COUNTERS;
      reg_data(16)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(18)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(27)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).LPGBT.DOWNLINK.RESET;
      reg_data(32)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.TX_RESET;
      reg_data(33)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.RX_RESET;
      reg_data(34)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.IC.TX_START_WRITE;
      reg_data(34)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.IC.TX_START_READ;
      reg_data(35)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(35)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(36)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(36)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(37)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.IC.TX_WR;
      reg_data(41)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.TX_CMD;
      reg_data(41)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.TX_ADDRESS;
      reg_data(41)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.TX_TRANSID;
      reg_data(41)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.TX_CHANNEL;
      reg_data(42)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.TX_DATA;
      reg_data(53)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.SCA_ENABLE;
      reg_data(54)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.START_RESET;
      reg_data(54)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.START_CONNECT;
      reg_data(54)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.START_COMMAND;
      reg_data(54)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.INJ_CRC_ERR;
      reg_data(57)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.FRAME_FORMAT;
      reg_data(64)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.SLAVE.TX_RESET;
      reg_data(65)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.SLAVE.RX_RESET;
      reg_data(66)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(66)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.SLAVE.IC.TX_START_READ;
      reg_data(67)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(67)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(68)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(68)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(69)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.SLAVE.IC.TX_WR;
      reg_data(96)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(98)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(107)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).LPGBT.DOWNLINK.RESET;
      reg_data(112)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.TX_RESET;
      reg_data(113)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.RX_RESET;
      reg_data(114)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.IC.TX_START_WRITE;
      reg_data(114)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.IC.TX_START_READ;
      reg_data(115)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(115)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(116)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(116)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(117)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.IC.TX_WR;
      reg_data(121)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.TX_CMD;
      reg_data(121)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.TX_ADDRESS;
      reg_data(121)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.TX_TRANSID;
      reg_data(121)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.TX_CHANNEL;
      reg_data(122)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.TX_DATA;
      reg_data(133)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.SCA_ENABLE;
      reg_data(134)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.START_RESET;
      reg_data(134)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.START_CONNECT;
      reg_data(134)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.START_COMMAND;
      reg_data(134)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.INJ_CRC_ERR;
      reg_data(137)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.FRAME_FORMAT;
      reg_data(144)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.SLAVE.TX_RESET;
      reg_data(145)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.SLAVE.RX_RESET;
      reg_data(146)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(146)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.SLAVE.IC.TX_START_READ;
      reg_data(147)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(147)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(148)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(148)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(149)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.SLAVE.IC.TX_WR;
      reg_data(176)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(178)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(187)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).LPGBT.DOWNLINK.RESET;
      reg_data(192)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.TX_RESET;
      reg_data(193)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.RX_RESET;
      reg_data(194)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.IC.TX_START_WRITE;
      reg_data(194)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.IC.TX_START_READ;
      reg_data(195)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(195)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(196)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(196)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(197)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.IC.TX_WR;
      reg_data(201)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.TX_CMD;
      reg_data(201)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.TX_ADDRESS;
      reg_data(201)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.TX_TRANSID;
      reg_data(201)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.TX_CHANNEL;
      reg_data(202)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.TX_DATA;
      reg_data(213)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.SCA_ENABLE;
      reg_data(214)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.START_RESET;
      reg_data(214)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.START_CONNECT;
      reg_data(214)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.START_COMMAND;
      reg_data(214)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.INJ_CRC_ERR;
      reg_data(217)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.FRAME_FORMAT;
      reg_data(224)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.SLAVE.TX_RESET;
      reg_data(225)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.SLAVE.RX_RESET;
      reg_data(226)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(226)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.SLAVE.IC.TX_START_READ;
      reg_data(227)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(227)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(228)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(228)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(229)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.SLAVE.IC.TX_WR;
      reg_data(256)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(258)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(267)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).LPGBT.DOWNLINK.RESET;
      reg_data(272)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.TX_RESET;
      reg_data(273)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.RX_RESET;
      reg_data(274)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.IC.TX_START_WRITE;
      reg_data(274)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.IC.TX_START_READ;
      reg_data(275)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(275)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(276)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(276)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(277)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.IC.TX_WR;
      reg_data(281)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.TX_CMD;
      reg_data(281)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.TX_ADDRESS;
      reg_data(281)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.TX_TRANSID;
      reg_data(281)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.TX_CHANNEL;
      reg_data(282)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.TX_DATA;
      reg_data(293)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.SCA_ENABLE;
      reg_data(294)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.START_RESET;
      reg_data(294)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.START_CONNECT;
      reg_data(294)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.START_COMMAND;
      reg_data(294)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.INJ_CRC_ERR;
      reg_data(297)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.FRAME_FORMAT;
      reg_data(304)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.SLAVE.TX_RESET;
      reg_data(305)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.SLAVE.RX_RESET;
      reg_data(306)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(306)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.SLAVE.IC.TX_START_READ;
      reg_data(307)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(307)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(308)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(308)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(309)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.SLAVE.IC.TX_WR;
      reg_data(336)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(338)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(347)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).LPGBT.DOWNLINK.RESET;
      reg_data(352)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.TX_RESET;
      reg_data(353)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.RX_RESET;
      reg_data(354)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.IC.TX_START_WRITE;
      reg_data(354)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.IC.TX_START_READ;
      reg_data(355)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(355)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(356)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(356)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(357)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.IC.TX_WR;
      reg_data(361)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.TX_CMD;
      reg_data(361)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.TX_ADDRESS;
      reg_data(361)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.TX_TRANSID;
      reg_data(361)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.TX_CHANNEL;
      reg_data(362)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.TX_DATA;
      reg_data(373)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.SCA_ENABLE;
      reg_data(374)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.START_RESET;
      reg_data(374)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.START_CONNECT;
      reg_data(374)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.START_COMMAND;
      reg_data(374)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.INJ_CRC_ERR;
      reg_data(377)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.FRAME_FORMAT;
      reg_data(384)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.SLAVE.TX_RESET;
      reg_data(385)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.SLAVE.RX_RESET;
      reg_data(386)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(386)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.SLAVE.IC.TX_START_READ;
      reg_data(387)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(387)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(388)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(388)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(389)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.SLAVE.IC.TX_WR;
      reg_data(416)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(418)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(427)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).LPGBT.DOWNLINK.RESET;
      reg_data(432)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.TX_RESET;
      reg_data(433)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.RX_RESET;
      reg_data(434)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.IC.TX_START_WRITE;
      reg_data(434)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.IC.TX_START_READ;
      reg_data(435)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(435)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(436)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(436)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(437)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.IC.TX_WR;
      reg_data(441)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.TX_CMD;
      reg_data(441)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.TX_ADDRESS;
      reg_data(441)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.TX_TRANSID;
      reg_data(441)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.TX_CHANNEL;
      reg_data(442)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.TX_DATA;
      reg_data(453)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.SCA_ENABLE;
      reg_data(454)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.START_RESET;
      reg_data(454)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.START_CONNECT;
      reg_data(454)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.START_COMMAND;
      reg_data(454)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.INJ_CRC_ERR;
      reg_data(457)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.FRAME_FORMAT;
      reg_data(464)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.SLAVE.TX_RESET;
      reg_data(465)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.SLAVE.RX_RESET;
      reg_data(466)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(466)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.SLAVE.IC.TX_START_READ;
      reg_data(467)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(467)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(468)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(468)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(469)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.SLAVE.IC.TX_WR;
      reg_data(496)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(498)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(507)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).LPGBT.DOWNLINK.RESET;
      reg_data(512)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.TX_RESET;
      reg_data(513)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.RX_RESET;
      reg_data(514)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.IC.TX_START_WRITE;
      reg_data(514)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.IC.TX_START_READ;
      reg_data(515)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(515)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(516)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(516)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(517)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.IC.TX_WR;
      reg_data(521)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.TX_CMD;
      reg_data(521)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.TX_ADDRESS;
      reg_data(521)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.TX_TRANSID;
      reg_data(521)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.TX_CHANNEL;
      reg_data(522)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.TX_DATA;
      reg_data(533)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.SCA_ENABLE;
      reg_data(534)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.START_RESET;
      reg_data(534)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.START_CONNECT;
      reg_data(534)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.START_COMMAND;
      reg_data(534)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.INJ_CRC_ERR;
      reg_data(537)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.FRAME_FORMAT;
      reg_data(544)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.SLAVE.TX_RESET;
      reg_data(545)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.SLAVE.RX_RESET;
      reg_data(546)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(546)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.SLAVE.IC.TX_START_READ;
      reg_data(547)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(547)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(548)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(548)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(549)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.SLAVE.IC.TX_WR;
      reg_data(576)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(578)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(587)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).LPGBT.DOWNLINK.RESET;
      reg_data(592)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.TX_RESET;
      reg_data(593)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.RX_RESET;
      reg_data(594)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.IC.TX_START_WRITE;
      reg_data(594)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.IC.TX_START_READ;
      reg_data(595)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(595)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(596)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(596)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(597)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.IC.TX_WR;
      reg_data(601)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.TX_CMD;
      reg_data(601)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.TX_ADDRESS;
      reg_data(601)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.TX_TRANSID;
      reg_data(601)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.TX_CHANNEL;
      reg_data(602)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.TX_DATA;
      reg_data(613)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.SCA_ENABLE;
      reg_data(614)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.START_RESET;
      reg_data(614)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.START_CONNECT;
      reg_data(614)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.START_COMMAND;
      reg_data(614)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.INJ_CRC_ERR;
      reg_data(617)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.FRAME_FORMAT;
      reg_data(624)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.SLAVE.TX_RESET;
      reg_data(625)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.SLAVE.RX_RESET;
      reg_data(626)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(626)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.SLAVE.IC.TX_START_READ;
      reg_data(627)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(627)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(628)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(628)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(629)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.SLAVE.IC.TX_WR;
      reg_data(656)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(658)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(667)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).LPGBT.DOWNLINK.RESET;
      reg_data(672)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.TX_RESET;
      reg_data(673)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.RX_RESET;
      reg_data(674)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.IC.TX_START_WRITE;
      reg_data(674)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.IC.TX_START_READ;
      reg_data(675)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(675)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(676)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(676)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(677)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.IC.TX_WR;
      reg_data(681)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.TX_CMD;
      reg_data(681)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.TX_ADDRESS;
      reg_data(681)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.TX_TRANSID;
      reg_data(681)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.TX_CHANNEL;
      reg_data(682)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.TX_DATA;
      reg_data(693)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.SCA_ENABLE;
      reg_data(694)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.START_RESET;
      reg_data(694)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.START_CONNECT;
      reg_data(694)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.START_COMMAND;
      reg_data(694)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.INJ_CRC_ERR;
      reg_data(697)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.FRAME_FORMAT;
      reg_data(704)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.SLAVE.TX_RESET;
      reg_data(705)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.SLAVE.RX_RESET;
      reg_data(706)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(706)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.SLAVE.IC.TX_START_READ;
      reg_data(707)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(707)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(708)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(708)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(709)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.SLAVE.IC.TX_WR;
      reg_data(736)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(738)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(747)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).LPGBT.DOWNLINK.RESET;
      reg_data(752)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.TX_RESET;
      reg_data(753)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.RX_RESET;
      reg_data(754)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.IC.TX_START_WRITE;
      reg_data(754)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.IC.TX_START_READ;
      reg_data(755)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(755)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(756)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(756)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(757)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.IC.TX_WR;
      reg_data(761)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.TX_CMD;
      reg_data(761)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.TX_ADDRESS;
      reg_data(761)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.TX_TRANSID;
      reg_data(761)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.TX_CHANNEL;
      reg_data(762)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.TX_DATA;
      reg_data(773)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.SCA_ENABLE;
      reg_data(774)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.START_RESET;
      reg_data(774)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.START_CONNECT;
      reg_data(774)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.START_COMMAND;
      reg_data(774)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.INJ_CRC_ERR;
      reg_data(777)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.FRAME_FORMAT;
      reg_data(784)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.SLAVE.TX_RESET;
      reg_data(785)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.SLAVE.RX_RESET;
      reg_data(786)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(786)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.SLAVE.IC.TX_START_READ;
      reg_data(787)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(787)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(788)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(788)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(789)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.SLAVE.IC.TX_WR;
      reg_data(816)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(818)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(827)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).LPGBT.DOWNLINK.RESET;
      reg_data(832)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.TX_RESET;
      reg_data(833)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.RX_RESET;
      reg_data(834)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.IC.TX_START_WRITE;
      reg_data(834)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.IC.TX_START_READ;
      reg_data(835)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(835)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(836)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(836)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(837)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.IC.TX_WR;
      reg_data(841)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.TX_CMD;
      reg_data(841)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.TX_ADDRESS;
      reg_data(841)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.TX_TRANSID;
      reg_data(841)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.TX_CHANNEL;
      reg_data(842)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.TX_DATA;
      reg_data(853)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.SCA_ENABLE;
      reg_data(854)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.START_RESET;
      reg_data(854)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.START_CONNECT;
      reg_data(854)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.START_COMMAND;
      reg_data(854)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.INJ_CRC_ERR;
      reg_data(857)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.FRAME_FORMAT;
      reg_data(864)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.SLAVE.TX_RESET;
      reg_data(865)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.SLAVE.RX_RESET;
      reg_data(866)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(866)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.SLAVE.IC.TX_START_READ;
      reg_data(867)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(867)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(868)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(868)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(869)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.SLAVE.IC.TX_WR;
      reg_data(896)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(898)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(907)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).LPGBT.DOWNLINK.RESET;
      reg_data(912)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.TX_RESET;
      reg_data(913)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.RX_RESET;
      reg_data(914)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.IC.TX_START_WRITE;
      reg_data(914)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.IC.TX_START_READ;
      reg_data(915)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(915)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(916)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(916)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(917)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.IC.TX_WR;
      reg_data(921)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.TX_CMD;
      reg_data(921)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.TX_ADDRESS;
      reg_data(921)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.TX_TRANSID;
      reg_data(921)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.TX_CHANNEL;
      reg_data(922)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.TX_DATA;
      reg_data(933)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.SCA_ENABLE;
      reg_data(934)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.START_RESET;
      reg_data(934)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.START_CONNECT;
      reg_data(934)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.START_COMMAND;
      reg_data(934)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.INJ_CRC_ERR;
      reg_data(937)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.FRAME_FORMAT;
      reg_data(944)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.SLAVE.TX_RESET;
      reg_data(945)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.SLAVE.RX_RESET;
      reg_data(946)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(946)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.SLAVE.IC.TX_START_READ;
      reg_data(947)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(947)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(948)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(948)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(949)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.SLAVE.IC.TX_WR;
      reg_data(976)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(978)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(987)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).LPGBT.DOWNLINK.RESET;
      reg_data(992)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.TX_RESET;
      reg_data(993)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.RX_RESET;
      reg_data(994)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.IC.TX_START_WRITE;
      reg_data(994)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.IC.TX_START_READ;
      reg_data(995)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(995)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(996)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(996)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(997)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.IC.TX_WR;
      reg_data(1001)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.TX_CMD;
      reg_data(1001)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.TX_ADDRESS;
      reg_data(1001)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.TX_TRANSID;
      reg_data(1001)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.TX_CHANNEL;
      reg_data(1002)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.TX_DATA;
      reg_data(1013)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.SCA_ENABLE;
      reg_data(1014)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.START_RESET;
      reg_data(1014)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.START_CONNECT;
      reg_data(1014)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.START_COMMAND;
      reg_data(1014)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.INJ_CRC_ERR;
      reg_data(1017)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.FRAME_FORMAT;
      reg_data(1024)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.SLAVE.TX_RESET;
      reg_data(1025)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.SLAVE.RX_RESET;
      reg_data(1026)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(1026)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.SLAVE.IC.TX_START_READ;
      reg_data(1027)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(1027)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1028)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(1028)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(1029)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.SLAVE.IC.TX_WR;
      reg_data(1056)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(1058)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(1067)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).LPGBT.DOWNLINK.RESET;
      reg_data(1072)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.TX_RESET;
      reg_data(1073)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.RX_RESET;
      reg_data(1074)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.IC.TX_START_WRITE;
      reg_data(1074)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.IC.TX_START_READ;
      reg_data(1075)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(1075)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1076)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(1076)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(1077)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.IC.TX_WR;
      reg_data(1081)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.TX_CMD;
      reg_data(1081)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.TX_ADDRESS;
      reg_data(1081)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.TX_TRANSID;
      reg_data(1081)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.TX_CHANNEL;
      reg_data(1082)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.TX_DATA;
      reg_data(1093)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.SCA_ENABLE;
      reg_data(1094)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.START_RESET;
      reg_data(1094)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.START_CONNECT;
      reg_data(1094)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.START_COMMAND;
      reg_data(1094)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.INJ_CRC_ERR;
      reg_data(1097)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.FRAME_FORMAT;
      reg_data(1104)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.SLAVE.TX_RESET;
      reg_data(1105)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.SLAVE.RX_RESET;
      reg_data(1106)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(1106)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.SLAVE.IC.TX_START_READ;
      reg_data(1107)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(1107)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1108)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(1108)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(1109)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.SLAVE.IC.TX_WR;
      reg_data(1136)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(1138)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(1147)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).LPGBT.DOWNLINK.RESET;
      reg_data(1152)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.TX_RESET;
      reg_data(1153)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.RX_RESET;
      reg_data(1154)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.IC.TX_START_WRITE;
      reg_data(1154)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.IC.TX_START_READ;
      reg_data(1155)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(1155)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1156)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(1156)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(1157)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.IC.TX_WR;
      reg_data(1161)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.TX_CMD;
      reg_data(1161)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.TX_ADDRESS;
      reg_data(1161)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.TX_TRANSID;
      reg_data(1161)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.TX_CHANNEL;
      reg_data(1162)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.TX_DATA;
      reg_data(1173)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.SCA_ENABLE;
      reg_data(1174)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.START_RESET;
      reg_data(1174)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.START_CONNECT;
      reg_data(1174)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.START_COMMAND;
      reg_data(1174)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.INJ_CRC_ERR;
      reg_data(1177)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.FRAME_FORMAT;
      reg_data(1184)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.SLAVE.TX_RESET;
      reg_data(1185)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.SLAVE.RX_RESET;
      reg_data(1186)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(1186)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.SLAVE.IC.TX_START_READ;
      reg_data(1187)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(1187)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1188)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(1188)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(1189)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.SLAVE.IC.TX_WR;
      reg_data(1216)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(1218)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(1227)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).LPGBT.DOWNLINK.RESET;
      reg_data(1232)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.TX_RESET;
      reg_data(1233)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.RX_RESET;
      reg_data(1234)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.IC.TX_START_WRITE;
      reg_data(1234)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.IC.TX_START_READ;
      reg_data(1235)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(1235)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1236)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(1236)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(1237)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.IC.TX_WR;
      reg_data(1241)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.TX_CMD;
      reg_data(1241)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.TX_ADDRESS;
      reg_data(1241)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.TX_TRANSID;
      reg_data(1241)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.TX_CHANNEL;
      reg_data(1242)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.TX_DATA;
      reg_data(1253)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.SCA_ENABLE;
      reg_data(1254)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.START_RESET;
      reg_data(1254)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.START_CONNECT;
      reg_data(1254)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.START_COMMAND;
      reg_data(1254)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.INJ_CRC_ERR;
      reg_data(1257)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.FRAME_FORMAT;
      reg_data(1264)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.SLAVE.TX_RESET;
      reg_data(1265)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.SLAVE.RX_RESET;
      reg_data(1266)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(1266)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.SLAVE.IC.TX_START_READ;
      reg_data(1267)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(1267)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1268)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(1268)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(1269)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.SLAVE.IC.TX_WR;
      reg_data(1296)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(1298)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(1307)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).LPGBT.DOWNLINK.RESET;
      reg_data(1312)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.TX_RESET;
      reg_data(1313)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.RX_RESET;
      reg_data(1314)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.IC.TX_START_WRITE;
      reg_data(1314)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.IC.TX_START_READ;
      reg_data(1315)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(1315)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1316)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(1316)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(1317)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.IC.TX_WR;
      reg_data(1321)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.TX_CMD;
      reg_data(1321)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.TX_ADDRESS;
      reg_data(1321)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.TX_TRANSID;
      reg_data(1321)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.TX_CHANNEL;
      reg_data(1322)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.TX_DATA;
      reg_data(1333)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.SCA_ENABLE;
      reg_data(1334)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.START_RESET;
      reg_data(1334)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.START_CONNECT;
      reg_data(1334)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.START_COMMAND;
      reg_data(1334)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.INJ_CRC_ERR;
      reg_data(1337)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.FRAME_FORMAT;
      reg_data(1344)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.SLAVE.TX_RESET;
      reg_data(1345)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.SLAVE.RX_RESET;
      reg_data(1346)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(1346)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.SLAVE.IC.TX_START_READ;
      reg_data(1347)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(1347)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1348)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(1348)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(1349)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.SLAVE.IC.TX_WR;
      reg_data(1376)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(1378)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(1387)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).LPGBT.DOWNLINK.RESET;
      reg_data(1392)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.TX_RESET;
      reg_data(1393)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.RX_RESET;
      reg_data(1394)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.IC.TX_START_WRITE;
      reg_data(1394)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.IC.TX_START_READ;
      reg_data(1395)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(1395)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1396)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(1396)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(1397)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.IC.TX_WR;
      reg_data(1401)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.TX_CMD;
      reg_data(1401)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.TX_ADDRESS;
      reg_data(1401)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.TX_TRANSID;
      reg_data(1401)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.TX_CHANNEL;
      reg_data(1402)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.TX_DATA;
      reg_data(1413)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.SCA_ENABLE;
      reg_data(1414)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.START_RESET;
      reg_data(1414)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.START_CONNECT;
      reg_data(1414)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.START_COMMAND;
      reg_data(1414)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.INJ_CRC_ERR;
      reg_data(1417)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.FRAME_FORMAT;
      reg_data(1424)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.SLAVE.TX_RESET;
      reg_data(1425)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.SLAVE.RX_RESET;
      reg_data(1426)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(1426)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.SLAVE.IC.TX_START_READ;
      reg_data(1427)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(1427)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1428)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(1428)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(1429)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.SLAVE.IC.TX_WR;
      reg_data(1456)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(1458)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(1467)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).LPGBT.DOWNLINK.RESET;
      reg_data(1472)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.TX_RESET;
      reg_data(1473)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.RX_RESET;
      reg_data(1474)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.IC.TX_START_WRITE;
      reg_data(1474)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.IC.TX_START_READ;
      reg_data(1475)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(1475)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1476)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(1476)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(1477)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.IC.TX_WR;
      reg_data(1481)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.TX_CMD;
      reg_data(1481)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.TX_ADDRESS;
      reg_data(1481)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.TX_TRANSID;
      reg_data(1481)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.TX_CHANNEL;
      reg_data(1482)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.TX_DATA;
      reg_data(1493)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.SCA_ENABLE;
      reg_data(1494)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.START_RESET;
      reg_data(1494)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.START_CONNECT;
      reg_data(1494)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.START_COMMAND;
      reg_data(1494)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.MASTER.INJ_CRC_ERR;
      reg_data(1497)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.FRAME_FORMAT;
      reg_data(1504)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.SLAVE.TX_RESET;
      reg_data(1505)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.SLAVE.RX_RESET;
      reg_data(1506)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(1506)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.SLAVE.IC.TX_START_READ;
      reg_data(1507)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(1507)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1508)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(1508)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(1509)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(18).SC.SLAVE.IC.TX_WR;
      reg_data(1536)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(1538)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(1547)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).LPGBT.DOWNLINK.RESET;
      reg_data(1552)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.TX_RESET;
      reg_data(1553)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.RX_RESET;
      reg_data(1554)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.IC.TX_START_WRITE;
      reg_data(1554)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.IC.TX_START_READ;
      reg_data(1555)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(1555)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1556)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(1556)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(1557)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.IC.TX_WR;
      reg_data(1561)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.TX_CMD;
      reg_data(1561)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.TX_ADDRESS;
      reg_data(1561)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.TX_TRANSID;
      reg_data(1561)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.TX_CHANNEL;
      reg_data(1562)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.TX_DATA;
      reg_data(1573)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.SCA_ENABLE;
      reg_data(1574)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.START_RESET;
      reg_data(1574)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.START_CONNECT;
      reg_data(1574)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.START_COMMAND;
      reg_data(1574)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.MASTER.INJ_CRC_ERR;
      reg_data(1577)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.FRAME_FORMAT;
      reg_data(1584)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.SLAVE.TX_RESET;
      reg_data(1585)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.SLAVE.RX_RESET;
      reg_data(1586)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(1586)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.SLAVE.IC.TX_START_READ;
      reg_data(1587)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(1587)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1588)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(1588)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(1589)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(19).SC.SLAVE.IC.TX_WR;
      reg_data(1616)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(1618)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(1627)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).LPGBT.DOWNLINK.RESET;
      reg_data(1632)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.TX_RESET;
      reg_data(1633)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.RX_RESET;
      reg_data(1634)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.IC.TX_START_WRITE;
      reg_data(1634)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.IC.TX_START_READ;
      reg_data(1635)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(1635)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1636)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(1636)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(1637)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.IC.TX_WR;
      reg_data(1641)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.TX_CMD;
      reg_data(1641)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.TX_ADDRESS;
      reg_data(1641)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.TX_TRANSID;
      reg_data(1641)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.TX_CHANNEL;
      reg_data(1642)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.TX_DATA;
      reg_data(1653)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.SCA_ENABLE;
      reg_data(1654)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.START_RESET;
      reg_data(1654)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.START_CONNECT;
      reg_data(1654)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.START_COMMAND;
      reg_data(1654)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.MASTER.INJ_CRC_ERR;
      reg_data(1657)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.FRAME_FORMAT;
      reg_data(1664)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.SLAVE.TX_RESET;
      reg_data(1665)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.SLAVE.RX_RESET;
      reg_data(1666)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(1666)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.SLAVE.IC.TX_START_READ;
      reg_data(1667)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(1667)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1668)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(1668)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(1669)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(20).SC.SLAVE.IC.TX_WR;
      reg_data(1696)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(1698)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(1707)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).LPGBT.DOWNLINK.RESET;
      reg_data(1712)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.TX_RESET;
      reg_data(1713)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.RX_RESET;
      reg_data(1714)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.IC.TX_START_WRITE;
      reg_data(1714)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.IC.TX_START_READ;
      reg_data(1715)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(1715)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1716)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(1716)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(1717)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.IC.TX_WR;
      reg_data(1721)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.TX_CMD;
      reg_data(1721)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.TX_ADDRESS;
      reg_data(1721)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.TX_TRANSID;
      reg_data(1721)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.TX_CHANNEL;
      reg_data(1722)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.TX_DATA;
      reg_data(1733)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.SCA_ENABLE;
      reg_data(1734)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.START_RESET;
      reg_data(1734)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.START_CONNECT;
      reg_data(1734)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.START_COMMAND;
      reg_data(1734)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.MASTER.INJ_CRC_ERR;
      reg_data(1737)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.FRAME_FORMAT;
      reg_data(1744)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.SLAVE.TX_RESET;
      reg_data(1745)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.SLAVE.RX_RESET;
      reg_data(1746)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(1746)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.SLAVE.IC.TX_START_READ;
      reg_data(1747)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(1747)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1748)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(1748)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(1749)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(21).SC.SLAVE.IC.TX_WR;
      reg_data(1776)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(1778)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(1787)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).LPGBT.DOWNLINK.RESET;
      reg_data(1792)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.TX_RESET;
      reg_data(1793)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.RX_RESET;
      reg_data(1794)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.IC.TX_START_WRITE;
      reg_data(1794)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.IC.TX_START_READ;
      reg_data(1795)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(1795)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1796)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(1796)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(1797)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.IC.TX_WR;
      reg_data(1801)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.TX_CMD;
      reg_data(1801)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.TX_ADDRESS;
      reg_data(1801)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.TX_TRANSID;
      reg_data(1801)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.TX_CHANNEL;
      reg_data(1802)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.TX_DATA;
      reg_data(1813)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.SCA_ENABLE;
      reg_data(1814)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.START_RESET;
      reg_data(1814)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.START_CONNECT;
      reg_data(1814)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.START_COMMAND;
      reg_data(1814)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.MASTER.INJ_CRC_ERR;
      reg_data(1817)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.FRAME_FORMAT;
      reg_data(1824)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.SLAVE.TX_RESET;
      reg_data(1825)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.SLAVE.RX_RESET;
      reg_data(1826)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(1826)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.SLAVE.IC.TX_START_READ;
      reg_data(1827)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(1827)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1828)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(1828)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(1829)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(22).SC.SLAVE.IC.TX_WR;
      reg_data(1856)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(1858)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(1867)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).LPGBT.DOWNLINK.RESET;
      reg_data(1872)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.TX_RESET;
      reg_data(1873)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.RX_RESET;
      reg_data(1874)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.IC.TX_START_WRITE;
      reg_data(1874)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.IC.TX_START_READ;
      reg_data(1875)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(1875)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1876)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(1876)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(1877)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.IC.TX_WR;
      reg_data(1881)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.TX_CMD;
      reg_data(1881)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.TX_ADDRESS;
      reg_data(1881)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.TX_TRANSID;
      reg_data(1881)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.TX_CHANNEL;
      reg_data(1882)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.TX_DATA;
      reg_data(1893)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.SCA_ENABLE;
      reg_data(1894)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.START_RESET;
      reg_data(1894)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.START_CONNECT;
      reg_data(1894)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.START_COMMAND;
      reg_data(1894)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.MASTER.INJ_CRC_ERR;
      reg_data(1897)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.FRAME_FORMAT;
      reg_data(1904)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.SLAVE.TX_RESET;
      reg_data(1905)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.SLAVE.RX_RESET;
      reg_data(1906)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(1906)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.SLAVE.IC.TX_START_READ;
      reg_data(1907)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(1907)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1908)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(1908)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(1909)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(23).SC.SLAVE.IC.TX_WR;
      reg_data(1936)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(1938)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(1947)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).LPGBT.DOWNLINK.RESET;
      reg_data(1952)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.TX_RESET;
      reg_data(1953)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.RX_RESET;
      reg_data(1954)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.IC.TX_START_WRITE;
      reg_data(1954)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.IC.TX_START_READ;
      reg_data(1955)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(1955)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1956)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(1956)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(1957)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.IC.TX_WR;
      reg_data(1961)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.TX_CMD;
      reg_data(1961)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.TX_ADDRESS;
      reg_data(1961)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.TX_TRANSID;
      reg_data(1961)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.TX_CHANNEL;
      reg_data(1962)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.TX_DATA;
      reg_data(1973)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.SCA_ENABLE;
      reg_data(1974)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.START_RESET;
      reg_data(1974)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.START_CONNECT;
      reg_data(1974)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.START_COMMAND;
      reg_data(1974)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.MASTER.INJ_CRC_ERR;
      reg_data(1977)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.FRAME_FORMAT;
      reg_data(1984)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.SLAVE.TX_RESET;
      reg_data(1985)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.SLAVE.RX_RESET;
      reg_data(1986)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(1986)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.SLAVE.IC.TX_START_READ;
      reg_data(1987)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(1987)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1988)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(1988)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(1989)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(24).SC.SLAVE.IC.TX_WR;
      reg_data(2016)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(2018)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(2027)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).LPGBT.DOWNLINK.RESET;
      reg_data(2032)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.TX_RESET;
      reg_data(2033)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.RX_RESET;
      reg_data(2034)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.IC.TX_START_WRITE;
      reg_data(2034)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.IC.TX_START_READ;
      reg_data(2035)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(2035)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2036)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(2036)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(2037)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.IC.TX_WR;
      reg_data(2041)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.TX_CMD;
      reg_data(2041)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.TX_ADDRESS;
      reg_data(2041)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.TX_TRANSID;
      reg_data(2041)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.TX_CHANNEL;
      reg_data(2042)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.TX_DATA;
      reg_data(2053)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.SCA_ENABLE;
      reg_data(2054)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.START_RESET;
      reg_data(2054)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.START_CONNECT;
      reg_data(2054)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.START_COMMAND;
      reg_data(2054)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.MASTER.INJ_CRC_ERR;
      reg_data(2057)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.FRAME_FORMAT;
      reg_data(2064)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.SLAVE.TX_RESET;
      reg_data(2065)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.SLAVE.RX_RESET;
      reg_data(2066)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(2066)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.SLAVE.IC.TX_START_READ;
      reg_data(2067)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(2067)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2068)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(2068)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(2069)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(25).SC.SLAVE.IC.TX_WR;
      reg_data(2096)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(2098)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(2107)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).LPGBT.DOWNLINK.RESET;
      reg_data(2112)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.TX_RESET;
      reg_data(2113)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.RX_RESET;
      reg_data(2114)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.IC.TX_START_WRITE;
      reg_data(2114)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.IC.TX_START_READ;
      reg_data(2115)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(2115)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2116)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(2116)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(2117)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.IC.TX_WR;
      reg_data(2121)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.TX_CMD;
      reg_data(2121)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.TX_ADDRESS;
      reg_data(2121)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.TX_TRANSID;
      reg_data(2121)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.TX_CHANNEL;
      reg_data(2122)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.TX_DATA;
      reg_data(2133)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.SCA_ENABLE;
      reg_data(2134)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.START_RESET;
      reg_data(2134)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.START_CONNECT;
      reg_data(2134)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.START_COMMAND;
      reg_data(2134)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.MASTER.INJ_CRC_ERR;
      reg_data(2137)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.FRAME_FORMAT;
      reg_data(2144)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.SLAVE.TX_RESET;
      reg_data(2145)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.SLAVE.RX_RESET;
      reg_data(2146)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(2146)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.SLAVE.IC.TX_START_READ;
      reg_data(2147)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(2147)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2148)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(2148)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(2149)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(26).SC.SLAVE.IC.TX_WR;
      reg_data(2176)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(2178)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(2187)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).LPGBT.DOWNLINK.RESET;
      reg_data(2192)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.TX_RESET;
      reg_data(2193)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.RX_RESET;
      reg_data(2194)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.IC.TX_START_WRITE;
      reg_data(2194)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.IC.TX_START_READ;
      reg_data(2195)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(2195)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2196)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(2196)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(2197)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.IC.TX_WR;
      reg_data(2201)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.TX_CMD;
      reg_data(2201)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.TX_ADDRESS;
      reg_data(2201)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.TX_TRANSID;
      reg_data(2201)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.TX_CHANNEL;
      reg_data(2202)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.TX_DATA;
      reg_data(2213)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.SCA_ENABLE;
      reg_data(2214)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.START_RESET;
      reg_data(2214)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.START_CONNECT;
      reg_data(2214)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.START_COMMAND;
      reg_data(2214)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.MASTER.INJ_CRC_ERR;
      reg_data(2217)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.FRAME_FORMAT;
      reg_data(2224)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.SLAVE.TX_RESET;
      reg_data(2225)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.SLAVE.RX_RESET;
      reg_data(2226)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(2226)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.SLAVE.IC.TX_START_READ;
      reg_data(2227)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(2227)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2228)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(2228)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(2229)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(27).SC.SLAVE.IC.TX_WR;
      reg_data(2256)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(2258)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(2267)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).LPGBT.DOWNLINK.RESET;
      reg_data(2272)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.TX_RESET;
      reg_data(2273)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.RX_RESET;
      reg_data(2274)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.IC.TX_START_WRITE;
      reg_data(2274)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.IC.TX_START_READ;
      reg_data(2275)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(2275)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2276)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(2276)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(2277)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.IC.TX_WR;
      reg_data(2281)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.TX_CMD;
      reg_data(2281)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.TX_ADDRESS;
      reg_data(2281)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.TX_TRANSID;
      reg_data(2281)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.TX_CHANNEL;
      reg_data(2282)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.TX_DATA;
      reg_data(2293)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.SCA_ENABLE;
      reg_data(2294)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.START_RESET;
      reg_data(2294)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.START_CONNECT;
      reg_data(2294)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.START_COMMAND;
      reg_data(2294)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.MASTER.INJ_CRC_ERR;
      reg_data(2297)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.FRAME_FORMAT;
      reg_data(2304)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.SLAVE.TX_RESET;
      reg_data(2305)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.SLAVE.RX_RESET;
      reg_data(2306)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(2306)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.SLAVE.IC.TX_START_READ;
      reg_data(2307)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(2307)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2308)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(2308)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(2309)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(28).SC.SLAVE.IC.TX_WR;
      reg_data(2336)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(2338)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(2347)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).LPGBT.DOWNLINK.RESET;
      reg_data(2352)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.TX_RESET;
      reg_data(2353)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.RX_RESET;
      reg_data(2354)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.IC.TX_START_WRITE;
      reg_data(2354)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.IC.TX_START_READ;
      reg_data(2355)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(2355)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2356)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(2356)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(2357)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.IC.TX_WR;
      reg_data(2361)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.TX_CMD;
      reg_data(2361)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.TX_ADDRESS;
      reg_data(2361)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.TX_TRANSID;
      reg_data(2361)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.TX_CHANNEL;
      reg_data(2362)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.TX_DATA;
      reg_data(2373)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.SCA_ENABLE;
      reg_data(2374)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.START_RESET;
      reg_data(2374)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.START_CONNECT;
      reg_data(2374)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.START_COMMAND;
      reg_data(2374)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.MASTER.INJ_CRC_ERR;
      reg_data(2377)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.FRAME_FORMAT;
      reg_data(2384)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.SLAVE.TX_RESET;
      reg_data(2385)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.SLAVE.RX_RESET;
      reg_data(2386)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(2386)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.SLAVE.IC.TX_START_READ;
      reg_data(2387)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(2387)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2388)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(2388)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(2389)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(29).SC.SLAVE.IC.TX_WR;
      reg_data(2416)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(2418)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(2427)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).LPGBT.DOWNLINK.RESET;
      reg_data(2432)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.TX_RESET;
      reg_data(2433)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.RX_RESET;
      reg_data(2434)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.IC.TX_START_WRITE;
      reg_data(2434)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.IC.TX_START_READ;
      reg_data(2435)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(2435)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2436)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(2436)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(2437)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.IC.TX_WR;
      reg_data(2441)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.TX_CMD;
      reg_data(2441)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.TX_ADDRESS;
      reg_data(2441)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.TX_TRANSID;
      reg_data(2441)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.TX_CHANNEL;
      reg_data(2442)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.TX_DATA;
      reg_data(2453)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.SCA_ENABLE;
      reg_data(2454)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.START_RESET;
      reg_data(2454)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.START_CONNECT;
      reg_data(2454)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.START_COMMAND;
      reg_data(2454)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.MASTER.INJ_CRC_ERR;
      reg_data(2457)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.FRAME_FORMAT;
      reg_data(2464)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.SLAVE.TX_RESET;
      reg_data(2465)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.SLAVE.RX_RESET;
      reg_data(2466)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(2466)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.SLAVE.IC.TX_START_READ;
      reg_data(2467)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(2467)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2468)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(2468)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(2469)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(30).SC.SLAVE.IC.TX_WR;
      reg_data(2496)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(2498)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(2507)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).LPGBT.DOWNLINK.RESET;
      reg_data(2512)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.TX_RESET;
      reg_data(2513)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.RX_RESET;
      reg_data(2514)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.IC.TX_START_WRITE;
      reg_data(2514)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.IC.TX_START_READ;
      reg_data(2515)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(2515)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2516)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(2516)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(2517)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.IC.TX_WR;
      reg_data(2521)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.TX_CMD;
      reg_data(2521)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.TX_ADDRESS;
      reg_data(2521)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.TX_TRANSID;
      reg_data(2521)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.TX_CHANNEL;
      reg_data(2522)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.TX_DATA;
      reg_data(2533)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.SCA_ENABLE;
      reg_data(2534)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.START_RESET;
      reg_data(2534)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.START_CONNECT;
      reg_data(2534)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.START_COMMAND;
      reg_data(2534)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.MASTER.INJ_CRC_ERR;
      reg_data(2537)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.FRAME_FORMAT;
      reg_data(2544)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.SLAVE.TX_RESET;
      reg_data(2545)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.SLAVE.RX_RESET;
      reg_data(2546)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(2546)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.SLAVE.IC.TX_START_READ;
      reg_data(2547)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(2547)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2548)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(2548)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(2549)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(31).SC.SLAVE.IC.TX_WR;
      reg_data(2576)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(2578)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(2587)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).LPGBT.DOWNLINK.RESET;
      reg_data(2592)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.TX_RESET;
      reg_data(2593)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.RX_RESET;
      reg_data(2594)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.IC.TX_START_WRITE;
      reg_data(2594)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.IC.TX_START_READ;
      reg_data(2595)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(2595)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2596)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(2596)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(2597)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.IC.TX_WR;
      reg_data(2601)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.TX_CMD;
      reg_data(2601)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.TX_ADDRESS;
      reg_data(2601)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.TX_TRANSID;
      reg_data(2601)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.TX_CHANNEL;
      reg_data(2602)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.TX_DATA;
      reg_data(2613)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.SCA_ENABLE;
      reg_data(2614)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.START_RESET;
      reg_data(2614)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.START_CONNECT;
      reg_data(2614)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.START_COMMAND;
      reg_data(2614)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.MASTER.INJ_CRC_ERR;
      reg_data(2617)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.FRAME_FORMAT;
      reg_data(2624)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.SLAVE.TX_RESET;
      reg_data(2625)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.SLAVE.RX_RESET;
      reg_data(2626)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(2626)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.SLAVE.IC.TX_START_READ;
      reg_data(2627)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(2627)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2628)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(2628)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(2629)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(32).SC.SLAVE.IC.TX_WR;
      reg_data(2656)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(2658)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(2667)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).LPGBT.DOWNLINK.RESET;
      reg_data(2672)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.TX_RESET;
      reg_data(2673)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.RX_RESET;
      reg_data(2674)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.IC.TX_START_WRITE;
      reg_data(2674)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.IC.TX_START_READ;
      reg_data(2675)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(2675)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2676)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(2676)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(2677)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.IC.TX_WR;
      reg_data(2681)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.TX_CMD;
      reg_data(2681)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.TX_ADDRESS;
      reg_data(2681)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.TX_TRANSID;
      reg_data(2681)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.TX_CHANNEL;
      reg_data(2682)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.TX_DATA;
      reg_data(2693)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.SCA_ENABLE;
      reg_data(2694)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.START_RESET;
      reg_data(2694)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.START_CONNECT;
      reg_data(2694)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.START_COMMAND;
      reg_data(2694)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.MASTER.INJ_CRC_ERR;
      reg_data(2697)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.FRAME_FORMAT;
      reg_data(2704)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.SLAVE.TX_RESET;
      reg_data(2705)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.SLAVE.RX_RESET;
      reg_data(2706)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(2706)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.SLAVE.IC.TX_START_READ;
      reg_data(2707)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(2707)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2708)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(2708)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(2709)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(33).SC.SLAVE.IC.TX_WR;
      reg_data(2736)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(2738)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(2747)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).LPGBT.DOWNLINK.RESET;
      reg_data(2752)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.TX_RESET;
      reg_data(2753)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.RX_RESET;
      reg_data(2754)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.IC.TX_START_WRITE;
      reg_data(2754)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.IC.TX_START_READ;
      reg_data(2755)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(2755)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2756)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(2756)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(2757)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.IC.TX_WR;
      reg_data(2761)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.TX_CMD;
      reg_data(2761)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.TX_ADDRESS;
      reg_data(2761)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.TX_TRANSID;
      reg_data(2761)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.TX_CHANNEL;
      reg_data(2762)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.TX_DATA;
      reg_data(2773)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.SCA_ENABLE;
      reg_data(2774)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.START_RESET;
      reg_data(2774)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.START_CONNECT;
      reg_data(2774)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.START_COMMAND;
      reg_data(2774)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.MASTER.INJ_CRC_ERR;
      reg_data(2777)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.FRAME_FORMAT;
      reg_data(2784)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.SLAVE.TX_RESET;
      reg_data(2785)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.SLAVE.RX_RESET;
      reg_data(2786)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(2786)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.SLAVE.IC.TX_START_READ;
      reg_data(2787)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(2787)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2788)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(2788)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(2789)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(34).SC.SLAVE.IC.TX_WR;
      reg_data(2816)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).LPGBT.UPLINK.UPLINK(0).RESET;
      reg_data(2818)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).LPGBT.UPLINK.UPLINK(1).RESET;
      reg_data(2827)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).LPGBT.DOWNLINK.RESET;
      reg_data(2832)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.TX_RESET;
      reg_data(2833)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.RX_RESET;
      reg_data(2834)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.IC.TX_START_WRITE;
      reg_data(2834)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.IC.TX_START_READ;
      reg_data(2835)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(2835)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2836)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(2836)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(2837)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.IC.TX_WR;
      reg_data(2841)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.TX_CMD;
      reg_data(2841)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.TX_ADDRESS;
      reg_data(2841)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.TX_TRANSID;
      reg_data(2841)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.TX_CHANNEL;
      reg_data(2842)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.TX_DATA;
      reg_data(2853)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.SCA_ENABLE;
      reg_data(2854)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.START_RESET;
      reg_data(2854)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.START_CONNECT;
      reg_data(2854)( 2)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.START_COMMAND;
      reg_data(2854)( 3)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.MASTER.INJ_CRC_ERR;
      reg_data(2857)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.FRAME_FORMAT;
      reg_data(2864)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.SLAVE.TX_RESET;
      reg_data(2865)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.SLAVE.RX_RESET;
      reg_data(2866)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(2866)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.SLAVE.IC.TX_START_READ;
      reg_data(2867)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(2867)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(2868)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(2868)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(2869)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(35).SC.SLAVE.IC.TX_WR;
      reg_data(3104)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.SL.TX_ENA_TEST_PATTERN;
      reg_data(3120)( 0)  <= DEFAULT_HAL_CTRL_t.SL.RESET.rx_comma;
      reg_data(3120)( 1)  <= DEFAULT_HAL_CTRL_t.SL.RESET.rx_packet_former;
      reg_data(3120)( 2)  <= DEFAULT_HAL_CTRL_t.SL.RESET.rx_counter;

    elsif clk_axi'event and clk_axi = '1' then  -- rising clock edge
      

      
      if localWrEn = '1' then
        case to_integer(unsigned(localAddress(11 downto 0))) is
        when 0 => --0x0
          reg_data( 0)( 0)              <=  localWrData( 0);                --Resets all LPGBT Downlinks
        when 1 => --0x1
          reg_data( 1)( 0)              <=  localWrData( 0);                --Resets all LPGBT Uplinks
        when 2 => --0x2
          reg_data( 2)( 0)              <=  localWrData( 0);                --Resets counters
        when 16 => --0x10
          reg_data(16)( 0)              <=  localWrData( 0);                --Reset this Uplink
        when 18 => --0x12
          reg_data(18)( 0)              <=  localWrData( 0);                --Reset this Uplink
        when 27 => --0x1b
          reg_data(27)( 0)              <=  localWrData( 0);                --Reset this Downlink
        when 32 => --0x20
          reg_data(32)( 0)              <=  localWrData( 0);                --Reset TX datapath
        when 33 => --0x21
          reg_data(33)( 1)              <=  localWrData( 1);                --Reset RX datapath
        when 34 => --0x22
          reg_data(34)( 0)              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(34)( 1)              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 35 => --0x23
          reg_data(35)(15 downto  0)    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(35)(31 downto 16)    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 36 => --0x24
          reg_data(36)( 7 downto  0)    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(36)(31 downto 24)    <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 37 => --0x25
          reg_data(37)( 0)              <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 41 => --0x29
          reg_data(41)( 7 downto  0)    <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(41)(15 downto  8)    <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(41)(23 downto 16)    <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(41)(31 downto 24)    <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 42 => --0x2a
          reg_data(42)(31 downto  0)    <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 53 => --0x35
          reg_data(53)( 2 downto  0)    <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 54 => --0x36
          reg_data(54)( 0)              <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(54)( 1)              <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(54)( 2)              <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(54)( 3)              <=  localWrData( 3);                --Emulate a CRC error
        when 57 => --0x39
          reg_data(57)( 0)              <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 64 => --0x40
          reg_data(64)( 0)              <=  localWrData( 0);                --Reset TX datapath
        when 65 => --0x41
          reg_data(65)( 1)              <=  localWrData( 1);                --Reset RX datapath
        when 66 => --0x42
          reg_data(66)( 0)              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(66)( 1)              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 67 => --0x43
          reg_data(67)(15 downto  0)    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(67)(31 downto 16)    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 68 => --0x44
          reg_data(68)( 7 downto  0)    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(68)(31 downto 24)    <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 69 => --0x45
          reg_data(69)( 0)              <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 96 => --0x60
          reg_data(96)( 0)              <=  localWrData( 0);                --Reset this Uplink
        when 98 => --0x62
          reg_data(98)( 0)              <=  localWrData( 0);                --Reset this Uplink
        when 107 => --0x6b
          reg_data(107)( 0)             <=  localWrData( 0);                --Reset this Downlink
        when 112 => --0x70
          reg_data(112)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 113 => --0x71
          reg_data(113)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 114 => --0x72
          reg_data(114)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(114)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 115 => --0x73
          reg_data(115)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(115)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 116 => --0x74
          reg_data(116)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(116)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 117 => --0x75
          reg_data(117)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 121 => --0x79
          reg_data(121)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(121)(15 downto  8)   <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(121)(23 downto 16)   <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(121)(31 downto 24)   <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 122 => --0x7a
          reg_data(122)(31 downto  0)   <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 133 => --0x85
          reg_data(133)( 2 downto  0)   <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 134 => --0x86
          reg_data(134)( 0)             <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(134)( 1)             <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(134)( 2)             <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(134)( 3)             <=  localWrData( 3);                --Emulate a CRC error
        when 137 => --0x89
          reg_data(137)( 0)             <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 144 => --0x90
          reg_data(144)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 145 => --0x91
          reg_data(145)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 146 => --0x92
          reg_data(146)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(146)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 147 => --0x93
          reg_data(147)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(147)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 148 => --0x94
          reg_data(148)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(148)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 149 => --0x95
          reg_data(149)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 176 => --0xb0
          reg_data(176)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 178 => --0xb2
          reg_data(178)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 187 => --0xbb
          reg_data(187)( 0)             <=  localWrData( 0);                --Reset this Downlink
        when 192 => --0xc0
          reg_data(192)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 193 => --0xc1
          reg_data(193)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 194 => --0xc2
          reg_data(194)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(194)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 195 => --0xc3
          reg_data(195)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(195)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 196 => --0xc4
          reg_data(196)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(196)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 197 => --0xc5
          reg_data(197)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 201 => --0xc9
          reg_data(201)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(201)(15 downto  8)   <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(201)(23 downto 16)   <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(201)(31 downto 24)   <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 202 => --0xca
          reg_data(202)(31 downto  0)   <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 213 => --0xd5
          reg_data(213)( 2 downto  0)   <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 214 => --0xd6
          reg_data(214)( 0)             <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(214)( 1)             <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(214)( 2)             <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(214)( 3)             <=  localWrData( 3);                --Emulate a CRC error
        when 217 => --0xd9
          reg_data(217)( 0)             <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 224 => --0xe0
          reg_data(224)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 225 => --0xe1
          reg_data(225)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 226 => --0xe2
          reg_data(226)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(226)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 227 => --0xe3
          reg_data(227)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(227)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 228 => --0xe4
          reg_data(228)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(228)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 229 => --0xe5
          reg_data(229)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 256 => --0x100
          reg_data(256)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 258 => --0x102
          reg_data(258)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 267 => --0x10b
          reg_data(267)( 0)             <=  localWrData( 0);                --Reset this Downlink
        when 272 => --0x110
          reg_data(272)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 273 => --0x111
          reg_data(273)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 274 => --0x112
          reg_data(274)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(274)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 275 => --0x113
          reg_data(275)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(275)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 276 => --0x114
          reg_data(276)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(276)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 277 => --0x115
          reg_data(277)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 281 => --0x119
          reg_data(281)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(281)(15 downto  8)   <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(281)(23 downto 16)   <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(281)(31 downto 24)   <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 282 => --0x11a
          reg_data(282)(31 downto  0)   <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 293 => --0x125
          reg_data(293)( 2 downto  0)   <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 294 => --0x126
          reg_data(294)( 0)             <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(294)( 1)             <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(294)( 2)             <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(294)( 3)             <=  localWrData( 3);                --Emulate a CRC error
        when 297 => --0x129
          reg_data(297)( 0)             <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 304 => --0x130
          reg_data(304)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 305 => --0x131
          reg_data(305)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 306 => --0x132
          reg_data(306)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(306)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 307 => --0x133
          reg_data(307)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(307)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 308 => --0x134
          reg_data(308)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(308)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 309 => --0x135
          reg_data(309)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 336 => --0x150
          reg_data(336)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 338 => --0x152
          reg_data(338)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 347 => --0x15b
          reg_data(347)( 0)             <=  localWrData( 0);                --Reset this Downlink
        when 352 => --0x160
          reg_data(352)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 353 => --0x161
          reg_data(353)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 354 => --0x162
          reg_data(354)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(354)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 355 => --0x163
          reg_data(355)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(355)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 356 => --0x164
          reg_data(356)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(356)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 357 => --0x165
          reg_data(357)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 361 => --0x169
          reg_data(361)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(361)(15 downto  8)   <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(361)(23 downto 16)   <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(361)(31 downto 24)   <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 362 => --0x16a
          reg_data(362)(31 downto  0)   <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 373 => --0x175
          reg_data(373)( 2 downto  0)   <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 374 => --0x176
          reg_data(374)( 0)             <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(374)( 1)             <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(374)( 2)             <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(374)( 3)             <=  localWrData( 3);                --Emulate a CRC error
        when 377 => --0x179
          reg_data(377)( 0)             <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 384 => --0x180
          reg_data(384)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 385 => --0x181
          reg_data(385)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 386 => --0x182
          reg_data(386)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(386)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 387 => --0x183
          reg_data(387)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(387)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 388 => --0x184
          reg_data(388)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(388)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 389 => --0x185
          reg_data(389)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 416 => --0x1a0
          reg_data(416)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 418 => --0x1a2
          reg_data(418)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 427 => --0x1ab
          reg_data(427)( 0)             <=  localWrData( 0);                --Reset this Downlink
        when 432 => --0x1b0
          reg_data(432)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 433 => --0x1b1
          reg_data(433)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 434 => --0x1b2
          reg_data(434)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(434)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 435 => --0x1b3
          reg_data(435)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(435)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 436 => --0x1b4
          reg_data(436)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(436)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 437 => --0x1b5
          reg_data(437)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 441 => --0x1b9
          reg_data(441)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(441)(15 downto  8)   <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(441)(23 downto 16)   <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(441)(31 downto 24)   <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 442 => --0x1ba
          reg_data(442)(31 downto  0)   <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 453 => --0x1c5
          reg_data(453)( 2 downto  0)   <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 454 => --0x1c6
          reg_data(454)( 0)             <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(454)( 1)             <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(454)( 2)             <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(454)( 3)             <=  localWrData( 3);                --Emulate a CRC error
        when 457 => --0x1c9
          reg_data(457)( 0)             <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 464 => --0x1d0
          reg_data(464)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 465 => --0x1d1
          reg_data(465)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 466 => --0x1d2
          reg_data(466)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(466)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 467 => --0x1d3
          reg_data(467)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(467)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 468 => --0x1d4
          reg_data(468)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(468)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 469 => --0x1d5
          reg_data(469)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 496 => --0x1f0
          reg_data(496)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 498 => --0x1f2
          reg_data(498)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 507 => --0x1fb
          reg_data(507)( 0)             <=  localWrData( 0);                --Reset this Downlink
        when 512 => --0x200
          reg_data(512)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 513 => --0x201
          reg_data(513)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 514 => --0x202
          reg_data(514)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(514)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 515 => --0x203
          reg_data(515)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(515)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 516 => --0x204
          reg_data(516)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(516)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 517 => --0x205
          reg_data(517)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 521 => --0x209
          reg_data(521)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(521)(15 downto  8)   <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(521)(23 downto 16)   <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(521)(31 downto 24)   <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 522 => --0x20a
          reg_data(522)(31 downto  0)   <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 533 => --0x215
          reg_data(533)( 2 downto  0)   <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 534 => --0x216
          reg_data(534)( 0)             <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(534)( 1)             <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(534)( 2)             <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(534)( 3)             <=  localWrData( 3);                --Emulate a CRC error
        when 537 => --0x219
          reg_data(537)( 0)             <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 544 => --0x220
          reg_data(544)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 545 => --0x221
          reg_data(545)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 546 => --0x222
          reg_data(546)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(546)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 547 => --0x223
          reg_data(547)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(547)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 548 => --0x224
          reg_data(548)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(548)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 549 => --0x225
          reg_data(549)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 576 => --0x240
          reg_data(576)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 578 => --0x242
          reg_data(578)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 587 => --0x24b
          reg_data(587)( 0)             <=  localWrData( 0);                --Reset this Downlink
        when 592 => --0x250
          reg_data(592)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 593 => --0x251
          reg_data(593)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 594 => --0x252
          reg_data(594)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(594)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 595 => --0x253
          reg_data(595)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(595)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 596 => --0x254
          reg_data(596)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(596)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 597 => --0x255
          reg_data(597)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 601 => --0x259
          reg_data(601)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(601)(15 downto  8)   <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(601)(23 downto 16)   <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(601)(31 downto 24)   <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 602 => --0x25a
          reg_data(602)(31 downto  0)   <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 613 => --0x265
          reg_data(613)( 2 downto  0)   <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 614 => --0x266
          reg_data(614)( 0)             <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(614)( 1)             <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(614)( 2)             <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(614)( 3)             <=  localWrData( 3);                --Emulate a CRC error
        when 617 => --0x269
          reg_data(617)( 0)             <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 624 => --0x270
          reg_data(624)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 625 => --0x271
          reg_data(625)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 626 => --0x272
          reg_data(626)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(626)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 627 => --0x273
          reg_data(627)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(627)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 628 => --0x274
          reg_data(628)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(628)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 629 => --0x275
          reg_data(629)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 656 => --0x290
          reg_data(656)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 658 => --0x292
          reg_data(658)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 667 => --0x29b
          reg_data(667)( 0)             <=  localWrData( 0);                --Reset this Downlink
        when 672 => --0x2a0
          reg_data(672)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 673 => --0x2a1
          reg_data(673)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 674 => --0x2a2
          reg_data(674)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(674)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 675 => --0x2a3
          reg_data(675)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(675)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 676 => --0x2a4
          reg_data(676)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(676)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 677 => --0x2a5
          reg_data(677)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 681 => --0x2a9
          reg_data(681)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(681)(15 downto  8)   <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(681)(23 downto 16)   <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(681)(31 downto 24)   <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 682 => --0x2aa
          reg_data(682)(31 downto  0)   <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 693 => --0x2b5
          reg_data(693)( 2 downto  0)   <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 694 => --0x2b6
          reg_data(694)( 0)             <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(694)( 1)             <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(694)( 2)             <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(694)( 3)             <=  localWrData( 3);                --Emulate a CRC error
        when 697 => --0x2b9
          reg_data(697)( 0)             <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 704 => --0x2c0
          reg_data(704)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 705 => --0x2c1
          reg_data(705)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 706 => --0x2c2
          reg_data(706)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(706)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 707 => --0x2c3
          reg_data(707)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(707)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 708 => --0x2c4
          reg_data(708)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(708)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 709 => --0x2c5
          reg_data(709)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 736 => --0x2e0
          reg_data(736)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 738 => --0x2e2
          reg_data(738)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 747 => --0x2eb
          reg_data(747)( 0)             <=  localWrData( 0);                --Reset this Downlink
        when 752 => --0x2f0
          reg_data(752)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 753 => --0x2f1
          reg_data(753)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 754 => --0x2f2
          reg_data(754)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(754)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 755 => --0x2f3
          reg_data(755)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(755)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 756 => --0x2f4
          reg_data(756)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(756)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 757 => --0x2f5
          reg_data(757)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 761 => --0x2f9
          reg_data(761)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(761)(15 downto  8)   <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(761)(23 downto 16)   <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(761)(31 downto 24)   <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 762 => --0x2fa
          reg_data(762)(31 downto  0)   <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 773 => --0x305
          reg_data(773)( 2 downto  0)   <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 774 => --0x306
          reg_data(774)( 0)             <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(774)( 1)             <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(774)( 2)             <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(774)( 3)             <=  localWrData( 3);                --Emulate a CRC error
        when 777 => --0x309
          reg_data(777)( 0)             <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 784 => --0x310
          reg_data(784)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 785 => --0x311
          reg_data(785)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 786 => --0x312
          reg_data(786)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(786)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 787 => --0x313
          reg_data(787)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(787)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 788 => --0x314
          reg_data(788)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(788)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 789 => --0x315
          reg_data(789)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 816 => --0x330
          reg_data(816)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 818 => --0x332
          reg_data(818)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 827 => --0x33b
          reg_data(827)( 0)             <=  localWrData( 0);                --Reset this Downlink
        when 832 => --0x340
          reg_data(832)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 833 => --0x341
          reg_data(833)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 834 => --0x342
          reg_data(834)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(834)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 835 => --0x343
          reg_data(835)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(835)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 836 => --0x344
          reg_data(836)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(836)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 837 => --0x345
          reg_data(837)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 841 => --0x349
          reg_data(841)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(841)(15 downto  8)   <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(841)(23 downto 16)   <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(841)(31 downto 24)   <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 842 => --0x34a
          reg_data(842)(31 downto  0)   <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 853 => --0x355
          reg_data(853)( 2 downto  0)   <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 854 => --0x356
          reg_data(854)( 0)             <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(854)( 1)             <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(854)( 2)             <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(854)( 3)             <=  localWrData( 3);                --Emulate a CRC error
        when 857 => --0x359
          reg_data(857)( 0)             <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 864 => --0x360
          reg_data(864)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 865 => --0x361
          reg_data(865)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 866 => --0x362
          reg_data(866)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(866)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 867 => --0x363
          reg_data(867)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(867)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 868 => --0x364
          reg_data(868)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(868)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 869 => --0x365
          reg_data(869)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 896 => --0x380
          reg_data(896)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 898 => --0x382
          reg_data(898)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 907 => --0x38b
          reg_data(907)( 0)             <=  localWrData( 0);                --Reset this Downlink
        when 912 => --0x390
          reg_data(912)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 913 => --0x391
          reg_data(913)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 914 => --0x392
          reg_data(914)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(914)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 915 => --0x393
          reg_data(915)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(915)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 916 => --0x394
          reg_data(916)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(916)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 917 => --0x395
          reg_data(917)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 921 => --0x399
          reg_data(921)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(921)(15 downto  8)   <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(921)(23 downto 16)   <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(921)(31 downto 24)   <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 922 => --0x39a
          reg_data(922)(31 downto  0)   <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 933 => --0x3a5
          reg_data(933)( 2 downto  0)   <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 934 => --0x3a6
          reg_data(934)( 0)             <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(934)( 1)             <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(934)( 2)             <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(934)( 3)             <=  localWrData( 3);                --Emulate a CRC error
        when 937 => --0x3a9
          reg_data(937)( 0)             <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 944 => --0x3b0
          reg_data(944)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 945 => --0x3b1
          reg_data(945)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 946 => --0x3b2
          reg_data(946)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(946)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 947 => --0x3b3
          reg_data(947)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(947)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 948 => --0x3b4
          reg_data(948)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(948)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 949 => --0x3b5
          reg_data(949)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 976 => --0x3d0
          reg_data(976)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 978 => --0x3d2
          reg_data(978)( 0)             <=  localWrData( 0);                --Reset this Uplink
        when 987 => --0x3db
          reg_data(987)( 0)             <=  localWrData( 0);                --Reset this Downlink
        when 992 => --0x3e0
          reg_data(992)( 0)             <=  localWrData( 0);                --Reset TX datapath
        when 993 => --0x3e1
          reg_data(993)( 1)             <=  localWrData( 1);                --Reset RX datapath
        when 994 => --0x3e2
          reg_data(994)( 0)             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(994)( 1)             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 995 => --0x3e3
          reg_data(995)(15 downto  0)   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(995)(31 downto 16)   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 996 => --0x3e4
          reg_data(996)( 7 downto  0)   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(996)(31 downto 24)   <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 997 => --0x3e5
          reg_data(997)( 0)             <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1001 => --0x3e9
          reg_data(1001)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(1001)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(1001)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(1001)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1002 => --0x3ea
          reg_data(1002)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 1013 => --0x3f5
          reg_data(1013)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 1014 => --0x3f6
          reg_data(1014)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(1014)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(1014)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(1014)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 1017 => --0x3f9
          reg_data(1017)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 1024 => --0x400
          reg_data(1024)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1025 => --0x401
          reg_data(1025)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1026 => --0x402
          reg_data(1026)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1026)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1027 => --0x403
          reg_data(1027)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1027)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1028 => --0x404
          reg_data(1028)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1028)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1029 => --0x405
          reg_data(1029)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1056 => --0x420
          reg_data(1056)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1058 => --0x422
          reg_data(1058)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1067 => --0x42b
          reg_data(1067)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 1072 => --0x430
          reg_data(1072)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1073 => --0x431
          reg_data(1073)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1074 => --0x432
          reg_data(1074)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1074)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1075 => --0x433
          reg_data(1075)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1075)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1076 => --0x434
          reg_data(1076)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1076)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1077 => --0x435
          reg_data(1077)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1081 => --0x439
          reg_data(1081)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(1081)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(1081)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(1081)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1082 => --0x43a
          reg_data(1082)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 1093 => --0x445
          reg_data(1093)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 1094 => --0x446
          reg_data(1094)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(1094)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(1094)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(1094)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 1097 => --0x449
          reg_data(1097)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 1104 => --0x450
          reg_data(1104)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1105 => --0x451
          reg_data(1105)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1106 => --0x452
          reg_data(1106)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1106)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1107 => --0x453
          reg_data(1107)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1107)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1108 => --0x454
          reg_data(1108)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1108)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1109 => --0x455
          reg_data(1109)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1136 => --0x470
          reg_data(1136)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1138 => --0x472
          reg_data(1138)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1147 => --0x47b
          reg_data(1147)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 1152 => --0x480
          reg_data(1152)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1153 => --0x481
          reg_data(1153)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1154 => --0x482
          reg_data(1154)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1154)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1155 => --0x483
          reg_data(1155)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1155)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1156 => --0x484
          reg_data(1156)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1156)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1157 => --0x485
          reg_data(1157)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1161 => --0x489
          reg_data(1161)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(1161)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(1161)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(1161)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1162 => --0x48a
          reg_data(1162)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 1173 => --0x495
          reg_data(1173)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 1174 => --0x496
          reg_data(1174)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(1174)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(1174)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(1174)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 1177 => --0x499
          reg_data(1177)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 1184 => --0x4a0
          reg_data(1184)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1185 => --0x4a1
          reg_data(1185)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1186 => --0x4a2
          reg_data(1186)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1186)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1187 => --0x4a3
          reg_data(1187)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1187)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1188 => --0x4a4
          reg_data(1188)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1188)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1189 => --0x4a5
          reg_data(1189)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1216 => --0x4c0
          reg_data(1216)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1218 => --0x4c2
          reg_data(1218)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1227 => --0x4cb
          reg_data(1227)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 1232 => --0x4d0
          reg_data(1232)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1233 => --0x4d1
          reg_data(1233)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1234 => --0x4d2
          reg_data(1234)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1234)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1235 => --0x4d3
          reg_data(1235)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1235)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1236 => --0x4d4
          reg_data(1236)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1236)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1237 => --0x4d5
          reg_data(1237)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1241 => --0x4d9
          reg_data(1241)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(1241)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(1241)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(1241)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1242 => --0x4da
          reg_data(1242)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 1253 => --0x4e5
          reg_data(1253)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 1254 => --0x4e6
          reg_data(1254)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(1254)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(1254)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(1254)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 1257 => --0x4e9
          reg_data(1257)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 1264 => --0x4f0
          reg_data(1264)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1265 => --0x4f1
          reg_data(1265)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1266 => --0x4f2
          reg_data(1266)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1266)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1267 => --0x4f3
          reg_data(1267)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1267)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1268 => --0x4f4
          reg_data(1268)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1268)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1269 => --0x4f5
          reg_data(1269)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1296 => --0x510
          reg_data(1296)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1298 => --0x512
          reg_data(1298)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1307 => --0x51b
          reg_data(1307)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 1312 => --0x520
          reg_data(1312)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1313 => --0x521
          reg_data(1313)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1314 => --0x522
          reg_data(1314)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1314)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1315 => --0x523
          reg_data(1315)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1315)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1316 => --0x524
          reg_data(1316)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1316)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1317 => --0x525
          reg_data(1317)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1321 => --0x529
          reg_data(1321)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(1321)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(1321)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(1321)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1322 => --0x52a
          reg_data(1322)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 1333 => --0x535
          reg_data(1333)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 1334 => --0x536
          reg_data(1334)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(1334)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(1334)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(1334)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 1337 => --0x539
          reg_data(1337)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 1344 => --0x540
          reg_data(1344)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1345 => --0x541
          reg_data(1345)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1346 => --0x542
          reg_data(1346)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1346)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1347 => --0x543
          reg_data(1347)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1347)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1348 => --0x544
          reg_data(1348)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1348)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1349 => --0x545
          reg_data(1349)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1376 => --0x560
          reg_data(1376)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1378 => --0x562
          reg_data(1378)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1387 => --0x56b
          reg_data(1387)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 1392 => --0x570
          reg_data(1392)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1393 => --0x571
          reg_data(1393)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1394 => --0x572
          reg_data(1394)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1394)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1395 => --0x573
          reg_data(1395)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1395)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1396 => --0x574
          reg_data(1396)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1396)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1397 => --0x575
          reg_data(1397)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1401 => --0x579
          reg_data(1401)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(1401)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(1401)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(1401)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1402 => --0x57a
          reg_data(1402)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 1413 => --0x585
          reg_data(1413)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 1414 => --0x586
          reg_data(1414)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(1414)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(1414)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(1414)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 1417 => --0x589
          reg_data(1417)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 1424 => --0x590
          reg_data(1424)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1425 => --0x591
          reg_data(1425)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1426 => --0x592
          reg_data(1426)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1426)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1427 => --0x593
          reg_data(1427)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1427)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1428 => --0x594
          reg_data(1428)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1428)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1429 => --0x595
          reg_data(1429)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1456 => --0x5b0
          reg_data(1456)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1458 => --0x5b2
          reg_data(1458)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1467 => --0x5bb
          reg_data(1467)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 1472 => --0x5c0
          reg_data(1472)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1473 => --0x5c1
          reg_data(1473)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1474 => --0x5c2
          reg_data(1474)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1474)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1475 => --0x5c3
          reg_data(1475)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1475)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1476 => --0x5c4
          reg_data(1476)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1476)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1477 => --0x5c5
          reg_data(1477)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1481 => --0x5c9
          reg_data(1481)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(1481)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(1481)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(1481)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1482 => --0x5ca
          reg_data(1482)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 1493 => --0x5d5
          reg_data(1493)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 1494 => --0x5d6
          reg_data(1494)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(1494)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(1494)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(1494)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 1497 => --0x5d9
          reg_data(1497)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 1504 => --0x5e0
          reg_data(1504)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1505 => --0x5e1
          reg_data(1505)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1506 => --0x5e2
          reg_data(1506)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1506)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1507 => --0x5e3
          reg_data(1507)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1507)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1508 => --0x5e4
          reg_data(1508)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1508)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1509 => --0x5e5
          reg_data(1509)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1536 => --0x600
          reg_data(1536)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1538 => --0x602
          reg_data(1538)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1547 => --0x60b
          reg_data(1547)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 1552 => --0x610
          reg_data(1552)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1553 => --0x611
          reg_data(1553)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1554 => --0x612
          reg_data(1554)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1554)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1555 => --0x613
          reg_data(1555)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1555)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1556 => --0x614
          reg_data(1556)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1556)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1557 => --0x615
          reg_data(1557)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1561 => --0x619
          reg_data(1561)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(1561)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(1561)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(1561)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1562 => --0x61a
          reg_data(1562)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 1573 => --0x625
          reg_data(1573)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 1574 => --0x626
          reg_data(1574)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(1574)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(1574)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(1574)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 1577 => --0x629
          reg_data(1577)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 1584 => --0x630
          reg_data(1584)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1585 => --0x631
          reg_data(1585)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1586 => --0x632
          reg_data(1586)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1586)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1587 => --0x633
          reg_data(1587)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1587)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1588 => --0x634
          reg_data(1588)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1588)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1589 => --0x635
          reg_data(1589)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1616 => --0x650
          reg_data(1616)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1618 => --0x652
          reg_data(1618)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1627 => --0x65b
          reg_data(1627)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 1632 => --0x660
          reg_data(1632)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1633 => --0x661
          reg_data(1633)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1634 => --0x662
          reg_data(1634)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1634)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1635 => --0x663
          reg_data(1635)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1635)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1636 => --0x664
          reg_data(1636)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1636)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1637 => --0x665
          reg_data(1637)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1641 => --0x669
          reg_data(1641)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(1641)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(1641)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(1641)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1642 => --0x66a
          reg_data(1642)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 1653 => --0x675
          reg_data(1653)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 1654 => --0x676
          reg_data(1654)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(1654)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(1654)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(1654)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 1657 => --0x679
          reg_data(1657)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 1664 => --0x680
          reg_data(1664)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1665 => --0x681
          reg_data(1665)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1666 => --0x682
          reg_data(1666)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1666)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1667 => --0x683
          reg_data(1667)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1667)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1668 => --0x684
          reg_data(1668)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1668)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1669 => --0x685
          reg_data(1669)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1696 => --0x6a0
          reg_data(1696)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1698 => --0x6a2
          reg_data(1698)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1707 => --0x6ab
          reg_data(1707)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 1712 => --0x6b0
          reg_data(1712)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1713 => --0x6b1
          reg_data(1713)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1714 => --0x6b2
          reg_data(1714)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1714)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1715 => --0x6b3
          reg_data(1715)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1715)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1716 => --0x6b4
          reg_data(1716)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1716)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1717 => --0x6b5
          reg_data(1717)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1721 => --0x6b9
          reg_data(1721)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(1721)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(1721)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(1721)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1722 => --0x6ba
          reg_data(1722)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 1733 => --0x6c5
          reg_data(1733)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 1734 => --0x6c6
          reg_data(1734)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(1734)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(1734)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(1734)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 1737 => --0x6c9
          reg_data(1737)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 1744 => --0x6d0
          reg_data(1744)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1745 => --0x6d1
          reg_data(1745)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1746 => --0x6d2
          reg_data(1746)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1746)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1747 => --0x6d3
          reg_data(1747)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1747)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1748 => --0x6d4
          reg_data(1748)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1748)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1749 => --0x6d5
          reg_data(1749)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1776 => --0x6f0
          reg_data(1776)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1778 => --0x6f2
          reg_data(1778)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1787 => --0x6fb
          reg_data(1787)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 1792 => --0x700
          reg_data(1792)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1793 => --0x701
          reg_data(1793)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1794 => --0x702
          reg_data(1794)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1794)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1795 => --0x703
          reg_data(1795)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1795)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1796 => --0x704
          reg_data(1796)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1796)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1797 => --0x705
          reg_data(1797)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1801 => --0x709
          reg_data(1801)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(1801)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(1801)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(1801)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1802 => --0x70a
          reg_data(1802)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 1813 => --0x715
          reg_data(1813)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 1814 => --0x716
          reg_data(1814)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(1814)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(1814)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(1814)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 1817 => --0x719
          reg_data(1817)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 1824 => --0x720
          reg_data(1824)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1825 => --0x721
          reg_data(1825)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1826 => --0x722
          reg_data(1826)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1826)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1827 => --0x723
          reg_data(1827)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1827)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1828 => --0x724
          reg_data(1828)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1828)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1829 => --0x725
          reg_data(1829)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1856 => --0x740
          reg_data(1856)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1858 => --0x742
          reg_data(1858)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1867 => --0x74b
          reg_data(1867)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 1872 => --0x750
          reg_data(1872)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1873 => --0x751
          reg_data(1873)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1874 => --0x752
          reg_data(1874)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1874)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1875 => --0x753
          reg_data(1875)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1875)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1876 => --0x754
          reg_data(1876)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1876)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1877 => --0x755
          reg_data(1877)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1881 => --0x759
          reg_data(1881)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(1881)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(1881)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(1881)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1882 => --0x75a
          reg_data(1882)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 1893 => --0x765
          reg_data(1893)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 1894 => --0x766
          reg_data(1894)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(1894)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(1894)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(1894)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 1897 => --0x769
          reg_data(1897)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 1904 => --0x770
          reg_data(1904)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1905 => --0x771
          reg_data(1905)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1906 => --0x772
          reg_data(1906)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1906)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1907 => --0x773
          reg_data(1907)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1907)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1908 => --0x774
          reg_data(1908)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1908)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1909 => --0x775
          reg_data(1909)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1936 => --0x790
          reg_data(1936)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1938 => --0x792
          reg_data(1938)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 1947 => --0x79b
          reg_data(1947)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 1952 => --0x7a0
          reg_data(1952)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1953 => --0x7a1
          reg_data(1953)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1954 => --0x7a2
          reg_data(1954)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1954)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1955 => --0x7a3
          reg_data(1955)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1955)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1956 => --0x7a4
          reg_data(1956)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1956)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1957 => --0x7a5
          reg_data(1957)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 1961 => --0x7a9
          reg_data(1961)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(1961)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(1961)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(1961)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1962 => --0x7aa
          reg_data(1962)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 1973 => --0x7b5
          reg_data(1973)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 1974 => --0x7b6
          reg_data(1974)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(1974)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(1974)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(1974)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 1977 => --0x7b9
          reg_data(1977)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 1984 => --0x7c0
          reg_data(1984)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 1985 => --0x7c1
          reg_data(1985)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 1986 => --0x7c2
          reg_data(1986)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1986)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 1987 => --0x7c3
          reg_data(1987)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1987)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1988 => --0x7c4
          reg_data(1988)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(1988)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 1989 => --0x7c5
          reg_data(1989)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2016 => --0x7e0
          reg_data(2016)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2018 => --0x7e2
          reg_data(2018)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2027 => --0x7eb
          reg_data(2027)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 2032 => --0x7f0
          reg_data(2032)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2033 => --0x7f1
          reg_data(2033)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2034 => --0x7f2
          reg_data(2034)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2034)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2035 => --0x7f3
          reg_data(2035)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2035)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2036 => --0x7f4
          reg_data(2036)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2036)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2037 => --0x7f5
          reg_data(2037)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2041 => --0x7f9
          reg_data(2041)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(2041)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(2041)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(2041)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2042 => --0x7fa
          reg_data(2042)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 2053 => --0x805
          reg_data(2053)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 2054 => --0x806
          reg_data(2054)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(2054)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(2054)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(2054)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 2057 => --0x809
          reg_data(2057)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 2064 => --0x810
          reg_data(2064)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2065 => --0x811
          reg_data(2065)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2066 => --0x812
          reg_data(2066)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2066)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2067 => --0x813
          reg_data(2067)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2067)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2068 => --0x814
          reg_data(2068)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2068)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2069 => --0x815
          reg_data(2069)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2096 => --0x830
          reg_data(2096)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2098 => --0x832
          reg_data(2098)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2107 => --0x83b
          reg_data(2107)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 2112 => --0x840
          reg_data(2112)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2113 => --0x841
          reg_data(2113)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2114 => --0x842
          reg_data(2114)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2114)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2115 => --0x843
          reg_data(2115)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2115)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2116 => --0x844
          reg_data(2116)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2116)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2117 => --0x845
          reg_data(2117)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2121 => --0x849
          reg_data(2121)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(2121)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(2121)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(2121)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2122 => --0x84a
          reg_data(2122)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 2133 => --0x855
          reg_data(2133)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 2134 => --0x856
          reg_data(2134)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(2134)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(2134)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(2134)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 2137 => --0x859
          reg_data(2137)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 2144 => --0x860
          reg_data(2144)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2145 => --0x861
          reg_data(2145)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2146 => --0x862
          reg_data(2146)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2146)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2147 => --0x863
          reg_data(2147)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2147)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2148 => --0x864
          reg_data(2148)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2148)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2149 => --0x865
          reg_data(2149)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2176 => --0x880
          reg_data(2176)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2178 => --0x882
          reg_data(2178)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2187 => --0x88b
          reg_data(2187)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 2192 => --0x890
          reg_data(2192)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2193 => --0x891
          reg_data(2193)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2194 => --0x892
          reg_data(2194)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2194)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2195 => --0x893
          reg_data(2195)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2195)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2196 => --0x894
          reg_data(2196)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2196)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2197 => --0x895
          reg_data(2197)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2201 => --0x899
          reg_data(2201)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(2201)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(2201)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(2201)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2202 => --0x89a
          reg_data(2202)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 2213 => --0x8a5
          reg_data(2213)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 2214 => --0x8a6
          reg_data(2214)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(2214)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(2214)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(2214)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 2217 => --0x8a9
          reg_data(2217)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 2224 => --0x8b0
          reg_data(2224)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2225 => --0x8b1
          reg_data(2225)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2226 => --0x8b2
          reg_data(2226)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2226)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2227 => --0x8b3
          reg_data(2227)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2227)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2228 => --0x8b4
          reg_data(2228)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2228)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2229 => --0x8b5
          reg_data(2229)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2256 => --0x8d0
          reg_data(2256)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2258 => --0x8d2
          reg_data(2258)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2267 => --0x8db
          reg_data(2267)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 2272 => --0x8e0
          reg_data(2272)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2273 => --0x8e1
          reg_data(2273)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2274 => --0x8e2
          reg_data(2274)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2274)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2275 => --0x8e3
          reg_data(2275)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2275)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2276 => --0x8e4
          reg_data(2276)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2276)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2277 => --0x8e5
          reg_data(2277)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2281 => --0x8e9
          reg_data(2281)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(2281)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(2281)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(2281)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2282 => --0x8ea
          reg_data(2282)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 2293 => --0x8f5
          reg_data(2293)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 2294 => --0x8f6
          reg_data(2294)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(2294)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(2294)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(2294)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 2297 => --0x8f9
          reg_data(2297)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 2304 => --0x900
          reg_data(2304)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2305 => --0x901
          reg_data(2305)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2306 => --0x902
          reg_data(2306)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2306)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2307 => --0x903
          reg_data(2307)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2307)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2308 => --0x904
          reg_data(2308)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2308)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2309 => --0x905
          reg_data(2309)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2336 => --0x920
          reg_data(2336)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2338 => --0x922
          reg_data(2338)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2347 => --0x92b
          reg_data(2347)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 2352 => --0x930
          reg_data(2352)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2353 => --0x931
          reg_data(2353)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2354 => --0x932
          reg_data(2354)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2354)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2355 => --0x933
          reg_data(2355)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2355)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2356 => --0x934
          reg_data(2356)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2356)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2357 => --0x935
          reg_data(2357)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2361 => --0x939
          reg_data(2361)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(2361)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(2361)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(2361)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2362 => --0x93a
          reg_data(2362)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 2373 => --0x945
          reg_data(2373)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 2374 => --0x946
          reg_data(2374)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(2374)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(2374)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(2374)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 2377 => --0x949
          reg_data(2377)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 2384 => --0x950
          reg_data(2384)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2385 => --0x951
          reg_data(2385)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2386 => --0x952
          reg_data(2386)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2386)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2387 => --0x953
          reg_data(2387)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2387)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2388 => --0x954
          reg_data(2388)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2388)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2389 => --0x955
          reg_data(2389)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2416 => --0x970
          reg_data(2416)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2418 => --0x972
          reg_data(2418)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2427 => --0x97b
          reg_data(2427)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 2432 => --0x980
          reg_data(2432)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2433 => --0x981
          reg_data(2433)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2434 => --0x982
          reg_data(2434)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2434)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2435 => --0x983
          reg_data(2435)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2435)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2436 => --0x984
          reg_data(2436)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2436)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2437 => --0x985
          reg_data(2437)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2441 => --0x989
          reg_data(2441)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(2441)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(2441)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(2441)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2442 => --0x98a
          reg_data(2442)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 2453 => --0x995
          reg_data(2453)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 2454 => --0x996
          reg_data(2454)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(2454)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(2454)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(2454)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 2457 => --0x999
          reg_data(2457)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 2464 => --0x9a0
          reg_data(2464)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2465 => --0x9a1
          reg_data(2465)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2466 => --0x9a2
          reg_data(2466)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2466)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2467 => --0x9a3
          reg_data(2467)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2467)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2468 => --0x9a4
          reg_data(2468)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2468)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2469 => --0x9a5
          reg_data(2469)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2496 => --0x9c0
          reg_data(2496)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2498 => --0x9c2
          reg_data(2498)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2507 => --0x9cb
          reg_data(2507)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 2512 => --0x9d0
          reg_data(2512)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2513 => --0x9d1
          reg_data(2513)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2514 => --0x9d2
          reg_data(2514)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2514)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2515 => --0x9d3
          reg_data(2515)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2515)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2516 => --0x9d4
          reg_data(2516)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2516)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2517 => --0x9d5
          reg_data(2517)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2521 => --0x9d9
          reg_data(2521)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(2521)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(2521)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(2521)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2522 => --0x9da
          reg_data(2522)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 2533 => --0x9e5
          reg_data(2533)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 2534 => --0x9e6
          reg_data(2534)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(2534)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(2534)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(2534)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 2537 => --0x9e9
          reg_data(2537)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 2544 => --0x9f0
          reg_data(2544)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2545 => --0x9f1
          reg_data(2545)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2546 => --0x9f2
          reg_data(2546)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2546)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2547 => --0x9f3
          reg_data(2547)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2547)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2548 => --0x9f4
          reg_data(2548)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2548)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2549 => --0x9f5
          reg_data(2549)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2576 => --0xa10
          reg_data(2576)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2578 => --0xa12
          reg_data(2578)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2587 => --0xa1b
          reg_data(2587)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 2592 => --0xa20
          reg_data(2592)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2593 => --0xa21
          reg_data(2593)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2594 => --0xa22
          reg_data(2594)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2594)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2595 => --0xa23
          reg_data(2595)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2595)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2596 => --0xa24
          reg_data(2596)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2596)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2597 => --0xa25
          reg_data(2597)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2601 => --0xa29
          reg_data(2601)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(2601)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(2601)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(2601)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2602 => --0xa2a
          reg_data(2602)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 2613 => --0xa35
          reg_data(2613)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 2614 => --0xa36
          reg_data(2614)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(2614)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(2614)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(2614)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 2617 => --0xa39
          reg_data(2617)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 2624 => --0xa40
          reg_data(2624)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2625 => --0xa41
          reg_data(2625)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2626 => --0xa42
          reg_data(2626)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2626)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2627 => --0xa43
          reg_data(2627)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2627)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2628 => --0xa44
          reg_data(2628)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2628)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2629 => --0xa45
          reg_data(2629)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2656 => --0xa60
          reg_data(2656)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2658 => --0xa62
          reg_data(2658)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2667 => --0xa6b
          reg_data(2667)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 2672 => --0xa70
          reg_data(2672)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2673 => --0xa71
          reg_data(2673)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2674 => --0xa72
          reg_data(2674)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2674)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2675 => --0xa73
          reg_data(2675)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2675)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2676 => --0xa74
          reg_data(2676)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2676)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2677 => --0xa75
          reg_data(2677)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2681 => --0xa79
          reg_data(2681)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(2681)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(2681)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(2681)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2682 => --0xa7a
          reg_data(2682)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 2693 => --0xa85
          reg_data(2693)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 2694 => --0xa86
          reg_data(2694)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(2694)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(2694)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(2694)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 2697 => --0xa89
          reg_data(2697)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 2704 => --0xa90
          reg_data(2704)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2705 => --0xa91
          reg_data(2705)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2706 => --0xa92
          reg_data(2706)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2706)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2707 => --0xa93
          reg_data(2707)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2707)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2708 => --0xa94
          reg_data(2708)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2708)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2709 => --0xa95
          reg_data(2709)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2736 => --0xab0
          reg_data(2736)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2738 => --0xab2
          reg_data(2738)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2747 => --0xabb
          reg_data(2747)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 2752 => --0xac0
          reg_data(2752)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2753 => --0xac1
          reg_data(2753)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2754 => --0xac2
          reg_data(2754)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2754)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2755 => --0xac3
          reg_data(2755)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2755)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2756 => --0xac4
          reg_data(2756)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2756)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2757 => --0xac5
          reg_data(2757)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2761 => --0xac9
          reg_data(2761)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(2761)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(2761)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(2761)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2762 => --0xaca
          reg_data(2762)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 2773 => --0xad5
          reg_data(2773)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 2774 => --0xad6
          reg_data(2774)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(2774)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(2774)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(2774)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 2777 => --0xad9
          reg_data(2777)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 2784 => --0xae0
          reg_data(2784)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2785 => --0xae1
          reg_data(2785)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2786 => --0xae2
          reg_data(2786)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2786)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2787 => --0xae3
          reg_data(2787)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2787)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2788 => --0xae4
          reg_data(2788)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2788)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2789 => --0xae5
          reg_data(2789)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2816 => --0xb00
          reg_data(2816)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2818 => --0xb02
          reg_data(2818)( 0)            <=  localWrData( 0);                --Reset this Uplink
        when 2827 => --0xb0b
          reg_data(2827)( 0)            <=  localWrData( 0);                --Reset this Downlink
        when 2832 => --0xb10
          reg_data(2832)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2833 => --0xb11
          reg_data(2833)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2834 => --0xb12
          reg_data(2834)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2834)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2835 => --0xb13
          reg_data(2835)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2835)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2836 => --0xb14
          reg_data(2836)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2836)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2837 => --0xb15
          reg_data(2837)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 2841 => --0xb19
          reg_data(2841)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(2841)(15 downto  8)  <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(2841)(23 downto 16)  <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(2841)(31 downto 24)  <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 2842 => --0xb1a
          reg_data(2842)(31 downto  0)  <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 2853 => --0xb25
          reg_data(2853)( 2 downto  0)  <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 2854 => --0xb26
          reg_data(2854)( 0)            <=  localWrData( 0);                --Send a reset command to the enabled SCAs
          reg_data(2854)( 1)            <=  localWrData( 1);                --Send a connect command to the enabled SCAs
          reg_data(2854)( 2)            <=  localWrData( 2);                --Send the command set in input to the enabled SCAs
          reg_data(2854)( 3)            <=  localWrData( 3);                --Emulate a CRC error
        when 2857 => --0xb29
          reg_data(2857)( 0)            <=  localWrData( 0);                --0 = lpgbt v0; 1 = lpgbt v1
        when 2864 => --0xb30
          reg_data(2864)( 0)            <=  localWrData( 0);                --Reset TX datapath
        when 2865 => --0xb31
          reg_data(2865)( 1)            <=  localWrData( 1);                --Reset RX datapath
        when 2866 => --0xb32
          reg_data(2866)( 0)            <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(2866)( 1)            <=  localWrData( 1);                --Request a read config to the GBTx (IC)
        when 2867 => --0xb33
          reg_data(2867)(15 downto  0)  <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(2867)(31 downto 16)  <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 2868 => --0xb34
          reg_data(2868)( 7 downto  0)  <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
          reg_data(2868)(31 downto 24)  <=  localWrData(31 downto 24);      --I2C address of the GBTx
        when 2869 => --0xb35
          reg_data(2869)( 0)            <=  localWrData( 0);                --Request a write operation into the internal FIFO (Data to GBTx)
        when 3104 => --0xc20
          reg_data(3104)(31 downto  0)  <=  localWrData(31 downto  0);      --tx test pattern enable
        when 3120 => --0xc30
          reg_data(3120)( 0)            <=  localWrData( 0);                --Resets all comma detection
          reg_data(3120)( 1)            <=  localWrData( 1);                --Resets all packet former
          reg_data(3120)( 2)            <=  localWrData( 2);                --Resets all rx_test_pattern counter

          when others => null;
        end case;
      end if;
    end if;
  end process reg_writes;







  
end architecture behavioral;