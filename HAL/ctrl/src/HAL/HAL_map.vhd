--This file was auto-generated.
--Modifications might be lost.
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.AXIRegWidthPkg.all;
use work.AXIRegPkg.all;
use work.types.all;

use work.HAL_Ctrl.all;
use work.HAL_Ctrl_DEF.all;
entity HAL_map is
  generic (
    READ_TIMEOUT     : integer := 2048
    );
  port (
    clk_axi          : in  std_logic;
    reset_axi_n      : in  std_logic;
    slave_readMOSI   : in  AXIReadMOSI;
    slave_readMISO   : out AXIReadMISO  := DefaultAXIReadMISO;
    slave_writeMOSI  : in  AXIWriteMOSI;
    slave_writeMISO  : out AXIWriteMISO := DefaultAXIWriteMISO;
    
    Mon              : in  HAL_Mon_t;
    Ctrl             : out HAL_Ctrl_t
        
    );
end entity HAL_map;
architecture behavioral of HAL_map is
  signal localAddress       : std_logic_vector(AXI_ADDR_WIDTH-1 downto 0);
  signal localRdData        : slv_32_t;
  signal localRdData_latch  : slv_32_t;
  signal localWrData        : slv_32_t;
  signal localWrEn          : std_logic;
  signal localRdReq         : std_logic;
  signal localRdAck         : std_logic;
  signal regRdAck           : std_logic;

  
  
  signal reg_data :  slv32_array_t(integer range 0 to 1160);
  constant Default_reg_data : slv32_array_t(integer range 0 to 1160) := (others => x"00000000");
begin  -- architecture behavioral

  -------------------------------------------------------------------------------
  -- AXI 
  -------------------------------------------------------------------------------
  -------------------------------------------------------------------------------
  AXIRegBridge : entity work.axiLiteRegBlocking
    generic map (
      READ_TIMEOUT => READ_TIMEOUT
      )
    port map (
      clk_axi     => clk_axi,
      reset_axi_n => reset_axi_n,
      readMOSI    => slave_readMOSI,
      readMISO    => slave_readMISO,
      writeMOSI   => slave_writeMOSI,
      writeMISO   => slave_writeMISO,
      address     => localAddress,
      rd_data     => localRdData_latch,
      wr_data     => localWrData,
      write_en    => localWrEn,
      read_req    => localRdReq,
      read_ack    => localRdAck);

  -------------------------------------------------------------------------------
  -- Record read decoding
  -------------------------------------------------------------------------------
  -------------------------------------------------------------------------------

  latch_reads: process (clk_axi,reset_axi_n) is
  begin  -- process latch_reads
    if reset_axi_n = '0' then
      localRdAck <= '0';
    elsif clk_axi'event and clk_axi = '1' then  -- rising clock edge
      localRdAck <= '0';
      
      if regRdAck = '1' then
        localRdData_latch <= localRdData;
        localRdAck <= '1';
      
      end if;
    end if;
  end process latch_reads;

  
  reads: process (clk_axi,reset_axi_n) is
  begin  -- process latch_reads
    if reset_axi_n = '0' then
      regRdAck <= '0';
    elsif clk_axi'event and clk_axi = '1' then  -- rising clock edge
      regRdAck  <= '0';
      localRdData <= x"00000000";
      if localRdReq = '1' then
        regRdAck  <= '1';
        case to_integer(unsigned(localAddress(10 downto 0))) is
          
        when 17 => --0x11
          localRdData( 0)            <=  Mon.CSM.CSM(0).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(0).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 22 => --0x16
          localRdData( 0)            <=  Mon.CSM.CSM(0).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(0).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 28 => --0x1c
          localRdData( 0)            <=  Mon.CSM.CSM(0).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 34 => --0x22
          localRdData( 0)            <=  reg_data(34)( 0);                                        --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(34)( 1);                                        --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(34)(15 downto  8);                              --I2C address of the GBTx
        when 35 => --0x23
          localRdData(15 downto  0)  <=  reg_data(35)(15 downto  0);                              --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(35)(31 downto 16);                              --Number of words/bytes to be read (only for read transactions)
        when 36 => --0x24
          localRdData( 7 downto  0)  <=  reg_data(36)( 7 downto  0);                              --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(0).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
        when 38 => --0x26
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 39 => --0x27
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 40 => --0x28
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(0).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 41 => --0x29
          localRdData( 7 downto  0)  <=  reg_data(41)( 7 downto  0);                              --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(41)(15 downto  8);                              --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(41)(23 downto 16);                              --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(41)(31 downto 24);                              --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 42 => --0x2a
          localRdData(31 downto  0)  <=  reg_data(42)(31 downto  0);                              --Command: data field (According to the SCA manual)
        when 43 => --0x2b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 44 => --0x2c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 45 => --0x2d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 46 => --0x2e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 47 => --0x2f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 48 => --0x30
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 49 => --0x31
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 50 => --0x32
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 51 => --0x33
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(0).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 53 => --0x35
          localRdData( 2 downto  0)  <=  reg_data(53)( 2 downto  0);                              --Enable flag to select SCAs
        when 66 => --0x42
          localRdData( 0)            <=  reg_data(66)( 0);                                        --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(66)( 1);                                        --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(66)(15 downto  8);                              --I2C address of the GBTx
        when 67 => --0x43
          localRdData(15 downto  0)  <=  reg_data(67)(15 downto  0);                              --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(67)(31 downto 16);                              --Number of words/bytes to be read (only for read transactions)
        when 68 => --0x44
          localRdData( 7 downto  0)  <=  reg_data(68)( 7 downto  0);                              --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(0).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
        when 70 => --0x46
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 71 => --0x47
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 72 => --0x48
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(0).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 81 => --0x51
          localRdData( 0)            <=  Mon.CSM.CSM(1).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(1).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 86 => --0x56
          localRdData( 0)            <=  Mon.CSM.CSM(1).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(1).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 92 => --0x5c
          localRdData( 0)            <=  Mon.CSM.CSM(1).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 98 => --0x62
          localRdData( 0)            <=  reg_data(98)( 0);                                        --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(98)( 1);                                        --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(98)(15 downto  8);                              --I2C address of the GBTx
        when 99 => --0x63
          localRdData(15 downto  0)  <=  reg_data(99)(15 downto  0);                              --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(99)(31 downto 16);                              --Number of words/bytes to be read (only for read transactions)
        when 100 => --0x64
          localRdData( 7 downto  0)  <=  reg_data(100)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(1).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
        when 102 => --0x66
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 103 => --0x67
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 104 => --0x68
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(1).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 105 => --0x69
          localRdData( 7 downto  0)  <=  reg_data(105)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(105)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(105)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(105)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 106 => --0x6a
          localRdData(31 downto  0)  <=  reg_data(106)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 107 => --0x6b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 108 => --0x6c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 109 => --0x6d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 110 => --0x6e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 111 => --0x6f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 112 => --0x70
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 113 => --0x71
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 114 => --0x72
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 115 => --0x73
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(1).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 117 => --0x75
          localRdData( 2 downto  0)  <=  reg_data(117)( 2 downto  0);                             --Enable flag to select SCAs
        when 130 => --0x82
          localRdData( 0)            <=  reg_data(130)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(130)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(130)(15 downto  8);                             --I2C address of the GBTx
        when 131 => --0x83
          localRdData(15 downto  0)  <=  reg_data(131)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(131)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 132 => --0x84
          localRdData( 7 downto  0)  <=  reg_data(132)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(1).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
        when 134 => --0x86
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 135 => --0x87
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 136 => --0x88
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(1).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 145 => --0x91
          localRdData( 0)            <=  Mon.CSM.CSM(2).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(2).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 150 => --0x96
          localRdData( 0)            <=  Mon.CSM.CSM(2).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(2).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 156 => --0x9c
          localRdData( 0)            <=  Mon.CSM.CSM(2).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 162 => --0xa2
          localRdData( 0)            <=  reg_data(162)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(162)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(162)(15 downto  8);                             --I2C address of the GBTx
        when 163 => --0xa3
          localRdData(15 downto  0)  <=  reg_data(163)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(163)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 164 => --0xa4
          localRdData( 7 downto  0)  <=  reg_data(164)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(2).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
        when 166 => --0xa6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 167 => --0xa7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 168 => --0xa8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(2).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 169 => --0xa9
          localRdData( 7 downto  0)  <=  reg_data(169)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(169)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(169)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(169)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 170 => --0xaa
          localRdData(31 downto  0)  <=  reg_data(170)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 171 => --0xab
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 172 => --0xac
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 173 => --0xad
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 174 => --0xae
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 175 => --0xaf
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 176 => --0xb0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 177 => --0xb1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 178 => --0xb2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 179 => --0xb3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(2).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 181 => --0xb5
          localRdData( 2 downto  0)  <=  reg_data(181)( 2 downto  0);                             --Enable flag to select SCAs
        when 194 => --0xc2
          localRdData( 0)            <=  reg_data(194)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(194)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(194)(15 downto  8);                             --I2C address of the GBTx
        when 195 => --0xc3
          localRdData(15 downto  0)  <=  reg_data(195)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(195)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 196 => --0xc4
          localRdData( 7 downto  0)  <=  reg_data(196)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(2).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
        when 198 => --0xc6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 199 => --0xc7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 200 => --0xc8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(2).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 209 => --0xd1
          localRdData( 0)            <=  Mon.CSM.CSM(3).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(3).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 214 => --0xd6
          localRdData( 0)            <=  Mon.CSM.CSM(3).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(3).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 220 => --0xdc
          localRdData( 0)            <=  Mon.CSM.CSM(3).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 226 => --0xe2
          localRdData( 0)            <=  reg_data(226)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(226)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(226)(15 downto  8);                             --I2C address of the GBTx
        when 227 => --0xe3
          localRdData(15 downto  0)  <=  reg_data(227)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(227)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 228 => --0xe4
          localRdData( 7 downto  0)  <=  reg_data(228)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(3).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
        when 230 => --0xe6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 231 => --0xe7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 232 => --0xe8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(3).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 233 => --0xe9
          localRdData( 7 downto  0)  <=  reg_data(233)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(233)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(233)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(233)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 234 => --0xea
          localRdData(31 downto  0)  <=  reg_data(234)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 235 => --0xeb
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 236 => --0xec
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 237 => --0xed
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 238 => --0xee
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 239 => --0xef
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 240 => --0xf0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 241 => --0xf1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 242 => --0xf2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 243 => --0xf3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(3).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 245 => --0xf5
          localRdData( 2 downto  0)  <=  reg_data(245)( 2 downto  0);                             --Enable flag to select SCAs
        when 258 => --0x102
          localRdData( 0)            <=  reg_data(258)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(258)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(258)(15 downto  8);                             --I2C address of the GBTx
        when 259 => --0x103
          localRdData(15 downto  0)  <=  reg_data(259)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(259)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 260 => --0x104
          localRdData( 7 downto  0)  <=  reg_data(260)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(3).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
        when 262 => --0x106
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 263 => --0x107
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 264 => --0x108
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(3).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 273 => --0x111
          localRdData( 0)            <=  Mon.CSM.CSM(4).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(4).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 278 => --0x116
          localRdData( 0)            <=  Mon.CSM.CSM(4).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(4).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 284 => --0x11c
          localRdData( 0)            <=  Mon.CSM.CSM(4).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 290 => --0x122
          localRdData( 0)            <=  reg_data(290)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(290)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(290)(15 downto  8);                             --I2C address of the GBTx
        when 291 => --0x123
          localRdData(15 downto  0)  <=  reg_data(291)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(291)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 292 => --0x124
          localRdData( 7 downto  0)  <=  reg_data(292)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(4).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
        when 294 => --0x126
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 295 => --0x127
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 296 => --0x128
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(4).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 297 => --0x129
          localRdData( 7 downto  0)  <=  reg_data(297)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(297)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(297)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(297)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 298 => --0x12a
          localRdData(31 downto  0)  <=  reg_data(298)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 299 => --0x12b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 300 => --0x12c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 301 => --0x12d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 302 => --0x12e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 303 => --0x12f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 304 => --0x130
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 305 => --0x131
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 306 => --0x132
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 307 => --0x133
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(4).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 309 => --0x135
          localRdData( 2 downto  0)  <=  reg_data(309)( 2 downto  0);                             --Enable flag to select SCAs
        when 322 => --0x142
          localRdData( 0)            <=  reg_data(322)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(322)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(322)(15 downto  8);                             --I2C address of the GBTx
        when 323 => --0x143
          localRdData(15 downto  0)  <=  reg_data(323)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(323)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 324 => --0x144
          localRdData( 7 downto  0)  <=  reg_data(324)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(4).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
        when 326 => --0x146
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 327 => --0x147
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 328 => --0x148
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(4).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 337 => --0x151
          localRdData( 0)            <=  Mon.CSM.CSM(5).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(5).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 342 => --0x156
          localRdData( 0)            <=  Mon.CSM.CSM(5).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(5).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 348 => --0x15c
          localRdData( 0)            <=  Mon.CSM.CSM(5).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 354 => --0x162
          localRdData( 0)            <=  reg_data(354)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(354)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(354)(15 downto  8);                             --I2C address of the GBTx
        when 355 => --0x163
          localRdData(15 downto  0)  <=  reg_data(355)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(355)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 356 => --0x164
          localRdData( 7 downto  0)  <=  reg_data(356)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(5).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
        when 358 => --0x166
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 359 => --0x167
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 360 => --0x168
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(5).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 361 => --0x169
          localRdData( 7 downto  0)  <=  reg_data(361)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(361)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(361)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(361)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 362 => --0x16a
          localRdData(31 downto  0)  <=  reg_data(362)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 363 => --0x16b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 364 => --0x16c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 365 => --0x16d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 366 => --0x16e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 367 => --0x16f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 368 => --0x170
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 369 => --0x171
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 370 => --0x172
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 371 => --0x173
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(5).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 373 => --0x175
          localRdData( 2 downto  0)  <=  reg_data(373)( 2 downto  0);                             --Enable flag to select SCAs
        when 386 => --0x182
          localRdData( 0)            <=  reg_data(386)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(386)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(386)(15 downto  8);                             --I2C address of the GBTx
        when 387 => --0x183
          localRdData(15 downto  0)  <=  reg_data(387)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(387)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 388 => --0x184
          localRdData( 7 downto  0)  <=  reg_data(388)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(5).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
        when 390 => --0x186
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 391 => --0x187
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 392 => --0x188
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(5).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 401 => --0x191
          localRdData( 0)            <=  Mon.CSM.CSM(6).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(6).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 406 => --0x196
          localRdData( 0)            <=  Mon.CSM.CSM(6).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(6).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 412 => --0x19c
          localRdData( 0)            <=  Mon.CSM.CSM(6).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 418 => --0x1a2
          localRdData( 0)            <=  reg_data(418)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(418)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(418)(15 downto  8);                             --I2C address of the GBTx
        when 419 => --0x1a3
          localRdData(15 downto  0)  <=  reg_data(419)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(419)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 420 => --0x1a4
          localRdData( 7 downto  0)  <=  reg_data(420)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(6).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
        when 422 => --0x1a6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 423 => --0x1a7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 424 => --0x1a8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(6).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 425 => --0x1a9
          localRdData( 7 downto  0)  <=  reg_data(425)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(425)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(425)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(425)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 426 => --0x1aa
          localRdData(31 downto  0)  <=  reg_data(426)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 427 => --0x1ab
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 428 => --0x1ac
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 429 => --0x1ad
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 430 => --0x1ae
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 431 => --0x1af
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 432 => --0x1b0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 433 => --0x1b1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 434 => --0x1b2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 435 => --0x1b3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(6).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 437 => --0x1b5
          localRdData( 2 downto  0)  <=  reg_data(437)( 2 downto  0);                             --Enable flag to select SCAs
        when 450 => --0x1c2
          localRdData( 0)            <=  reg_data(450)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(450)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(450)(15 downto  8);                             --I2C address of the GBTx
        when 451 => --0x1c3
          localRdData(15 downto  0)  <=  reg_data(451)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(451)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 452 => --0x1c4
          localRdData( 7 downto  0)  <=  reg_data(452)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(6).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
        when 454 => --0x1c6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 455 => --0x1c7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 456 => --0x1c8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(6).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 465 => --0x1d1
          localRdData( 0)            <=  Mon.CSM.CSM(7).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(7).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 470 => --0x1d6
          localRdData( 0)            <=  Mon.CSM.CSM(7).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(7).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 476 => --0x1dc
          localRdData( 0)            <=  Mon.CSM.CSM(7).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 482 => --0x1e2
          localRdData( 0)            <=  reg_data(482)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(482)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(482)(15 downto  8);                             --I2C address of the GBTx
        when 483 => --0x1e3
          localRdData(15 downto  0)  <=  reg_data(483)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(483)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 484 => --0x1e4
          localRdData( 7 downto  0)  <=  reg_data(484)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(7).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
        when 486 => --0x1e6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 487 => --0x1e7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 488 => --0x1e8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(7).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 489 => --0x1e9
          localRdData( 7 downto  0)  <=  reg_data(489)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(489)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(489)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(489)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 490 => --0x1ea
          localRdData(31 downto  0)  <=  reg_data(490)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 491 => --0x1eb
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 492 => --0x1ec
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 493 => --0x1ed
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 494 => --0x1ee
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 495 => --0x1ef
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 496 => --0x1f0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 497 => --0x1f1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 498 => --0x1f2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 499 => --0x1f3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(7).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 501 => --0x1f5
          localRdData( 2 downto  0)  <=  reg_data(501)( 2 downto  0);                             --Enable flag to select SCAs
        when 514 => --0x202
          localRdData( 0)            <=  reg_data(514)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(514)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(514)(15 downto  8);                             --I2C address of the GBTx
        when 515 => --0x203
          localRdData(15 downto  0)  <=  reg_data(515)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(515)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 516 => --0x204
          localRdData( 7 downto  0)  <=  reg_data(516)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(7).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
        when 518 => --0x206
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 519 => --0x207
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 520 => --0x208
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(7).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 529 => --0x211
          localRdData( 0)            <=  Mon.CSM.CSM(8).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(8).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 534 => --0x216
          localRdData( 0)            <=  Mon.CSM.CSM(8).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(8).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 540 => --0x21c
          localRdData( 0)            <=  Mon.CSM.CSM(8).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 546 => --0x222
          localRdData( 0)            <=  reg_data(546)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(546)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(546)(15 downto  8);                             --I2C address of the GBTx
        when 547 => --0x223
          localRdData(15 downto  0)  <=  reg_data(547)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(547)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 548 => --0x224
          localRdData( 7 downto  0)  <=  reg_data(548)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(8).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
        when 550 => --0x226
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 551 => --0x227
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 552 => --0x228
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(8).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 553 => --0x229
          localRdData( 7 downto  0)  <=  reg_data(553)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(553)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(553)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(553)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 554 => --0x22a
          localRdData(31 downto  0)  <=  reg_data(554)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 555 => --0x22b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 556 => --0x22c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 557 => --0x22d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 558 => --0x22e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 559 => --0x22f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 560 => --0x230
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 561 => --0x231
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 562 => --0x232
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 563 => --0x233
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(8).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 565 => --0x235
          localRdData( 2 downto  0)  <=  reg_data(565)( 2 downto  0);                             --Enable flag to select SCAs
        when 578 => --0x242
          localRdData( 0)            <=  reg_data(578)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(578)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(578)(15 downto  8);                             --I2C address of the GBTx
        when 579 => --0x243
          localRdData(15 downto  0)  <=  reg_data(579)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(579)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 580 => --0x244
          localRdData( 7 downto  0)  <=  reg_data(580)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(8).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
        when 582 => --0x246
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 583 => --0x247
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 584 => --0x248
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(8).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 593 => --0x251
          localRdData( 0)            <=  Mon.CSM.CSM(9).LPGBT.UPLINK.UPLINK(0).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(9).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;       --Data Corrected Count
        when 598 => --0x256
          localRdData( 0)            <=  Mon.CSM.CSM(9).LPGBT.UPLINK.UPLINK(1).READY;             --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(9).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;       --Data Corrected Count
        when 604 => --0x25c
          localRdData( 0)            <=  Mon.CSM.CSM(9).LPGBT.DOWNLINK.READY;                     --LPGBT Downlink Ready
        when 610 => --0x262
          localRdData( 0)            <=  reg_data(610)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(610)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(610)(15 downto  8);                             --I2C address of the GBTx
        when 611 => --0x263
          localRdData(15 downto  0)  <=  reg_data(611)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(611)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 612 => --0x264
          localRdData( 7 downto  0)  <=  reg_data(612)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(9).SC.MASTER.IC.TX_READY;                    --IC core ready for a transaction
        when 614 => --0x266
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 615 => --0x267
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 616 => --0x268
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(9).SC.MASTER.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 617 => --0x269
          localRdData( 7 downto  0)  <=  reg_data(617)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(617)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(617)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(617)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 618 => --0x26a
          localRdData(31 downto  0)  <=  reg_data(618)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 619 => --0x26b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(0).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 620 => --0x26c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(0).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 621 => --0x26d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(0).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 622 => --0x26e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(1).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 623 => --0x26f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(1).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 624 => --0x270
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(1).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 625 => --0x271
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(2).RX_LEN;            --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;        --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;        --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;        --Reply: transaction ID field (According to the SCA manual)
        when 626 => --0x272
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(2).RX_ERR;            --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;       --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;        --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 627 => --0x273
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(9).SC.MASTER.SCA_RX.RX(2).RX_DATA;           --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 629 => --0x275
          localRdData( 2 downto  0)  <=  reg_data(629)( 2 downto  0);                             --Enable flag to select SCAs
        when 642 => --0x282
          localRdData( 0)            <=  reg_data(642)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(642)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(642)(15 downto  8);                             --I2C address of the GBTx
        when 643 => --0x283
          localRdData(15 downto  0)  <=  reg_data(643)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(643)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 644 => --0x284
          localRdData( 7 downto  0)  <=  reg_data(644)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_DATA_FROM_GBTX;            --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(9).SC.SLAVE.IC.TX_READY;                     --IC core ready for a transaction
        when 646 => --0x286
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_DATA;                      --Up to 4 bytes of GBT-IC read data
        when 647 => --0x287
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_CHIP_ADR;                  --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_UP_PARITY_OK;              --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_DOWN_PARITY_OK;            --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_ERR;                       --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_VALID;                     --LPGBT IC decoder output data is valid
        when 648 => --0x288
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_REG_ADR;                   --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(9).SC.SLAVE.IC.RX_LENGTH;                    --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 657 => --0x291
          localRdData( 0)            <=  Mon.CSM.CSM(10).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(10).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 662 => --0x296
          localRdData( 0)            <=  Mon.CSM.CSM(10).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(10).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 668 => --0x29c
          localRdData( 0)            <=  Mon.CSM.CSM(10).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 674 => --0x2a2
          localRdData( 0)            <=  reg_data(674)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(674)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(674)(15 downto  8);                             --I2C address of the GBTx
        when 675 => --0x2a3
          localRdData(15 downto  0)  <=  reg_data(675)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(675)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 676 => --0x2a4
          localRdData( 7 downto  0)  <=  reg_data(676)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(10).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
        when 678 => --0x2a6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 679 => --0x2a7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 680 => --0x2a8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(10).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 681 => --0x2a9
          localRdData( 7 downto  0)  <=  reg_data(681)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(681)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(681)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(681)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 682 => --0x2aa
          localRdData(31 downto  0)  <=  reg_data(682)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 683 => --0x2ab
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 684 => --0x2ac
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 685 => --0x2ad
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 686 => --0x2ae
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 687 => --0x2af
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 688 => --0x2b0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 689 => --0x2b1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 690 => --0x2b2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 691 => --0x2b3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(10).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 693 => --0x2b5
          localRdData( 2 downto  0)  <=  reg_data(693)( 2 downto  0);                             --Enable flag to select SCAs
        when 706 => --0x2c2
          localRdData( 0)            <=  reg_data(706)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(706)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(706)(15 downto  8);                             --I2C address of the GBTx
        when 707 => --0x2c3
          localRdData(15 downto  0)  <=  reg_data(707)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(707)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 708 => --0x2c4
          localRdData( 7 downto  0)  <=  reg_data(708)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(10).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
        when 710 => --0x2c6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 711 => --0x2c7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 712 => --0x2c8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(10).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 721 => --0x2d1
          localRdData( 0)            <=  Mon.CSM.CSM(11).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(11).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 726 => --0x2d6
          localRdData( 0)            <=  Mon.CSM.CSM(11).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(11).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 732 => --0x2dc
          localRdData( 0)            <=  Mon.CSM.CSM(11).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 738 => --0x2e2
          localRdData( 0)            <=  reg_data(738)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(738)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(738)(15 downto  8);                             --I2C address of the GBTx
        when 739 => --0x2e3
          localRdData(15 downto  0)  <=  reg_data(739)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(739)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 740 => --0x2e4
          localRdData( 7 downto  0)  <=  reg_data(740)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(11).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
        when 742 => --0x2e6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 743 => --0x2e7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 744 => --0x2e8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(11).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 745 => --0x2e9
          localRdData( 7 downto  0)  <=  reg_data(745)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(745)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(745)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(745)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 746 => --0x2ea
          localRdData(31 downto  0)  <=  reg_data(746)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 747 => --0x2eb
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 748 => --0x2ec
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 749 => --0x2ed
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 750 => --0x2ee
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 751 => --0x2ef
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 752 => --0x2f0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 753 => --0x2f1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 754 => --0x2f2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 755 => --0x2f3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(11).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 757 => --0x2f5
          localRdData( 2 downto  0)  <=  reg_data(757)( 2 downto  0);                             --Enable flag to select SCAs
        when 770 => --0x302
          localRdData( 0)            <=  reg_data(770)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(770)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(770)(15 downto  8);                             --I2C address of the GBTx
        when 771 => --0x303
          localRdData(15 downto  0)  <=  reg_data(771)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(771)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 772 => --0x304
          localRdData( 7 downto  0)  <=  reg_data(772)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(11).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
        when 774 => --0x306
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 775 => --0x307
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 776 => --0x308
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(11).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 785 => --0x311
          localRdData( 0)            <=  Mon.CSM.CSM(12).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(12).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 790 => --0x316
          localRdData( 0)            <=  Mon.CSM.CSM(12).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(12).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 796 => --0x31c
          localRdData( 0)            <=  Mon.CSM.CSM(12).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 802 => --0x322
          localRdData( 0)            <=  reg_data(802)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(802)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(802)(15 downto  8);                             --I2C address of the GBTx
        when 803 => --0x323
          localRdData(15 downto  0)  <=  reg_data(803)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(803)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 804 => --0x324
          localRdData( 7 downto  0)  <=  reg_data(804)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(12).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
        when 806 => --0x326
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 807 => --0x327
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 808 => --0x328
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(12).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 809 => --0x329
          localRdData( 7 downto  0)  <=  reg_data(809)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(809)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(809)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(809)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 810 => --0x32a
          localRdData(31 downto  0)  <=  reg_data(810)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 811 => --0x32b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 812 => --0x32c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 813 => --0x32d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 814 => --0x32e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 815 => --0x32f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 816 => --0x330
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 817 => --0x331
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 818 => --0x332
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 819 => --0x333
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(12).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 821 => --0x335
          localRdData( 2 downto  0)  <=  reg_data(821)( 2 downto  0);                             --Enable flag to select SCAs
        when 834 => --0x342
          localRdData( 0)            <=  reg_data(834)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(834)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(834)(15 downto  8);                             --I2C address of the GBTx
        when 835 => --0x343
          localRdData(15 downto  0)  <=  reg_data(835)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(835)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 836 => --0x344
          localRdData( 7 downto  0)  <=  reg_data(836)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(12).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
        when 838 => --0x346
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 839 => --0x347
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 840 => --0x348
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(12).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 849 => --0x351
          localRdData( 0)            <=  Mon.CSM.CSM(13).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(13).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 854 => --0x356
          localRdData( 0)            <=  Mon.CSM.CSM(13).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(13).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 860 => --0x35c
          localRdData( 0)            <=  Mon.CSM.CSM(13).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 866 => --0x362
          localRdData( 0)            <=  reg_data(866)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(866)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(866)(15 downto  8);                             --I2C address of the GBTx
        when 867 => --0x363
          localRdData(15 downto  0)  <=  reg_data(867)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(867)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 868 => --0x364
          localRdData( 7 downto  0)  <=  reg_data(868)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(13).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
        when 870 => --0x366
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 871 => --0x367
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 872 => --0x368
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(13).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 873 => --0x369
          localRdData( 7 downto  0)  <=  reg_data(873)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(873)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(873)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(873)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 874 => --0x36a
          localRdData(31 downto  0)  <=  reg_data(874)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 875 => --0x36b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 876 => --0x36c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 877 => --0x36d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 878 => --0x36e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 879 => --0x36f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 880 => --0x370
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 881 => --0x371
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 882 => --0x372
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 883 => --0x373
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(13).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 885 => --0x375
          localRdData( 2 downto  0)  <=  reg_data(885)( 2 downto  0);                             --Enable flag to select SCAs
        when 898 => --0x382
          localRdData( 0)            <=  reg_data(898)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(898)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(898)(15 downto  8);                             --I2C address of the GBTx
        when 899 => --0x383
          localRdData(15 downto  0)  <=  reg_data(899)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(899)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 900 => --0x384
          localRdData( 7 downto  0)  <=  reg_data(900)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(13).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
        when 902 => --0x386
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 903 => --0x387
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 904 => --0x388
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(13).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 913 => --0x391
          localRdData( 0)            <=  Mon.CSM.CSM(14).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(14).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 918 => --0x396
          localRdData( 0)            <=  Mon.CSM.CSM(14).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(14).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 924 => --0x39c
          localRdData( 0)            <=  Mon.CSM.CSM(14).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 930 => --0x3a2
          localRdData( 0)            <=  reg_data(930)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(930)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(930)(15 downto  8);                             --I2C address of the GBTx
        when 931 => --0x3a3
          localRdData(15 downto  0)  <=  reg_data(931)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(931)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 932 => --0x3a4
          localRdData( 7 downto  0)  <=  reg_data(932)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(14).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
        when 934 => --0x3a6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 935 => --0x3a7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 936 => --0x3a8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(14).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 937 => --0x3a9
          localRdData( 7 downto  0)  <=  reg_data(937)( 7 downto  0);                             --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(937)(15 downto  8);                             --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(937)(23 downto 16);                             --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(937)(31 downto 24);                             --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 938 => --0x3aa
          localRdData(31 downto  0)  <=  reg_data(938)(31 downto  0);                             --Command: data field (According to the SCA manual)
        when 939 => --0x3ab
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 940 => --0x3ac
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 941 => --0x3ad
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 942 => --0x3ae
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 943 => --0x3af
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 944 => --0x3b0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 945 => --0x3b1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 946 => --0x3b2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 947 => --0x3b3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(14).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 949 => --0x3b5
          localRdData( 2 downto  0)  <=  reg_data(949)( 2 downto  0);                             --Enable flag to select SCAs
        when 962 => --0x3c2
          localRdData( 0)            <=  reg_data(962)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(962)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(962)(15 downto  8);                             --I2C address of the GBTx
        when 963 => --0x3c3
          localRdData(15 downto  0)  <=  reg_data(963)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(963)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 964 => --0x3c4
          localRdData( 7 downto  0)  <=  reg_data(964)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(14).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
        when 966 => --0x3c6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 967 => --0x3c7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 968 => --0x3c8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(14).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 977 => --0x3d1
          localRdData( 0)            <=  Mon.CSM.CSM(15).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(15).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 982 => --0x3d6
          localRdData( 0)            <=  Mon.CSM.CSM(15).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(15).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 988 => --0x3dc
          localRdData( 0)            <=  Mon.CSM.CSM(15).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 994 => --0x3e2
          localRdData( 0)            <=  reg_data(994)( 0);                                       --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(994)( 1);                                       --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(994)(15 downto  8);                             --I2C address of the GBTx
        when 995 => --0x3e3
          localRdData(15 downto  0)  <=  reg_data(995)(15 downto  0);                             --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(995)(31 downto 16);                             --Number of words/bytes to be read (only for read transactions)
        when 996 => --0x3e4
          localRdData( 7 downto  0)  <=  reg_data(996)( 7 downto  0);                             --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(15).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
        when 998 => --0x3e6
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 999 => --0x3e7
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 1000 => --0x3e8
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(15).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1001 => --0x3e9
          localRdData( 7 downto  0)  <=  reg_data(1001)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(1001)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(1001)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(1001)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1002 => --0x3ea
          localRdData(31 downto  0)  <=  reg_data(1002)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 1003 => --0x3eb
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1004 => --0x3ec
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1005 => --0x3ed
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1006 => --0x3ee
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1007 => --0x3ef
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1008 => --0x3f0
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1009 => --0x3f1
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1010 => --0x3f2
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1011 => --0x3f3
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(15).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1013 => --0x3f5
          localRdData( 2 downto  0)  <=  reg_data(1013)( 2 downto  0);                            --Enable flag to select SCAs
        when 1026 => --0x402
          localRdData( 0)            <=  reg_data(1026)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1026)( 1);                                      --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(1026)(15 downto  8);                            --I2C address of the GBTx
        when 1027 => --0x403
          localRdData(15 downto  0)  <=  reg_data(1027)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1027)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1028 => --0x404
          localRdData( 7 downto  0)  <=  reg_data(1028)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(15).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
        when 1030 => --0x406
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 1031 => --0x407
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 1032 => --0x408
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(15).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1041 => --0x411
          localRdData( 0)            <=  Mon.CSM.CSM(16).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(16).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 1046 => --0x416
          localRdData( 0)            <=  Mon.CSM.CSM(16).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(16).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 1052 => --0x41c
          localRdData( 0)            <=  Mon.CSM.CSM(16).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 1058 => --0x422
          localRdData( 0)            <=  reg_data(1058)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1058)( 1);                                      --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(1058)(15 downto  8);                            --I2C address of the GBTx
        when 1059 => --0x423
          localRdData(15 downto  0)  <=  reg_data(1059)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1059)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1060 => --0x424
          localRdData( 7 downto  0)  <=  reg_data(1060)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(16).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
        when 1062 => --0x426
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 1063 => --0x427
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 1064 => --0x428
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(16).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1065 => --0x429
          localRdData( 7 downto  0)  <=  reg_data(1065)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(1065)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(1065)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(1065)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1066 => --0x42a
          localRdData(31 downto  0)  <=  reg_data(1066)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 1067 => --0x42b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1068 => --0x42c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1069 => --0x42d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1070 => --0x42e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1071 => --0x42f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1072 => --0x430
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1073 => --0x431
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1074 => --0x432
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1075 => --0x433
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(16).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1077 => --0x435
          localRdData( 2 downto  0)  <=  reg_data(1077)( 2 downto  0);                            --Enable flag to select SCAs
        when 1090 => --0x442
          localRdData( 0)            <=  reg_data(1090)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1090)( 1);                                      --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(1090)(15 downto  8);                            --I2C address of the GBTx
        when 1091 => --0x443
          localRdData(15 downto  0)  <=  reg_data(1091)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1091)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1092 => --0x444
          localRdData( 7 downto  0)  <=  reg_data(1092)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(16).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
        when 1094 => --0x446
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 1095 => --0x447
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 1096 => --0x448
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(16).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1105 => --0x451
          localRdData( 0)            <=  Mon.CSM.CSM(17).LPGBT.UPLINK.UPLINK(0).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(17).LPGBT.UPLINK.UPLINK(0).FEC_ERR_CNT;      --Data Corrected Count
        when 1110 => --0x456
          localRdData( 0)            <=  Mon.CSM.CSM(17).LPGBT.UPLINK.UPLINK(1).READY;            --LPGBT Uplink Ready
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(17).LPGBT.UPLINK.UPLINK(1).FEC_ERR_CNT;      --Data Corrected Count
        when 1116 => --0x45c
          localRdData( 0)            <=  Mon.CSM.CSM(17).LPGBT.DOWNLINK.READY;                    --LPGBT Downlink Ready
        when 1122 => --0x462
          localRdData( 0)            <=  reg_data(1122)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1122)( 1);                                      --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(1122)(15 downto  8);                            --I2C address of the GBTx
        when 1123 => --0x463
          localRdData(15 downto  0)  <=  reg_data(1123)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1123)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1124 => --0x464
          localRdData( 7 downto  0)  <=  reg_data(1124)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_DATA_FROM_GBTX;          --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(17).SC.MASTER.IC.TX_READY;                   --IC core ready for a transaction
        when 1126 => --0x466
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_DATA;                    --Up to 4 bytes of GBT-IC read data
        when 1127 => --0x467
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_CHIP_ADR;                --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_UP_PARITY_OK;            --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_DOWN_PARITY_OK;          --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_ERR;                     --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_VALID;                   --LPGBT IC decoder output data is valid
        when 1128 => --0x468
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_REG_ADR;                 --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(17).SC.MASTER.IC.RX_LENGTH;                  --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations
        when 1129 => --0x469
          localRdData( 7 downto  0)  <=  reg_data(1129)( 7 downto  0);                            --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          localRdData(15 downto  8)  <=  reg_data(1129)(15 downto  8);                            --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  reg_data(1129)(23 downto 16);                            --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          localRdData(31 downto 24)  <=  reg_data(1129)(31 downto 24);                            --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1130 => --0x46a
          localRdData(31 downto  0)  <=  reg_data(1130)(31 downto  0);                            --Command: data field (According to the SCA manual)
        when 1131 => --0x46b
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(0).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(0).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(0).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(0).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1132 => --0x46c
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(0).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(0).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(0).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1133 => --0x46d
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(0).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1134 => --0x46e
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(1).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(1).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(1).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(1).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1135 => --0x46f
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(1).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(1).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(1).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1136 => --0x470
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(1).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1137 => --0x471
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(2).RX_LEN;           --Reply: The length qualifier field specifies the number of bytes contained in the DATA field.
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(2).RX_ADDRESS;       --Reply: It represents the packet destination address. The address is one-bytelong. By default, the GBT-SCA use address 0x00.
          localRdData(23 downto 16)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(2).RX_CONTROL;       --Reply: The control field is 1 byte in length and contains frame sequence numbers of the currently transmitted frame and the last correctly received frame. The control field is also used to convey three supervisory level commands: Connect, Reset, and Test.
          localRdData(31 downto 24)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(2).RX_TRANSID;       --Reply: transaction ID field (According to the SCA manual)
        when 1138 => --0x472
          localRdData( 7 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(2).RX_ERR;           --Reply: The Error Flag field is present in the channel reply frames to indicate error conditions encountered in the execution of a command. If no errors are found, its value is 0x00.
          localRdData( 8)            <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(2).RX_RECEIVED;      --Reply received flag (pulse)
          localRdData(19 downto 12)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(2).RX_CHANNEL;       --Reply: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1139 => --0x473
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(17).SC.MASTER.SCA_RX.RX(2).RX_DATA;          --Reply: The Data field is command dependent field whose length is defined by the length qualifier field. For example, in the case of a read/write operation on a GBT-SCA internal register, it contains the value written/read from the register.
        when 1141 => --0x475
          localRdData( 2 downto  0)  <=  reg_data(1141)( 2 downto  0);                            --Enable flag to select SCAs
        when 1154 => --0x482
          localRdData( 0)            <=  reg_data(1154)( 0);                                      --Request a write config to the GBTx (IC)
          localRdData( 1)            <=  reg_data(1154)( 1);                                      --Request a read config to the GBTx (IC)
          localRdData(15 downto  8)  <=  reg_data(1154)(15 downto  8);                            --I2C address of the GBTx
        when 1155 => --0x483
          localRdData(15 downto  0)  <=  reg_data(1155)(15 downto  0);                            --Address of the first register to be accessed
          localRdData(31 downto 16)  <=  reg_data(1155)(31 downto 16);                            --Number of words/bytes to be read (only for read transactions)
        when 1156 => --0x484
          localRdData( 7 downto  0)  <=  reg_data(1156)( 7 downto  0);                            --Data to be written into the internal FIFO
          localRdData(15 downto  8)  <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_DATA_FROM_GBTX;           --Data from the FIFO
          localRdData(16)            <=  Mon.CSM.CSM(17).SC.SLAVE.IC.TX_READY;                    --IC core ready for a transaction
        when 1158 => --0x486
          localRdData(31 downto  0)  <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_DATA;                     --Up to 4 bytes of GBT-IC read data
        when 1159 => --0x487
          localRdData( 6 downto  0)  <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_CHIP_ADR;                 --LPGBT I2C chip address
          localRdData( 7)            <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_UP_PARITY_OK;             --LPGBT uplink IC parity check was OK
          localRdData( 8)            <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_DOWN_PARITY_OK;           --LPGBT downlink IC parity check was OK
          localRdData( 9)            <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_ERR;                      --LPGBT IC decoder state machine error
          localRdData(10)            <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_VALID;                    --LPGBT IC decoder output data is valid
        when 1160 => --0x488
          localRdData(15 downto  0)  <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_REG_ADR;                  --LPGBT IC decoder register address 
          localRdData(31 downto 16)  <=  Mon.CSM.CSM(17).SC.SLAVE.IC.RX_LENGTH;                   --LPGBT IC decoder received length of the transaction. You only can read the tail 4 bytes due to firmware limitations


          when others =>
            regRdAck <= '0';
            localRdData <= x"00000000";
        end case;
      end if;
    end if;
  end process reads;


  -------------------------------------------------------------------------------
  -- Record write decoding
  -------------------------------------------------------------------------------
  -------------------------------------------------------------------------------

  -- Register mapping to ctrl structures
  Ctrl.CSM.CSM(0).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(34)( 0);                 
  Ctrl.CSM.CSM(0).SC.MASTER.IC.TX_START_READ          <=  reg_data(34)( 1);                 
  Ctrl.CSM.CSM(0).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(34)(15 downto  8);       
  Ctrl.CSM.CSM(0).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(35)(15 downto  0);       
  Ctrl.CSM.CSM(0).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(35)(31 downto 16);       
  Ctrl.CSM.CSM(0).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(36)( 7 downto  0);       
  Ctrl.CSM.CSM(0).SC.MASTER.TX_CMD                    <=  reg_data(41)( 7 downto  0);       
  Ctrl.CSM.CSM(0).SC.MASTER.TX_ADDRESS                <=  reg_data(41)(15 downto  8);       
  Ctrl.CSM.CSM(0).SC.MASTER.TX_TRANSID                <=  reg_data(41)(23 downto 16);       
  Ctrl.CSM.CSM(0).SC.MASTER.TX_CHANNEL                <=  reg_data(41)(31 downto 24);       
  Ctrl.CSM.CSM(0).SC.MASTER.TX_DATA                   <=  reg_data(42)(31 downto  0);       
  Ctrl.CSM.CSM(0).SC.MASTER.SCA_ENABLE                <=  reg_data(53)( 2 downto  0);       
  Ctrl.CSM.CSM(0).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(66)( 0);                 
  Ctrl.CSM.CSM(0).SC.SLAVE.IC.TX_START_READ           <=  reg_data(66)( 1);                 
  Ctrl.CSM.CSM(0).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(66)(15 downto  8);       
  Ctrl.CSM.CSM(0).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(67)(15 downto  0);       
  Ctrl.CSM.CSM(0).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(67)(31 downto 16);       
  Ctrl.CSM.CSM(0).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(68)( 7 downto  0);       
  Ctrl.CSM.CSM(1).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(98)( 0);                 
  Ctrl.CSM.CSM(1).SC.MASTER.IC.TX_START_READ          <=  reg_data(98)( 1);                 
  Ctrl.CSM.CSM(1).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(98)(15 downto  8);       
  Ctrl.CSM.CSM(1).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(99)(15 downto  0);       
  Ctrl.CSM.CSM(1).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(99)(31 downto 16);       
  Ctrl.CSM.CSM(1).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(100)( 7 downto  0);      
  Ctrl.CSM.CSM(1).SC.MASTER.TX_CMD                    <=  reg_data(105)( 7 downto  0);      
  Ctrl.CSM.CSM(1).SC.MASTER.TX_ADDRESS                <=  reg_data(105)(15 downto  8);      
  Ctrl.CSM.CSM(1).SC.MASTER.TX_TRANSID                <=  reg_data(105)(23 downto 16);      
  Ctrl.CSM.CSM(1).SC.MASTER.TX_CHANNEL                <=  reg_data(105)(31 downto 24);      
  Ctrl.CSM.CSM(1).SC.MASTER.TX_DATA                   <=  reg_data(106)(31 downto  0);      
  Ctrl.CSM.CSM(1).SC.MASTER.SCA_ENABLE                <=  reg_data(117)( 2 downto  0);      
  Ctrl.CSM.CSM(1).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(130)( 0);                
  Ctrl.CSM.CSM(1).SC.SLAVE.IC.TX_START_READ           <=  reg_data(130)( 1);                
  Ctrl.CSM.CSM(1).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(130)(15 downto  8);      
  Ctrl.CSM.CSM(1).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(131)(15 downto  0);      
  Ctrl.CSM.CSM(1).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(131)(31 downto 16);      
  Ctrl.CSM.CSM(1).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(132)( 7 downto  0);      
  Ctrl.CSM.CSM(2).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(162)( 0);                
  Ctrl.CSM.CSM(2).SC.MASTER.IC.TX_START_READ          <=  reg_data(162)( 1);                
  Ctrl.CSM.CSM(2).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(162)(15 downto  8);      
  Ctrl.CSM.CSM(2).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(163)(15 downto  0);      
  Ctrl.CSM.CSM(2).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(163)(31 downto 16);      
  Ctrl.CSM.CSM(2).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(164)( 7 downto  0);      
  Ctrl.CSM.CSM(2).SC.MASTER.TX_CMD                    <=  reg_data(169)( 7 downto  0);      
  Ctrl.CSM.CSM(2).SC.MASTER.TX_ADDRESS                <=  reg_data(169)(15 downto  8);      
  Ctrl.CSM.CSM(2).SC.MASTER.TX_TRANSID                <=  reg_data(169)(23 downto 16);      
  Ctrl.CSM.CSM(2).SC.MASTER.TX_CHANNEL                <=  reg_data(169)(31 downto 24);      
  Ctrl.CSM.CSM(2).SC.MASTER.TX_DATA                   <=  reg_data(170)(31 downto  0);      
  Ctrl.CSM.CSM(2).SC.MASTER.SCA_ENABLE                <=  reg_data(181)( 2 downto  0);      
  Ctrl.CSM.CSM(2).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(194)( 0);                
  Ctrl.CSM.CSM(2).SC.SLAVE.IC.TX_START_READ           <=  reg_data(194)( 1);                
  Ctrl.CSM.CSM(2).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(194)(15 downto  8);      
  Ctrl.CSM.CSM(2).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(195)(15 downto  0);      
  Ctrl.CSM.CSM(2).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(195)(31 downto 16);      
  Ctrl.CSM.CSM(2).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(196)( 7 downto  0);      
  Ctrl.CSM.CSM(3).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(226)( 0);                
  Ctrl.CSM.CSM(3).SC.MASTER.IC.TX_START_READ          <=  reg_data(226)( 1);                
  Ctrl.CSM.CSM(3).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(226)(15 downto  8);      
  Ctrl.CSM.CSM(3).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(227)(15 downto  0);      
  Ctrl.CSM.CSM(3).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(227)(31 downto 16);      
  Ctrl.CSM.CSM(3).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(228)( 7 downto  0);      
  Ctrl.CSM.CSM(3).SC.MASTER.TX_CMD                    <=  reg_data(233)( 7 downto  0);      
  Ctrl.CSM.CSM(3).SC.MASTER.TX_ADDRESS                <=  reg_data(233)(15 downto  8);      
  Ctrl.CSM.CSM(3).SC.MASTER.TX_TRANSID                <=  reg_data(233)(23 downto 16);      
  Ctrl.CSM.CSM(3).SC.MASTER.TX_CHANNEL                <=  reg_data(233)(31 downto 24);      
  Ctrl.CSM.CSM(3).SC.MASTER.TX_DATA                   <=  reg_data(234)(31 downto  0);      
  Ctrl.CSM.CSM(3).SC.MASTER.SCA_ENABLE                <=  reg_data(245)( 2 downto  0);      
  Ctrl.CSM.CSM(3).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(258)( 0);                
  Ctrl.CSM.CSM(3).SC.SLAVE.IC.TX_START_READ           <=  reg_data(258)( 1);                
  Ctrl.CSM.CSM(3).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(258)(15 downto  8);      
  Ctrl.CSM.CSM(3).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(259)(15 downto  0);      
  Ctrl.CSM.CSM(3).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(259)(31 downto 16);      
  Ctrl.CSM.CSM(3).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(260)( 7 downto  0);      
  Ctrl.CSM.CSM(4).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(290)( 0);                
  Ctrl.CSM.CSM(4).SC.MASTER.IC.TX_START_READ          <=  reg_data(290)( 1);                
  Ctrl.CSM.CSM(4).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(290)(15 downto  8);      
  Ctrl.CSM.CSM(4).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(291)(15 downto  0);      
  Ctrl.CSM.CSM(4).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(291)(31 downto 16);      
  Ctrl.CSM.CSM(4).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(292)( 7 downto  0);      
  Ctrl.CSM.CSM(4).SC.MASTER.TX_CMD                    <=  reg_data(297)( 7 downto  0);      
  Ctrl.CSM.CSM(4).SC.MASTER.TX_ADDRESS                <=  reg_data(297)(15 downto  8);      
  Ctrl.CSM.CSM(4).SC.MASTER.TX_TRANSID                <=  reg_data(297)(23 downto 16);      
  Ctrl.CSM.CSM(4).SC.MASTER.TX_CHANNEL                <=  reg_data(297)(31 downto 24);      
  Ctrl.CSM.CSM(4).SC.MASTER.TX_DATA                   <=  reg_data(298)(31 downto  0);      
  Ctrl.CSM.CSM(4).SC.MASTER.SCA_ENABLE                <=  reg_data(309)( 2 downto  0);      
  Ctrl.CSM.CSM(4).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(322)( 0);                
  Ctrl.CSM.CSM(4).SC.SLAVE.IC.TX_START_READ           <=  reg_data(322)( 1);                
  Ctrl.CSM.CSM(4).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(322)(15 downto  8);      
  Ctrl.CSM.CSM(4).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(323)(15 downto  0);      
  Ctrl.CSM.CSM(4).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(323)(31 downto 16);      
  Ctrl.CSM.CSM(4).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(324)( 7 downto  0);      
  Ctrl.CSM.CSM(5).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(354)( 0);                
  Ctrl.CSM.CSM(5).SC.MASTER.IC.TX_START_READ          <=  reg_data(354)( 1);                
  Ctrl.CSM.CSM(5).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(354)(15 downto  8);      
  Ctrl.CSM.CSM(5).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(355)(15 downto  0);      
  Ctrl.CSM.CSM(5).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(355)(31 downto 16);      
  Ctrl.CSM.CSM(5).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(356)( 7 downto  0);      
  Ctrl.CSM.CSM(5).SC.MASTER.TX_CMD                    <=  reg_data(361)( 7 downto  0);      
  Ctrl.CSM.CSM(5).SC.MASTER.TX_ADDRESS                <=  reg_data(361)(15 downto  8);      
  Ctrl.CSM.CSM(5).SC.MASTER.TX_TRANSID                <=  reg_data(361)(23 downto 16);      
  Ctrl.CSM.CSM(5).SC.MASTER.TX_CHANNEL                <=  reg_data(361)(31 downto 24);      
  Ctrl.CSM.CSM(5).SC.MASTER.TX_DATA                   <=  reg_data(362)(31 downto  0);      
  Ctrl.CSM.CSM(5).SC.MASTER.SCA_ENABLE                <=  reg_data(373)( 2 downto  0);      
  Ctrl.CSM.CSM(5).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(386)( 0);                
  Ctrl.CSM.CSM(5).SC.SLAVE.IC.TX_START_READ           <=  reg_data(386)( 1);                
  Ctrl.CSM.CSM(5).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(386)(15 downto  8);      
  Ctrl.CSM.CSM(5).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(387)(15 downto  0);      
  Ctrl.CSM.CSM(5).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(387)(31 downto 16);      
  Ctrl.CSM.CSM(5).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(388)( 7 downto  0);      
  Ctrl.CSM.CSM(6).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(418)( 0);                
  Ctrl.CSM.CSM(6).SC.MASTER.IC.TX_START_READ          <=  reg_data(418)( 1);                
  Ctrl.CSM.CSM(6).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(418)(15 downto  8);      
  Ctrl.CSM.CSM(6).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(419)(15 downto  0);      
  Ctrl.CSM.CSM(6).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(419)(31 downto 16);      
  Ctrl.CSM.CSM(6).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(420)( 7 downto  0);      
  Ctrl.CSM.CSM(6).SC.MASTER.TX_CMD                    <=  reg_data(425)( 7 downto  0);      
  Ctrl.CSM.CSM(6).SC.MASTER.TX_ADDRESS                <=  reg_data(425)(15 downto  8);      
  Ctrl.CSM.CSM(6).SC.MASTER.TX_TRANSID                <=  reg_data(425)(23 downto 16);      
  Ctrl.CSM.CSM(6).SC.MASTER.TX_CHANNEL                <=  reg_data(425)(31 downto 24);      
  Ctrl.CSM.CSM(6).SC.MASTER.TX_DATA                   <=  reg_data(426)(31 downto  0);      
  Ctrl.CSM.CSM(6).SC.MASTER.SCA_ENABLE                <=  reg_data(437)( 2 downto  0);      
  Ctrl.CSM.CSM(6).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(450)( 0);                
  Ctrl.CSM.CSM(6).SC.SLAVE.IC.TX_START_READ           <=  reg_data(450)( 1);                
  Ctrl.CSM.CSM(6).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(450)(15 downto  8);      
  Ctrl.CSM.CSM(6).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(451)(15 downto  0);      
  Ctrl.CSM.CSM(6).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(451)(31 downto 16);      
  Ctrl.CSM.CSM(6).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(452)( 7 downto  0);      
  Ctrl.CSM.CSM(7).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(482)( 0);                
  Ctrl.CSM.CSM(7).SC.MASTER.IC.TX_START_READ          <=  reg_data(482)( 1);                
  Ctrl.CSM.CSM(7).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(482)(15 downto  8);      
  Ctrl.CSM.CSM(7).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(483)(15 downto  0);      
  Ctrl.CSM.CSM(7).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(483)(31 downto 16);      
  Ctrl.CSM.CSM(7).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(484)( 7 downto  0);      
  Ctrl.CSM.CSM(7).SC.MASTER.TX_CMD                    <=  reg_data(489)( 7 downto  0);      
  Ctrl.CSM.CSM(7).SC.MASTER.TX_ADDRESS                <=  reg_data(489)(15 downto  8);      
  Ctrl.CSM.CSM(7).SC.MASTER.TX_TRANSID                <=  reg_data(489)(23 downto 16);      
  Ctrl.CSM.CSM(7).SC.MASTER.TX_CHANNEL                <=  reg_data(489)(31 downto 24);      
  Ctrl.CSM.CSM(7).SC.MASTER.TX_DATA                   <=  reg_data(490)(31 downto  0);      
  Ctrl.CSM.CSM(7).SC.MASTER.SCA_ENABLE                <=  reg_data(501)( 2 downto  0);      
  Ctrl.CSM.CSM(7).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(514)( 0);                
  Ctrl.CSM.CSM(7).SC.SLAVE.IC.TX_START_READ           <=  reg_data(514)( 1);                
  Ctrl.CSM.CSM(7).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(514)(15 downto  8);      
  Ctrl.CSM.CSM(7).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(515)(15 downto  0);      
  Ctrl.CSM.CSM(7).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(515)(31 downto 16);      
  Ctrl.CSM.CSM(7).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(516)( 7 downto  0);      
  Ctrl.CSM.CSM(8).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(546)( 0);                
  Ctrl.CSM.CSM(8).SC.MASTER.IC.TX_START_READ          <=  reg_data(546)( 1);                
  Ctrl.CSM.CSM(8).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(546)(15 downto  8);      
  Ctrl.CSM.CSM(8).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(547)(15 downto  0);      
  Ctrl.CSM.CSM(8).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(547)(31 downto 16);      
  Ctrl.CSM.CSM(8).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(548)( 7 downto  0);      
  Ctrl.CSM.CSM(8).SC.MASTER.TX_CMD                    <=  reg_data(553)( 7 downto  0);      
  Ctrl.CSM.CSM(8).SC.MASTER.TX_ADDRESS                <=  reg_data(553)(15 downto  8);      
  Ctrl.CSM.CSM(8).SC.MASTER.TX_TRANSID                <=  reg_data(553)(23 downto 16);      
  Ctrl.CSM.CSM(8).SC.MASTER.TX_CHANNEL                <=  reg_data(553)(31 downto 24);      
  Ctrl.CSM.CSM(8).SC.MASTER.TX_DATA                   <=  reg_data(554)(31 downto  0);      
  Ctrl.CSM.CSM(8).SC.MASTER.SCA_ENABLE                <=  reg_data(565)( 2 downto  0);      
  Ctrl.CSM.CSM(8).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(578)( 0);                
  Ctrl.CSM.CSM(8).SC.SLAVE.IC.TX_START_READ           <=  reg_data(578)( 1);                
  Ctrl.CSM.CSM(8).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(578)(15 downto  8);      
  Ctrl.CSM.CSM(8).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(579)(15 downto  0);      
  Ctrl.CSM.CSM(8).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(579)(31 downto 16);      
  Ctrl.CSM.CSM(8).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(580)( 7 downto  0);      
  Ctrl.CSM.CSM(9).SC.MASTER.IC.TX_START_WRITE         <=  reg_data(610)( 0);                
  Ctrl.CSM.CSM(9).SC.MASTER.IC.TX_START_READ          <=  reg_data(610)( 1);                
  Ctrl.CSM.CSM(9).SC.MASTER.IC.TX_GBTX_ADDR           <=  reg_data(610)(15 downto  8);      
  Ctrl.CSM.CSM(9).SC.MASTER.IC.TX_REGISTER_ADDR       <=  reg_data(611)(15 downto  0);      
  Ctrl.CSM.CSM(9).SC.MASTER.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(611)(31 downto 16);      
  Ctrl.CSM.CSM(9).SC.MASTER.IC.TX_DATA_TO_GBTX        <=  reg_data(612)( 7 downto  0);      
  Ctrl.CSM.CSM(9).SC.MASTER.TX_CMD                    <=  reg_data(617)( 7 downto  0);      
  Ctrl.CSM.CSM(9).SC.MASTER.TX_ADDRESS                <=  reg_data(617)(15 downto  8);      
  Ctrl.CSM.CSM(9).SC.MASTER.TX_TRANSID                <=  reg_data(617)(23 downto 16);      
  Ctrl.CSM.CSM(9).SC.MASTER.TX_CHANNEL                <=  reg_data(617)(31 downto 24);      
  Ctrl.CSM.CSM(9).SC.MASTER.TX_DATA                   <=  reg_data(618)(31 downto  0);      
  Ctrl.CSM.CSM(9).SC.MASTER.SCA_ENABLE                <=  reg_data(629)( 2 downto  0);      
  Ctrl.CSM.CSM(9).SC.SLAVE.IC.TX_START_WRITE          <=  reg_data(642)( 0);                
  Ctrl.CSM.CSM(9).SC.SLAVE.IC.TX_START_READ           <=  reg_data(642)( 1);                
  Ctrl.CSM.CSM(9).SC.SLAVE.IC.TX_GBTX_ADDR            <=  reg_data(642)(15 downto  8);      
  Ctrl.CSM.CSM(9).SC.SLAVE.IC.TX_REGISTER_ADDR        <=  reg_data(643)(15 downto  0);      
  Ctrl.CSM.CSM(9).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ    <=  reg_data(643)(31 downto 16);      
  Ctrl.CSM.CSM(9).SC.SLAVE.IC.TX_DATA_TO_GBTX         <=  reg_data(644)( 7 downto  0);      
  Ctrl.CSM.CSM(10).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(674)( 0);                
  Ctrl.CSM.CSM(10).SC.MASTER.IC.TX_START_READ         <=  reg_data(674)( 1);                
  Ctrl.CSM.CSM(10).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(674)(15 downto  8);      
  Ctrl.CSM.CSM(10).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(675)(15 downto  0);      
  Ctrl.CSM.CSM(10).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(675)(31 downto 16);      
  Ctrl.CSM.CSM(10).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(676)( 7 downto  0);      
  Ctrl.CSM.CSM(10).SC.MASTER.TX_CMD                   <=  reg_data(681)( 7 downto  0);      
  Ctrl.CSM.CSM(10).SC.MASTER.TX_ADDRESS               <=  reg_data(681)(15 downto  8);      
  Ctrl.CSM.CSM(10).SC.MASTER.TX_TRANSID               <=  reg_data(681)(23 downto 16);      
  Ctrl.CSM.CSM(10).SC.MASTER.TX_CHANNEL               <=  reg_data(681)(31 downto 24);      
  Ctrl.CSM.CSM(10).SC.MASTER.TX_DATA                  <=  reg_data(682)(31 downto  0);      
  Ctrl.CSM.CSM(10).SC.MASTER.SCA_ENABLE               <=  reg_data(693)( 2 downto  0);      
  Ctrl.CSM.CSM(10).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(706)( 0);                
  Ctrl.CSM.CSM(10).SC.SLAVE.IC.TX_START_READ          <=  reg_data(706)( 1);                
  Ctrl.CSM.CSM(10).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(706)(15 downto  8);      
  Ctrl.CSM.CSM(10).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(707)(15 downto  0);      
  Ctrl.CSM.CSM(10).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(707)(31 downto 16);      
  Ctrl.CSM.CSM(10).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(708)( 7 downto  0);      
  Ctrl.CSM.CSM(11).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(738)( 0);                
  Ctrl.CSM.CSM(11).SC.MASTER.IC.TX_START_READ         <=  reg_data(738)( 1);                
  Ctrl.CSM.CSM(11).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(738)(15 downto  8);      
  Ctrl.CSM.CSM(11).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(739)(15 downto  0);      
  Ctrl.CSM.CSM(11).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(739)(31 downto 16);      
  Ctrl.CSM.CSM(11).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(740)( 7 downto  0);      
  Ctrl.CSM.CSM(11).SC.MASTER.TX_CMD                   <=  reg_data(745)( 7 downto  0);      
  Ctrl.CSM.CSM(11).SC.MASTER.TX_ADDRESS               <=  reg_data(745)(15 downto  8);      
  Ctrl.CSM.CSM(11).SC.MASTER.TX_TRANSID               <=  reg_data(745)(23 downto 16);      
  Ctrl.CSM.CSM(11).SC.MASTER.TX_CHANNEL               <=  reg_data(745)(31 downto 24);      
  Ctrl.CSM.CSM(11).SC.MASTER.TX_DATA                  <=  reg_data(746)(31 downto  0);      
  Ctrl.CSM.CSM(11).SC.MASTER.SCA_ENABLE               <=  reg_data(757)( 2 downto  0);      
  Ctrl.CSM.CSM(11).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(770)( 0);                
  Ctrl.CSM.CSM(11).SC.SLAVE.IC.TX_START_READ          <=  reg_data(770)( 1);                
  Ctrl.CSM.CSM(11).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(770)(15 downto  8);      
  Ctrl.CSM.CSM(11).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(771)(15 downto  0);      
  Ctrl.CSM.CSM(11).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(771)(31 downto 16);      
  Ctrl.CSM.CSM(11).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(772)( 7 downto  0);      
  Ctrl.CSM.CSM(12).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(802)( 0);                
  Ctrl.CSM.CSM(12).SC.MASTER.IC.TX_START_READ         <=  reg_data(802)( 1);                
  Ctrl.CSM.CSM(12).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(802)(15 downto  8);      
  Ctrl.CSM.CSM(12).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(803)(15 downto  0);      
  Ctrl.CSM.CSM(12).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(803)(31 downto 16);      
  Ctrl.CSM.CSM(12).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(804)( 7 downto  0);      
  Ctrl.CSM.CSM(12).SC.MASTER.TX_CMD                   <=  reg_data(809)( 7 downto  0);      
  Ctrl.CSM.CSM(12).SC.MASTER.TX_ADDRESS               <=  reg_data(809)(15 downto  8);      
  Ctrl.CSM.CSM(12).SC.MASTER.TX_TRANSID               <=  reg_data(809)(23 downto 16);      
  Ctrl.CSM.CSM(12).SC.MASTER.TX_CHANNEL               <=  reg_data(809)(31 downto 24);      
  Ctrl.CSM.CSM(12).SC.MASTER.TX_DATA                  <=  reg_data(810)(31 downto  0);      
  Ctrl.CSM.CSM(12).SC.MASTER.SCA_ENABLE               <=  reg_data(821)( 2 downto  0);      
  Ctrl.CSM.CSM(12).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(834)( 0);                
  Ctrl.CSM.CSM(12).SC.SLAVE.IC.TX_START_READ          <=  reg_data(834)( 1);                
  Ctrl.CSM.CSM(12).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(834)(15 downto  8);      
  Ctrl.CSM.CSM(12).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(835)(15 downto  0);      
  Ctrl.CSM.CSM(12).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(835)(31 downto 16);      
  Ctrl.CSM.CSM(12).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(836)( 7 downto  0);      
  Ctrl.CSM.CSM(13).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(866)( 0);                
  Ctrl.CSM.CSM(13).SC.MASTER.IC.TX_START_READ         <=  reg_data(866)( 1);                
  Ctrl.CSM.CSM(13).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(866)(15 downto  8);      
  Ctrl.CSM.CSM(13).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(867)(15 downto  0);      
  Ctrl.CSM.CSM(13).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(867)(31 downto 16);      
  Ctrl.CSM.CSM(13).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(868)( 7 downto  0);      
  Ctrl.CSM.CSM(13).SC.MASTER.TX_CMD                   <=  reg_data(873)( 7 downto  0);      
  Ctrl.CSM.CSM(13).SC.MASTER.TX_ADDRESS               <=  reg_data(873)(15 downto  8);      
  Ctrl.CSM.CSM(13).SC.MASTER.TX_TRANSID               <=  reg_data(873)(23 downto 16);      
  Ctrl.CSM.CSM(13).SC.MASTER.TX_CHANNEL               <=  reg_data(873)(31 downto 24);      
  Ctrl.CSM.CSM(13).SC.MASTER.TX_DATA                  <=  reg_data(874)(31 downto  0);      
  Ctrl.CSM.CSM(13).SC.MASTER.SCA_ENABLE               <=  reg_data(885)( 2 downto  0);      
  Ctrl.CSM.CSM(13).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(898)( 0);                
  Ctrl.CSM.CSM(13).SC.SLAVE.IC.TX_START_READ          <=  reg_data(898)( 1);                
  Ctrl.CSM.CSM(13).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(898)(15 downto  8);      
  Ctrl.CSM.CSM(13).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(899)(15 downto  0);      
  Ctrl.CSM.CSM(13).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(899)(31 downto 16);      
  Ctrl.CSM.CSM(13).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(900)( 7 downto  0);      
  Ctrl.CSM.CSM(14).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(930)( 0);                
  Ctrl.CSM.CSM(14).SC.MASTER.IC.TX_START_READ         <=  reg_data(930)( 1);                
  Ctrl.CSM.CSM(14).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(930)(15 downto  8);      
  Ctrl.CSM.CSM(14).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(931)(15 downto  0);      
  Ctrl.CSM.CSM(14).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(931)(31 downto 16);      
  Ctrl.CSM.CSM(14).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(932)( 7 downto  0);      
  Ctrl.CSM.CSM(14).SC.MASTER.TX_CMD                   <=  reg_data(937)( 7 downto  0);      
  Ctrl.CSM.CSM(14).SC.MASTER.TX_ADDRESS               <=  reg_data(937)(15 downto  8);      
  Ctrl.CSM.CSM(14).SC.MASTER.TX_TRANSID               <=  reg_data(937)(23 downto 16);      
  Ctrl.CSM.CSM(14).SC.MASTER.TX_CHANNEL               <=  reg_data(937)(31 downto 24);      
  Ctrl.CSM.CSM(14).SC.MASTER.TX_DATA                  <=  reg_data(938)(31 downto  0);      
  Ctrl.CSM.CSM(14).SC.MASTER.SCA_ENABLE               <=  reg_data(949)( 2 downto  0);      
  Ctrl.CSM.CSM(14).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(962)( 0);                
  Ctrl.CSM.CSM(14).SC.SLAVE.IC.TX_START_READ          <=  reg_data(962)( 1);                
  Ctrl.CSM.CSM(14).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(962)(15 downto  8);      
  Ctrl.CSM.CSM(14).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(963)(15 downto  0);      
  Ctrl.CSM.CSM(14).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(963)(31 downto 16);      
  Ctrl.CSM.CSM(14).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(964)( 7 downto  0);      
  Ctrl.CSM.CSM(15).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(994)( 0);                
  Ctrl.CSM.CSM(15).SC.MASTER.IC.TX_START_READ         <=  reg_data(994)( 1);                
  Ctrl.CSM.CSM(15).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(994)(15 downto  8);      
  Ctrl.CSM.CSM(15).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(995)(15 downto  0);      
  Ctrl.CSM.CSM(15).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(995)(31 downto 16);      
  Ctrl.CSM.CSM(15).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(996)( 7 downto  0);      
  Ctrl.CSM.CSM(15).SC.MASTER.TX_CMD                   <=  reg_data(1001)( 7 downto  0);     
  Ctrl.CSM.CSM(15).SC.MASTER.TX_ADDRESS               <=  reg_data(1001)(15 downto  8);     
  Ctrl.CSM.CSM(15).SC.MASTER.TX_TRANSID               <=  reg_data(1001)(23 downto 16);     
  Ctrl.CSM.CSM(15).SC.MASTER.TX_CHANNEL               <=  reg_data(1001)(31 downto 24);     
  Ctrl.CSM.CSM(15).SC.MASTER.TX_DATA                  <=  reg_data(1002)(31 downto  0);     
  Ctrl.CSM.CSM(15).SC.MASTER.SCA_ENABLE               <=  reg_data(1013)( 2 downto  0);     
  Ctrl.CSM.CSM(15).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(1026)( 0);               
  Ctrl.CSM.CSM(15).SC.SLAVE.IC.TX_START_READ          <=  reg_data(1026)( 1);               
  Ctrl.CSM.CSM(15).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(1026)(15 downto  8);     
  Ctrl.CSM.CSM(15).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(1027)(15 downto  0);     
  Ctrl.CSM.CSM(15).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(1027)(31 downto 16);     
  Ctrl.CSM.CSM(15).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(1028)( 7 downto  0);     
  Ctrl.CSM.CSM(16).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(1058)( 0);               
  Ctrl.CSM.CSM(16).SC.MASTER.IC.TX_START_READ         <=  reg_data(1058)( 1);               
  Ctrl.CSM.CSM(16).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(1058)(15 downto  8);     
  Ctrl.CSM.CSM(16).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(1059)(15 downto  0);     
  Ctrl.CSM.CSM(16).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(1059)(31 downto 16);     
  Ctrl.CSM.CSM(16).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(1060)( 7 downto  0);     
  Ctrl.CSM.CSM(16).SC.MASTER.TX_CMD                   <=  reg_data(1065)( 7 downto  0);     
  Ctrl.CSM.CSM(16).SC.MASTER.TX_ADDRESS               <=  reg_data(1065)(15 downto  8);     
  Ctrl.CSM.CSM(16).SC.MASTER.TX_TRANSID               <=  reg_data(1065)(23 downto 16);     
  Ctrl.CSM.CSM(16).SC.MASTER.TX_CHANNEL               <=  reg_data(1065)(31 downto 24);     
  Ctrl.CSM.CSM(16).SC.MASTER.TX_DATA                  <=  reg_data(1066)(31 downto  0);     
  Ctrl.CSM.CSM(16).SC.MASTER.SCA_ENABLE               <=  reg_data(1077)( 2 downto  0);     
  Ctrl.CSM.CSM(16).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(1090)( 0);               
  Ctrl.CSM.CSM(16).SC.SLAVE.IC.TX_START_READ          <=  reg_data(1090)( 1);               
  Ctrl.CSM.CSM(16).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(1090)(15 downto  8);     
  Ctrl.CSM.CSM(16).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(1091)(15 downto  0);     
  Ctrl.CSM.CSM(16).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(1091)(31 downto 16);     
  Ctrl.CSM.CSM(16).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(1092)( 7 downto  0);     
  Ctrl.CSM.CSM(17).SC.MASTER.IC.TX_START_WRITE        <=  reg_data(1122)( 0);               
  Ctrl.CSM.CSM(17).SC.MASTER.IC.TX_START_READ         <=  reg_data(1122)( 1);               
  Ctrl.CSM.CSM(17).SC.MASTER.IC.TX_GBTX_ADDR          <=  reg_data(1122)(15 downto  8);     
  Ctrl.CSM.CSM(17).SC.MASTER.IC.TX_REGISTER_ADDR      <=  reg_data(1123)(15 downto  0);     
  Ctrl.CSM.CSM(17).SC.MASTER.IC.TX_NUM_BYTES_TO_READ  <=  reg_data(1123)(31 downto 16);     
  Ctrl.CSM.CSM(17).SC.MASTER.IC.TX_DATA_TO_GBTX       <=  reg_data(1124)( 7 downto  0);     
  Ctrl.CSM.CSM(17).SC.MASTER.TX_CMD                   <=  reg_data(1129)( 7 downto  0);     
  Ctrl.CSM.CSM(17).SC.MASTER.TX_ADDRESS               <=  reg_data(1129)(15 downto  8);     
  Ctrl.CSM.CSM(17).SC.MASTER.TX_TRANSID               <=  reg_data(1129)(23 downto 16);     
  Ctrl.CSM.CSM(17).SC.MASTER.TX_CHANNEL               <=  reg_data(1129)(31 downto 24);     
  Ctrl.CSM.CSM(17).SC.MASTER.TX_DATA                  <=  reg_data(1130)(31 downto  0);     
  Ctrl.CSM.CSM(17).SC.MASTER.SCA_ENABLE               <=  reg_data(1141)( 2 downto  0);     
  Ctrl.CSM.CSM(17).SC.SLAVE.IC.TX_START_WRITE         <=  reg_data(1154)( 0);               
  Ctrl.CSM.CSM(17).SC.SLAVE.IC.TX_START_READ          <=  reg_data(1154)( 1);               
  Ctrl.CSM.CSM(17).SC.SLAVE.IC.TX_GBTX_ADDR           <=  reg_data(1154)(15 downto  8);     
  Ctrl.CSM.CSM(17).SC.SLAVE.IC.TX_REGISTER_ADDR       <=  reg_data(1155)(15 downto  0);     
  Ctrl.CSM.CSM(17).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ   <=  reg_data(1155)(31 downto 16);     
  Ctrl.CSM.CSM(17).SC.SLAVE.IC.TX_DATA_TO_GBTX        <=  reg_data(1156)( 7 downto  0);     


  reg_writes: process (clk_axi, reset_axi_n) is
  begin  -- process reg_writes
    if reset_axi_n = '0' then                 -- asynchronous reset (active low)
      reg_data(34)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.IC.TX_START_WRITE;
      reg_data(34)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.IC.TX_START_READ;
      reg_data(34)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(35)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(35)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(36)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(41)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.TX_CMD;
      reg_data(41)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.TX_ADDRESS;
      reg_data(41)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.TX_TRANSID;
      reg_data(41)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.TX_CHANNEL;
      reg_data(42)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.TX_DATA;
      reg_data(53)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.MASTER.SCA_ENABLE;
      reg_data(66)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(66)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.SLAVE.IC.TX_START_READ;
      reg_data(66)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(67)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(67)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(68)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(0).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(98)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.IC.TX_START_WRITE;
      reg_data(98)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.IC.TX_START_READ;
      reg_data(98)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(99)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(99)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(100)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(105)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.TX_CMD;
      reg_data(105)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.TX_ADDRESS;
      reg_data(105)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.TX_TRANSID;
      reg_data(105)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.TX_CHANNEL;
      reg_data(106)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.TX_DATA;
      reg_data(117)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.MASTER.SCA_ENABLE;
      reg_data(130)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(130)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.SLAVE.IC.TX_START_READ;
      reg_data(130)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(131)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(131)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(132)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(1).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(162)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.IC.TX_START_WRITE;
      reg_data(162)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.IC.TX_START_READ;
      reg_data(162)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(163)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(163)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(164)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(169)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.TX_CMD;
      reg_data(169)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.TX_ADDRESS;
      reg_data(169)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.TX_TRANSID;
      reg_data(169)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.TX_CHANNEL;
      reg_data(170)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.TX_DATA;
      reg_data(181)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.MASTER.SCA_ENABLE;
      reg_data(194)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(194)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.SLAVE.IC.TX_START_READ;
      reg_data(194)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(195)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(195)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(196)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(2).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(226)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.IC.TX_START_WRITE;
      reg_data(226)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.IC.TX_START_READ;
      reg_data(226)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(227)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(227)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(228)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(233)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.TX_CMD;
      reg_data(233)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.TX_ADDRESS;
      reg_data(233)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.TX_TRANSID;
      reg_data(233)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.TX_CHANNEL;
      reg_data(234)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.TX_DATA;
      reg_data(245)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.MASTER.SCA_ENABLE;
      reg_data(258)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(258)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.SLAVE.IC.TX_START_READ;
      reg_data(258)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(259)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(259)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(260)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(3).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(290)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.IC.TX_START_WRITE;
      reg_data(290)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.IC.TX_START_READ;
      reg_data(290)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(291)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(291)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(292)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(297)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.TX_CMD;
      reg_data(297)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.TX_ADDRESS;
      reg_data(297)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.TX_TRANSID;
      reg_data(297)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.TX_CHANNEL;
      reg_data(298)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.TX_DATA;
      reg_data(309)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.MASTER.SCA_ENABLE;
      reg_data(322)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(322)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.SLAVE.IC.TX_START_READ;
      reg_data(322)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(323)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(323)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(324)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(4).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(354)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.IC.TX_START_WRITE;
      reg_data(354)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.IC.TX_START_READ;
      reg_data(354)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(355)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(355)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(356)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(361)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.TX_CMD;
      reg_data(361)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.TX_ADDRESS;
      reg_data(361)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.TX_TRANSID;
      reg_data(361)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.TX_CHANNEL;
      reg_data(362)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.TX_DATA;
      reg_data(373)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.MASTER.SCA_ENABLE;
      reg_data(386)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(386)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.SLAVE.IC.TX_START_READ;
      reg_data(386)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(387)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(387)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(388)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(5).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(418)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.IC.TX_START_WRITE;
      reg_data(418)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.IC.TX_START_READ;
      reg_data(418)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(419)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(419)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(420)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(425)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.TX_CMD;
      reg_data(425)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.TX_ADDRESS;
      reg_data(425)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.TX_TRANSID;
      reg_data(425)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.TX_CHANNEL;
      reg_data(426)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.TX_DATA;
      reg_data(437)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.MASTER.SCA_ENABLE;
      reg_data(450)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(450)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.SLAVE.IC.TX_START_READ;
      reg_data(450)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(451)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(451)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(452)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(6).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(482)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.IC.TX_START_WRITE;
      reg_data(482)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.IC.TX_START_READ;
      reg_data(482)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(483)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(483)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(484)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(489)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.TX_CMD;
      reg_data(489)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.TX_ADDRESS;
      reg_data(489)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.TX_TRANSID;
      reg_data(489)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.TX_CHANNEL;
      reg_data(490)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.TX_DATA;
      reg_data(501)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.MASTER.SCA_ENABLE;
      reg_data(514)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(514)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.SLAVE.IC.TX_START_READ;
      reg_data(514)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(515)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(515)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(516)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(7).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(546)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.IC.TX_START_WRITE;
      reg_data(546)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.IC.TX_START_READ;
      reg_data(546)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(547)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(547)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(548)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(553)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.TX_CMD;
      reg_data(553)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.TX_ADDRESS;
      reg_data(553)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.TX_TRANSID;
      reg_data(553)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.TX_CHANNEL;
      reg_data(554)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.TX_DATA;
      reg_data(565)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.MASTER.SCA_ENABLE;
      reg_data(578)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(578)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.SLAVE.IC.TX_START_READ;
      reg_data(578)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(579)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(579)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(580)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(8).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(610)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.IC.TX_START_WRITE;
      reg_data(610)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.IC.TX_START_READ;
      reg_data(610)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(611)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(611)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(612)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(617)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.TX_CMD;
      reg_data(617)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.TX_ADDRESS;
      reg_data(617)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.TX_TRANSID;
      reg_data(617)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.TX_CHANNEL;
      reg_data(618)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.TX_DATA;
      reg_data(629)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.MASTER.SCA_ENABLE;
      reg_data(642)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(642)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.SLAVE.IC.TX_START_READ;
      reg_data(642)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(643)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(643)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(644)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(9).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(674)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.IC.TX_START_WRITE;
      reg_data(674)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.IC.TX_START_READ;
      reg_data(674)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(675)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(675)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(676)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(681)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.TX_CMD;
      reg_data(681)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.TX_ADDRESS;
      reg_data(681)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.TX_TRANSID;
      reg_data(681)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.TX_CHANNEL;
      reg_data(682)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.TX_DATA;
      reg_data(693)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.MASTER.SCA_ENABLE;
      reg_data(706)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(706)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.SLAVE.IC.TX_START_READ;
      reg_data(706)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(707)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(707)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(708)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(10).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(738)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.IC.TX_START_WRITE;
      reg_data(738)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.IC.TX_START_READ;
      reg_data(738)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(739)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(739)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(740)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(745)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.TX_CMD;
      reg_data(745)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.TX_ADDRESS;
      reg_data(745)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.TX_TRANSID;
      reg_data(745)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.TX_CHANNEL;
      reg_data(746)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.TX_DATA;
      reg_data(757)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.MASTER.SCA_ENABLE;
      reg_data(770)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(770)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.SLAVE.IC.TX_START_READ;
      reg_data(770)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(771)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(771)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(772)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(11).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(802)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.IC.TX_START_WRITE;
      reg_data(802)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.IC.TX_START_READ;
      reg_data(802)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(803)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(803)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(804)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(809)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.TX_CMD;
      reg_data(809)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.TX_ADDRESS;
      reg_data(809)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.TX_TRANSID;
      reg_data(809)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.TX_CHANNEL;
      reg_data(810)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.TX_DATA;
      reg_data(821)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.MASTER.SCA_ENABLE;
      reg_data(834)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(834)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.SLAVE.IC.TX_START_READ;
      reg_data(834)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(835)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(835)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(836)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(12).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(866)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.IC.TX_START_WRITE;
      reg_data(866)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.IC.TX_START_READ;
      reg_data(866)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(867)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(867)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(868)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(873)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.TX_CMD;
      reg_data(873)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.TX_ADDRESS;
      reg_data(873)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.TX_TRANSID;
      reg_data(873)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.TX_CHANNEL;
      reg_data(874)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.TX_DATA;
      reg_data(885)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.MASTER.SCA_ENABLE;
      reg_data(898)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(898)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.SLAVE.IC.TX_START_READ;
      reg_data(898)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(899)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(899)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(900)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(13).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(930)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.IC.TX_START_WRITE;
      reg_data(930)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.IC.TX_START_READ;
      reg_data(930)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(931)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(931)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(932)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(937)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.TX_CMD;
      reg_data(937)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.TX_ADDRESS;
      reg_data(937)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.TX_TRANSID;
      reg_data(937)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.TX_CHANNEL;
      reg_data(938)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.TX_DATA;
      reg_data(949)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.MASTER.SCA_ENABLE;
      reg_data(962)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(962)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.SLAVE.IC.TX_START_READ;
      reg_data(962)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(963)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(963)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(964)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(14).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(994)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.IC.TX_START_WRITE;
      reg_data(994)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.IC.TX_START_READ;
      reg_data(994)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(995)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(995)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(996)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(1001)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.TX_CMD;
      reg_data(1001)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.TX_ADDRESS;
      reg_data(1001)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.TX_TRANSID;
      reg_data(1001)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.TX_CHANNEL;
      reg_data(1002)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.TX_DATA;
      reg_data(1013)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.MASTER.SCA_ENABLE;
      reg_data(1026)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(1026)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.SLAVE.IC.TX_START_READ;
      reg_data(1026)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(1027)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(1027)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1028)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(15).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(1058)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.IC.TX_START_WRITE;
      reg_data(1058)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.IC.TX_START_READ;
      reg_data(1058)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(1059)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(1059)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1060)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(1065)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.TX_CMD;
      reg_data(1065)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.TX_ADDRESS;
      reg_data(1065)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.TX_TRANSID;
      reg_data(1065)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.TX_CHANNEL;
      reg_data(1066)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.TX_DATA;
      reg_data(1077)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.MASTER.SCA_ENABLE;
      reg_data(1090)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(1090)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.SLAVE.IC.TX_START_READ;
      reg_data(1090)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(1091)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(1091)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1092)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(16).SC.SLAVE.IC.TX_DATA_TO_GBTX;
      reg_data(1122)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.IC.TX_START_WRITE;
      reg_data(1122)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.IC.TX_START_READ;
      reg_data(1122)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.IC.TX_GBTX_ADDR;
      reg_data(1123)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.IC.TX_REGISTER_ADDR;
      reg_data(1123)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1124)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.IC.TX_DATA_TO_GBTX;
      reg_data(1129)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.TX_CMD;
      reg_data(1129)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.TX_ADDRESS;
      reg_data(1129)(23 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.TX_TRANSID;
      reg_data(1129)(31 downto 24)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.TX_CHANNEL;
      reg_data(1130)(31 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.TX_DATA;
      reg_data(1141)( 2 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.MASTER.SCA_ENABLE;
      reg_data(1154)( 0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.SLAVE.IC.TX_START_WRITE;
      reg_data(1154)( 1)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.SLAVE.IC.TX_START_READ;
      reg_data(1154)(15 downto  8)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.SLAVE.IC.TX_GBTX_ADDR;
      reg_data(1155)(15 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.SLAVE.IC.TX_REGISTER_ADDR;
      reg_data(1155)(31 downto 16)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.SLAVE.IC.TX_NUM_BYTES_TO_READ;
      reg_data(1156)( 7 downto  0)  <= DEFAULT_HAL_CTRL_t.CSM.CSM(17).SC.SLAVE.IC.TX_DATA_TO_GBTX;

    elsif clk_axi'event and clk_axi = '1' then  -- rising clock edge
      Ctrl.RESET_DOWNLINKS <= '0';
      Ctrl.RESET_UPLINKS <= '0';
      Ctrl.RESET_COUNTERS <= '0';
      Ctrl.CSM.CSM(0).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(0).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(0).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(0).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(0).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(0).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(0).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(0).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(0).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(0).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(0).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(0).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(0).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(1).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(1).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(1).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(1).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(1).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(1).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(1).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(1).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(1).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(1).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(1).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(1).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(1).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(2).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(2).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(2).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(2).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(2).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(2).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(2).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(2).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(2).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(2).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(2).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(2).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(2).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(3).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(3).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(3).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(3).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(3).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(3).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(3).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(3).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(3).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(3).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(3).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(3).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(3).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(4).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(4).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(4).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(4).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(4).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(4).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(4).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(4).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(4).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(4).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(4).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(4).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(4).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(5).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(5).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(5).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(5).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(5).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(5).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(5).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(5).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(5).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(5).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(5).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(5).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(5).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(6).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(6).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(6).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(6).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(6).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(6).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(6).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(6).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(6).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(6).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(6).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(6).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(6).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(7).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(7).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(7).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(7).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(7).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(7).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(7).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(7).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(7).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(7).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(7).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(7).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(7).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(8).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(8).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(8).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(8).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(8).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(8).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(8).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(8).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(8).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(8).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(8).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(8).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(8).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(9).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(9).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(9).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(9).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(9).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(9).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(9).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(9).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(9).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(9).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(9).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(9).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(9).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(10).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(10).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(10).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(10).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(10).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(10).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(10).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(10).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(10).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(10).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(10).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(10).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(10).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(11).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(11).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(11).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(11).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(11).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(11).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(11).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(11).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(11).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(11).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(11).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(11).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(11).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(12).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(12).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(12).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(12).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(12).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(12).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(12).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(12).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(12).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(12).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(12).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(12).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(12).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(13).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(13).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(13).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(13).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(13).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(13).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(13).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(13).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(13).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(13).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(13).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(13).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(13).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(14).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(14).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(14).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(14).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(14).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(14).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(14).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(14).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(14).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(14).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(14).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(14).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(14).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(15).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(15).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(15).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(15).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(15).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(15).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(15).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(15).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(15).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(15).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(15).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(15).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(15).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(16).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(16).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(16).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(16).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(16).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(16).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(16).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(16).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(16).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(16).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(16).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(16).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(16).SC.SLAVE.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(17).LPGBT.UPLINK.UPLINK(0).RESET <= '0';
      Ctrl.CSM.CSM(17).LPGBT.UPLINK.UPLINK(1).RESET <= '0';
      Ctrl.CSM.CSM(17).LPGBT.DOWNLINK.RESET <= '0';
      Ctrl.CSM.CSM(17).SC.MASTER.TX_RESET <= '0';
      Ctrl.CSM.CSM(17).SC.MASTER.RX_RESET <= '0';
      Ctrl.CSM.CSM(17).SC.MASTER.IC.TX_WR <= '0';
      Ctrl.CSM.CSM(17).SC.MASTER.START_RESET <= '0';
      Ctrl.CSM.CSM(17).SC.MASTER.START_CONNECT <= '0';
      Ctrl.CSM.CSM(17).SC.MASTER.START_COMMAND <= '0';
      Ctrl.CSM.CSM(17).SC.MASTER.INJ_CRC_ERR <= '0';
      Ctrl.CSM.CSM(17).SC.SLAVE.TX_RESET <= '0';
      Ctrl.CSM.CSM(17).SC.SLAVE.RX_RESET <= '0';
      Ctrl.CSM.CSM(17).SC.SLAVE.IC.TX_WR <= '0';
      

      
      if localWrEn = '1' then
        case to_integer(unsigned(localAddress(10 downto 0))) is
        when 0 => --0x0
          Ctrl.RESET_DOWNLINKS                           <=  localWrData( 0);               
        when 1 => --0x1
          Ctrl.RESET_UPLINKS                             <=  localWrData( 0);               
        when 2 => --0x2
          Ctrl.RESET_COUNTERS                            <=  localWrData( 0);               
        when 16 => --0x10
          Ctrl.CSM.CSM(0).LPGBT.UPLINK.UPLINK(0).RESET   <=  localWrData( 0);               
        when 21 => --0x15
          Ctrl.CSM.CSM(0).LPGBT.UPLINK.UPLINK(1).RESET   <=  localWrData( 0);               
        when 27 => --0x1b
          Ctrl.CSM.CSM(0).LPGBT.DOWNLINK.RESET           <=  localWrData( 0);               
        when 32 => --0x20
          Ctrl.CSM.CSM(0).SC.MASTER.TX_RESET             <=  localWrData( 0);               
        when 33 => --0x21
          Ctrl.CSM.CSM(0).SC.MASTER.RX_RESET             <=  localWrData( 1);               
        when 34 => --0x22
          reg_data(34)( 0)                               <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(34)( 1)                               <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(34)(15 downto  8)                     <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 35 => --0x23
          reg_data(35)(15 downto  0)                     <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(35)(31 downto 16)                     <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 36 => --0x24
          reg_data(36)( 7 downto  0)                     <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 37 => --0x25
          Ctrl.CSM.CSM(0).SC.MASTER.IC.TX_WR             <=  localWrData( 0);               
        when 41 => --0x29
          reg_data(41)( 7 downto  0)                     <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(41)(15 downto  8)                     <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(41)(23 downto 16)                     <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(41)(31 downto 24)                     <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 42 => --0x2a
          reg_data(42)(31 downto  0)                     <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 53 => --0x35
          reg_data(53)( 2 downto  0)                     <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 54 => --0x36
          Ctrl.CSM.CSM(0).SC.MASTER.START_RESET          <=  localWrData( 0);               
        when 55 => --0x37
          Ctrl.CSM.CSM(0).SC.MASTER.START_CONNECT        <=  localWrData( 0);               
        when 56 => --0x38
          Ctrl.CSM.CSM(0).SC.MASTER.START_COMMAND        <=  localWrData( 0);               
        when 57 => --0x39
          Ctrl.CSM.CSM(0).SC.MASTER.INJ_CRC_ERR          <=  localWrData( 0);               
        when 64 => --0x40
          Ctrl.CSM.CSM(0).SC.SLAVE.TX_RESET              <=  localWrData( 0);               
        when 65 => --0x41
          Ctrl.CSM.CSM(0).SC.SLAVE.RX_RESET              <=  localWrData( 1);               
        when 66 => --0x42
          reg_data(66)( 0)                               <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(66)( 1)                               <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(66)(15 downto  8)                     <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 67 => --0x43
          reg_data(67)(15 downto  0)                     <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(67)(31 downto 16)                     <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 68 => --0x44
          reg_data(68)( 7 downto  0)                     <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 69 => --0x45
          Ctrl.CSM.CSM(0).SC.SLAVE.IC.TX_WR              <=  localWrData( 0);               
        when 80 => --0x50
          Ctrl.CSM.CSM(1).LPGBT.UPLINK.UPLINK(0).RESET   <=  localWrData( 0);               
        when 85 => --0x55
          Ctrl.CSM.CSM(1).LPGBT.UPLINK.UPLINK(1).RESET   <=  localWrData( 0);               
        when 91 => --0x5b
          Ctrl.CSM.CSM(1).LPGBT.DOWNLINK.RESET           <=  localWrData( 0);               
        when 96 => --0x60
          Ctrl.CSM.CSM(1).SC.MASTER.TX_RESET             <=  localWrData( 0);               
        when 97 => --0x61
          Ctrl.CSM.CSM(1).SC.MASTER.RX_RESET             <=  localWrData( 1);               
        when 98 => --0x62
          reg_data(98)( 0)                               <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(98)( 1)                               <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(98)(15 downto  8)                     <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 99 => --0x63
          reg_data(99)(15 downto  0)                     <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(99)(31 downto 16)                     <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 100 => --0x64
          reg_data(100)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 101 => --0x65
          Ctrl.CSM.CSM(1).SC.MASTER.IC.TX_WR             <=  localWrData( 0);               
        when 105 => --0x69
          reg_data(105)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(105)(15 downto  8)                    <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(105)(23 downto 16)                    <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(105)(31 downto 24)                    <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 106 => --0x6a
          reg_data(106)(31 downto  0)                    <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 117 => --0x75
          reg_data(117)( 2 downto  0)                    <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 118 => --0x76
          Ctrl.CSM.CSM(1).SC.MASTER.START_RESET          <=  localWrData( 0);               
        when 119 => --0x77
          Ctrl.CSM.CSM(1).SC.MASTER.START_CONNECT        <=  localWrData( 0);               
        when 120 => --0x78
          Ctrl.CSM.CSM(1).SC.MASTER.START_COMMAND        <=  localWrData( 0);               
        when 121 => --0x79
          Ctrl.CSM.CSM(1).SC.MASTER.INJ_CRC_ERR          <=  localWrData( 0);               
        when 128 => --0x80
          Ctrl.CSM.CSM(1).SC.SLAVE.TX_RESET              <=  localWrData( 0);               
        when 129 => --0x81
          Ctrl.CSM.CSM(1).SC.SLAVE.RX_RESET              <=  localWrData( 1);               
        when 130 => --0x82
          reg_data(130)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(130)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(130)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 131 => --0x83
          reg_data(131)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(131)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 132 => --0x84
          reg_data(132)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 133 => --0x85
          Ctrl.CSM.CSM(1).SC.SLAVE.IC.TX_WR              <=  localWrData( 0);               
        when 144 => --0x90
          Ctrl.CSM.CSM(2).LPGBT.UPLINK.UPLINK(0).RESET   <=  localWrData( 0);               
        when 149 => --0x95
          Ctrl.CSM.CSM(2).LPGBT.UPLINK.UPLINK(1).RESET   <=  localWrData( 0);               
        when 155 => --0x9b
          Ctrl.CSM.CSM(2).LPGBT.DOWNLINK.RESET           <=  localWrData( 0);               
        when 160 => --0xa0
          Ctrl.CSM.CSM(2).SC.MASTER.TX_RESET             <=  localWrData( 0);               
        when 161 => --0xa1
          Ctrl.CSM.CSM(2).SC.MASTER.RX_RESET             <=  localWrData( 1);               
        when 162 => --0xa2
          reg_data(162)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(162)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(162)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 163 => --0xa3
          reg_data(163)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(163)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 164 => --0xa4
          reg_data(164)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 165 => --0xa5
          Ctrl.CSM.CSM(2).SC.MASTER.IC.TX_WR             <=  localWrData( 0);               
        when 169 => --0xa9
          reg_data(169)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(169)(15 downto  8)                    <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(169)(23 downto 16)                    <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(169)(31 downto 24)                    <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 170 => --0xaa
          reg_data(170)(31 downto  0)                    <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 181 => --0xb5
          reg_data(181)( 2 downto  0)                    <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 182 => --0xb6
          Ctrl.CSM.CSM(2).SC.MASTER.START_RESET          <=  localWrData( 0);               
        when 183 => --0xb7
          Ctrl.CSM.CSM(2).SC.MASTER.START_CONNECT        <=  localWrData( 0);               
        when 184 => --0xb8
          Ctrl.CSM.CSM(2).SC.MASTER.START_COMMAND        <=  localWrData( 0);               
        when 185 => --0xb9
          Ctrl.CSM.CSM(2).SC.MASTER.INJ_CRC_ERR          <=  localWrData( 0);               
        when 192 => --0xc0
          Ctrl.CSM.CSM(2).SC.SLAVE.TX_RESET              <=  localWrData( 0);               
        when 193 => --0xc1
          Ctrl.CSM.CSM(2).SC.SLAVE.RX_RESET              <=  localWrData( 1);               
        when 194 => --0xc2
          reg_data(194)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(194)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(194)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 195 => --0xc3
          reg_data(195)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(195)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 196 => --0xc4
          reg_data(196)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 197 => --0xc5
          Ctrl.CSM.CSM(2).SC.SLAVE.IC.TX_WR              <=  localWrData( 0);               
        when 208 => --0xd0
          Ctrl.CSM.CSM(3).LPGBT.UPLINK.UPLINK(0).RESET   <=  localWrData( 0);               
        when 213 => --0xd5
          Ctrl.CSM.CSM(3).LPGBT.UPLINK.UPLINK(1).RESET   <=  localWrData( 0);               
        when 219 => --0xdb
          Ctrl.CSM.CSM(3).LPGBT.DOWNLINK.RESET           <=  localWrData( 0);               
        when 224 => --0xe0
          Ctrl.CSM.CSM(3).SC.MASTER.TX_RESET             <=  localWrData( 0);               
        when 225 => --0xe1
          Ctrl.CSM.CSM(3).SC.MASTER.RX_RESET             <=  localWrData( 1);               
        when 226 => --0xe2
          reg_data(226)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(226)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(226)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 227 => --0xe3
          reg_data(227)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(227)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 228 => --0xe4
          reg_data(228)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 229 => --0xe5
          Ctrl.CSM.CSM(3).SC.MASTER.IC.TX_WR             <=  localWrData( 0);               
        when 233 => --0xe9
          reg_data(233)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(233)(15 downto  8)                    <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(233)(23 downto 16)                    <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(233)(31 downto 24)                    <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 234 => --0xea
          reg_data(234)(31 downto  0)                    <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 245 => --0xf5
          reg_data(245)( 2 downto  0)                    <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 246 => --0xf6
          Ctrl.CSM.CSM(3).SC.MASTER.START_RESET          <=  localWrData( 0);               
        when 247 => --0xf7
          Ctrl.CSM.CSM(3).SC.MASTER.START_CONNECT        <=  localWrData( 0);               
        when 248 => --0xf8
          Ctrl.CSM.CSM(3).SC.MASTER.START_COMMAND        <=  localWrData( 0);               
        when 249 => --0xf9
          Ctrl.CSM.CSM(3).SC.MASTER.INJ_CRC_ERR          <=  localWrData( 0);               
        when 256 => --0x100
          Ctrl.CSM.CSM(3).SC.SLAVE.TX_RESET              <=  localWrData( 0);               
        when 257 => --0x101
          Ctrl.CSM.CSM(3).SC.SLAVE.RX_RESET              <=  localWrData( 1);               
        when 258 => --0x102
          reg_data(258)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(258)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(258)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 259 => --0x103
          reg_data(259)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(259)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 260 => --0x104
          reg_data(260)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 261 => --0x105
          Ctrl.CSM.CSM(3).SC.SLAVE.IC.TX_WR              <=  localWrData( 0);               
        when 272 => --0x110
          Ctrl.CSM.CSM(4).LPGBT.UPLINK.UPLINK(0).RESET   <=  localWrData( 0);               
        when 277 => --0x115
          Ctrl.CSM.CSM(4).LPGBT.UPLINK.UPLINK(1).RESET   <=  localWrData( 0);               
        when 283 => --0x11b
          Ctrl.CSM.CSM(4).LPGBT.DOWNLINK.RESET           <=  localWrData( 0);               
        when 288 => --0x120
          Ctrl.CSM.CSM(4).SC.MASTER.TX_RESET             <=  localWrData( 0);               
        when 289 => --0x121
          Ctrl.CSM.CSM(4).SC.MASTER.RX_RESET             <=  localWrData( 1);               
        when 290 => --0x122
          reg_data(290)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(290)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(290)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 291 => --0x123
          reg_data(291)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(291)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 292 => --0x124
          reg_data(292)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 293 => --0x125
          Ctrl.CSM.CSM(4).SC.MASTER.IC.TX_WR             <=  localWrData( 0);               
        when 297 => --0x129
          reg_data(297)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(297)(15 downto  8)                    <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(297)(23 downto 16)                    <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(297)(31 downto 24)                    <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 298 => --0x12a
          reg_data(298)(31 downto  0)                    <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 309 => --0x135
          reg_data(309)( 2 downto  0)                    <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 310 => --0x136
          Ctrl.CSM.CSM(4).SC.MASTER.START_RESET          <=  localWrData( 0);               
        when 311 => --0x137
          Ctrl.CSM.CSM(4).SC.MASTER.START_CONNECT        <=  localWrData( 0);               
        when 312 => --0x138
          Ctrl.CSM.CSM(4).SC.MASTER.START_COMMAND        <=  localWrData( 0);               
        when 313 => --0x139
          Ctrl.CSM.CSM(4).SC.MASTER.INJ_CRC_ERR          <=  localWrData( 0);               
        when 320 => --0x140
          Ctrl.CSM.CSM(4).SC.SLAVE.TX_RESET              <=  localWrData( 0);               
        when 321 => --0x141
          Ctrl.CSM.CSM(4).SC.SLAVE.RX_RESET              <=  localWrData( 1);               
        when 322 => --0x142
          reg_data(322)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(322)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(322)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 323 => --0x143
          reg_data(323)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(323)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 324 => --0x144
          reg_data(324)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 325 => --0x145
          Ctrl.CSM.CSM(4).SC.SLAVE.IC.TX_WR              <=  localWrData( 0);               
        when 336 => --0x150
          Ctrl.CSM.CSM(5).LPGBT.UPLINK.UPLINK(0).RESET   <=  localWrData( 0);               
        when 341 => --0x155
          Ctrl.CSM.CSM(5).LPGBT.UPLINK.UPLINK(1).RESET   <=  localWrData( 0);               
        when 347 => --0x15b
          Ctrl.CSM.CSM(5).LPGBT.DOWNLINK.RESET           <=  localWrData( 0);               
        when 352 => --0x160
          Ctrl.CSM.CSM(5).SC.MASTER.TX_RESET             <=  localWrData( 0);               
        when 353 => --0x161
          Ctrl.CSM.CSM(5).SC.MASTER.RX_RESET             <=  localWrData( 1);               
        when 354 => --0x162
          reg_data(354)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(354)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(354)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 355 => --0x163
          reg_data(355)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(355)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 356 => --0x164
          reg_data(356)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 357 => --0x165
          Ctrl.CSM.CSM(5).SC.MASTER.IC.TX_WR             <=  localWrData( 0);               
        when 361 => --0x169
          reg_data(361)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(361)(15 downto  8)                    <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(361)(23 downto 16)                    <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(361)(31 downto 24)                    <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 362 => --0x16a
          reg_data(362)(31 downto  0)                    <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 373 => --0x175
          reg_data(373)( 2 downto  0)                    <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 374 => --0x176
          Ctrl.CSM.CSM(5).SC.MASTER.START_RESET          <=  localWrData( 0);               
        when 375 => --0x177
          Ctrl.CSM.CSM(5).SC.MASTER.START_CONNECT        <=  localWrData( 0);               
        when 376 => --0x178
          Ctrl.CSM.CSM(5).SC.MASTER.START_COMMAND        <=  localWrData( 0);               
        when 377 => --0x179
          Ctrl.CSM.CSM(5).SC.MASTER.INJ_CRC_ERR          <=  localWrData( 0);               
        when 384 => --0x180
          Ctrl.CSM.CSM(5).SC.SLAVE.TX_RESET              <=  localWrData( 0);               
        when 385 => --0x181
          Ctrl.CSM.CSM(5).SC.SLAVE.RX_RESET              <=  localWrData( 1);               
        when 386 => --0x182
          reg_data(386)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(386)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(386)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 387 => --0x183
          reg_data(387)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(387)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 388 => --0x184
          reg_data(388)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 389 => --0x185
          Ctrl.CSM.CSM(5).SC.SLAVE.IC.TX_WR              <=  localWrData( 0);               
        when 400 => --0x190
          Ctrl.CSM.CSM(6).LPGBT.UPLINK.UPLINK(0).RESET   <=  localWrData( 0);               
        when 405 => --0x195
          Ctrl.CSM.CSM(6).LPGBT.UPLINK.UPLINK(1).RESET   <=  localWrData( 0);               
        when 411 => --0x19b
          Ctrl.CSM.CSM(6).LPGBT.DOWNLINK.RESET           <=  localWrData( 0);               
        when 416 => --0x1a0
          Ctrl.CSM.CSM(6).SC.MASTER.TX_RESET             <=  localWrData( 0);               
        when 417 => --0x1a1
          Ctrl.CSM.CSM(6).SC.MASTER.RX_RESET             <=  localWrData( 1);               
        when 418 => --0x1a2
          reg_data(418)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(418)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(418)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 419 => --0x1a3
          reg_data(419)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(419)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 420 => --0x1a4
          reg_data(420)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 421 => --0x1a5
          Ctrl.CSM.CSM(6).SC.MASTER.IC.TX_WR             <=  localWrData( 0);               
        when 425 => --0x1a9
          reg_data(425)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(425)(15 downto  8)                    <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(425)(23 downto 16)                    <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(425)(31 downto 24)                    <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 426 => --0x1aa
          reg_data(426)(31 downto  0)                    <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 437 => --0x1b5
          reg_data(437)( 2 downto  0)                    <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 438 => --0x1b6
          Ctrl.CSM.CSM(6).SC.MASTER.START_RESET          <=  localWrData( 0);               
        when 439 => --0x1b7
          Ctrl.CSM.CSM(6).SC.MASTER.START_CONNECT        <=  localWrData( 0);               
        when 440 => --0x1b8
          Ctrl.CSM.CSM(6).SC.MASTER.START_COMMAND        <=  localWrData( 0);               
        when 441 => --0x1b9
          Ctrl.CSM.CSM(6).SC.MASTER.INJ_CRC_ERR          <=  localWrData( 0);               
        when 448 => --0x1c0
          Ctrl.CSM.CSM(6).SC.SLAVE.TX_RESET              <=  localWrData( 0);               
        when 449 => --0x1c1
          Ctrl.CSM.CSM(6).SC.SLAVE.RX_RESET              <=  localWrData( 1);               
        when 450 => --0x1c2
          reg_data(450)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(450)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(450)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 451 => --0x1c3
          reg_data(451)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(451)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 452 => --0x1c4
          reg_data(452)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 453 => --0x1c5
          Ctrl.CSM.CSM(6).SC.SLAVE.IC.TX_WR              <=  localWrData( 0);               
        when 464 => --0x1d0
          Ctrl.CSM.CSM(7).LPGBT.UPLINK.UPLINK(0).RESET   <=  localWrData( 0);               
        when 469 => --0x1d5
          Ctrl.CSM.CSM(7).LPGBT.UPLINK.UPLINK(1).RESET   <=  localWrData( 0);               
        when 475 => --0x1db
          Ctrl.CSM.CSM(7).LPGBT.DOWNLINK.RESET           <=  localWrData( 0);               
        when 480 => --0x1e0
          Ctrl.CSM.CSM(7).SC.MASTER.TX_RESET             <=  localWrData( 0);               
        when 481 => --0x1e1
          Ctrl.CSM.CSM(7).SC.MASTER.RX_RESET             <=  localWrData( 1);               
        when 482 => --0x1e2
          reg_data(482)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(482)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(482)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 483 => --0x1e3
          reg_data(483)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(483)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 484 => --0x1e4
          reg_data(484)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 485 => --0x1e5
          Ctrl.CSM.CSM(7).SC.MASTER.IC.TX_WR             <=  localWrData( 0);               
        when 489 => --0x1e9
          reg_data(489)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(489)(15 downto  8)                    <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(489)(23 downto 16)                    <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(489)(31 downto 24)                    <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 490 => --0x1ea
          reg_data(490)(31 downto  0)                    <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 501 => --0x1f5
          reg_data(501)( 2 downto  0)                    <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 502 => --0x1f6
          Ctrl.CSM.CSM(7).SC.MASTER.START_RESET          <=  localWrData( 0);               
        when 503 => --0x1f7
          Ctrl.CSM.CSM(7).SC.MASTER.START_CONNECT        <=  localWrData( 0);               
        when 504 => --0x1f8
          Ctrl.CSM.CSM(7).SC.MASTER.START_COMMAND        <=  localWrData( 0);               
        when 505 => --0x1f9
          Ctrl.CSM.CSM(7).SC.MASTER.INJ_CRC_ERR          <=  localWrData( 0);               
        when 512 => --0x200
          Ctrl.CSM.CSM(7).SC.SLAVE.TX_RESET              <=  localWrData( 0);               
        when 513 => --0x201
          Ctrl.CSM.CSM(7).SC.SLAVE.RX_RESET              <=  localWrData( 1);               
        when 514 => --0x202
          reg_data(514)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(514)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(514)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 515 => --0x203
          reg_data(515)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(515)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 516 => --0x204
          reg_data(516)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 517 => --0x205
          Ctrl.CSM.CSM(7).SC.SLAVE.IC.TX_WR              <=  localWrData( 0);               
        when 528 => --0x210
          Ctrl.CSM.CSM(8).LPGBT.UPLINK.UPLINK(0).RESET   <=  localWrData( 0);               
        when 533 => --0x215
          Ctrl.CSM.CSM(8).LPGBT.UPLINK.UPLINK(1).RESET   <=  localWrData( 0);               
        when 539 => --0x21b
          Ctrl.CSM.CSM(8).LPGBT.DOWNLINK.RESET           <=  localWrData( 0);               
        when 544 => --0x220
          Ctrl.CSM.CSM(8).SC.MASTER.TX_RESET             <=  localWrData( 0);               
        when 545 => --0x221
          Ctrl.CSM.CSM(8).SC.MASTER.RX_RESET             <=  localWrData( 1);               
        when 546 => --0x222
          reg_data(546)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(546)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(546)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 547 => --0x223
          reg_data(547)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(547)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 548 => --0x224
          reg_data(548)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 549 => --0x225
          Ctrl.CSM.CSM(8).SC.MASTER.IC.TX_WR             <=  localWrData( 0);               
        when 553 => --0x229
          reg_data(553)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(553)(15 downto  8)                    <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(553)(23 downto 16)                    <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(553)(31 downto 24)                    <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 554 => --0x22a
          reg_data(554)(31 downto  0)                    <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 565 => --0x235
          reg_data(565)( 2 downto  0)                    <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 566 => --0x236
          Ctrl.CSM.CSM(8).SC.MASTER.START_RESET          <=  localWrData( 0);               
        when 567 => --0x237
          Ctrl.CSM.CSM(8).SC.MASTER.START_CONNECT        <=  localWrData( 0);               
        when 568 => --0x238
          Ctrl.CSM.CSM(8).SC.MASTER.START_COMMAND        <=  localWrData( 0);               
        when 569 => --0x239
          Ctrl.CSM.CSM(8).SC.MASTER.INJ_CRC_ERR          <=  localWrData( 0);               
        when 576 => --0x240
          Ctrl.CSM.CSM(8).SC.SLAVE.TX_RESET              <=  localWrData( 0);               
        when 577 => --0x241
          Ctrl.CSM.CSM(8).SC.SLAVE.RX_RESET              <=  localWrData( 1);               
        when 578 => --0x242
          reg_data(578)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(578)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(578)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 579 => --0x243
          reg_data(579)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(579)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 580 => --0x244
          reg_data(580)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 581 => --0x245
          Ctrl.CSM.CSM(8).SC.SLAVE.IC.TX_WR              <=  localWrData( 0);               
        when 592 => --0x250
          Ctrl.CSM.CSM(9).LPGBT.UPLINK.UPLINK(0).RESET   <=  localWrData( 0);               
        when 597 => --0x255
          Ctrl.CSM.CSM(9).LPGBT.UPLINK.UPLINK(1).RESET   <=  localWrData( 0);               
        when 603 => --0x25b
          Ctrl.CSM.CSM(9).LPGBT.DOWNLINK.RESET           <=  localWrData( 0);               
        when 608 => --0x260
          Ctrl.CSM.CSM(9).SC.MASTER.TX_RESET             <=  localWrData( 0);               
        when 609 => --0x261
          Ctrl.CSM.CSM(9).SC.MASTER.RX_RESET             <=  localWrData( 1);               
        when 610 => --0x262
          reg_data(610)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(610)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(610)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 611 => --0x263
          reg_data(611)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(611)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 612 => --0x264
          reg_data(612)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 613 => --0x265
          Ctrl.CSM.CSM(9).SC.MASTER.IC.TX_WR             <=  localWrData( 0);               
        when 617 => --0x269
          reg_data(617)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(617)(15 downto  8)                    <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(617)(23 downto 16)                    <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(617)(31 downto 24)                    <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 618 => --0x26a
          reg_data(618)(31 downto  0)                    <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 629 => --0x275
          reg_data(629)( 2 downto  0)                    <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 630 => --0x276
          Ctrl.CSM.CSM(9).SC.MASTER.START_RESET          <=  localWrData( 0);               
        when 631 => --0x277
          Ctrl.CSM.CSM(9).SC.MASTER.START_CONNECT        <=  localWrData( 0);               
        when 632 => --0x278
          Ctrl.CSM.CSM(9).SC.MASTER.START_COMMAND        <=  localWrData( 0);               
        when 633 => --0x279
          Ctrl.CSM.CSM(9).SC.MASTER.INJ_CRC_ERR          <=  localWrData( 0);               
        when 640 => --0x280
          Ctrl.CSM.CSM(9).SC.SLAVE.TX_RESET              <=  localWrData( 0);               
        when 641 => --0x281
          Ctrl.CSM.CSM(9).SC.SLAVE.RX_RESET              <=  localWrData( 1);               
        when 642 => --0x282
          reg_data(642)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(642)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(642)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 643 => --0x283
          reg_data(643)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(643)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 644 => --0x284
          reg_data(644)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 645 => --0x285
          Ctrl.CSM.CSM(9).SC.SLAVE.IC.TX_WR              <=  localWrData( 0);               
        when 656 => --0x290
          Ctrl.CSM.CSM(10).LPGBT.UPLINK.UPLINK(0).RESET  <=  localWrData( 0);               
        when 661 => --0x295
          Ctrl.CSM.CSM(10).LPGBT.UPLINK.UPLINK(1).RESET  <=  localWrData( 0);               
        when 667 => --0x29b
          Ctrl.CSM.CSM(10).LPGBT.DOWNLINK.RESET          <=  localWrData( 0);               
        when 672 => --0x2a0
          Ctrl.CSM.CSM(10).SC.MASTER.TX_RESET            <=  localWrData( 0);               
        when 673 => --0x2a1
          Ctrl.CSM.CSM(10).SC.MASTER.RX_RESET            <=  localWrData( 1);               
        when 674 => --0x2a2
          reg_data(674)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(674)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(674)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 675 => --0x2a3
          reg_data(675)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(675)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 676 => --0x2a4
          reg_data(676)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 677 => --0x2a5
          Ctrl.CSM.CSM(10).SC.MASTER.IC.TX_WR            <=  localWrData( 0);               
        when 681 => --0x2a9
          reg_data(681)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(681)(15 downto  8)                    <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(681)(23 downto 16)                    <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(681)(31 downto 24)                    <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 682 => --0x2aa
          reg_data(682)(31 downto  0)                    <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 693 => --0x2b5
          reg_data(693)( 2 downto  0)                    <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 694 => --0x2b6
          Ctrl.CSM.CSM(10).SC.MASTER.START_RESET         <=  localWrData( 0);               
        when 695 => --0x2b7
          Ctrl.CSM.CSM(10).SC.MASTER.START_CONNECT       <=  localWrData( 0);               
        when 696 => --0x2b8
          Ctrl.CSM.CSM(10).SC.MASTER.START_COMMAND       <=  localWrData( 0);               
        when 697 => --0x2b9
          Ctrl.CSM.CSM(10).SC.MASTER.INJ_CRC_ERR         <=  localWrData( 0);               
        when 704 => --0x2c0
          Ctrl.CSM.CSM(10).SC.SLAVE.TX_RESET             <=  localWrData( 0);               
        when 705 => --0x2c1
          Ctrl.CSM.CSM(10).SC.SLAVE.RX_RESET             <=  localWrData( 1);               
        when 706 => --0x2c2
          reg_data(706)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(706)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(706)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 707 => --0x2c3
          reg_data(707)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(707)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 708 => --0x2c4
          reg_data(708)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 709 => --0x2c5
          Ctrl.CSM.CSM(10).SC.SLAVE.IC.TX_WR             <=  localWrData( 0);               
        when 720 => --0x2d0
          Ctrl.CSM.CSM(11).LPGBT.UPLINK.UPLINK(0).RESET  <=  localWrData( 0);               
        when 725 => --0x2d5
          Ctrl.CSM.CSM(11).LPGBT.UPLINK.UPLINK(1).RESET  <=  localWrData( 0);               
        when 731 => --0x2db
          Ctrl.CSM.CSM(11).LPGBT.DOWNLINK.RESET          <=  localWrData( 0);               
        when 736 => --0x2e0
          Ctrl.CSM.CSM(11).SC.MASTER.TX_RESET            <=  localWrData( 0);               
        when 737 => --0x2e1
          Ctrl.CSM.CSM(11).SC.MASTER.RX_RESET            <=  localWrData( 1);               
        when 738 => --0x2e2
          reg_data(738)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(738)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(738)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 739 => --0x2e3
          reg_data(739)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(739)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 740 => --0x2e4
          reg_data(740)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 741 => --0x2e5
          Ctrl.CSM.CSM(11).SC.MASTER.IC.TX_WR            <=  localWrData( 0);               
        when 745 => --0x2e9
          reg_data(745)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(745)(15 downto  8)                    <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(745)(23 downto 16)                    <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(745)(31 downto 24)                    <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 746 => --0x2ea
          reg_data(746)(31 downto  0)                    <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 757 => --0x2f5
          reg_data(757)( 2 downto  0)                    <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 758 => --0x2f6
          Ctrl.CSM.CSM(11).SC.MASTER.START_RESET         <=  localWrData( 0);               
        when 759 => --0x2f7
          Ctrl.CSM.CSM(11).SC.MASTER.START_CONNECT       <=  localWrData( 0);               
        when 760 => --0x2f8
          Ctrl.CSM.CSM(11).SC.MASTER.START_COMMAND       <=  localWrData( 0);               
        when 761 => --0x2f9
          Ctrl.CSM.CSM(11).SC.MASTER.INJ_CRC_ERR         <=  localWrData( 0);               
        when 768 => --0x300
          Ctrl.CSM.CSM(11).SC.SLAVE.TX_RESET             <=  localWrData( 0);               
        when 769 => --0x301
          Ctrl.CSM.CSM(11).SC.SLAVE.RX_RESET             <=  localWrData( 1);               
        when 770 => --0x302
          reg_data(770)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(770)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(770)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 771 => --0x303
          reg_data(771)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(771)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 772 => --0x304
          reg_data(772)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 773 => --0x305
          Ctrl.CSM.CSM(11).SC.SLAVE.IC.TX_WR             <=  localWrData( 0);               
        when 784 => --0x310
          Ctrl.CSM.CSM(12).LPGBT.UPLINK.UPLINK(0).RESET  <=  localWrData( 0);               
        when 789 => --0x315
          Ctrl.CSM.CSM(12).LPGBT.UPLINK.UPLINK(1).RESET  <=  localWrData( 0);               
        when 795 => --0x31b
          Ctrl.CSM.CSM(12).LPGBT.DOWNLINK.RESET          <=  localWrData( 0);               
        when 800 => --0x320
          Ctrl.CSM.CSM(12).SC.MASTER.TX_RESET            <=  localWrData( 0);               
        when 801 => --0x321
          Ctrl.CSM.CSM(12).SC.MASTER.RX_RESET            <=  localWrData( 1);               
        when 802 => --0x322
          reg_data(802)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(802)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(802)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 803 => --0x323
          reg_data(803)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(803)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 804 => --0x324
          reg_data(804)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 805 => --0x325
          Ctrl.CSM.CSM(12).SC.MASTER.IC.TX_WR            <=  localWrData( 0);               
        when 809 => --0x329
          reg_data(809)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(809)(15 downto  8)                    <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(809)(23 downto 16)                    <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(809)(31 downto 24)                    <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 810 => --0x32a
          reg_data(810)(31 downto  0)                    <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 821 => --0x335
          reg_data(821)( 2 downto  0)                    <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 822 => --0x336
          Ctrl.CSM.CSM(12).SC.MASTER.START_RESET         <=  localWrData( 0);               
        when 823 => --0x337
          Ctrl.CSM.CSM(12).SC.MASTER.START_CONNECT       <=  localWrData( 0);               
        when 824 => --0x338
          Ctrl.CSM.CSM(12).SC.MASTER.START_COMMAND       <=  localWrData( 0);               
        when 825 => --0x339
          Ctrl.CSM.CSM(12).SC.MASTER.INJ_CRC_ERR         <=  localWrData( 0);               
        when 832 => --0x340
          Ctrl.CSM.CSM(12).SC.SLAVE.TX_RESET             <=  localWrData( 0);               
        when 833 => --0x341
          Ctrl.CSM.CSM(12).SC.SLAVE.RX_RESET             <=  localWrData( 1);               
        when 834 => --0x342
          reg_data(834)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(834)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(834)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 835 => --0x343
          reg_data(835)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(835)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 836 => --0x344
          reg_data(836)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 837 => --0x345
          Ctrl.CSM.CSM(12).SC.SLAVE.IC.TX_WR             <=  localWrData( 0);               
        when 848 => --0x350
          Ctrl.CSM.CSM(13).LPGBT.UPLINK.UPLINK(0).RESET  <=  localWrData( 0);               
        when 853 => --0x355
          Ctrl.CSM.CSM(13).LPGBT.UPLINK.UPLINK(1).RESET  <=  localWrData( 0);               
        when 859 => --0x35b
          Ctrl.CSM.CSM(13).LPGBT.DOWNLINK.RESET          <=  localWrData( 0);               
        when 864 => --0x360
          Ctrl.CSM.CSM(13).SC.MASTER.TX_RESET            <=  localWrData( 0);               
        when 865 => --0x361
          Ctrl.CSM.CSM(13).SC.MASTER.RX_RESET            <=  localWrData( 1);               
        when 866 => --0x362
          reg_data(866)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(866)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(866)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 867 => --0x363
          reg_data(867)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(867)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 868 => --0x364
          reg_data(868)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 869 => --0x365
          Ctrl.CSM.CSM(13).SC.MASTER.IC.TX_WR            <=  localWrData( 0);               
        when 873 => --0x369
          reg_data(873)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(873)(15 downto  8)                    <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(873)(23 downto 16)                    <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(873)(31 downto 24)                    <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 874 => --0x36a
          reg_data(874)(31 downto  0)                    <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 885 => --0x375
          reg_data(885)( 2 downto  0)                    <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 886 => --0x376
          Ctrl.CSM.CSM(13).SC.MASTER.START_RESET         <=  localWrData( 0);               
        when 887 => --0x377
          Ctrl.CSM.CSM(13).SC.MASTER.START_CONNECT       <=  localWrData( 0);               
        when 888 => --0x378
          Ctrl.CSM.CSM(13).SC.MASTER.START_COMMAND       <=  localWrData( 0);               
        when 889 => --0x379
          Ctrl.CSM.CSM(13).SC.MASTER.INJ_CRC_ERR         <=  localWrData( 0);               
        when 896 => --0x380
          Ctrl.CSM.CSM(13).SC.SLAVE.TX_RESET             <=  localWrData( 0);               
        when 897 => --0x381
          Ctrl.CSM.CSM(13).SC.SLAVE.RX_RESET             <=  localWrData( 1);               
        when 898 => --0x382
          reg_data(898)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(898)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(898)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 899 => --0x383
          reg_data(899)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(899)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 900 => --0x384
          reg_data(900)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 901 => --0x385
          Ctrl.CSM.CSM(13).SC.SLAVE.IC.TX_WR             <=  localWrData( 0);               
        when 912 => --0x390
          Ctrl.CSM.CSM(14).LPGBT.UPLINK.UPLINK(0).RESET  <=  localWrData( 0);               
        when 917 => --0x395
          Ctrl.CSM.CSM(14).LPGBT.UPLINK.UPLINK(1).RESET  <=  localWrData( 0);               
        when 923 => --0x39b
          Ctrl.CSM.CSM(14).LPGBT.DOWNLINK.RESET          <=  localWrData( 0);               
        when 928 => --0x3a0
          Ctrl.CSM.CSM(14).SC.MASTER.TX_RESET            <=  localWrData( 0);               
        when 929 => --0x3a1
          Ctrl.CSM.CSM(14).SC.MASTER.RX_RESET            <=  localWrData( 1);               
        when 930 => --0x3a2
          reg_data(930)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(930)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(930)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 931 => --0x3a3
          reg_data(931)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(931)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 932 => --0x3a4
          reg_data(932)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 933 => --0x3a5
          Ctrl.CSM.CSM(14).SC.MASTER.IC.TX_WR            <=  localWrData( 0);               
        when 937 => --0x3a9
          reg_data(937)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(937)(15 downto  8)                    <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(937)(23 downto 16)                    <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(937)(31 downto 24)                    <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 938 => --0x3aa
          reg_data(938)(31 downto  0)                    <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 949 => --0x3b5
          reg_data(949)( 2 downto  0)                    <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 950 => --0x3b6
          Ctrl.CSM.CSM(14).SC.MASTER.START_RESET         <=  localWrData( 0);               
        when 951 => --0x3b7
          Ctrl.CSM.CSM(14).SC.MASTER.START_CONNECT       <=  localWrData( 0);               
        when 952 => --0x3b8
          Ctrl.CSM.CSM(14).SC.MASTER.START_COMMAND       <=  localWrData( 0);               
        when 953 => --0x3b9
          Ctrl.CSM.CSM(14).SC.MASTER.INJ_CRC_ERR         <=  localWrData( 0);               
        when 960 => --0x3c0
          Ctrl.CSM.CSM(14).SC.SLAVE.TX_RESET             <=  localWrData( 0);               
        when 961 => --0x3c1
          Ctrl.CSM.CSM(14).SC.SLAVE.RX_RESET             <=  localWrData( 1);               
        when 962 => --0x3c2
          reg_data(962)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(962)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(962)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 963 => --0x3c3
          reg_data(963)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(963)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 964 => --0x3c4
          reg_data(964)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 965 => --0x3c5
          Ctrl.CSM.CSM(14).SC.SLAVE.IC.TX_WR             <=  localWrData( 0);               
        when 976 => --0x3d0
          Ctrl.CSM.CSM(15).LPGBT.UPLINK.UPLINK(0).RESET  <=  localWrData( 0);               
        when 981 => --0x3d5
          Ctrl.CSM.CSM(15).LPGBT.UPLINK.UPLINK(1).RESET  <=  localWrData( 0);               
        when 987 => --0x3db
          Ctrl.CSM.CSM(15).LPGBT.DOWNLINK.RESET          <=  localWrData( 0);               
        when 992 => --0x3e0
          Ctrl.CSM.CSM(15).SC.MASTER.TX_RESET            <=  localWrData( 0);               
        when 993 => --0x3e1
          Ctrl.CSM.CSM(15).SC.MASTER.RX_RESET            <=  localWrData( 1);               
        when 994 => --0x3e2
          reg_data(994)( 0)                              <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(994)( 1)                              <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(994)(15 downto  8)                    <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 995 => --0x3e3
          reg_data(995)(15 downto  0)                    <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(995)(31 downto 16)                    <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 996 => --0x3e4
          reg_data(996)( 7 downto  0)                    <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 997 => --0x3e5
          Ctrl.CSM.CSM(15).SC.MASTER.IC.TX_WR            <=  localWrData( 0);               
        when 1001 => --0x3e9
          reg_data(1001)( 7 downto  0)                   <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(1001)(15 downto  8)                   <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(1001)(23 downto 16)                   <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(1001)(31 downto 24)                   <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1002 => --0x3ea
          reg_data(1002)(31 downto  0)                   <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 1013 => --0x3f5
          reg_data(1013)( 2 downto  0)                   <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 1014 => --0x3f6
          Ctrl.CSM.CSM(15).SC.MASTER.START_RESET         <=  localWrData( 0);               
        when 1015 => --0x3f7
          Ctrl.CSM.CSM(15).SC.MASTER.START_CONNECT       <=  localWrData( 0);               
        when 1016 => --0x3f8
          Ctrl.CSM.CSM(15).SC.MASTER.START_COMMAND       <=  localWrData( 0);               
        when 1017 => --0x3f9
          Ctrl.CSM.CSM(15).SC.MASTER.INJ_CRC_ERR         <=  localWrData( 0);               
        when 1024 => --0x400
          Ctrl.CSM.CSM(15).SC.SLAVE.TX_RESET             <=  localWrData( 0);               
        when 1025 => --0x401
          Ctrl.CSM.CSM(15).SC.SLAVE.RX_RESET             <=  localWrData( 1);               
        when 1026 => --0x402
          reg_data(1026)( 0)                             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1026)( 1)                             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(1026)(15 downto  8)                   <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 1027 => --0x403
          reg_data(1027)(15 downto  0)                   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1027)(31 downto 16)                   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1028 => --0x404
          reg_data(1028)( 7 downto  0)                   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 1029 => --0x405
          Ctrl.CSM.CSM(15).SC.SLAVE.IC.TX_WR             <=  localWrData( 0);               
        when 1040 => --0x410
          Ctrl.CSM.CSM(16).LPGBT.UPLINK.UPLINK(0).RESET  <=  localWrData( 0);               
        when 1045 => --0x415
          Ctrl.CSM.CSM(16).LPGBT.UPLINK.UPLINK(1).RESET  <=  localWrData( 0);               
        when 1051 => --0x41b
          Ctrl.CSM.CSM(16).LPGBT.DOWNLINK.RESET          <=  localWrData( 0);               
        when 1056 => --0x420
          Ctrl.CSM.CSM(16).SC.MASTER.TX_RESET            <=  localWrData( 0);               
        when 1057 => --0x421
          Ctrl.CSM.CSM(16).SC.MASTER.RX_RESET            <=  localWrData( 1);               
        when 1058 => --0x422
          reg_data(1058)( 0)                             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1058)( 1)                             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(1058)(15 downto  8)                   <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 1059 => --0x423
          reg_data(1059)(15 downto  0)                   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1059)(31 downto 16)                   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1060 => --0x424
          reg_data(1060)( 7 downto  0)                   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 1061 => --0x425
          Ctrl.CSM.CSM(16).SC.MASTER.IC.TX_WR            <=  localWrData( 0);               
        when 1065 => --0x429
          reg_data(1065)( 7 downto  0)                   <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(1065)(15 downto  8)                   <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(1065)(23 downto 16)                   <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(1065)(31 downto 24)                   <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1066 => --0x42a
          reg_data(1066)(31 downto  0)                   <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 1077 => --0x435
          reg_data(1077)( 2 downto  0)                   <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 1078 => --0x436
          Ctrl.CSM.CSM(16).SC.MASTER.START_RESET         <=  localWrData( 0);               
        when 1079 => --0x437
          Ctrl.CSM.CSM(16).SC.MASTER.START_CONNECT       <=  localWrData( 0);               
        when 1080 => --0x438
          Ctrl.CSM.CSM(16).SC.MASTER.START_COMMAND       <=  localWrData( 0);               
        when 1081 => --0x439
          Ctrl.CSM.CSM(16).SC.MASTER.INJ_CRC_ERR         <=  localWrData( 0);               
        when 1088 => --0x440
          Ctrl.CSM.CSM(16).SC.SLAVE.TX_RESET             <=  localWrData( 0);               
        when 1089 => --0x441
          Ctrl.CSM.CSM(16).SC.SLAVE.RX_RESET             <=  localWrData( 1);               
        when 1090 => --0x442
          reg_data(1090)( 0)                             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1090)( 1)                             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(1090)(15 downto  8)                   <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 1091 => --0x443
          reg_data(1091)(15 downto  0)                   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1091)(31 downto 16)                   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1092 => --0x444
          reg_data(1092)( 7 downto  0)                   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 1093 => --0x445
          Ctrl.CSM.CSM(16).SC.SLAVE.IC.TX_WR             <=  localWrData( 0);               
        when 1104 => --0x450
          Ctrl.CSM.CSM(17).LPGBT.UPLINK.UPLINK(0).RESET  <=  localWrData( 0);               
        when 1109 => --0x455
          Ctrl.CSM.CSM(17).LPGBT.UPLINK.UPLINK(1).RESET  <=  localWrData( 0);               
        when 1115 => --0x45b
          Ctrl.CSM.CSM(17).LPGBT.DOWNLINK.RESET          <=  localWrData( 0);               
        when 1120 => --0x460
          Ctrl.CSM.CSM(17).SC.MASTER.TX_RESET            <=  localWrData( 0);               
        when 1121 => --0x461
          Ctrl.CSM.CSM(17).SC.MASTER.RX_RESET            <=  localWrData( 1);               
        when 1122 => --0x462
          reg_data(1122)( 0)                             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1122)( 1)                             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(1122)(15 downto  8)                   <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 1123 => --0x463
          reg_data(1123)(15 downto  0)                   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1123)(31 downto 16)                   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1124 => --0x464
          reg_data(1124)( 7 downto  0)                   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 1125 => --0x465
          Ctrl.CSM.CSM(17).SC.MASTER.IC.TX_WR            <=  localWrData( 0);               
        when 1129 => --0x469
          reg_data(1129)( 7 downto  0)                   <=  localWrData( 7 downto  0);      --Command: The Command field is present in the frames received by the SCA and indicates the operation to be performed. Meaning is specific to the channel.
          reg_data(1129)(15 downto  8)                   <=  localWrData(15 downto  8);      --Command: It represents the packet destination address. The address is one-byte long. By default, the GBT-SCA use address 0x00.
          reg_data(1129)(23 downto 16)                   <=  localWrData(23 downto 16);      --Command: Specifies the message identification number. The reply messages generated by the SCA have the same transaction identifier of the request message allowing to associate the transmitted commands with the corresponding replies, permitting the concurrent use of all the SCA channels.  It is not required that ID values are ordered. ID values 0x00 and 0xff are reserved for interrupt packets generated spontaneously by the SCA and should not be used in requests.
          reg_data(1129)(31 downto 24)                   <=  localWrData(31 downto 24);      --Command: The channel field specifies the destination interface of the request message (ctrl/spi/gpio/i2c/jtag/adc/dac).
        when 1130 => --0x46a
          reg_data(1130)(31 downto  0)                   <=  localWrData(31 downto  0);      --Command: data field (According to the SCA manual)
        when 1141 => --0x475
          reg_data(1141)( 2 downto  0)                   <=  localWrData( 2 downto  0);      --Enable flag to select SCAs
        when 1142 => --0x476
          Ctrl.CSM.CSM(17).SC.MASTER.START_RESET         <=  localWrData( 0);               
        when 1143 => --0x477
          Ctrl.CSM.CSM(17).SC.MASTER.START_CONNECT       <=  localWrData( 0);               
        when 1144 => --0x478
          Ctrl.CSM.CSM(17).SC.MASTER.START_COMMAND       <=  localWrData( 0);               
        when 1145 => --0x479
          Ctrl.CSM.CSM(17).SC.MASTER.INJ_CRC_ERR         <=  localWrData( 0);               
        when 1152 => --0x480
          Ctrl.CSM.CSM(17).SC.SLAVE.TX_RESET             <=  localWrData( 0);               
        when 1153 => --0x481
          Ctrl.CSM.CSM(17).SC.SLAVE.RX_RESET             <=  localWrData( 1);               
        when 1154 => --0x482
          reg_data(1154)( 0)                             <=  localWrData( 0);                --Request a write config to the GBTx (IC)
          reg_data(1154)( 1)                             <=  localWrData( 1);                --Request a read config to the GBTx (IC)
          reg_data(1154)(15 downto  8)                   <=  localWrData(15 downto  8);      --I2C address of the GBTx
        when 1155 => --0x483
          reg_data(1155)(15 downto  0)                   <=  localWrData(15 downto  0);      --Address of the first register to be accessed
          reg_data(1155)(31 downto 16)                   <=  localWrData(31 downto 16);      --Number of words/bytes to be read (only for read transactions)
        when 1156 => --0x484
          reg_data(1156)( 7 downto  0)                   <=  localWrData( 7 downto  0);      --Data to be written into the internal FIFO
        when 1157 => --0x485
          Ctrl.CSM.CSM(17).SC.SLAVE.IC.TX_WR             <=  localWrData( 0);               

          when others => null;
        end case;
      end if;
    end if;
  end process reg_writes;







  
end architecture behavioral;