-- This file was auto-generated by YML2HDL tool.
-- https://gitlab.com/tcpaiva/yml2hdl
-- 2023-10-16 09:45:47

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.common_ieee_pkg.all;

package MPL_CTRL is

   -- Custom types and functions --

   type MPL_SUPER_ACTIONS_CTRL_t is record
      RESET : std_logic;
      ENABLE : std_logic;
      DISABLE : std_logic;
      FREEZE : std_logic;
   end record MPL_SUPER_ACTIONS_CTRL_t;
   attribute w of MPL_SUPER_ACTIONS_CTRL_t : type is 4;
   function width(x: MPL_SUPER_ACTIONS_CTRL_t) return natural;
   function convert(x: MPL_SUPER_ACTIONS_CTRL_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_SUPER_ACTIONS_CTRL_t) return MPL_SUPER_ACTIONS_CTRL_t;
   function zero(tpl: MPL_SUPER_ACTIONS_CTRL_t) return MPL_SUPER_ACTIONS_CTRL_t;

   type MPL_SUPER_CONFIGS_CTRL_t is record
      THREADS : std_logic_vector(4 - 1 downto 0);
      INPUT_EN : std_logic;
      OUTPUT_EN : std_logic;
      FLUSH_MEM_RESET : std_logic;
   end record MPL_SUPER_CONFIGS_CTRL_t;
   attribute w of MPL_SUPER_CONFIGS_CTRL_t : type is 7;
   function width(x: MPL_SUPER_CONFIGS_CTRL_t) return natural;
   function convert(x: MPL_SUPER_CONFIGS_CTRL_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_SUPER_CONFIGS_CTRL_t) return MPL_SUPER_CONFIGS_CTRL_t;
   function zero(tpl: MPL_SUPER_CONFIGS_CTRL_t) return MPL_SUPER_CONFIGS_CTRL_t;

   type MPL_SUPER_STATUS_MON_t is record
      ENABLED : std_logic;
      READY : std_logic;
      FREEZED : std_logic;
      ERROR : std_logic_vector(8 - 1 downto 0);
   end record MPL_SUPER_STATUS_MON_t;
   attribute w of MPL_SUPER_STATUS_MON_t : type is 11;
   function width(x: MPL_SUPER_STATUS_MON_t) return natural;
   function convert(x: MPL_SUPER_STATUS_MON_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_SUPER_STATUS_MON_t) return MPL_SUPER_STATUS_MON_t;
   function zero(tpl: MPL_SUPER_STATUS_MON_t) return MPL_SUPER_STATUS_MON_t;

   type MPL_SUPER_MON_t is record
      STATUS : MPL_SUPER_STATUS_MON_t;
   end record MPL_SUPER_MON_t;
   attribute w of MPL_SUPER_MON_t : type is 11;
   function width(x: MPL_SUPER_MON_t) return natural;
   function convert(x: MPL_SUPER_MON_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_SUPER_MON_t) return MPL_SUPER_MON_t;
   function zero(tpl: MPL_SUPER_MON_t) return MPL_SUPER_MON_t;

   type MPL_SUPER_CTRL_t is record
      ACTIONS : MPL_SUPER_ACTIONS_CTRL_t;
      CONFIGS : MPL_SUPER_CONFIGS_CTRL_t;
   end record MPL_SUPER_CTRL_t;
   attribute w of MPL_SUPER_CTRL_t : type is 11;
   function width(x: MPL_SUPER_CTRL_t) return natural;
   function convert(x: MPL_SUPER_CTRL_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_SUPER_CTRL_t) return MPL_SUPER_CTRL_t;
   function zero(tpl: MPL_SUPER_CTRL_t) return MPL_SUPER_CTRL_t;

   type MPL_PL_MEM_PL_MEM_SIGNALS_MON_t is record
      rd_rdy : std_logic;
      freeze_ena : std_logic;
   end record MPL_PL_MEM_PL_MEM_SIGNALS_MON_t;
   attribute w of MPL_PL_MEM_PL_MEM_SIGNALS_MON_t : type is 2;
   function width(x: MPL_PL_MEM_PL_MEM_SIGNALS_MON_t) return natural;
   function convert(x: MPL_PL_MEM_PL_MEM_SIGNALS_MON_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_PL_MEM_SIGNALS_MON_t) return MPL_PL_MEM_PL_MEM_SIGNALS_MON_t;
   function zero(tpl: MPL_PL_MEM_PL_MEM_SIGNALS_MON_t) return MPL_PL_MEM_PL_MEM_SIGNALS_MON_t;

   type MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t is record
      wr_req : std_logic;
      wr_ack : std_logic;
      rd_req : std_logic;
      rd_ack : std_logic;
      flush_req : std_logic;
      freeze_req : std_logic;
      mem_sel : std_logic_vector(3 - 1 downto 0);
   end record MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t;
   attribute w of MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t : type is 9;
   function width(x: MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t) return natural;
   function convert(x: MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t) return MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t;
   function zero(tpl: MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t) return MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t;

   type MPL_PL_MEM_PL_MEM_wr_data_CTRL_t is record
      wr_data_0 : std_logic_vector(32 - 1 downto 0);
      wr_data_1 : std_logic_vector(32 - 1 downto 0);
      wr_data_2 : std_logic_vector(32 - 1 downto 0);
      wr_data_3 : std_logic_vector(32 - 1 downto 0);
      wr_data_4 : std_logic_vector(20 - 1 downto 0);
   end record MPL_PL_MEM_PL_MEM_wr_data_CTRL_t;
   attribute w of MPL_PL_MEM_PL_MEM_wr_data_CTRL_t : type is 148;
   function width(x: MPL_PL_MEM_PL_MEM_wr_data_CTRL_t) return natural;
   function convert(x: MPL_PL_MEM_PL_MEM_wr_data_CTRL_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_PL_MEM_wr_data_CTRL_t) return MPL_PL_MEM_PL_MEM_wr_data_CTRL_t;
   function zero(tpl: MPL_PL_MEM_PL_MEM_wr_data_CTRL_t) return MPL_PL_MEM_PL_MEM_wr_data_CTRL_t;

   type MPL_PL_MEM_PL_MEM_rd_data_MON_t is record
      rd_data_0 : std_logic_vector(32 - 1 downto 0);
      rd_data_1 : std_logic_vector(32 - 1 downto 0);
      rd_data_2 : std_logic_vector(32 - 1 downto 0);
      rd_data_3 : std_logic_vector(32 - 1 downto 0);
      rd_data_4 : std_logic_vector(20 - 1 downto 0);
   end record MPL_PL_MEM_PL_MEM_rd_data_MON_t;
   attribute w of MPL_PL_MEM_PL_MEM_rd_data_MON_t : type is 148;
   function width(x: MPL_PL_MEM_PL_MEM_rd_data_MON_t) return natural;
   function convert(x: MPL_PL_MEM_PL_MEM_rd_data_MON_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_PL_MEM_rd_data_MON_t) return MPL_PL_MEM_PL_MEM_rd_data_MON_t;
   function zero(tpl: MPL_PL_MEM_PL_MEM_rd_data_MON_t) return MPL_PL_MEM_PL_MEM_rd_data_MON_t;

   type MPL_PL_MEM_PL_MEM_MON_t is record
      SIGNALS : MPL_PL_MEM_PL_MEM_SIGNALS_MON_t;
      rd_data : MPL_PL_MEM_PL_MEM_rd_data_MON_t;
   end record MPL_PL_MEM_PL_MEM_MON_t;
   attribute w of MPL_PL_MEM_PL_MEM_MON_t : type is 150;
   function width(x: MPL_PL_MEM_PL_MEM_MON_t) return natural;
   function convert(x: MPL_PL_MEM_PL_MEM_MON_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_PL_MEM_MON_t) return MPL_PL_MEM_PL_MEM_MON_t;
   function zero(tpl: MPL_PL_MEM_PL_MEM_MON_t) return MPL_PL_MEM_PL_MEM_MON_t;

   type MPL_PL_MEM_PL_MEM_MON_t_ARRAY is array(5 -1 downto 0) of MPL_PL_MEM_PL_MEM_MON_t;
   attribute w of MPL_PL_MEM_PL_MEM_MON_t_ARRAY : type is 750;
   function width(x: MPL_PL_MEM_PL_MEM_MON_t_ARRAY) return integer;
   function convert(x: MPL_PL_MEM_PL_MEM_MON_t_ARRAY; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_PL_MEM_MON_t_ARRAY) return MPL_PL_MEM_PL_MEM_MON_t_ARRAY;
   function zero(tpl: MPL_PL_MEM_PL_MEM_MON_t_ARRAY) return MPL_PL_MEM_PL_MEM_MON_t_ARRAY;
   function convert(x: MPL_PL_MEM_PL_MEM_MON_t_ARRAY; tpl: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; tpl: MPL_PL_MEM_PL_MEM_MON_t_ARRAY) return MPL_PL_MEM_PL_MEM_MON_t_ARRAY;

   type MPL_PL_MEM_PL_MEM_CTRL_t is record
      SIGNALS : MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t;
      wr_addr : std_logic_vector(12 - 1 downto 0);
      rd_addr : std_logic_vector(12 - 1 downto 0);
      wr_data : MPL_PL_MEM_PL_MEM_wr_data_CTRL_t;
   end record MPL_PL_MEM_PL_MEM_CTRL_t;
   attribute w of MPL_PL_MEM_PL_MEM_CTRL_t : type is 181;
   function width(x: MPL_PL_MEM_PL_MEM_CTRL_t) return natural;
   function convert(x: MPL_PL_MEM_PL_MEM_CTRL_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_PL_MEM_CTRL_t) return MPL_PL_MEM_PL_MEM_CTRL_t;
   function zero(tpl: MPL_PL_MEM_PL_MEM_CTRL_t) return MPL_PL_MEM_PL_MEM_CTRL_t;

   type MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY is array(5 -1 downto 0) of MPL_PL_MEM_PL_MEM_CTRL_t;
   attribute w of MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY : type is 905;
   function width(x: MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY) return integer;
   function convert(x: MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY) return MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY;
   function zero(tpl: MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY) return MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY;
   function convert(x: MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY; tpl: std_logic_vector_array) return std_logic_vector_array;
   function convert(x: std_logic_vector_array; tpl: MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY) return MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY;

   type MPL_PL_MEM_MON_t is record
      PL_MEM : MPL_PL_MEM_PL_MEM_MON_t_ARRAY;
   end record MPL_PL_MEM_MON_t;
   attribute w of MPL_PL_MEM_MON_t : type is 750;
   function width(x: MPL_PL_MEM_MON_t) return natural;
   function convert(x: MPL_PL_MEM_MON_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_MON_t) return MPL_PL_MEM_MON_t;
   function zero(tpl: MPL_PL_MEM_MON_t) return MPL_PL_MEM_MON_t;

   type MPL_PL_MEM_CTRL_t is record
      PL_MEM : MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY;
   end record MPL_PL_MEM_CTRL_t;
   attribute w of MPL_PL_MEM_CTRL_t : type is 905;
   function width(x: MPL_PL_MEM_CTRL_t) return natural;
   function convert(x: MPL_PL_MEM_CTRL_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_CTRL_t) return MPL_PL_MEM_CTRL_t;
   function zero(tpl: MPL_PL_MEM_CTRL_t) return MPL_PL_MEM_CTRL_t;

   type MPL_MON_t is record
      SUPER : MPL_SUPER_MON_t;
      PL_MEM : MPL_PL_MEM_MON_t;
   end record MPL_MON_t;
   attribute w of MPL_MON_t : type is 761;
   function width(x: MPL_MON_t) return natural;
   function convert(x: MPL_MON_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_MON_t) return MPL_MON_t;
   function zero(tpl: MPL_MON_t) return MPL_MON_t;

   type MPL_CTRL_t is record
      SUPER : MPL_SUPER_CTRL_t;
      PL_MEM : MPL_PL_MEM_CTRL_t;
   end record MPL_CTRL_t;
   attribute w of MPL_CTRL_t : type is 916;
   function width(x: MPL_CTRL_t) return natural;
   function convert(x: MPL_CTRL_t; tpl: std_logic_vector) return std_logic_vector;
   function convert(x: std_logic_vector; tpl: MPL_CTRL_t) return MPL_CTRL_t;
   function zero(tpl: MPL_CTRL_t) return MPL_CTRL_t;

end package MPL_CTRL;

------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library shared_lib;
use shared_lib.common_ieee_pkg.all;

package body MPL_CTRL is

   -- Custom types and functions --

   function width(x: MPL_SUPER_ACTIONS_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.RESET);
      w := w + width(x.ENABLE);
      w := w + width(x.DISABLE);
      w := w + width(x.FREEZE);
      return w;
   end function width;
   function convert(x: MPL_SUPER_ACTIONS_CTRL_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.RESET);
         y(u to u+w-1) := convert(x.RESET, y(u to u+w-1));
         u := u + w;
         w := width(x.ENABLE);
         y(u to u+w-1) := convert(x.ENABLE, y(u to u+w-1));
         u := u + w;
         w := width(x.DISABLE);
         y(u to u+w-1) := convert(x.DISABLE, y(u to u+w-1));
         u := u + w;
         w := width(x.FREEZE);
         y(u to u+w-1) := convert(x.FREEZE, y(u to u+w-1));
      else
         w := width(x.RESET);
         y(u downto u-w+1) := convert(x.RESET, y(u downto u-w+1));
         u := u - w;
         w := width(x.ENABLE);
         y(u downto u-w+1) := convert(x.ENABLE, y(u downto u-w+1));
         u := u - w;
         w := width(x.DISABLE);
         y(u downto u-w+1) := convert(x.DISABLE, y(u downto u-w+1));
         u := u - w;
         w := width(x.FREEZE);
         y(u downto u-w+1) := convert(x.FREEZE, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_SUPER_ACTIONS_CTRL_t) return MPL_SUPER_ACTIONS_CTRL_t is
      variable y : MPL_SUPER_ACTIONS_CTRL_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.RESET);
         y.RESET := convert(x(u to u+w-1), tpl.RESET);
         u := u + w;
         w := width(tpl.ENABLE);
         y.ENABLE := convert(x(u to u+w-1), tpl.ENABLE);
         u := u + w;
         w := width(tpl.DISABLE);
         y.DISABLE := convert(x(u to u+w-1), tpl.DISABLE);
         u := u + w;
         w := width(tpl.FREEZE);
         y.FREEZE := convert(x(u to u+w-1), tpl.FREEZE);
      else
         w := width(tpl.RESET);
         y.RESET := convert(x(u downto u-w+1), tpl.RESET);
         u := u - w;
         w := width(tpl.ENABLE);
         y.ENABLE := convert(x(u downto u-w+1), tpl.ENABLE);
         u := u - w;
         w := width(tpl.DISABLE);
         y.DISABLE := convert(x(u downto u-w+1), tpl.DISABLE);
         u := u - w;
         w := width(tpl.FREEZE);
         y.FREEZE := convert(x(u downto u-w+1), tpl.FREEZE);
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_SUPER_ACTIONS_CTRL_t) return MPL_SUPER_ACTIONS_CTRL_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: MPL_SUPER_CONFIGS_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.THREADS);
      w := w + width(x.INPUT_EN);
      w := w + width(x.OUTPUT_EN);
      w := w + width(x.FLUSH_MEM_RESET);
      return w;
   end function width;
   function convert(x: MPL_SUPER_CONFIGS_CTRL_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.THREADS);
         y(u to u+w-1) := convert(x.THREADS, y(u to u+w-1));
         u := u + w;
         w := width(x.INPUT_EN);
         y(u to u+w-1) := convert(x.INPUT_EN, y(u to u+w-1));
         u := u + w;
         w := width(x.OUTPUT_EN);
         y(u to u+w-1) := convert(x.OUTPUT_EN, y(u to u+w-1));
         u := u + w;
         w := width(x.FLUSH_MEM_RESET);
         y(u to u+w-1) := convert(x.FLUSH_MEM_RESET, y(u to u+w-1));
      else
         w := width(x.THREADS);
         y(u downto u-w+1) := convert(x.THREADS, y(u downto u-w+1));
         u := u - w;
         w := width(x.INPUT_EN);
         y(u downto u-w+1) := convert(x.INPUT_EN, y(u downto u-w+1));
         u := u - w;
         w := width(x.OUTPUT_EN);
         y(u downto u-w+1) := convert(x.OUTPUT_EN, y(u downto u-w+1));
         u := u - w;
         w := width(x.FLUSH_MEM_RESET);
         y(u downto u-w+1) := convert(x.FLUSH_MEM_RESET, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_SUPER_CONFIGS_CTRL_t) return MPL_SUPER_CONFIGS_CTRL_t is
      variable y : MPL_SUPER_CONFIGS_CTRL_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.THREADS);
         y.THREADS := convert(x(u to u+w-1), tpl.THREADS);
         u := u + w;
         w := width(tpl.INPUT_EN);
         y.INPUT_EN := convert(x(u to u+w-1), tpl.INPUT_EN);
         u := u + w;
         w := width(tpl.OUTPUT_EN);
         y.OUTPUT_EN := convert(x(u to u+w-1), tpl.OUTPUT_EN);
         u := u + w;
         w := width(tpl.FLUSH_MEM_RESET);
         y.FLUSH_MEM_RESET := convert(x(u to u+w-1), tpl.FLUSH_MEM_RESET);
      else
         w := width(tpl.THREADS);
         y.THREADS := convert(x(u downto u-w+1), tpl.THREADS);
         u := u - w;
         w := width(tpl.INPUT_EN);
         y.INPUT_EN := convert(x(u downto u-w+1), tpl.INPUT_EN);
         u := u - w;
         w := width(tpl.OUTPUT_EN);
         y.OUTPUT_EN := convert(x(u downto u-w+1), tpl.OUTPUT_EN);
         u := u - w;
         w := width(tpl.FLUSH_MEM_RESET);
         y.FLUSH_MEM_RESET := convert(x(u downto u-w+1), tpl.FLUSH_MEM_RESET);
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_SUPER_CONFIGS_CTRL_t) return MPL_SUPER_CONFIGS_CTRL_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: MPL_SUPER_STATUS_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.ENABLED);
      w := w + width(x.READY);
      w := w + width(x.FREEZED);
      w := w + width(x.ERROR);
      return w;
   end function width;
   function convert(x: MPL_SUPER_STATUS_MON_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.ENABLED);
         y(u to u+w-1) := convert(x.ENABLED, y(u to u+w-1));
         u := u + w;
         w := width(x.READY);
         y(u to u+w-1) := convert(x.READY, y(u to u+w-1));
         u := u + w;
         w := width(x.FREEZED);
         y(u to u+w-1) := convert(x.FREEZED, y(u to u+w-1));
         u := u + w;
         w := width(x.ERROR);
         y(u to u+w-1) := convert(x.ERROR, y(u to u+w-1));
      else
         w := width(x.ENABLED);
         y(u downto u-w+1) := convert(x.ENABLED, y(u downto u-w+1));
         u := u - w;
         w := width(x.READY);
         y(u downto u-w+1) := convert(x.READY, y(u downto u-w+1));
         u := u - w;
         w := width(x.FREEZED);
         y(u downto u-w+1) := convert(x.FREEZED, y(u downto u-w+1));
         u := u - w;
         w := width(x.ERROR);
         y(u downto u-w+1) := convert(x.ERROR, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_SUPER_STATUS_MON_t) return MPL_SUPER_STATUS_MON_t is
      variable y : MPL_SUPER_STATUS_MON_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.ENABLED);
         y.ENABLED := convert(x(u to u+w-1), tpl.ENABLED);
         u := u + w;
         w := width(tpl.READY);
         y.READY := convert(x(u to u+w-1), tpl.READY);
         u := u + w;
         w := width(tpl.FREEZED);
         y.FREEZED := convert(x(u to u+w-1), tpl.FREEZED);
         u := u + w;
         w := width(tpl.ERROR);
         y.ERROR := convert(x(u to u+w-1), tpl.ERROR);
      else
         w := width(tpl.ENABLED);
         y.ENABLED := convert(x(u downto u-w+1), tpl.ENABLED);
         u := u - w;
         w := width(tpl.READY);
         y.READY := convert(x(u downto u-w+1), tpl.READY);
         u := u - w;
         w := width(tpl.FREEZED);
         y.FREEZED := convert(x(u downto u-w+1), tpl.FREEZED);
         u := u - w;
         w := width(tpl.ERROR);
         y.ERROR := convert(x(u downto u-w+1), tpl.ERROR);
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_SUPER_STATUS_MON_t) return MPL_SUPER_STATUS_MON_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: MPL_SUPER_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.STATUS);
      return w;
   end function width;
   function convert(x: MPL_SUPER_MON_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.STATUS);
         y(u to u+w-1) := convert(x.STATUS, y(u to u+w-1));
      else
         w := width(x.STATUS);
         y(u downto u-w+1) := convert(x.STATUS, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_SUPER_MON_t) return MPL_SUPER_MON_t is
      variable y : MPL_SUPER_MON_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.STATUS);
         y.STATUS := convert(x(u to u+w-1), tpl.STATUS);
      else
         w := width(tpl.STATUS);
         y.STATUS := convert(x(u downto u-w+1), tpl.STATUS);
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_SUPER_MON_t) return MPL_SUPER_MON_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: MPL_SUPER_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.ACTIONS);
      w := w + width(x.CONFIGS);
      return w;
   end function width;
   function convert(x: MPL_SUPER_CTRL_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.ACTIONS);
         y(u to u+w-1) := convert(x.ACTIONS, y(u to u+w-1));
         u := u + w;
         w := width(x.CONFIGS);
         y(u to u+w-1) := convert(x.CONFIGS, y(u to u+w-1));
      else
         w := width(x.ACTIONS);
         y(u downto u-w+1) := convert(x.ACTIONS, y(u downto u-w+1));
         u := u - w;
         w := width(x.CONFIGS);
         y(u downto u-w+1) := convert(x.CONFIGS, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_SUPER_CTRL_t) return MPL_SUPER_CTRL_t is
      variable y : MPL_SUPER_CTRL_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.ACTIONS);
         y.ACTIONS := convert(x(u to u+w-1), tpl.ACTIONS);
         u := u + w;
         w := width(tpl.CONFIGS);
         y.CONFIGS := convert(x(u to u+w-1), tpl.CONFIGS);
      else
         w := width(tpl.ACTIONS);
         y.ACTIONS := convert(x(u downto u-w+1), tpl.ACTIONS);
         u := u - w;
         w := width(tpl.CONFIGS);
         y.CONFIGS := convert(x(u downto u-w+1), tpl.CONFIGS);
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_SUPER_CTRL_t) return MPL_SUPER_CTRL_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: MPL_PL_MEM_PL_MEM_SIGNALS_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.rd_rdy);
      w := w + width(x.freeze_ena);
      return w;
   end function width;
   function convert(x: MPL_PL_MEM_PL_MEM_SIGNALS_MON_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.rd_rdy);
         y(u to u+w-1) := convert(x.rd_rdy, y(u to u+w-1));
         u := u + w;
         w := width(x.freeze_ena);
         y(u to u+w-1) := convert(x.freeze_ena, y(u to u+w-1));
      else
         w := width(x.rd_rdy);
         y(u downto u-w+1) := convert(x.rd_rdy, y(u downto u-w+1));
         u := u - w;
         w := width(x.freeze_ena);
         y(u downto u-w+1) := convert(x.freeze_ena, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_PL_MEM_SIGNALS_MON_t) return MPL_PL_MEM_PL_MEM_SIGNALS_MON_t is
      variable y : MPL_PL_MEM_PL_MEM_SIGNALS_MON_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.rd_rdy);
         y.rd_rdy := convert(x(u to u+w-1), tpl.rd_rdy);
         u := u + w;
         w := width(tpl.freeze_ena);
         y.freeze_ena := convert(x(u to u+w-1), tpl.freeze_ena);
      else
         w := width(tpl.rd_rdy);
         y.rd_rdy := convert(x(u downto u-w+1), tpl.rd_rdy);
         u := u - w;
         w := width(tpl.freeze_ena);
         y.freeze_ena := convert(x(u downto u-w+1), tpl.freeze_ena);
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_PL_MEM_PL_MEM_SIGNALS_MON_t) return MPL_PL_MEM_PL_MEM_SIGNALS_MON_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.wr_req);
      w := w + width(x.wr_ack);
      w := w + width(x.rd_req);
      w := w + width(x.rd_ack);
      w := w + width(x.flush_req);
      w := w + width(x.freeze_req);
      w := w + width(x.mem_sel);
      return w;
   end function width;
   function convert(x: MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.wr_req);
         y(u to u+w-1) := convert(x.wr_req, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_ack);
         y(u to u+w-1) := convert(x.wr_ack, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_req);
         y(u to u+w-1) := convert(x.rd_req, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_ack);
         y(u to u+w-1) := convert(x.rd_ack, y(u to u+w-1));
         u := u + w;
         w := width(x.flush_req);
         y(u to u+w-1) := convert(x.flush_req, y(u to u+w-1));
         u := u + w;
         w := width(x.freeze_req);
         y(u to u+w-1) := convert(x.freeze_req, y(u to u+w-1));
         u := u + w;
         w := width(x.mem_sel);
         y(u to u+w-1) := convert(x.mem_sel, y(u to u+w-1));
      else
         w := width(x.wr_req);
         y(u downto u-w+1) := convert(x.wr_req, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_ack);
         y(u downto u-w+1) := convert(x.wr_ack, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_req);
         y(u downto u-w+1) := convert(x.rd_req, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_ack);
         y(u downto u-w+1) := convert(x.rd_ack, y(u downto u-w+1));
         u := u - w;
         w := width(x.flush_req);
         y(u downto u-w+1) := convert(x.flush_req, y(u downto u-w+1));
         u := u - w;
         w := width(x.freeze_req);
         y(u downto u-w+1) := convert(x.freeze_req, y(u downto u-w+1));
         u := u - w;
         w := width(x.mem_sel);
         y(u downto u-w+1) := convert(x.mem_sel, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t) return MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t is
      variable y : MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.wr_req);
         y.wr_req := convert(x(u to u+w-1), tpl.wr_req);
         u := u + w;
         w := width(tpl.wr_ack);
         y.wr_ack := convert(x(u to u+w-1), tpl.wr_ack);
         u := u + w;
         w := width(tpl.rd_req);
         y.rd_req := convert(x(u to u+w-1), tpl.rd_req);
         u := u + w;
         w := width(tpl.rd_ack);
         y.rd_ack := convert(x(u to u+w-1), tpl.rd_ack);
         u := u + w;
         w := width(tpl.flush_req);
         y.flush_req := convert(x(u to u+w-1), tpl.flush_req);
         u := u + w;
         w := width(tpl.freeze_req);
         y.freeze_req := convert(x(u to u+w-1), tpl.freeze_req);
         u := u + w;
         w := width(tpl.mem_sel);
         y.mem_sel := convert(x(u to u+w-1), tpl.mem_sel);
      else
         w := width(tpl.wr_req);
         y.wr_req := convert(x(u downto u-w+1), tpl.wr_req);
         u := u - w;
         w := width(tpl.wr_ack);
         y.wr_ack := convert(x(u downto u-w+1), tpl.wr_ack);
         u := u - w;
         w := width(tpl.rd_req);
         y.rd_req := convert(x(u downto u-w+1), tpl.rd_req);
         u := u - w;
         w := width(tpl.rd_ack);
         y.rd_ack := convert(x(u downto u-w+1), tpl.rd_ack);
         u := u - w;
         w := width(tpl.flush_req);
         y.flush_req := convert(x(u downto u-w+1), tpl.flush_req);
         u := u - w;
         w := width(tpl.freeze_req);
         y.freeze_req := convert(x(u downto u-w+1), tpl.freeze_req);
         u := u - w;
         w := width(tpl.mem_sel);
         y.mem_sel := convert(x(u downto u-w+1), tpl.mem_sel);
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t) return MPL_PL_MEM_PL_MEM_SIGNALS_CTRL_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: MPL_PL_MEM_PL_MEM_wr_data_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.wr_data_0);
      w := w + width(x.wr_data_1);
      w := w + width(x.wr_data_2);
      w := w + width(x.wr_data_3);
      w := w + width(x.wr_data_4);
      return w;
   end function width;
   function convert(x: MPL_PL_MEM_PL_MEM_wr_data_CTRL_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.wr_data_0);
         y(u to u+w-1) := convert(x.wr_data_0, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_data_1);
         y(u to u+w-1) := convert(x.wr_data_1, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_data_2);
         y(u to u+w-1) := convert(x.wr_data_2, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_data_3);
         y(u to u+w-1) := convert(x.wr_data_3, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_data_4);
         y(u to u+w-1) := convert(x.wr_data_4, y(u to u+w-1));
      else
         w := width(x.wr_data_0);
         y(u downto u-w+1) := convert(x.wr_data_0, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_data_1);
         y(u downto u-w+1) := convert(x.wr_data_1, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_data_2);
         y(u downto u-w+1) := convert(x.wr_data_2, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_data_3);
         y(u downto u-w+1) := convert(x.wr_data_3, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_data_4);
         y(u downto u-w+1) := convert(x.wr_data_4, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_PL_MEM_wr_data_CTRL_t) return MPL_PL_MEM_PL_MEM_wr_data_CTRL_t is
      variable y : MPL_PL_MEM_PL_MEM_wr_data_CTRL_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.wr_data_0);
         y.wr_data_0 := convert(x(u to u+w-1), tpl.wr_data_0);
         u := u + w;
         w := width(tpl.wr_data_1);
         y.wr_data_1 := convert(x(u to u+w-1), tpl.wr_data_1);
         u := u + w;
         w := width(tpl.wr_data_2);
         y.wr_data_2 := convert(x(u to u+w-1), tpl.wr_data_2);
         u := u + w;
         w := width(tpl.wr_data_3);
         y.wr_data_3 := convert(x(u to u+w-1), tpl.wr_data_3);
         u := u + w;
         w := width(tpl.wr_data_4);
         y.wr_data_4 := convert(x(u to u+w-1), tpl.wr_data_4);
      else
         w := width(tpl.wr_data_0);
         y.wr_data_0 := convert(x(u downto u-w+1), tpl.wr_data_0);
         u := u - w;
         w := width(tpl.wr_data_1);
         y.wr_data_1 := convert(x(u downto u-w+1), tpl.wr_data_1);
         u := u - w;
         w := width(tpl.wr_data_2);
         y.wr_data_2 := convert(x(u downto u-w+1), tpl.wr_data_2);
         u := u - w;
         w := width(tpl.wr_data_3);
         y.wr_data_3 := convert(x(u downto u-w+1), tpl.wr_data_3);
         u := u - w;
         w := width(tpl.wr_data_4);
         y.wr_data_4 := convert(x(u downto u-w+1), tpl.wr_data_4);
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_PL_MEM_PL_MEM_wr_data_CTRL_t) return MPL_PL_MEM_PL_MEM_wr_data_CTRL_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: MPL_PL_MEM_PL_MEM_rd_data_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.rd_data_0);
      w := w + width(x.rd_data_1);
      w := w + width(x.rd_data_2);
      w := w + width(x.rd_data_3);
      w := w + width(x.rd_data_4);
      return w;
   end function width;
   function convert(x: MPL_PL_MEM_PL_MEM_rd_data_MON_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.rd_data_0);
         y(u to u+w-1) := convert(x.rd_data_0, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_data_1);
         y(u to u+w-1) := convert(x.rd_data_1, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_data_2);
         y(u to u+w-1) := convert(x.rd_data_2, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_data_3);
         y(u to u+w-1) := convert(x.rd_data_3, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_data_4);
         y(u to u+w-1) := convert(x.rd_data_4, y(u to u+w-1));
      else
         w := width(x.rd_data_0);
         y(u downto u-w+1) := convert(x.rd_data_0, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_data_1);
         y(u downto u-w+1) := convert(x.rd_data_1, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_data_2);
         y(u downto u-w+1) := convert(x.rd_data_2, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_data_3);
         y(u downto u-w+1) := convert(x.rd_data_3, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_data_4);
         y(u downto u-w+1) := convert(x.rd_data_4, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_PL_MEM_rd_data_MON_t) return MPL_PL_MEM_PL_MEM_rd_data_MON_t is
      variable y : MPL_PL_MEM_PL_MEM_rd_data_MON_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.rd_data_0);
         y.rd_data_0 := convert(x(u to u+w-1), tpl.rd_data_0);
         u := u + w;
         w := width(tpl.rd_data_1);
         y.rd_data_1 := convert(x(u to u+w-1), tpl.rd_data_1);
         u := u + w;
         w := width(tpl.rd_data_2);
         y.rd_data_2 := convert(x(u to u+w-1), tpl.rd_data_2);
         u := u + w;
         w := width(tpl.rd_data_3);
         y.rd_data_3 := convert(x(u to u+w-1), tpl.rd_data_3);
         u := u + w;
         w := width(tpl.rd_data_4);
         y.rd_data_4 := convert(x(u to u+w-1), tpl.rd_data_4);
      else
         w := width(tpl.rd_data_0);
         y.rd_data_0 := convert(x(u downto u-w+1), tpl.rd_data_0);
         u := u - w;
         w := width(tpl.rd_data_1);
         y.rd_data_1 := convert(x(u downto u-w+1), tpl.rd_data_1);
         u := u - w;
         w := width(tpl.rd_data_2);
         y.rd_data_2 := convert(x(u downto u-w+1), tpl.rd_data_2);
         u := u - w;
         w := width(tpl.rd_data_3);
         y.rd_data_3 := convert(x(u downto u-w+1), tpl.rd_data_3);
         u := u - w;
         w := width(tpl.rd_data_4);
         y.rd_data_4 := convert(x(u downto u-w+1), tpl.rd_data_4);
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_PL_MEM_PL_MEM_rd_data_MON_t) return MPL_PL_MEM_PL_MEM_rd_data_MON_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: MPL_PL_MEM_PL_MEM_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.SIGNALS);
      w := w + width(x.rd_data);
      return w;
   end function width;
   function convert(x: MPL_PL_MEM_PL_MEM_MON_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.SIGNALS);
         y(u to u+w-1) := convert(x.SIGNALS, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_data);
         y(u to u+w-1) := convert(x.rd_data, y(u to u+w-1));
      else
         w := width(x.SIGNALS);
         y(u downto u-w+1) := convert(x.SIGNALS, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_data);
         y(u downto u-w+1) := convert(x.rd_data, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_PL_MEM_MON_t) return MPL_PL_MEM_PL_MEM_MON_t is
      variable y : MPL_PL_MEM_PL_MEM_MON_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.SIGNALS);
         y.SIGNALS := convert(x(u to u+w-1), tpl.SIGNALS);
         u := u + w;
         w := width(tpl.rd_data);
         y.rd_data := convert(x(u to u+w-1), tpl.rd_data);
      else
         w := width(tpl.SIGNALS);
         y.SIGNALS := convert(x(u downto u-w+1), tpl.SIGNALS);
         u := u - w;
         w := width(tpl.rd_data);
         y.rd_data := convert(x(u downto u-w+1), tpl.rd_data);
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_PL_MEM_PL_MEM_MON_t) return MPL_PL_MEM_PL_MEM_MON_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: MPL_PL_MEM_PL_MEM_MON_t_ARRAY) return integer is
      variable w : integer;
   begin
      if x'length < 1 then
        w := 0;
      else
        w := x'length * width(x(x'low));
      end if;
      return w;
   end function width;
   function convert(x: MPL_PL_MEM_PL_MEM_MON_t_ARRAY; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_PL_MEM_MON_t_ARRAY) return MPL_PL_MEM_PL_MEM_MON_t_ARRAY is
      variable y : MPL_PL_MEM_PL_MEM_MON_t_ARRAY;
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_PL_MEM_PL_MEM_MON_t_ARRAY) return MPL_PL_MEM_PL_MEM_MON_t_ARRAY is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;
   function convert(x: MPL_PL_MEM_PL_MEM_MON_t_ARRAY; tpl: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(tpl'range)(tpl(tpl'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; tpl: MPL_PL_MEM_PL_MEM_MON_t_ARRAY) return MPL_PL_MEM_PL_MEM_MON_t_ARRAY is
      variable y : MPL_PL_MEM_PL_MEM_MON_t_ARRAY;
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: MPL_PL_MEM_PL_MEM_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.SIGNALS);
      w := w + width(x.wr_addr);
      w := w + width(x.rd_addr);
      w := w + width(x.wr_data);
      return w;
   end function width;
   function convert(x: MPL_PL_MEM_PL_MEM_CTRL_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.SIGNALS);
         y(u to u+w-1) := convert(x.SIGNALS, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_addr);
         y(u to u+w-1) := convert(x.wr_addr, y(u to u+w-1));
         u := u + w;
         w := width(x.rd_addr);
         y(u to u+w-1) := convert(x.rd_addr, y(u to u+w-1));
         u := u + w;
         w := width(x.wr_data);
         y(u to u+w-1) := convert(x.wr_data, y(u to u+w-1));
      else
         w := width(x.SIGNALS);
         y(u downto u-w+1) := convert(x.SIGNALS, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_addr);
         y(u downto u-w+1) := convert(x.wr_addr, y(u downto u-w+1));
         u := u - w;
         w := width(x.rd_addr);
         y(u downto u-w+1) := convert(x.rd_addr, y(u downto u-w+1));
         u := u - w;
         w := width(x.wr_data);
         y(u downto u-w+1) := convert(x.wr_data, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_PL_MEM_CTRL_t) return MPL_PL_MEM_PL_MEM_CTRL_t is
      variable y : MPL_PL_MEM_PL_MEM_CTRL_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.SIGNALS);
         y.SIGNALS := convert(x(u to u+w-1), tpl.SIGNALS);
         u := u + w;
         w := width(tpl.wr_addr);
         y.wr_addr := convert(x(u to u+w-1), tpl.wr_addr);
         u := u + w;
         w := width(tpl.rd_addr);
         y.rd_addr := convert(x(u to u+w-1), tpl.rd_addr);
         u := u + w;
         w := width(tpl.wr_data);
         y.wr_data := convert(x(u to u+w-1), tpl.wr_data);
      else
         w := width(tpl.SIGNALS);
         y.SIGNALS := convert(x(u downto u-w+1), tpl.SIGNALS);
         u := u - w;
         w := width(tpl.wr_addr);
         y.wr_addr := convert(x(u downto u-w+1), tpl.wr_addr);
         u := u - w;
         w := width(tpl.rd_addr);
         y.rd_addr := convert(x(u downto u-w+1), tpl.rd_addr);
         u := u - w;
         w := width(tpl.wr_data);
         y.wr_data := convert(x(u downto u-w+1), tpl.wr_data);
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_PL_MEM_PL_MEM_CTRL_t) return MPL_PL_MEM_PL_MEM_CTRL_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY) return integer is
      variable w : integer;
   begin
      if x'length < 1 then
        w := 0;
      else
        w := x'length * width(x(x'low));
      end if;
      return w;
   end function width;
   function convert(x: MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      constant W : natural := width(x(x'low));
      variable a : integer;
      variable b : integer;
   begin
      if y'ascending then
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(b to a), convert(x(i+x'low), y(b to a)));
         end loop;
      else
         for i in 0 to x'length-1 loop
            a := W*i + y'low + W - 1;
            b := W*i + y'low;
            assign(y(a downto b), convert(x(i+x'low), y(a downto b)));
         end loop;
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY) return MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY is
      variable y : MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY;
      constant W : natural := width(y(y'low));
      variable a : integer;
      variable b : integer;
   begin
      if x'ascending then
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(b to a), y(i+y'low));
         end loop;
      else
         for i in 0 to y'length-1 loop
            a := W*i + x'low + W - 1;
            b := W*i + x'low;
            y(i+y'low) := convert(x(a downto b), y(i+y'low));
         end loop;
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY) return MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;
   function convert(x: MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY; tpl: std_logic_vector_array) return std_logic_vector_array is
      variable y : std_logic_vector_array(tpl'range)(tpl(tpl'low)'range);
   begin
      for j in y'range loop
          y(j) := convert(x(j), (y(j)'range => '0'));
      end loop;
      return y;
   end function convert;
   function convert(x: std_logic_vector_array; tpl: MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY) return MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY is
      variable y : MPL_PL_MEM_PL_MEM_CTRL_t_ARRAY;
   begin
      for j in y'range loop
          y(j) := convert(x(j), y(j));
      end loop;
      return y;
   end function convert;

   function width(x: MPL_PL_MEM_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.PL_MEM);
      return w;
   end function width;
   function convert(x: MPL_PL_MEM_MON_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.PL_MEM);
         y(u to u+w-1) := convert(x.PL_MEM, y(u to u+w-1));
      else
         w := width(x.PL_MEM);
         y(u downto u-w+1) := convert(x.PL_MEM, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_MON_t) return MPL_PL_MEM_MON_t is
      variable y : MPL_PL_MEM_MON_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.PL_MEM);
         y.PL_MEM := convert(x(u to u+w-1), tpl.PL_MEM);
      else
         w := width(tpl.PL_MEM);
         y.PL_MEM := convert(x(u downto u-w+1), tpl.PL_MEM);
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_PL_MEM_MON_t) return MPL_PL_MEM_MON_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: MPL_PL_MEM_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.PL_MEM);
      return w;
   end function width;
   function convert(x: MPL_PL_MEM_CTRL_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.PL_MEM);
         y(u to u+w-1) := convert(x.PL_MEM, y(u to u+w-1));
      else
         w := width(x.PL_MEM);
         y(u downto u-w+1) := convert(x.PL_MEM, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_PL_MEM_CTRL_t) return MPL_PL_MEM_CTRL_t is
      variable y : MPL_PL_MEM_CTRL_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.PL_MEM);
         y.PL_MEM := convert(x(u to u+w-1), tpl.PL_MEM);
      else
         w := width(tpl.PL_MEM);
         y.PL_MEM := convert(x(u downto u-w+1), tpl.PL_MEM);
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_PL_MEM_CTRL_t) return MPL_PL_MEM_CTRL_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: MPL_MON_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.SUPER);
      w := w + width(x.PL_MEM);
      return w;
   end function width;
   function convert(x: MPL_MON_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.SUPER);
         y(u to u+w-1) := convert(x.SUPER, y(u to u+w-1));
         u := u + w;
         w := width(x.PL_MEM);
         y(u to u+w-1) := convert(x.PL_MEM, y(u to u+w-1));
      else
         w := width(x.SUPER);
         y(u downto u-w+1) := convert(x.SUPER, y(u downto u-w+1));
         u := u - w;
         w := width(x.PL_MEM);
         y(u downto u-w+1) := convert(x.PL_MEM, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_MON_t) return MPL_MON_t is
      variable y : MPL_MON_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.SUPER);
         y.SUPER := convert(x(u to u+w-1), tpl.SUPER);
         u := u + w;
         w := width(tpl.PL_MEM);
         y.PL_MEM := convert(x(u to u+w-1), tpl.PL_MEM);
      else
         w := width(tpl.SUPER);
         y.SUPER := convert(x(u downto u-w+1), tpl.SUPER);
         u := u - w;
         w := width(tpl.PL_MEM);
         y.PL_MEM := convert(x(u downto u-w+1), tpl.PL_MEM);
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_MON_t) return MPL_MON_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

   function width(x: MPL_CTRL_t) return natural is
      variable w : natural := 0;
   begin
      w := w + width(x.SUPER);
      w := w + width(x.PL_MEM);
      return w;
   end function width;
   function convert(x: MPL_CTRL_t; tpl: std_logic_vector) return std_logic_vector is
      variable y : std_logic_vector(tpl'range);
      variable w : integer;
      variable u : integer := tpl'left;
   begin
      if tpl'ascending then
         w := width(x.SUPER);
         y(u to u+w-1) := convert(x.SUPER, y(u to u+w-1));
         u := u + w;
         w := width(x.PL_MEM);
         y(u to u+w-1) := convert(x.PL_MEM, y(u to u+w-1));
      else
         w := width(x.SUPER);
         y(u downto u-w+1) := convert(x.SUPER, y(u downto u-w+1));
         u := u - w;
         w := width(x.PL_MEM);
         y(u downto u-w+1) := convert(x.PL_MEM, y(u downto u-w+1));
      end if;
      return y;
   end function convert;
   function convert(x: std_logic_vector; tpl: MPL_CTRL_t) return MPL_CTRL_t is
      variable y : MPL_CTRL_t;
      variable w : integer;
      variable u : integer := x'left;
   begin
      if x'ascending then
         w := width(tpl.SUPER);
         y.SUPER := convert(x(u to u+w-1), tpl.SUPER);
         u := u + w;
         w := width(tpl.PL_MEM);
         y.PL_MEM := convert(x(u to u+w-1), tpl.PL_MEM);
      else
         w := width(tpl.SUPER);
         y.SUPER := convert(x(u downto u-w+1), tpl.SUPER);
         u := u - w;
         w := width(tpl.PL_MEM);
         y.PL_MEM := convert(x(u downto u-w+1), tpl.PL_MEM);
      end if;
      return y;
   end function convert;
   function zero(tpl: MPL_CTRL_t) return MPL_CTRL_t is
   begin
      return convert(std_logic_vector'(width(tpl)-1 downto 0 => '0'), tpl);
   end function zero;

end package body MPL_CTRL;
